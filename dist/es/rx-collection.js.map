{"version":3,"sources":["../../src/rx-collection.ts"],"names":["filter","startWith","mergeMap","shareReplay","ucfirst","flatClone","promiseSeries","pluginMissing","ensureNotFalsy","getFromMapOrThrow","clone","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","RXJS_SHARE_REPLAY_DEFAULTS","getDefaultRxDocumentMeta","fillObjectDataBeforeInsert","createRxCollectionStorageInstances","createRxQuery","_getDefaultQuery","newRxError","newRxTypeError","createCrypter","createDocCache","createQueryCache","defaultCacheReplacementPolicy","createChangeEventBuffer","runAsyncPluginHooks","runPluginHooks","createWithConstructor","createRxDocumentWithConstructor","isRxDocument","createRxDocument","getRxDocumentConstructor","getWrappedKeyObjectInstance","getWrappedStorageInstance","storageChangeEventToRxChangeEvent","throwIfIsStorageWriteError","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","internalStorageInstance","internalLocalDocumentsStore","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","statics","storageInstance","localDocumentsStore","timeouts","Set","destroyed","_atomicUpsertQueues","Map","synced","hooks","_subs","_docCache","_queryCache","_crypter","_observable$","_changeEventBuffer","_applyHookFunctions","asRxCollection","prepare","password","eventBulks$","pipe","changeEventBulk","collectionName","events","subDocs","changeStream","subscribe","eventBulk","id","internal","storageToken","map","ev","databaseToken","token","$emit","push","subLocalDocs","cE","isLocal","doc","get","documentId","_handleChangeEvent","migrationNeeded","getDataMigrator","migrate","batchSize","migratePromise","insert","json","tempDoc","_isTemporary","data","toJSON","useJson","bulkInsert","writeResult","isError","error","primaryPath","insertResult","success","_dataSync$","next","_data","docsData","length","useDocs","docData","useDocData","Promise","all","_runHooks","then","validate","docs","docsMap","insertRows","set","row","document","Object","assign","_attachments","_meta","_deleted","bulkWrite","results","successEntries","entries","rxDocuments","key","writtenDocData","_rev","primary","values","bulkRemove","ids","findByIds","rxDocumentMap","Array","from","forEach","rxDocument","removeDocs","writeDoc","previous","successIds","keys","upsert","jsonSchema","findOne","exec","existing","deleted","atomicUpdate","atomicUpsert","queue","_atomicUpsertEnsureRxDocumentExists","wasInserted","inserted","_atomicUpsertUpdate","find","queryObj","query","selector","limit","isArray","ret","mustBeQueried","findDocumentsById","findByIds$","currentValue","lastChangeEvent","initialPromise","counter","firstEmitDone","$","changeEvent","includes","resultMap","missedChangeEvents","getFrom","newResult","k","v","resultHasChanged","rxChangeEvent","docId","op","operation","documentData","has","x","exportJSON","_decrypted","importJSON","_exportedJSON","syncCouchDB","_syncOptions","syncGraphQL","_options","addHook","when","fun","parallel","boundFun","bind","runName","series","getHooks","e","instance","tasks","hook","_runHooksSync","newDocument","filledDocData","fillObjectWithDefaults","promiseWait","time","res","timeout","setTimeout","add","destroy","_onDestroyCall","clearTimeout","sub","unsubscribe","close","collections","remove","removeCollection","_onDestroy","collection","colProto","getPrototypeOf","fnName","innerDoc","rxCollection","docFromCache","resolve","newDoc","createRxCollection","autoMigrate","storageInstanceCreationParams","databaseName","normalized","multiInstance","storageInstances","funName","defineProperty","version","err","reject","isRxCollection","obj"],"mappings":"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","sourcesContent":["import {\n    filter,\n    startWith,\n    mergeMap,\n    shareReplay\n} from 'rxjs/operators';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    clone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    getDefaultRxDocumentMeta\n} from './util';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstances\n} from './rx-collection-helper';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport type {\n    DataMigrator\n} from './plugins/migration';\nimport {\n    Crypter,\n    createCrypter\n} from './crypter';\nimport {\n    DocCache,\n    createDocCache\n} from './doc-cache';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCouchDBReplicationState,\n    MigrationState,\n    SyncOptions,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    SyncOptionsGraphQL,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageBulkWriteError,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageInstanceCreationParams,\n    RxStorageKeyObjectInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData\n} from './types';\nimport type {\n    RxGraphQLReplicationState\n} from './plugins/replication-graphql';\n\nimport {\n    RxSchema\n} from './rx-schema';\nimport {\n    createWithConstructor as createRxDocumentWithConstructor,\n    isRxDocument\n} from './rx-document';\n\nimport {\n    createRxDocument,\n    getRxDocumentConstructor\n} from './rx-document-prototype-merge';\nimport {\n    getWrappedKeyObjectInstance,\n    getWrappedStorageInstance,\n    storageChangeEventToRxChangeEvent,\n    throwIfIsStorageWriteError\n} from './rx-storage-helper';\n\nconst HOOKS_WHEN = ['pre', 'post'];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any }\n    > {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    /**\n     * Stores the local documents so that they are not deleted\n     * when a migration runs.\n     */\n    public localDocumentsStore: RxStorageKeyObjectInstance<any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public internalLocalDocumentsStore: RxStorageKeyObjectInstance<any, InstanceCreationOptions>,\n\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: KeyFunctionMap = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {}\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    /**\n     * returns observable\n     */\n    get $(): Observable<RxChangeEvent<any>> {\n        return this._observable$ as any;\n    }\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    get onDestroy() {\n        if (!this._onDestroy) {\n            this._onDestroy = new Promise(res => this._onDestroyCall = res);\n        }\n        return this._onDestroy;\n    }\n\n    public destroyed = false;\n    public _atomicUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: any = {};\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocCache<\n        RxDocument<RxDocumentType, OrmMethods>\n    > = createDocCache();\n\n    public _queryCache: QueryCache = createQueryCache();\n    public _crypter: Crypter = {} as Crypter;\n    public _observable$: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer = {} as ChangeEventBuffer;\n\n    /**\n     * returns a promise that is resolved when the collection gets destroyed\n     */\n    private _onDestroy?: Promise<void>;\n\n    private _onDestroyCall?: () => void;\n    public async prepare(): Promise<void> {\n        this.storageInstance = getWrappedStorageInstance(this as any, this.internalStorageInstance);\n        this.localDocumentsStore = getWrappedKeyObjectInstance(this as any, this.internalLocalDocumentsStore);\n\n        // we trigger the non-blocking things first and await them later so we can do stuff in the mean time\n        this._crypter = createCrypter(this.database.password, this.schema);\n\n        this._observable$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this._changeEventBuffer = createChangeEventBuffer(this.asRxCollection);\n\n\n        /**\n         * Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: ensureNotFalsy(this.database.storageToken),\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    false,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token\n            };\n            this.database.$emit(changeEventBulk);\n        });\n\n        this._subs.push(subDocs);\n        const subLocalDocs = this.localDocumentsStore.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: ensureNotFalsy(this.database.storageToken),\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    true,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subLocalDocs);\n\n\n        /**\n         * When a write happens to the collection\n         * we find the changed document in the docCache\n         * and tell it that it has to change its data.\n         */\n        this._subs.push(\n            this._observable$\n                .pipe(\n                    filter((cE: RxChangeEvent<RxDocumentType>) => !cE.isLocal)\n                )\n                .subscribe(cE => {\n                    // when data changes, send it to RxDocument in docCache\n                    const doc = this._docCache.get(cE.documentId);\n                    if (doc) {\n                        doc._handleChangeEvent(cE);\n                    }\n                })\n        );\n    }\n\n\n    // overwritte by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration');\n    }\n    getDataMigrator(): DataMigrator {\n        throw pluginMissing('migration');\n    }\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        return this.getDataMigrator().migrate(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getDataMigrator().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        // inserting a temporary-document\n        let tempDoc: RxDocument | null = null;\n        if (isRxDocument(json)) {\n            tempDoc = json as RxDocument;\n            if (!tempDoc._isTemporary) {\n                throw newRxError('COL1', {\n                    data: json\n                });\n            }\n            json = tempDoc.toJSON() as any;\n        }\n\n        const useJson: RxDocumentWriteData<RxDocumentType> = fillObjectDataBeforeInsert(this as any, json);\n        const writeResult = await this.bulkInsert([useJson]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, useJson[this.schema.primaryPath] as any, json, isError);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n\n        if (tempDoc) {\n            tempDoc._dataSync$.next(insertResult._data);\n            return tempDoc as any;\n        } else {\n            return insertResult;\n        }\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const useDocs: RxDocumentType[] = docsData.map(docData => {\n            const useDocData = fillObjectDataBeforeInsert(this as any, docData);\n            return useDocData;\n        });\n\n        const docs = await Promise.all(\n            useDocs.map(doc => {\n                return this._runHooks('pre', 'insert', doc).then(() => {\n                    this.schema.validate(doc);\n                    return doc;\n                });\n            })\n        );\n\n        const docsMap: Map<string, RxDocumentType> = new Map();\n        const insertRows: BulkWriteRow<RxDocumentType>[] = docs.map(doc => {\n            docsMap.set((doc as any)[this.schema.primaryPath] as any, doc);\n            const row: BulkWriteRow<RxDocumentType> = {\n                document: Object.assign(doc, {\n                    _attachments: {},\n                    _meta: getDefaultRxDocumentMeta(),\n                    _deleted: false\n                })\n            };\n            return row;\n        });\n\n        const results = await this.storageInstance.bulkWrite(insertRows);\n\n        // create documents\n        const successEntries: [string, RxDocumentData<RxDocumentType>][] = Object.entries(results.success);\n        const rxDocuments: any[] = successEntries\n            .map(([key, writtenDocData]) => {\n                const docData: RxDocumentData<RxDocumentType> = getFromMapOrThrow(docsMap, key) as any;\n                docData._rev = writtenDocData._rev;\n\n                const doc = createRxDocument(this as any, docData);\n                return doc;\n            });\n\n\n        await Promise.all(\n            rxDocuments.map(doc => {\n                return this._runHooks(\n                    'post', 'insert',\n                    docsMap.get(doc.primary),\n                    doc\n                );\n            })\n        );\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids);\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = clone(rxDocument.toJSON(true)) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n\n\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(removeDocs);\n\n        const successIds: string[] = Object.keys(results.success);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments: any[] = successIds.map(id => {\n            return rxDocumentMap.get(id);\n        });\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this as any, json);\n        const primary = useJson[this.schema.primaryPath];\n        if (!primary) {\n            throw newRxError('COL3', {\n                primaryPath: this.schema.primaryPath as string,\n                data: useJson,\n                schema: this.schema.jsonSchema\n            });\n        }\n\n        return this.findOne(primary).exec()\n            .then((existing: RxDocument<RxDocumentType, OrmMethods> | null) => {\n                if (existing && !existing.deleted) {\n                    useJson._rev = (existing as any)['_rev'];\n                    return existing.atomicUpdate(() => useJson as any)\n                        .then(() => existing);\n                } else {\n                    return this.insert(json as any);\n                }\n            });\n    }\n\n    /**\n     * upserts to a RxDocument, uses atomicUpdate if document already exists\n     */\n    atomicUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this as any, json);\n        const primary = useJson[this.schema.primaryPath];\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it wont try 2 parallel runs\n        let queue = this._atomicUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _atomicUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted: any) => {\n                if (!wasInserted.inserted) {\n                    return _atomicUpsertUpdate(wasInserted.doc, useJson)\n                        .then(() => wasInserted.doc);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._atomicUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[]\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(queryObj?: MangoQueryNoLimit<RxDocumentType> | string): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>\n        | null\n    > {\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries because it will be overwritte\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            (queryObj as any).limit = 1;\n            query = createRxQuery('findOne', queryObj, this as any);\n        }\n\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    async findByIds(\n        ids: string[]\n    ): Promise<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n\n        const ret = new Map();\n        const mustBeQueried: string[] = [];\n\n        // first try to fill from docCache\n        ids.forEach(id => {\n            const doc = this._docCache.get(id);\n            if (doc) {\n                ret.set(id, doc);\n            } else {\n                mustBeQueried.push(id);\n            }\n        });\n\n        // find everything which was not in docCache\n        if (mustBeQueried.length > 0) {\n            const docs = await this.storageInstance.findDocumentsById(mustBeQueried, false);\n            Object.values(docs).forEach(docData => {\n                const doc = createRxDocument<RxDocumentType, OrmMethods>(this as any, docData);\n                ret.set(doc.primary, doc);\n            });\n        }\n        return ret;\n    }\n\n    /**\n     * like this.findByIds but returns an observable\n     * that always emits the current state\n     */\n    findByIds$(\n        ids: string[]\n    ): Observable<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n        let currentValue: Map<string, RxDocument<RxDocumentType, OrmMethods>> | null = null;\n        let lastChangeEvent: number = -1;\n\n        /**\n         * Ensure we do not process events in parallel\n         */\n        let queue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n        const initialPromise = this.findByIds(ids).then(docsMap => {\n            lastChangeEvent = this._changeEventBuffer.counter;\n            currentValue = docsMap;\n        });\n        let firstEmitDone = false;\n\n        return this.$.pipe(\n            startWith(null),\n            /**\n             * Optimization shortcut.\n             * Do not proceed if the emited RxChangeEvent\n             * is not relevant for the query.\n             */\n            filter(changeEvent => {\n                if (\n                    // first emit has no event\n                    changeEvent &&\n                    (\n                        // local documents are not relevant for the query\n                        changeEvent.isLocal ||\n                        // document of the change is not in the ids list.\n                        !ids.includes(changeEvent.documentId)\n                    )\n                ) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }),\n            mergeMap(() => initialPromise),\n            /**\n             * Because shareReplay with refCount: true\n             * will often subscribe/unsusbscribe\n             * we always ensure that we handled all missed events\n             * since the last subscription.\n             */\n            mergeMap(() => {\n                queue = queue.then(async () => {\n                    const resultMap = ensureNotFalsy(currentValue);\n                    const missedChangeEvents = this._changeEventBuffer.getFrom(lastChangeEvent + 1);\n                    lastChangeEvent = this._changeEventBuffer.counter;\n                    if (missedChangeEvents === null) {\n                        /**\n                         * changeEventBuffer is of bounds -> we must re-execute over the database\n                         * because we cannot calculate the new results just from the events.\n                         */\n                        const newResult = await this.findByIds(ids);\n                        lastChangeEvent = this._changeEventBuffer.counter;\n                        Array.from(newResult.entries()).forEach(([k, v]) => resultMap.set(k, v));\n                    } else {\n                        let resultHasChanged = false;\n                        missedChangeEvents\n                            .forEach(rxChangeEvent => {\n                                const docId = rxChangeEvent.documentId;\n                                if (!ids.includes(docId)) {\n                                    // document is not relevant for the result set\n                                    return;\n                                }\n                                const op = rxChangeEvent.operation;\n                                if (op === 'INSERT' || op === 'UPDATE') {\n                                    resultHasChanged = true;\n                                    const rxDocument = createRxDocument(\n                                        this.asRxCollection,\n                                        rxChangeEvent.documentData\n                                    );\n                                    resultMap.set(docId, rxDocument);\n                                } else {\n                                    if (resultMap.has(docId)) {\n                                        resultHasChanged = true;\n                                        resultMap.delete(docId);\n                                    }\n                                }\n                            });\n\n                        // nothing happened that affects the result -> do not emit\n                        if (!resultHasChanged && firstEmitDone) {\n                            return false as any;\n                        }\n                    }\n                    firstEmitDone = true;\n                    return resultMap;\n                });\n                return queue;\n            }),\n            filter(x => !!x),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n        );\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     * When false or omitted and an interface or type is loaded in this collection,\n     * all base properties of the type are typed as `any` since data could be encrypted.\n     */\n    exportJSON(_decrypted: boolean): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(_decrypted?: false): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(_decrypted: boolean = false): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * sync with a CouchDB endpoint\n     */\n    syncCouchDB(_syncOptions: SyncOptions): RxCouchDBReplicationState {\n        throw pluginMissing('replication');\n    }\n\n    /**\n     * sync with a GraphQL endpoint\n     */\n    syncGraphQL(_options: SyncOptionsGraphQL<RxDocumentType>): RxGraphQLReplicationState<RxDocumentType> {\n        throw pluginMissing('replication-graphql');\n    }\n\n    /**\n     * HOOKS\n     */\n    addHook(when: string, key: string, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: string, key: string) {\n        try {\n            return this.hooks[key][when];\n        } catch (e) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n    }\n\n    _runHooks(when: string, key: string, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: string, key: string, data: any, instance: any) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * creates a temporaryDocument which can be saved later\n     */\n    newDocument(docData: Partial<RxDocumentType> = {}): RxDocument<RxDocumentType, OrmMethods> {\n        const filledDocData: RxDocumentData<RxDocumentType> = this.schema.fillObjectWithDefaults(docData);\n        const doc: any = createRxDocumentWithConstructor(\n            getRxDocumentConstructor(this as any),\n            this as any,\n            filledDocData\n        );\n        doc._isTemporary = true;\n\n        this._runHooksSync('post', 'create', docData, doc);\n        return doc as any;\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is destroyed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * Settings destroyed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.destroyed = true;\n\n        if (this._onDestroyCall) {\n            this._onDestroyCall();\n        }\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        this._subs.forEach(sub => sub.unsubscribe());\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        return Promise\n            .all([\n                this.storageInstance.close(),\n                this.localDocumentsStore.close()\n            ])\n            .then(() => {\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    remove(): Promise<any> {\n        return this.database.removeCollection(this.name);\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _atomicUpsertUpdate(doc: any, json: any): Promise<any> {\n    return doc.atomicUpdate((innerDoc: any) => {\n        json._rev = innerDoc._rev;\n        innerDoc._data = json;\n        return innerDoc._data;\n    }).then(() => doc);\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _atomicUpsertEnsureRxDocumentExists(\n    rxCollection: RxCollection,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument,\n        inserted: boolean\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docFromCache = rxCollection._docCache.get(primary);\n    if (docFromCache) {\n        return Promise.resolve({\n            doc: docFromCache,\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        cacheReplacementPolicy = defaultCacheReplacementPolicy\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.normalized,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstances(\n        name,\n        database,\n        storageInstanceCreationParams,\n        instanceCreationOptions\n    ).then(storageInstances => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstances.storageInstance,\n            storageInstances.localDocumentsStore,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', collection);\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return Promise\n                    .all([\n                        storageInstances.storageInstance.close(),\n                        storageInstances.localDocumentsStore.close()\n                    ])\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"file":"rx-collection.js"}