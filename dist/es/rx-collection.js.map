{"version":3,"sources":["../../src/rx-collection.ts"],"names":["filter","startWith","mergeMap","shareReplay","map","ucfirst","nextTick","flatClone","promiseSeries","pluginMissing","ensureNotFalsy","getFromMapOrThrow","clone","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","_handleToStorageInstance","_handleFromStorageInstance","fillObjectDataBeforeInsert","writeToStorageInstance","createRxCollectionStorageInstances","createRxQuery","_getDefaultQuery","newRxError","newRxTypeError","createCrypter","createDocCache","createQueryCache","defaultCacheReplacementPolicy","createChangeEventBuffer","runAsyncPluginHooks","runPluginHooks","createWithConstructor","createRxDocumentWithConstructor","isRxDocument","createRxDocument","getRxDocumentConstructor","storageChangeEventToRxChangeEvent","validateDatabaseName","overwritable","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","storageInstance","localDocumentsStore","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","statics","_isInMemory","destroyed","_atomicUpsertQueues","Map","synced","hooks","_subs","_repStates","Set","_docCache","_queryCache","_crypter","_observable$","_changeEventBuffer","_applyHookFunctions","asRxCollection","prepare","wasCreatedBefore","password","$","pipe","event","collectionName","subDocs","changeStream","storageEvent","subscribe","cE","$emit","push","subLocalDocs","isLocal","doc","get","documentId","_handleChangeEvent","migrationNeeded","getDataMigrator","migrate","batchSize","migratePromise","_queryStorageInstance","rxQuery","limit","noDecrypt","preparedQuery","toJSON","lockedRun","query","queryResult","docs","documents","changeEvent","insert","json","tempDoc","_isTemporary","data","useJson","newDoc","_runHooks","validate","document","insertResult","_dataSync$","next","bulkInsert","docsData","length","success","error","useDocs","docData","useDocData","Promise","all","then","insertDocs","d","docsMap","forEach","set","primaryPath","bulkWrite","results","successEntries","Array","from","entries","rxDocuments","key","writtenDocData","_rev","primary","values","bulkRemove","ids","findByIds","rxDocumentMap","rxDocument","removeDocs","writeDoc","_deleted","previous","successIds","keys","id","upsert","jsonSchema","findOne","exec","existing","atomicUpdate","atomicUpsert","queue","has","_atomicUpsertEnsureRxDocumentExists","wasInserted","inserted","_atomicUpsertUpdate","find","queryObj","selector","isArray","ret","mustBeQueried","findDocumentsById","findByIds$","currentValue","lastChangeEvent","initialPromise","counter","ev","resultMap","missedChangeEvents","getFrom","newResult","k","v","rxChangeEvent","includes","op","operation","x","bufferSize","refCount","exportJSON","_decrypted","importJSON","_exportedJSON","syncCouchDB","_syncOptions","syncGraphQL","inMemory","addHook","when","fun","parallel","boundFun","bind","runName","series","getHooks","e","instance","tasks","hook","_runHooksSync","newDocument","fillObjectWithDefaults","destroy","_onDestroyCall","sub","unsubscribe","replicationState","cancel","close","collections","remove","removeCollection","_onDestroy","res","collection","colProto","Object","getPrototypeOf","fnName","innerDoc","_data","rxCollection","docFromCache","resolve","createRxCollection","autoMigrate","isDevMode","funName","topLevelFields","storageInstanceCreationParams","databaseName","storageInstances","defineProperty","version","err","reject","isRxCollection","obj"],"mappings":"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","sourcesContent":["import {\n    filter,\n    startWith,\n    mergeMap,\n    shareReplay,\n    map\n} from 'rxjs/operators';\n\nimport {\n    ucfirst,\n    nextTick,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    clone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID\n} from './util';\nimport {\n    _handleToStorageInstance,\n    _handleFromStorageInstance,\n    fillObjectDataBeforeInsert,\n    writeToStorageInstance,\n    createRxCollectionStorageInstances\n} from './rx-collection-helper';\nimport {\n    createRxQuery,\n    RxQueryBase,\n    _getDefaultQuery\n} from './rx-query';\nimport {\n    isInstanceOf as isInstanceOfRxSchema,\n    createRxSchema\n} from './rx-schema';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport type {\n    DataMigrator\n} from './plugins/migration';\nimport {\n    Crypter,\n    createCrypter\n} from './crypter';\nimport {\n    DocCache,\n    createDocCache\n} from './doc-cache';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks';\n\nimport type {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCouchDBReplicationState,\n    MigrationState,\n    SyncOptions,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    SyncOptionsGraphQL,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageBulkWriteError,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageInstanceCreationParams,\n    RxStorageKeyObjectInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase\n} from './types';\nimport type {\n    RxGraphQLReplicationState\n} from './plugins/replication-graphql';\n\nimport {\n    RxSchema\n} from './rx-schema';\nimport {\n    createWithConstructor as createRxDocumentWithConstructor,\n    isRxDocument\n} from './rx-document';\n\nimport {\n    createRxDocument,\n    getRxDocumentConstructor\n} from './rx-document-prototype-merge';\nimport { storageChangeEventToRxChangeEvent } from './rx-storage-helper';\nimport { validateDatabaseName } from './plugins/dev-mode/check-names';\nimport { overwritable } from './overwritable';\n\nconst HOOKS_WHEN = ['pre', 'post'];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any }\n    > {\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        /**\n         * Stores all 'normal' documents\n         */\n        public storageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        /**\n         * Stores the local documents so that they are not deleted\n         * when a migration runs.\n         */\n        public localDocumentsStore: RxStorageKeyObjectInstance<any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: KeyFunctionMap = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {}\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    /**\n     * returns observable\n     */\n    get $(): Observable<RxChangeEvent<any>> {\n        return this._observable$ as any;\n    }\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    get onDestroy() {\n        if (!this._onDestroy) {\n            this._onDestroy = new Promise(res => this._onDestroyCall = res);\n        }\n        return this._onDestroy;\n    }\n\n    public _isInMemory = false;\n    public destroyed = false;\n    public _atomicUpsertQueues = new Map(); // TODO type\n    // defaults\n    public synced: boolean = false;\n    public hooks: any = {};\n    public _subs: Subscription[] = [];\n\n    // TODO move _repStates into migration plugin\n    public _repStates: Set<RxCouchDBReplicationState> = new Set();\n\n    public _docCache: DocCache<\n        RxDocument<RxDocumentType, OrmMethods>\n    > = createDocCache();\n\n    public _queryCache: QueryCache = createQueryCache();\n    public _crypter: Crypter = {} as Crypter;\n    public _observable$: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer = {} as ChangeEventBuffer;\n\n    /**\n     * returns a promise that is resolved when the collection gets destroyed\n     */\n    private _onDestroy?: Promise<void>;\n\n    private _onDestroyCall?: () => void;\n    public async prepare(\n        /**\n         * set to true if the collection data already exists on this storage adapter\n         */\n        wasCreatedBefore: boolean\n    ): Promise<void> {\n        // we trigger the non-blocking things first and await them later so we can do stuff in the mean time\n\n        this._crypter = createCrypter(this.database.password, this.schema);\n\n        this._observable$ = this.database.$.pipe(\n            filter((event: RxChangeEvent<any>) => {\n                return event.collectionName === this.name;\n            })\n        );\n        this._changeEventBuffer = createChangeEventBuffer(this.asRxCollection);\n\n\n        const subDocs = this.storageInstance.changeStream().pipe(\n            map(storageEvent => storageChangeEventToRxChangeEvent(\n                false,\n                storageEvent,\n                this.database,\n                this as any\n            ))\n        ).subscribe(cE => {\n            this.$emit(cE);\n        });\n        this._subs.push(subDocs);\n        const subLocalDocs = this.localDocumentsStore.changeStream().pipe(\n            map(storageEvent => storageChangeEventToRxChangeEvent(\n                true,\n                storageEvent,\n                this.database,\n                this as any\n            ))\n        ).subscribe(cE => this.$emit(cE));\n        this._subs.push(subLocalDocs);\n\n\n        /**\n         * When a write happens to the collection\n         * we find the changed document in the docCache\n         * and tell it that it has to change its data.\n         */\n        this._subs.push(\n            this._observable$\n                .pipe(\n                    filter((cE: RxChangeEvent<RxDocumentType>) => !cE.isLocal)\n                )\n                .subscribe(cE => {\n                    // when data changes, send it to RxDocument in docCache\n                    const doc = this._docCache.get(cE.documentId);\n                    if (doc) {\n                        doc._handleChangeEvent(cE);\n                    }\n                })\n        );\n    }\n\n\n    // overwritte by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration');\n    }\n    getDataMigrator(): DataMigrator {\n        throw pluginMissing('migration');\n    }\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        return this.getDataMigrator().migrate(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getDataMigrator().migratePromise(batchSize);\n    }\n\n    /**\n     * wrapps the query function of the storage instance.\n     */\n    async _queryStorageInstance(\n        rxQuery: RxQuery | RxQueryBase,\n        limit?: number,\n        noDecrypt: boolean = false\n    ): Promise<any[]> {\n        const preparedQuery = rxQuery.toJSON();\n        if (limit) {\n            preparedQuery['limit'] = limit;\n        }\n\n        const queryResult = await this.database.lockedRun(\n            () => this.storageInstance.query(preparedQuery)\n        );\n\n        const docs = queryResult.documents\n            .map((doc: any) => _handleFromStorageInstance(this, doc, noDecrypt));\n        return docs;\n    }\n\n    $emit(changeEvent: RxChangeEvent<any>) {\n        return this.database.$emit(changeEvent);\n    }\n\n\n    /**\n     * TODO internally call bulkInsert\n     * to not have duplicated code.\n     */\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        // inserting a temporary-document\n        let tempDoc: RxDocument | null = null;\n        if (isRxDocument(json)) {\n            tempDoc = json as RxDocument;\n            if (!tempDoc._isTemporary) {\n                throw newRxError('COL1', {\n                    data: json\n                });\n            }\n            json = tempDoc.toJSON() as any;\n        }\n\n        const useJson: RxDocumentWriteData<RxDocumentType> = fillObjectDataBeforeInsert(this as any, json);\n        let newDoc = tempDoc;\n\n        await this._runHooks('pre', 'insert', useJson);\n        this.schema.validate(useJson);\n        const insertResult = await writeToStorageInstance(\n            this,\n            {\n                document: useJson\n            }\n        );\n\n        if (tempDoc) {\n            tempDoc._dataSync$.next(insertResult);\n        } else {\n            newDoc = createRxDocument(this as any, insertResult);\n        }\n\n        await this._runHooks('post', 'insert', useJson, newDoc);\n\n        return newDoc as any;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const useDocs: RxDocumentType[] = docsData.map(docData => {\n            const useDocData = fillObjectDataBeforeInsert(this as any, docData);\n            return useDocData;\n        });\n\n        const docs = await Promise.all(\n            useDocs.map(doc => {\n                return this._runHooks('pre', 'insert', doc).then(() => {\n                    this.schema.validate(doc);\n                    return doc;\n                });\n            })\n        );\n\n        const insertDocs: BulkWriteRow<RxDocumentType>[] = docs.map(d => ({\n            document: _handleToStorageInstance(this, d)\n        }));\n        const docsMap: Map<string, RxDocumentType> = new Map();\n        docs.forEach(d => {\n            docsMap.set((d as any)[this.schema.primaryPath] as any, d);\n        });\n\n        const results = await this.database.lockedRun(\n            () => this.storageInstance.bulkWrite(insertDocs)\n        );\n\n        // create documents\n        const successEntries: [string, RxDocumentData<RxDocumentType>][] = Array.from(results.success.entries());\n        const rxDocuments: any[] = successEntries\n            .map(([key, writtenDocData]) => {\n                const docData: RxDocumentData<RxDocumentType> = getFromMapOrThrow(docsMap, key) as any;\n                docData._rev = writtenDocData._rev;\n                const doc = createRxDocument(this as any, docData);\n                return doc;\n            });\n\n\n        await Promise.all(\n            rxDocuments.map(doc => {\n                return this._runHooks(\n                    'post',\n                    'insert',\n                    docsMap.get(doc.primary),\n                    doc\n                );\n            })\n        );\n\n        return {\n            success: rxDocuments,\n            error: Array.from(results.error.values())\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids);\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = clone(rxDocument.toJSON(true)) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n\n\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: _handleToStorageInstance(this, doc),\n                document: _handleToStorageInstance(this, writeDoc)\n            };\n        });\n\n        const results = await this.database.lockedRun(\n            () => this.storageInstance.bulkWrite(removeDocs)\n        );\n\n        const successIds: string[] = Array.from(results.success.keys());\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments: any[] = successIds.map(id => {\n            return rxDocumentMap.get(id);\n        });\n\n        return {\n            success: rxDocuments,\n            error: Array.from(results.error.values())\n        };\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this as any, json);\n        const primary = useJson[this.schema.primaryPath];\n        if (!primary) {\n            throw newRxError('COL3', {\n                primaryPath: this.schema.primaryPath as string,\n                data: useJson,\n                schema: this.schema.jsonSchema\n            });\n        }\n\n        return this.findOne(primary).exec()\n            .then((existing: any) => {\n                if (existing) {\n                    useJson._rev = existing['_rev'];\n\n                    return existing.atomicUpdate(() => useJson as any)\n                        .then(() => existing);\n                } else {\n                    return this.insert(json as any);\n                }\n            });\n    }\n\n    /**\n     * upserts to a RxDocument, uses atomicUpdate if document already exists\n     */\n    atomicUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this as any, json);\n        const primary = (useJson as any)[this.schema.primaryPath];\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it wont try 2 parallel runs\n        let queue;\n        if (!this._atomicUpsertQueues.has(primary)) {\n            queue = PROMISE_RESOLVE_VOID;\n        } else {\n            queue = this._atomicUpsertQueues.get(primary);\n        }\n        queue = queue\n            .then(() => _atomicUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted: any) => {\n                if (!wasInserted.inserted) {\n                    return _atomicUpsertUpdate(wasInserted.doc, useJson)\n                        /**\n                         * tick here so the event can propagate\n                         * TODO we should not need that here\n                         */\n                        .then(() => nextTick())\n                        .then(() => nextTick())\n                        .then(() => nextTick())\n                        .then(() => wasInserted.doc);\n                } else\n                    return wasInserted.doc;\n            });\n        this._atomicUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[]\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(queryObj?: MangoQueryNoLimit<RxDocumentType> | string): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>\n        | null\n    > {\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                }\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            query = createRxQuery('findOne', queryObj, this as any);\n        }\n\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    async findByIds(\n        ids: string[]\n    ): Promise<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n\n        const ret = new Map();\n        const mustBeQueried: string[] = [];\n\n        // first try to fill from docCache\n        ids.forEach(id => {\n            const doc = this._docCache.get(id);\n            if (doc) {\n                ret.set(id, doc);\n            } else {\n                mustBeQueried.push(id);\n            }\n        });\n\n        // find everything which was not in docCache\n        if (mustBeQueried.length > 0) {\n            const docs = await this.storageInstance.findDocumentsById(mustBeQueried, false);\n            Array.from(docs.values()).forEach(docData => {\n                docData = _handleFromStorageInstance(this, docData);\n                const doc = createRxDocument<RxDocumentType, OrmMethods>(this as any, docData);\n                ret.set(doc.primary, doc);\n            });\n        }\n        return ret;\n    }\n\n    /**\n     * like this.findByIds but returns an observable\n     * that always emitts the current state\n     */\n    findByIds$(\n        ids: string[]\n    ): Observable<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n        let currentValue: Map<string, RxDocument<RxDocumentType, OrmMethods>> | null = null;\n        let lastChangeEvent: number = -1;\n\n        const initialPromise = this.findByIds(ids).then(docsMap => {\n            lastChangeEvent = this._changeEventBuffer.counter;\n            currentValue = docsMap;\n        });\n        return this.$.pipe(\n            startWith(null),\n            mergeMap(ev => initialPromise.then(() => ev)),\n            /**\n             * Because shareReplay with refCount: true\n             * will often subscribe/unsusbscribe\n             * we always ensure that we handled all missed events\n             * since the last subscription.\n             */\n            mergeMap(async (ev) => {\n                const resultMap = ensureNotFalsy(currentValue);\n                const missedChangeEvents = this._changeEventBuffer.getFrom(lastChangeEvent + 1);\n                if (missedChangeEvents === null) {\n                    /**\n                     * changeEventBuffer is of bounds -> we must re-execute over the database\n                     * because we cannot calculate the new results just from the events.\n                     */\n                    const newResult = await this.findByIds(ids);\n                    lastChangeEvent = this._changeEventBuffer.counter;\n                    Array.from(newResult.entries()).forEach(([k, v]) => resultMap.set(k, v));\n                } else {\n                    missedChangeEvents\n                        .filter(rxChangeEvent => ids.includes(rxChangeEvent.documentId))\n                        .forEach(rxChangeEvent => {\n                            const op = rxChangeEvent.operation;\n                            if (op === 'INSERT' || op === 'UPDATE') {\n                                resultMap.set(rxChangeEvent.documentId, this._docCache.get(rxChangeEvent.documentId) as any);\n                            } else {\n                                resultMap.delete(rxChangeEvent.documentId);\n                            }\n                        });\n                }\n                return resultMap;\n            }),\n            filter(x => !!x),\n            shareReplay({\n                bufferSize: 1,\n                refCount: true\n            })\n        );\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     * When false or omitted and an interface or type is loaded in this collection,\n     * all base properties of the type are typed as `any` since data could be encrypted.\n     */\n    exportJSON(_decrypted: boolean): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(_decrypted?: false): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(_decrypted: boolean = false): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * sync with a CouchDB endpoint\n     */\n    syncCouchDB(_syncOptions: SyncOptions): RxCouchDBReplicationState {\n        throw pluginMissing('replication');\n    }\n\n    /**\n     * sync with a GraphQL endpoint\n     */\n    syncGraphQL(options: SyncOptionsGraphQL<RxDocumentType>): RxGraphQLReplicationState<RxDocumentType> {\n        throw pluginMissing('replication-graphql');\n    }\n\n    /**\n     * Create a replicated in-memory-collection\n     */\n    inMemory(): Promise<RxCollection<RxDocumentType, OrmMethods>> {\n        throw pluginMissing('in-memory');\n    }\n\n\n    /**\n     * HOOKS\n     */\n    addHook(when: string, key: string, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n    getHooks(when: string, key: string) {\n        try {\n            return this.hooks[key][when];\n        } catch (e) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n    }\n\n    _runHooks(when: string, key: string, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: string, key: string, data: any, instance: any) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * creates a temporaryDocument which can be saved later\n     */\n    newDocument(docData: Partial<RxDocumentType> = {}): RxDocument<RxDocumentType, OrmMethods> {\n        docData = this.schema.fillObjectWithDefaults(docData);\n        const doc: any = createRxDocumentWithConstructor(\n            getRxDocumentConstructor(this as any),\n            this as any,\n            docData\n        );\n        doc._isTemporary = true;\n\n        this._runHooksSync('post', 'create', docData, doc);\n        return doc as any;\n    }\n\n    destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        if (this._onDestroyCall) {\n            this._onDestroyCall();\n        }\n        this._subs.forEach(sub => sub.unsubscribe());\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        Array.from(this._repStates).forEach(replicationState => replicationState.cancel());\n\n        return Promise\n            .all([\n                this.storageInstance.close(),\n                this.localDocumentsStore.close()\n            ])\n            .then(() => {\n                delete this.database.collections[this.name];\n                this.destroyed = true;\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    remove(): Promise<any> {\n        return this.database.removeCollection(this.name);\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _atomicUpsertUpdate(doc: any, json: any): Promise<any> {\n    return doc.atomicUpdate((innerDoc: any) => {\n        json._rev = innerDoc._rev;\n        innerDoc._data = json;\n        return innerDoc._data;\n    }).then(() => doc);\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _atomicUpsertEnsureRxDocumentExists(\n    rxCollection: RxCollection,\n    primary: string,\n    json: any\n): Promise<{ doc: RxDocument, inserted: boolean }> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docFromCache = rxCollection._docCache.get(primary);\n    if (docFromCache) {\n        return Promise.resolve({\n            doc: docFromCache,\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        cacheReplacementPolicy = defaultCacheReplacementPolicy\n    }: any,\n    wasCreatedBefore: boolean\n): Promise<RxCollection> {\n    validateDatabaseName(name);\n\n    // TODO move this check to dev-mode plugin\n    if (overwritable.isDevMode()) {\n        Object.keys(methods)\n            .filter(funName => schema.topLevelFields.includes(funName))\n            .forEach(funName => {\n                throw newRxError('COL18', {\n                    funName\n                });\n            });\n    }\n\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstances(\n        name,\n        database,\n        storageInstanceCreationParams,\n        instanceCreationOptions\n    ).then(storageInstances => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstances.storageInstance,\n            storageInstances.localDocumentsStore,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics\n        );\n\n        return collection\n            .prepare(wasCreatedBefore)\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', collection);\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return Promise\n                    .all([\n                        storageInstances.storageInstance.close(),\n                        storageInstances.localDocumentsStore.close()\n                    ])\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"file":"rx-collection.js"}