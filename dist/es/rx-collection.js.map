{"version":3,"sources":["../../src/rx-collection.ts"],"names":["filter","startWith","mergeMap","shareReplay","ucfirst","nextTick","flatClone","promiseSeries","pluginMissing","ensureNotFalsy","getFromMapOrThrow","clone","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","RXJS_SHARE_REPLAY_DEFAULTS","_handleToStorageInstance","_handleFromStorageInstance","fillObjectDataBeforeInsert","writeToStorageInstance","createRxCollectionStorageInstances","createRxQuery","_getDefaultQuery","newRxError","newRxTypeError","createCrypter","createDocCache","createQueryCache","defaultCacheReplacementPolicy","createChangeEventBuffer","runAsyncPluginHooks","runPluginHooks","createWithConstructor","createRxDocumentWithConstructor","isRxDocument","createRxDocument","getRxDocumentConstructor","storageChangeEventToRxChangeEvent","overwritable","HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","storageInstance","localDocumentsStore","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","statics","_isInMemory","destroyed","_atomicUpsertQueues","Map","synced","hooks","_subs","_repStates","Set","_docCache","_queryCache","_crypter","_observable$","_changeEventBuffer","_applyHookFunctions","asRxCollection","prepare","_wasCreatedBefore","password","eventBulks$","pipe","changeEventBulk","collectionName","events","subDocs","changeStream","subscribe","eventBulk","id","internal","storageToken","map","ev","databaseToken","token","$emit","push","subLocalDocs","cE","isLocal","doc","get","documentId","_handleChangeEvent","migrationNeeded","getDataMigrator","migrate","batchSize","migratePromise","_queryStorageInstance","rxQuery","limit","docs","noDecrypt","isFindOneByIdQuery","docId","lockedRun","findDocumentsById","docsMap","docData","preparedQuery","getPreparedQuery","query","queryResult","documents","insert","json","tempDoc","_isTemporary","data","toJSON","useJson","newDoc","_runHooks","validate","document","insertResult","_dataSync$","next","bulkInsert","docsData","length","success","error","useDocs","useDocData","Promise","all","then","insertDocs","d","forEach","set","primaryPath","bulkWrite","results","successEntries","Object","entries","rxDocuments","key","writtenDocData","_rev","primary","values","bulkRemove","ids","findByIds","rxDocumentMap","Array","from","rxDocument","removeDocs","writeDoc","_deleted","previous","successIds","keys","upsert","jsonSchema","findOne","exec","existing","deleted","atomicUpdate","atomicUpsert","queue","has","_atomicUpsertEnsureRxDocumentExists","wasInserted","inserted","_atomicUpsertUpdate","find","queryObj","selector","isArray","ret","mustBeQueried","findByIds$","currentValue","lastChangeEvent","initialPromise","counter","$","_ev","resultMap","missedChangeEvents","getFrom","newResult","k","v","rxChangeEvent","includes","op","operation","x","exportJSON","_decrypted","importJSON","_exportedJSON","syncCouchDB","_syncOptions","syncGraphQL","_options","inMemory","addHook","when","fun","parallel","boundFun","bind","runName","series","getHooks","e","instance","tasks","hook","_runHooksSync","newDocument","fillObjectWithDefaults","destroy","_onDestroyCall","sub","unsubscribe","replicationState","cancel","close","collections","remove","removeCollection","_onDestroy","res","collection","colProto","getPrototypeOf","fnName","innerDoc","_data","rxCollection","docFromCache","resolve","createRxCollection","wasCreatedBefore","autoMigrate","isDevMode","funName","topLevelFields","storageInstanceCreationParams","databaseName","multiInstance","storageInstances","defineProperty","version","err","reject","isRxCollection","obj"],"mappings":"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","sourcesContent":["import {\n    filter,\n    startWith,\n    mergeMap,\n    shareReplay\n} from 'rxjs/operators';\n\nimport {\n    ucfirst,\n    nextTick,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    clone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID,\n    RXJS_SHARE_REPLAY_DEFAULTS\n} from './util';\nimport {\n    _handleToStorageInstance,\n    _handleFromStorageInstance,\n    fillObjectDataBeforeInsert,\n    writeToStorageInstance,\n    createRxCollectionStorageInstances\n} from './rx-collection-helper';\nimport {\n    createRxQuery,\n    RxQueryBase,\n    _getDefaultQuery\n} from './rx-query';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport type {\n    DataMigrator\n} from './plugins/migration';\nimport {\n    Crypter,\n    createCrypter\n} from './crypter';\nimport {\n    DocCache,\n    createDocCache\n} from './doc-cache';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks';\n\nimport type {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCouchDBReplicationState,\n    MigrationState,\n    SyncOptions,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    SyncOptionsGraphQL,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageBulkWriteError,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageInstanceCreationParams,\n    RxStorageKeyObjectInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk\n} from './types';\nimport type {\n    RxGraphQLReplicationState\n} from './plugins/replication-graphql';\n\nimport {\n    RxSchema\n} from './rx-schema';\nimport {\n    createWithConstructor as createRxDocumentWithConstructor,\n    isRxDocument\n} from './rx-document';\n\nimport {\n    createRxDocument,\n    getRxDocumentConstructor\n} from './rx-document-prototype-merge';\nimport { storageChangeEventToRxChangeEvent } from './rx-storage-helper';\nimport { overwritable } from './overwritable';\n\nconst HOOKS_WHEN = ['pre', 'post'];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any }\n    > {\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        /**\n         * Stores all 'normal' documents\n         */\n        public storageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        /**\n         * Stores the local documents so that they are not deleted\n         * when a migration runs.\n         */\n        public localDocumentsStore: RxStorageKeyObjectInstance<any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: KeyFunctionMap = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {}\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    /**\n     * returns observable\n     */\n    get $(): Observable<RxChangeEvent<any>> {\n        return this._observable$ as any;\n    }\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    get onDestroy() {\n        if (!this._onDestroy) {\n            this._onDestroy = new Promise(res => this._onDestroyCall = res);\n        }\n        return this._onDestroy;\n    }\n\n    public _isInMemory = false;\n    public destroyed = false;\n    public _atomicUpsertQueues = new Map(); // TODO type\n    // defaults\n    public synced: boolean = false;\n    public hooks: any = {};\n    public _subs: Subscription[] = [];\n\n    // TODO move _repStates into migration plugin\n    public _repStates: Set<RxCouchDBReplicationState> = new Set();\n\n    public _docCache: DocCache<\n        RxDocument<RxDocumentType, OrmMethods>\n    > = createDocCache();\n\n    public _queryCache: QueryCache = createQueryCache();\n    public _crypter: Crypter = {} as Crypter;\n    public _observable$: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer = {} as ChangeEventBuffer;\n\n    /**\n     * returns a promise that is resolved when the collection gets destroyed\n     */\n    private _onDestroy?: Promise<void>;\n\n    private _onDestroyCall?: () => void;\n    public async prepare(\n        /**\n         * TODO is this still needed?\n         * set to true if the collection data already exists on this storage adapter\n         */\n        _wasCreatedBefore: boolean\n    ): Promise<void> {\n        // we trigger the non-blocking things first and await them later so we can do stuff in the mean time\n\n        this._crypter = createCrypter(this.database.password, this.schema);\n\n        this._observable$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this._changeEventBuffer = createChangeEventBuffer(this.asRxCollection);\n\n\n        /**\n         * Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: ensureNotFalsy(this.database.storageToken),\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    false,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token\n            };\n            this.database.$emit(changeEventBulk);\n        });\n\n        this._subs.push(subDocs);\n        const subLocalDocs = this.localDocumentsStore.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: ensureNotFalsy(this.database.storageToken),\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    true,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subLocalDocs);\n\n\n        /**\n         * When a write happens to the collection\n         * we find the changed document in the docCache\n         * and tell it that it has to change its data.\n         */\n        this._subs.push(\n            this._observable$\n                .pipe(\n                    filter((cE: RxChangeEvent<RxDocumentType>) => !cE.isLocal)\n                )\n                .subscribe(cE => {\n                    // when data changes, send it to RxDocument in docCache\n                    const doc = this._docCache.get(cE.documentId);\n                    if (doc) {\n                        doc._handleChangeEvent(cE);\n                    }\n                })\n        );\n    }\n\n\n    // overwritte by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration');\n    }\n    getDataMigrator(): DataMigrator {\n        throw pluginMissing('migration');\n    }\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        return this.getDataMigrator().migrate(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getDataMigrator().migratePromise(batchSize);\n    }\n\n    /**\n     * wrapps the query function of the storage instance.\n     */\n    async _queryStorageInstance(\n        rxQuery: RxQuery | RxQueryBase,\n        limit?: number,\n        noDecrypt: boolean = false\n    ): Promise<any[]> {\n        let docs: any[] = [];\n\n        /**\n         * Optimizations shortcut.\n         * If query is find-one-document-by-id,\n         * then we do not have to use the slow query() method\n         * but instead can use findDocumentsById()\n         */\n        if (rxQuery.isFindOneByIdQuery) {\n            const docId = rxQuery.isFindOneByIdQuery;\n            const docsMap = await this.database.lockedRun(\n                () => this.storageInstance.findDocumentsById([docId], false)\n            );\n            const docData = docsMap[docId];\n            if (docData) {\n                docs.push(docData);\n            }\n        } else {\n            const preparedQuery = rxQuery.getPreparedQuery();\n            if (limit) {\n                preparedQuery['limit'] = limit;\n            }\n\n            const queryResult = await this.database.lockedRun(\n                () => this.storageInstance.query(preparedQuery)\n            );\n            docs = queryResult.documents\n        }\n\n        docs = docs.map((doc: any) => _handleFromStorageInstance(this, doc, noDecrypt));\n        return docs;\n    }\n\n    /**\n     * TODO internally call bulkInsert\n     * to not have duplicated code.\n     */\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        // inserting a temporary-document\n        let tempDoc: RxDocument | null = null;\n        if (isRxDocument(json)) {\n            tempDoc = json as RxDocument;\n            if (!tempDoc._isTemporary) {\n                throw newRxError('COL1', {\n                    data: json\n                });\n            }\n            json = tempDoc.toJSON() as any;\n        }\n\n        const useJson: RxDocumentWriteData<RxDocumentType> = fillObjectDataBeforeInsert(this as any, json);\n        let newDoc = tempDoc;\n\n        await this._runHooks('pre', 'insert', useJson);\n        this.schema.validate(useJson);\n        const insertResult = await writeToStorageInstance(\n            this,\n            {\n                document: useJson\n            }\n        );\n\n        if (tempDoc) {\n            tempDoc._dataSync$.next(insertResult);\n        } else {\n            newDoc = createRxDocument(this as any, insertResult);\n        }\n\n        await this._runHooks('post', 'insert', useJson, newDoc);\n\n        return newDoc as any;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const useDocs: RxDocumentType[] = docsData.map(docData => {\n            const useDocData = fillObjectDataBeforeInsert(this as any, docData);\n            return useDocData;\n        });\n\n        const docs = await Promise.all(\n            useDocs.map(doc => {\n                return this._runHooks('pre', 'insert', doc).then(() => {\n                    this.schema.validate(doc);\n                    return doc;\n                });\n            })\n        );\n\n        const insertDocs: BulkWriteRow<RxDocumentType>[] = docs.map(d => ({\n            document: _handleToStorageInstance(this, d)\n        }));\n        const docsMap: Map<string, RxDocumentType> = new Map();\n        docs.forEach(d => {\n            docsMap.set((d as any)[this.schema.primaryPath] as any, d);\n        });\n\n        const results = await this.database.lockedRun(\n            () => this.storageInstance.bulkWrite(insertDocs)\n        );\n\n        // create documents\n        const successEntries: [string, RxDocumentData<RxDocumentType>][] = Object.entries(results.success);\n        const rxDocuments: any[] = successEntries\n            .map(([key, writtenDocData]) => {\n                const docData: RxDocumentData<RxDocumentType> = getFromMapOrThrow(docsMap, key) as any;\n                docData._rev = writtenDocData._rev;\n                const doc = createRxDocument(this as any, docData);\n                return doc;\n            });\n\n\n        await Promise.all(\n            rxDocuments.map(doc => {\n                return this._runHooks(\n                    'post',\n                    'insert',\n                    docsMap.get(doc.primary),\n                    doc\n                );\n            })\n        );\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids);\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = clone(rxDocument.toJSON(true)) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n\n\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: _handleToStorageInstance(this, doc),\n                document: _handleToStorageInstance(this, writeDoc)\n            };\n        });\n\n        const results = await this.database.lockedRun(\n            () => this.storageInstance.bulkWrite(removeDocs)\n        );\n\n        const successIds: string[] = Object.keys(results.success);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments: any[] = successIds.map(id => {\n            return rxDocumentMap.get(id);\n        });\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this as any, json);\n        const primary = useJson[this.schema.primaryPath];\n        if (!primary) {\n            throw newRxError('COL3', {\n                primaryPath: this.schema.primaryPath as string,\n                data: useJson,\n                schema: this.schema.jsonSchema\n            });\n        }\n\n        return this.findOne(primary).exec()\n            .then((existing: RxDocument<RxDocumentType, OrmMethods> | null) => {\n                if (existing && !existing.deleted) {\n                    useJson._rev = (existing as any)['_rev'];\n                    return existing.atomicUpdate(() => useJson as any)\n                        .then(() => existing);\n                } else {\n                    return this.insert(json as any);\n                }\n            });\n    }\n\n    /**\n     * upserts to a RxDocument, uses atomicUpdate if document already exists\n     */\n    atomicUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this as any, json);\n        const primary = useJson[this.schema.primaryPath];\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it wont try 2 parallel runs\n        let queue;\n        if (!this._atomicUpsertQueues.has(primary)) {\n            queue = PROMISE_RESOLVE_VOID;\n        } else {\n            queue = this._atomicUpsertQueues.get(primary);\n        }\n        queue = queue\n            .then(() => _atomicUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted: any) => {\n                if (!wasInserted.inserted) {\n                    return _atomicUpsertUpdate(wasInserted.doc, useJson)\n                        /**\n                         * tick here so the event can propagate\n                         * TODO we should not need that here\n                         */\n                        .then(() => nextTick())\n                        .then(() => nextTick())\n                        .then(() => nextTick())\n                        .then(() => wasInserted.doc);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._atomicUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[]\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(queryObj?: MangoQueryNoLimit<RxDocumentType> | string): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>\n        | null\n    > {\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries because it will be overwritte\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            (queryObj as any).limit = 1;\n            query = createRxQuery('findOne', queryObj, this as any);\n        }\n\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    async findByIds(\n        ids: string[]\n    ): Promise<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n\n        const ret = new Map();\n        const mustBeQueried: string[] = [];\n\n        // first try to fill from docCache\n        ids.forEach(id => {\n            const doc = this._docCache.get(id);\n            if (doc) {\n                ret.set(id, doc);\n            } else {\n                mustBeQueried.push(id);\n            }\n        });\n\n        // find everything which was not in docCache\n        if (mustBeQueried.length > 0) {\n            const docs = await this.storageInstance.findDocumentsById(mustBeQueried, false);\n            Object.values(docs).forEach(docData => {\n                docData = _handleFromStorageInstance(this, docData);\n                const doc = createRxDocument<RxDocumentType, OrmMethods>(this as any, docData);\n                ret.set(doc.primary, doc);\n            });\n        }\n        return ret;\n    }\n\n    /**\n     * like this.findByIds but returns an observable\n     * that always emitts the current state\n     */\n    findByIds$(\n        ids: string[]\n    ): Observable<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n        let currentValue: Map<string, RxDocument<RxDocumentType, OrmMethods>> | null = null;\n        let lastChangeEvent: number = -1;\n\n        const initialPromise = this.findByIds(ids).then(docsMap => {\n            lastChangeEvent = this._changeEventBuffer.counter;\n            currentValue = docsMap;\n        });\n        return this.$.pipe(\n            startWith(null),\n            mergeMap(ev => initialPromise.then(() => ev)),\n            /**\n             * Because shareReplay with refCount: true\n             * will often subscribe/unsusbscribe\n             * we always ensure that we handled all missed events\n             * since the last subscription.\n             */\n            mergeMap(async (_ev) => {\n                const resultMap = ensureNotFalsy(currentValue);\n                const missedChangeEvents = this._changeEventBuffer.getFrom(lastChangeEvent + 1);\n                if (missedChangeEvents === null) {\n                    /**\n                     * changeEventBuffer is of bounds -> we must re-execute over the database\n                     * because we cannot calculate the new results just from the events.\n                     */\n                    const newResult = await this.findByIds(ids);\n                    lastChangeEvent = this._changeEventBuffer.counter;\n                    Array.from(newResult.entries()).forEach(([k, v]) => resultMap.set(k, v));\n                } else {\n                    missedChangeEvents\n                        .filter(rxChangeEvent => ids.includes(rxChangeEvent.documentId))\n                        .forEach(rxChangeEvent => {\n                            const op = rxChangeEvent.operation;\n                            if (op === 'INSERT' || op === 'UPDATE') {\n                                resultMap.set(rxChangeEvent.documentId, this._docCache.get(rxChangeEvent.documentId) as any);\n                            } else {\n                                resultMap.delete(rxChangeEvent.documentId);\n                            }\n                        });\n                }\n                return resultMap;\n            }),\n            filter(x => !!x),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n        );\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     * When false or omitted and an interface or type is loaded in this collection,\n     * all base properties of the type are typed as `any` since data could be encrypted.\n     */\n    exportJSON(_decrypted: boolean): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(_decrypted?: false): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(_decrypted: boolean = false): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * sync with a CouchDB endpoint\n     */\n    syncCouchDB(_syncOptions: SyncOptions): RxCouchDBReplicationState {\n        throw pluginMissing('replication');\n    }\n\n    /**\n     * sync with a GraphQL endpoint\n     */\n    syncGraphQL(_options: SyncOptionsGraphQL<RxDocumentType>): RxGraphQLReplicationState<RxDocumentType> {\n        throw pluginMissing('replication-graphql');\n    }\n\n    /**\n     * Create a replicated in-memory-collection\n     */\n    inMemory(): Promise<RxCollection<RxDocumentType, OrmMethods>> {\n        throw pluginMissing('in-memory');\n    }\n\n\n    /**\n     * HOOKS\n     */\n    addHook(when: string, key: string, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n    getHooks(when: string, key: string) {\n        try {\n            return this.hooks[key][when];\n        } catch (e) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n    }\n\n    _runHooks(when: string, key: string, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: string, key: string, data: any, instance: any) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * creates a temporaryDocument which can be saved later\n     */\n    newDocument(docData: Partial<RxDocumentType> = {}): RxDocument<RxDocumentType, OrmMethods> {\n        docData = this.schema.fillObjectWithDefaults(docData);\n        const doc: any = createRxDocumentWithConstructor(\n            getRxDocumentConstructor(this as any),\n            this as any,\n            docData\n        );\n        doc._isTemporary = true;\n\n        this._runHooksSync('post', 'create', docData, doc);\n        return doc as any;\n    }\n\n    destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        if (this._onDestroyCall) {\n            this._onDestroyCall();\n        }\n        this._subs.forEach(sub => sub.unsubscribe());\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        Array.from(this._repStates).forEach(replicationState => replicationState.cancel());\n\n        return Promise\n            .all([\n                this.storageInstance.close(),\n                this.localDocumentsStore.close()\n            ])\n            .then(() => {\n                delete this.database.collections[this.name];\n                this.destroyed = true;\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    remove(): Promise<any> {\n        return this.database.removeCollection(this.name);\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _atomicUpsertUpdate(doc: any, json: any): Promise<any> {\n    return doc.atomicUpdate((innerDoc: any) => {\n        json._rev = innerDoc._rev;\n        innerDoc._data = json;\n        return innerDoc._data;\n    }).then(() => doc);\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _atomicUpsertEnsureRxDocumentExists(\n    rxCollection: RxCollection,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument,\n        inserted: boolean\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docFromCache = rxCollection._docCache.get(primary);\n    if (docFromCache) {\n        return Promise.resolve({\n            doc: docFromCache,\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        cacheReplacementPolicy = defaultCacheReplacementPolicy\n    }: any,\n    wasCreatedBefore: boolean\n): Promise<RxCollection> {\n    // TODO move this check to dev-mode plugin\n    if (overwritable.isDevMode()) {\n        Object.keys(methods)\n            .filter(funName => schema.topLevelFields.includes(funName))\n            .forEach(funName => {\n                throw newRxError('COL18', {\n                    funName\n                });\n            });\n    }\n\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstances(\n        name,\n        database,\n        storageInstanceCreationParams,\n        instanceCreationOptions\n    ).then(storageInstances => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstances.storageInstance,\n            storageInstances.localDocumentsStore,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics\n        );\n\n        return collection\n            .prepare(wasCreatedBefore)\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', collection);\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return Promise\n                    .all([\n                        storageInstances.storageInstance.close(),\n                        storageInstances.localDocumentsStore.close()\n                    ])\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"file":"rx-collection.js"}