{"version":3,"sources":["../../src/crypter.ts"],"names":["objectPath","clone","flatClone","pluginMissing","Crypter","password","schema","_encryptString","_value","_decryptString","encrypt","obj","attachments","_attachments","clonedObj","encryptedPaths","forEach","path","value","get","stringValue","JSON","stringify","encrypted","set","decrypt","decrypted","decryptedParsed","parse","createCrypter"],"mappings":"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","sourcesContent":["/**\n * handle the en/decryption of documents-data\n * TODO atm we have the crypter inside of rxdb core.\n * Instead all should be moved to the encryption plugin\n * and work via plugin hooks.\n */\n\nimport objectPath from 'object-path';\nimport {\n    clone,\n    flatClone,\n    pluginMissing\n} from './util';\n\nimport {\n    RxSchema\n} from './rx-schema';\n\nexport class Crypter {\n    constructor(\n        public password: any,\n        public schema: RxSchema\n    ) { }\n\n    /**\n     * encrypt a given string.\n     * @overwritten by plugin (optional)\n     */\n    public _encryptString(_value: string): string {\n        throw pluginMissing('encryption');\n    }\n\n    /**\n     * decrypt a given string.\n     * @overwritten by plugin (optional)\n     */\n    public _decryptString(_value: string): string {\n        throw pluginMissing('encryption');\n    }\n\n    encrypt(obj: any) {\n        if (!this.password) {\n            return obj;\n        }\n\n        obj = flatClone(obj);\n\n\n        /**\n         * Extract attachments because deep-cloning\n         * Buffer or Blob does not work\n         */\n        const attachments = obj._attachments;\n        delete obj._attachments;\n\n        const clonedObj = clone(obj);\n        if (attachments) {\n            clonedObj._attachments = attachments;\n        }\n\n        this.schema.encryptedPaths\n            .forEach(path => {\n                const value = objectPath.get(clonedObj, path);\n                if (typeof value === 'undefined') {\n                    return;\n                }\n\n                const stringValue = JSON.stringify(value);\n                const encrypted = this._encryptString(stringValue);\n                objectPath.set(clonedObj, path, encrypted);\n            });\n        return clonedObj;\n    }\n\n    decrypt(obj: any) {\n        if (!this.password) return obj;\n\n        obj = flatClone(obj);\n\n\n        /**\n         * Extract attachments because deep-cloning\n         * Buffer or Blob does not work\n         */\n        const attachments = obj._attachments;\n        delete obj._attachments;\n\n        const clonedObj = clone(obj);\n        if (attachments) {\n            clonedObj._attachments = attachments;\n        }\n\n        this.schema.encryptedPaths\n            .forEach(path => {\n                const value = objectPath.get(clonedObj, path);\n                if (typeof value === 'undefined') {\n                    return;\n                }\n                const decrypted = this._decryptString(value);\n                const decryptedParsed = JSON.parse(decrypted);\n                objectPath.set(clonedObj, path, decryptedParsed);\n            });\n        return clonedObj;\n    }\n}\n\nexport function createCrypter(password: any, schema: RxSchema): Crypter {\n    return new Crypter(password, schema);\n}\n"],"file":"crypter.js"}