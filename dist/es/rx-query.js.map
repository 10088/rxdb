{"version":3,"sources":["../../src/rx-query.ts"],"names":["deepEqual","merge","BehaviorSubject","firstValueFrom","mergeMap","filter","map","tap","sortObject","stringifyFilter","pluginMissing","clone","overwriteGetterForCaching","now","PROMISE_RESOLVE_FALSE","newRxError","newRxTypeError","runPluginHooks","createRxDocuments","calculateNewResults","triggerCacheReplacement","_handleToStorageInstance","_queryCount","newQueryID","RxQueryBase","op","mangoQuery","collection","id","_execOverDatabaseCount","_creationTime","_lastEnsureEqual","other","uncached","refCount$","_latestChangeEvent","_resultsData","_resultsDataMap","Map","_lastExecStart","_lastExecEnd","_resultsDocs$","_ensureEqualQueue","_getDefaultQuery","_setResultData","newResultData","docs","primPath","schema","primaryPath","doc","docData","_dataSync$","getValue","set","next","_execOverDatabase","docsPromise","_queryStorageInstance","name","then","exec","throwIfMissing","query","_ensureEqual","$","result","toString","stringObj","value","JSON","stringify","toJSON","hookInput","rxQuery","storageInstance","prepareQuery","doesDocumentDataMatch","_deleted","queryMatcher","remove","ret","Array","isArray","Promise","all","update","_updateObj","where","_queryObj","sort","_params","skip","_amount","limit","_$","results$","pipe","hasChanged","length","slice","asObservable","changeEvents$","getQueryMatcher","selector","tunnelQueryCache","_queryCache","getByQuery","createRxQuery","queryObj","_isResultsInSync","currentLatestEventNumber","asRxQuery","_changeEventBuffer","counter","database","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","cE","startTime","runChangeEvents","reduceByLastOfDoc","eventReduceResult","runFullQueryAgain","changed","newResults","latestAfter","isInstanceOf","obj"],"mappings":"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","sourcesContent":["import deepEqual from 'deep-equal';\nimport {\n    merge,\n    BehaviorSubject,\n    firstValueFrom\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    tap\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    stringifyFilter,\n    pluginMissing,\n    clone,\n    overwriteGetterForCaching,\n    now,\n    promiseWait,\n    PROMISE_RESOLVE_FALSE\n} from './util';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxChangeEvent\n} from './types';\n\nimport {\n    createRxDocuments\n} from './rx-document-prototype-merge';\nimport { calculateNewResults } from './event-reduce';\nimport { triggerCacheReplacement } from './query-cache';\nimport type { QueryMatcher } from 'event-reduce-js';\nimport { _handleToStorageInstance } from './rx-collection-helper';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocumentType = any,\n    // TODO also pass DocMethods here\n    RxQueryResult = RxDocument<RxDocumentType[]> | RxDocument<RxDocumentType>\n    > {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n    public _lastEnsureEqual = 0;\n\n    // used by some plugins\n    public other: any = {};\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery>,\n        public collection: RxCollection<RxDocumentType>\n    ) {\n        if (!mangoQuery) {\n            mangoQuery = _getDefaultQuery();\n        }\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n            /**\n             * We use _resultsDocs$ to emit new results\n             * This also ensures that there is a reemit on subscribe\n             */\n            const results$ = (this._resultsDocs$ as any)\n                .pipe(\n                    mergeMap((docs: any[]) => {\n                        return _ensureEqual(this as any)\n                            .then((hasChanged: any) => {\n                                if (hasChanged) {\n                                    // wait for next emit\n                                    return false;\n                                } else {\n                                    return docs;\n                                }\n                            });\n                    }),\n                    filter((docs: any[]) => !!docs), // not if previous returned false\n                    map((docs: any[]) => {\n                        if (this.op === 'findOne') {\n                            // findOne()-queries emit document or null\n                            const doc = docs.length === 0 ? null : docs[0];\n                            return doc;\n                        } else {\n                            // find()-queries emit RxDocument[]\n                            return docs;\n                        }\n                    }),\n                    map(docs => {\n                        // copy the array so it wont matter if the user modifies it\n                        const ret = Array.isArray(docs) ? docs.slice() : docs;\n                        return ret;\n                    })\n                ).asObservable();\n\n            /**\n             * subscribe to the changeEvent-stream so it detects changes if it has subscribers\n             */\n            const changeEvents$ = this.collection.$\n                .pipe(\n                    tap(() => _ensureEqual(this)),\n                    filter(() => false)\n                );\n\n            this._$ =\n                // tslint:disable-next-line\n                merge(\n                    results$,\n                    changeEvents$,\n                    this.refCount$.pipe(\n                        filter(() => false)\n                    )\n                ) as any;\n        }\n        return this._$ as any;\n    }\n\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // contains the results as plain json-data\n    public _resultsData: any = null;\n    public _resultsDataMap: Map<string, RxDocumentType> = new Map();\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    // contains the results as RxDocument[]\n    public _resultsDocs$: BehaviorSubject<any> = new BehaviorSubject(null);\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: BehaviorSubject<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from pouchdb\n     */\n    _setResultData(newResultData: any[]): RxDocument[] {\n        const docs = createRxDocuments(\n            this.collection,\n            newResultData\n        );\n\n        /**\n         * Instead of using the newResultData in the result cache,\n         * we directly use the objects that are stored in the RxDocument\n         * to ensure we do not store the same data twice and fill up the memory.\n         */\n        const primPath = this.collection.schema.primaryPath;\n        this._resultsDataMap = new Map();\n        this._resultsData = docs.map(doc => {\n            const docData: RxDocumentType = doc._dataSync$.getValue() as any;\n            const id: string = docData[primPath] as any;\n            this._resultsDataMap.set(id, docData);\n            return docData;\n        });\n\n\n        this._resultsDocs$.next(docs);\n        return docs as any;\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    _execOverDatabase(): Promise<any[]> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n        let docsPromise;\n        switch (this.op) {\n            case 'find':\n                docsPromise = this.collection._queryStorageInstance(this as any);\n                break;\n            case 'findOne':\n                docsPromise = this.collection._queryStorageInstance(this as any, 1);\n                break;\n            default:\n                throw newRxError('QU1', {\n                    collection: this.collection.name,\n                    op: this.op\n                });\n        }\n\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocumentType>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        // TODO this should be ensured by typescript\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of pouchdb,\n         * will be thrown at this execution context\n         */\n        return _ensureEqual(this)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentType> {\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            this.collection.storageInstance.getQueryMatcher(\n                this.toJSON()\n            )\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj, stringifyFilter);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value\n     * TODO rename this function, toJSON is missleading\n     * because we do not return the plain mango query object.\n     */\n    toJSON(): PreparedQuery<RxDocumentType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: clone(this.mangoQuery)\n        };\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = this.collection.storageInstance.prepareQuery(\n            hookInput.mangoQuery\n        );\n        this.toJSON = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     * // TODO this was moved to rx-storage\n     */\n    doesDocumentDataMatch(docData: RxDocumentType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(\n            _handleToStorageInstance(this.collection, docData)\n        );\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        let ret: any;\n        return this\n            .exec()\n            .then(docs => {\n                ret = docs;\n                if (Array.isArray(docs)) {\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            })\n            .then(() => ret);\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocumentType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocumentType> | keyof RxDocumentType | string): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocumentType>): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n}\n\nexport function _getDefaultQuery(): MangoQuery {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery(\n    op: RxQueryOP,\n    queryObj: MangoQuery,\n    collection: RxCollection\n) {\n    // checks\n    if (queryObj && typeof queryObj !== 'object') {\n        throw newRxTypeError('QU7', {\n            queryObj\n        });\n    }\n    if (Array.isArray(queryObj)) {\n        throw newRxTypeError('QU8', {\n            queryObj\n        });\n    }\n\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection\n    });\n\n    let ret = new RxQueryBase(op, queryObj, collection);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n\n    runPluginHooks('createRxQuery', ret);\n\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual(rxQuery: RxQueryBase): Promise<boolean> | boolean {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happend since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use the queryChangeDetector to calculate the new results\n     */\n    if (!mustReExec) {\n        let missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            /**\n             * because pouchdb prefers writes over reads,\n             * we have to filter out the events that happend before the read has started\n             * so that we do not fill event-reduce with the wrong data\n             */\n            missedChangeEvents = missedChangeEvents.filter((cE: RxChangeEvent<any>) => {\n                return !cE.startTime || cE.startTime > rxQuery._lastExecStart;\n            });\n\n            const runChangeEvents: RxChangeEvent<any>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            /*\n            console.log('calculateNewResults() ' + new Date().getTime());\n            console.log(rxQuery._lastExecStart + ' - ' + rxQuery._lastExecEnd);\n            console.dir(rxQuery._resultsData.slice());\n            console.dir(runChangeEvents);\n            */\n\n            const eventReduceResult = calculateNewResults(\n                rxQuery as any,\n                runChangeEvents\n            );\n\n            if (eventReduceResult.runFullQueryAgain) {\n                // could not calculate the new results, execute must be done\n                mustReExec = true;\n            } else if (eventReduceResult.changed) {\n                // we got the new results, we do not have to re-execute, mustReExec stays false\n                ret = true; // true because results changed\n                rxQuery._setResultData(eventReduceResult.newResults);\n            }\n        }\n    }\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        // counter can change while _execOverDatabase() is running so we save it here\n        const latestAfter: number = (rxQuery as any).collection._changeEventBuffer.counter;\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n                rxQuery._latestChangeEvent = latestAfter;\n                if (!deepEqual(newResultData, rxQuery._resultsData)) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData);\n                }\n                return ret;\n            });\n    }\n\n    return ret; // true if results have changed\n}\n\n\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"file":"rx-query.js"}