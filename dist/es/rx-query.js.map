{"version":3,"sources":["../../src/rx-query.ts"],"names":["deepEqual","merge","BehaviorSubject","firstValueFrom","mergeMap","filter","map","tap","shareReplay","sortObject","stringifyFilter","pluginMissing","clone","overwriteGetterForCaching","now","PROMISE_RESOLVE_FALSE","RXJS_SHARE_REPLAY_DEFAULTS","newRxError","newRxTypeError","runPluginHooks","createRxDocuments","calculateNewResults","triggerCacheReplacement","_handleToStorageInstance","_queryCount","newQueryID","RxQueryBase","op","mangoQuery","collection","id","_execOverDatabaseCount","_creationTime","_lastEnsureEqual","other","uncached","refCount$","_latestChangeEvent","_resultsData","_resultsDataMap","Map","_lastExecStart","_lastExecEnd","_resultsDocs$","_ensureEqualQueue","_getDefaultQuery","isFindOneByIdQuery","schema","primaryPath","_setResultData","newResultData","docs","primPath","doc","docData","_dataSync$","getValue","set","next","_execOverDatabase","docsPromise","_queryStorageInstance","name","then","exec","throwIfMissing","query","_ensureEqual","$","result","toString","stringObj","value","JSON","stringify","getPreparedQuery","hookInput","rxQuery","database","storage","statics","prepareQuery","storageInstance","doesDocumentDataMatch","_deleted","queryMatcher","remove","ret","Array","isArray","Promise","all","update","_updateObj","where","_queryObj","sort","_params","skip","_amount","limit","_$","results$","pipe","hasChanged","slice","length","asObservable","changeEvents$","getQueryMatcher","selector","tunnelQueryCache","_queryCache","getByQuery","createRxQuery","queryObj","_isResultsInSync","currentLatestEventNumber","asRxQuery","_changeEventBuffer","counter","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","eventReduceResult","runFullQueryAgain","changed","newResults","latestAfter","Object","keys","$eq","isInstanceOf","obj"],"mappings":"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","sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport {\n    merge,\n    BehaviorSubject,\n    firstValueFrom\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    tap,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    stringifyFilter,\n    pluginMissing,\n    clone,\n    overwriteGetterForCaching,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    RXJS_SHARE_REPLAY_DEFAULTS\n} from './util';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxChangeEvent,\n    RxDocumentWriteData\n} from './types';\n\nimport {\n    createRxDocuments\n} from './rx-document-prototype-merge';\nimport { calculateNewResults } from './event-reduce';\nimport { triggerCacheReplacement } from './query-cache';\nimport type { QueryMatcher } from 'event-reduce-js';\nimport { _handleToStorageInstance } from './rx-collection-helper';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocumentType = any,\n    // TODO also pass DocMethods here\n    RxQueryResult = RxDocument<RxDocumentType[]> | RxDocument<RxDocumentType>\n    > {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n    public _lastEnsureEqual = 0;\n\n    // used by some plugins\n    public other: any = {};\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string;\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery>,\n        public collection: RxCollection<RxDocumentType>\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n            /**\n             * We use _resultsDocs$ to emit new results\n             * This also ensures that there is a reemit on subscribe\n             */\n            const results$ = (this._resultsDocs$ as any)\n                .pipe(\n                    mergeMap((docs: any[]) => {\n                        return _ensureEqual(this as any)\n                            .then((hasChanged: any) => {\n                                if (hasChanged) {\n                                    // wait for next emit\n                                    return false;\n                                } else {\n                                    return docs;\n                                }\n                            });\n                    }),\n                    // not if previous returned false\n                    filter((docs: any[]) => !!docs),\n                    // copy the array so it wont matter if the user modifies it\n                    map((docs: any[]) => docs.slice(0)),\n                    map((docs: any[]) => {\n                        if (this.op === 'findOne') {\n                            // findOne()-queries emit document or null\n                            const doc = docs.length === 0 ? null : docs[0];\n                            return doc;\n                        } else {\n                            // find()-queries emit RxDocument[]\n                            return docs;\n                        }\n                    }),\n                    shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n                ).asObservable();\n\n            /**\n             * subscribe to the changeEvent-stream so it detects changes if it has subscribers\n             */\n            const changeEvents$ = this.collection.$\n                .pipe(\n                    tap(() => _ensureEqual(this)),\n                    filter(() => false)\n                );\n\n            this._$ =\n                // tslint:disable-next-line\n                merge(\n                    results$,\n                    changeEvents$,\n                    this.refCount$.pipe(\n                        filter(() => false)\n                    )\n                ) as any;\n        }\n        return this._$ as any;\n    }\n\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // contains the results as plain json-data\n    public _resultsData: any = null;\n    public _resultsDataMap: Map<string, RxDocumentType> = new Map();\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    // contains the results as RxDocument[]\n    public _resultsDocs$: BehaviorSubject<any> = new BehaviorSubject(null);\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: BehaviorSubject<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from pouchdb\n     */\n    _setResultData(newResultData: any[]): RxDocument[] {\n        const docs = createRxDocuments(\n            this.collection,\n            newResultData\n        );\n\n        /**\n         * Instead of using the newResultData in the result cache,\n         * we directly use the objects that are stored in the RxDocument\n         * to ensure we do not store the same data twice and fill up the memory.\n         */\n        const primPath = this.collection.schema.primaryPath;\n        this._resultsDataMap = new Map();\n        this._resultsData = docs.map(doc => {\n            const docData: RxDocumentType = doc._dataSync$.getValue() as any;\n            const id: string = docData[primPath] as any;\n            this._resultsDataMap.set(id, docData);\n            return docData;\n        });\n\n\n        this._resultsDocs$.next(docs);\n        return docs as any;\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    _execOverDatabase(): Promise<any[]> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n        let docsPromise;\n        switch (this.op) {\n            case 'find':\n                docsPromise = this.collection._queryStorageInstance(this as any);\n                break;\n            case 'findOne':\n                docsPromise = this.collection._queryStorageInstance(this as any, 1);\n                break;\n            default:\n                throw newRxError('QU1', {\n                    collection: this.collection.name,\n                    op: this.op\n                });\n        }\n\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocumentType>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        // TODO this should be ensured by typescript\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of pouchdb,\n         * will be thrown at this execution context\n         */\n        return _ensureEqual(this)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocumentType>> {\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            this.collection.database.storage.statics.getQueryMatcher(\n                this.collection.storageInstance.schema,\n                this.getPreparedQuery()\n            )\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj, stringifyFilter);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocumentType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: clone(this.mangoQuery)\n        };\n        runPluginHooks('prePrepareQuery', hookInput);\n        const value = this.collection.database.storage.statics.prepareQuery(\n            this.collection.storageInstance.schema,\n            hookInput.mangoQuery\n        );\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     * // TODO this was moved to rx-storage\n     */\n    doesDocumentDataMatch(docData: RxDocumentType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(\n            _handleToStorageInstance(this.collection, docData)\n        );\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        let ret: any;\n        return this\n            .exec()\n            .then(docs => {\n                ret = docs;\n                if (Array.isArray(docs)) {\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            })\n            .then(() => ret);\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocumentType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocumentType> | keyof RxDocumentType | string): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocumentType>): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n}\n\nexport function _getDefaultQuery(): MangoQuery {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery(\n    op: RxQueryOP,\n    queryObj: MangoQuery,\n    collection: RxCollection\n) {\n    // checks\n    if (queryObj && typeof queryObj !== 'object') {\n        throw newRxTypeError('QU7', {\n            queryObj\n        });\n    }\n    if (Array.isArray(queryObj)) {\n        throw newRxTypeError('QU8', {\n            queryObj\n        });\n    }\n\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection\n    });\n\n    let ret = new RxQueryBase(op, queryObj, collection);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n\n    runPluginHooks('createRxQuery', ret);\n\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual(rxQuery: RxQueryBase): Promise<boolean> | boolean {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happend since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use the queryChangeDetector to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            const runChangeEvents: RxChangeEvent<any>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            const eventReduceResult = calculateNewResults(\n                rxQuery as any,\n                runChangeEvents\n            );\n            if (eventReduceResult.runFullQueryAgain) {\n                // could not calculate the new results, execute must be done\n                mustReExec = true;\n            } else if (eventReduceResult.changed) {\n                // we got the new results, we do not have to re-execute, mustReExec stays false\n                ret = true; // true because results changed\n                rxQuery._setResultData(eventReduceResult.newResults);\n            }\n        }\n    }\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        // counter can change while _execOverDatabase() is running so we save it here\n        const latestAfter: number = (rxQuery as any).collection._changeEventBuffer.counter;\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n                rxQuery._latestChangeEvent = latestAfter;\n                if (!deepEqual(newResultData, rxQuery._resultsData)) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData);\n                }\n                return ret;\n            });\n    }\n\n    return ret; // true if results have changed\n}\n\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string {\n    if (\n        query.limit === 1 &&\n        !query.skip &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        if (typeof query.selector[primaryPath] === 'string') {\n            return query.selector[primaryPath];\n        } else if (\n            Object.keys(query.selector[primaryPath]).length === 1 &&\n            typeof query.selector[primaryPath].$eq === 'string'\n        ) {\n            return query.selector[primaryPath].$eq;\n        }\n    }\n    return false;\n}\n\n\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"file":"rx-query.js"}