{"version":3,"file":"rx-storage-message-channel.js","names":["filter","firstValueFrom","Subject","ensureNotFalsy","PROMISE_RESOLVE_VOID","randomCouchString","body","recover","result","e","then","RxStorageMessageChannel","settings","messageChannelByPort","WeakMap","requestIdSeed","lastRequestId","name","statics","getRequestId","newId","createStorageInstance","params","requestId","waitForOkPromise","messages$","pipe","msg","answerTo","send","isCreate","waitForOkResult","error","Error","toString","RxStorageInstanceMessageChannel","databaseName","collectionName","schema","connectionId","options","storage","internals","changes$","conflicts$","subs","closed","push","subscribe","method","next","requestRemote","methodName","responsePromise","message","response","bulkWrite","documentWrites","context","findDocumentsById","ids","deleted","query","preparedQuery","count","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","changeStream","asObservable","cleanup","minDeletedTime","close","forEach","sub","unsubscribe","complete","remove","conflictResultionTasks","resolveConflictResultionTask","taskSolution","getRxStorageMessageChannel","exposeRxStorageMessageChannel","instanceByFullName","Map","stateByPort","plainMsg","state","connectionIds","add","storageInstance","changes","conflicts","subMsg","plainMessage","size","closeBreakResponse","fullName","err","errorResponse","version","join","get","newRxStorageInstance","Set","set"],"sources":["../../src/rx-storage-message-channel.ts"],"sourcesContent":["/**\n * This file contains helpers\n * that are in use when the RxStorage run in another JavaScript process,\n * like electron ipcMain/Renderer, WebWorker and so on\n * where we communicate with the main process with the MessageChannel API.\n */\n\nimport {\n    filter,\n    firstValueFrom,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageStatics\n} from './types';\nimport {\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID,\n    randomCouchString\n} from './util';\n\nexport type RxStorageMessageFromRemote = {\n    connectionId: string;\n    answerTo: string; // id of the request\n    method: keyof RxStorageInstance<any, any, any> | 'createRxStorageInstance';\n    error?: any;\n    return?: any;\n};\n\nexport type RxStorageMessageToRemote = {\n    connectionId: string;\n    /**\n     * Unique ID of the request\n     */\n    requestId: string;\n    method: keyof RxStorageInstance<any, any, any>;\n    params: any[];\n};\n\nexport type RxStorageCreateConnectionMessage = {\n    isCreate: true;\n    requestId: string;\n    params: RxStorageInstanceCreationParams<any, any>;\n};\n\nexport type RxStorageMessageChannelInternals = {\n    params: RxStorageInstanceCreationParams<any, any>;\n    connectionId: string;\n};\n\nexport type CreateRemoteRxStorageMethod = (\n    port: MessagePort,\n    params: RxStorageInstanceCreationParams<any, any>\n) => void;\n\nexport type RxStorageMessageChannelSettings = {\n    name: string;\n    statics: RxStorageStatics;\n    send(msg: RxStorageMessageToRemote | RxStorageCreateConnectionMessage): void;\n    messages$: Observable<RxStorageMessageFromRemote>;\n};\n\nexport type RxMessageChannelExposeSettings = {\n    send(msg: RxStorageMessageFromRemote): void;\n    messages$: Observable<RxStorageMessageToRemote | RxStorageCreateConnectionMessage>;\n    /**\n     * The original storage\n     * which actually stores the data.\n     */\n    storage: RxStorage<any, any>;\n};\n\nexport class RxStorageMessageChannel implements RxStorage<RxStorageMessageChannelInternals, any> {\n    public readonly statics: RxStorageStatics;\n    public readonly name: string;\n    public readonly messageChannelByPort = new WeakMap<MessagePort, MessageChannel>();\n    private requestIdSeed: string = randomCouchString(10);\n    private lastRequestId: number = 0;\n    constructor(\n        public readonly settings: RxStorageMessageChannelSettings\n    ) {\n        this.name = settings.name;\n        this.statics = settings.statics;\n    }\n\n    public getRequestId() {\n        const newId = this.lastRequestId++;\n        return this.requestIdSeed + '|' + newId;\n    }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceMessageChannel<RxDocType>> {\n\n        const requestId = this.getRequestId();\n        const waitForOkPromise = firstValueFrom(this.settings.messages$.pipe(\n            filter(msg => msg.answerTo === requestId)\n        ));\n        this.settings.send({\n            isCreate: true,\n            requestId,\n            params\n        });\n\n        const waitForOkResult = await waitForOkPromise;\n        if (waitForOkResult.error) {\n            throw new Error('could not create instance ' + waitForOkResult.error.toString());\n        }\n        return new RxStorageInstanceMessageChannel(\n            this,\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                params,\n                connectionId: ensureNotFalsy(waitForOkResult.connectionId)\n            },\n            params.options\n        );\n    }\n}\n\nexport class RxStorageInstanceMessageChannel<RxDocType> implements RxStorageInstance<RxDocType, RxStorageMessageChannelInternals, any, any> {\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> = new Subject();\n    private conflicts$: Subject<RxConflictResultionTask<RxDocType>> = new Subject();\n    private subs: Subscription[] = [];\n\n    private closed: boolean = false;\n    messages$: Observable<RxStorageMessageFromRemote>;\n\n    constructor(\n        public readonly storage: RxStorageMessageChannel,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: RxStorageMessageChannelInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.messages$ = this.storage.settings.messages$.pipe(\n            filter(msg => msg.connectionId === this.internals.connectionId)\n        );\n        this.subs.push(\n            this.messages$.subscribe(msg => {\n                if (msg.method === 'changeStream') {\n                    this.changes$.next(msg.return);\n                }\n                if (msg.method === 'conflictResultionTasks') {\n                    this.conflicts$.next(msg.return);\n                }\n            })\n        );\n    }\n\n    private async requestRemote(\n        methodName: keyof RxStorageInstance<any, any, any>,\n        params: any\n    ) {\n        const requestId = this.storage.getRequestId();\n        const responsePromise = firstValueFrom(\n            this.messages$.pipe(\n                filter(msg => msg.answerTo === requestId)\n            )\n        );\n        const message: RxStorageMessageToRemote = {\n            connectionId: this.internals.connectionId,\n            requestId,\n            method: methodName,\n            params\n        };\n        this.storage.settings.send(message);\n        const response = await responsePromise;\n        if (response.error) {\n            throw new Error(response.error);\n        } else {\n            return response.return;\n        }\n    }\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.requestRemote('bulkWrite', [documentWrites, context]);\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        return this.requestRemote('findDocumentsById', [ids, deleted]);\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.requestRemote('query', [preparedQuery]);\n    }\n    count(preparedQuery: any): Promise<RxStorageCountResult> {\n        return this.requestRemote('count', [preparedQuery]);\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        return this.requestRemote('getAttachmentData', [documentId, attachmentId]);\n    }\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<\n        {\n            documents: RxDocumentData<RxDocType>[];\n            checkpoint: any;\n        }> {\n        return this.requestRemote('getChangedDocumentsSince', [limit, checkpoint]);\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number): Promise<boolean> {\n        return this.requestRemote('cleanup', [minDeletedTime]);\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return PROMISE_RESOLVE_VOID;\n        }\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.changes$.complete();\n        await this.requestRemote('close', []);\n    }\n    async remove(): Promise<void> {\n        await this.requestRemote('remove', []);\n        return this.close();\n    }\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.conflicts$;\n    }\n    async resolveConflictResultionTask(taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        await this.requestRemote('resolveConflictResultionTask', [taskSolution]);\n    }\n}\n\nexport function getRxStorageMessageChannel(settings: RxStorageMessageChannelSettings) {\n    return new RxStorageMessageChannel(settings);\n}\n\n/**\n * Run this on the 'remote' part,\n * so that RxStorageMessageChannel can connect to it.\n */\nexport function exposeRxStorageMessageChannel(settings: RxMessageChannelExposeSettings) {\n    type InstanceState = {\n        storageInstance: RxStorageInstance<any, any, any>;\n        connectionIds: Set<string>;\n        params: RxStorageInstanceCreationParams<any, any>;\n    };\n    const instanceByFullName: Map<string, InstanceState> = new Map();\n    const stateByPort: Map<MessagePort, {\n        subs: Subscription[];\n        state: InstanceState;\n    }> = new Map();\n\n\n\n    settings.messages$.pipe(\n        filter(msg => !!(msg as RxStorageCreateConnectionMessage).isCreate)\n    ).subscribe(async (plainMsg) => {\n        const msg: RxStorageCreateConnectionMessage = plainMsg as any;\n        const connectionId = randomCouchString(10);\n        const params = msg.params;\n        /**\n         * We de-duplicate the storage instances.\n         * This makes sense in many environments like\n         * electron where on main process contains the storage\n         * for multiple renderer processes. Same goes for SharedWorkers etc.\n         */\n        const fullName = [\n            params.databaseName,\n            params.collectionName,\n            params.schema.version\n        ].join('|');\n        let state = instanceByFullName.get(fullName);\n        if (!state) {\n            try {\n                const newRxStorageInstance = await settings.storage.createStorageInstance(params);\n                state = {\n                    storageInstance: newRxStorageInstance,\n                    connectionIds: new Set(),\n                    params\n                };\n                instanceByFullName.set(fullName, state);\n            } catch (err: any) {\n                settings.send({\n                    answerTo: msg.requestId,\n                    connectionId,\n                    method: 'createRxStorageInstance',\n                    error: err.toString()\n                });\n                return;\n            }\n        }\n        state.connectionIds.add(connectionId);\n        const subs: Subscription[] = [];\n        /**\n         * Automatically subscribe to the streams$\n         * because we always need them.\n         */\n        subs.push(\n            state.storageInstance.changeStream().subscribe(changes => {\n                const message: RxStorageMessageFromRemote = {\n                    connectionId,\n                    answerTo: 'changestream',\n                    method: 'changeStream',\n                    return: changes\n                };\n\n                settings.send(message);\n            })\n        );\n        subs.push(\n            state.storageInstance.conflictResultionTasks().subscribe(conflicts => {\n                const message: RxStorageMessageFromRemote = {\n                    connectionId,\n                    answerTo: 'conflictResultionTasks',\n                    method: 'conflictResultionTasks',\n                    return: conflicts\n                };\n                settings.send(message);\n            })\n        );\n        subs.push(\n            settings.messages$.pipe(\n                filter(subMsg => (subMsg as RxStorageMessageToRemote).connectionId === connectionId)\n            ).subscribe(async (plainMessage) => {\n                const message: RxStorageMessageToRemote = plainMessage as any;\n                let result;\n                try {\n                    /**\n                     * On calls to 'close()',\n                     * we only close the main instance if there are no other\n                     * ports connected.\n                     */\n                    if (\n                        message.method === 'close' &&\n                        ensureNotFalsy(state).connectionIds.size > 1\n                    ) {\n                        const closeBreakResponse: RxStorageMessageFromRemote = {\n                            connectionId,\n                            answerTo: message.requestId,\n                            method: message.method,\n                            return: null\n                        };\n                        settings.send(closeBreakResponse);\n                        ensureNotFalsy(state).connectionIds.delete(connectionId);\n                        subs.forEach(sub => sub.unsubscribe());\n                        return;\n                    }\n\n                    result = await (ensureNotFalsy(state).storageInstance as any)[message.method](...message.params);\n                    if (\n                        message.method === 'close' ||\n                        message.method === 'remove'\n                    ) {\n                        subs.forEach(sub => sub.unsubscribe());\n                        ensureNotFalsy(state).connectionIds.delete(connectionId);\n                        instanceByFullName.delete(fullName);\n                        /**\n                         * TODO how to notify the other ports on remove() ?\n                         */\n                    }\n                    const response: RxStorageMessageFromRemote = {\n                        connectionId,\n                        answerTo: message.requestId,\n                        method: message.method,\n                        return: result\n                    };\n                    settings.send(response);\n                } catch (err) {\n                    const errorResponse: RxStorageMessageFromRemote = {\n                        connectionId,\n                        answerTo: message.requestId,\n                        method: message.method,\n                        error: (err as any).toString()\n                    };\n                    settings.send(errorResponse);\n                }\n            })\n        );\n\n        settings.send({\n            answerTo: msg.requestId,\n            connectionId,\n            method: 'createRxStorageInstance'\n        });\n    });\n\n    return {\n        instanceByFullName,\n        stateByPort\n    };\n}\n"],"mappings":"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"}