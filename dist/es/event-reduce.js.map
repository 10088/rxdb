{"version":3,"sources":["../../src/event-reduce.ts"],"names":["calculateActionName","runAction","runPluginHooks","rxChangeEventToEventReduceChangeEvent","getSortFieldsOfQuery","primaryKey","query","sort","length","map","part","Object","keys","RXQUERY_QUERY_PARAMS_CACHE","WeakMap","getQueryParams","rxQuery","has","collection","queryJson","getPreparedQuery","schema","primaryPath","sortComparator","storageInstance","getSortComparator","useSortComparator","docA","docB","sortComparatorData","queryMatcher","getQueryMatcher","useQueryMatcher","doc","queryMatcherData","ret","skip","limit","sortFields","mangoQuery","set","get","calculateNewResults","rxChangeEvents","database","eventReduce","runFullQueryAgain","queryParams","previousResults","_resultsData","slice","previousResultsMap","_resultsDataMap","changed","foundNonOptimizeable","find","cE","eventReduceEvent","stateResolveFunctionInput","changeEvent","keyDocumentMap","actionName","newResults"],"mappings":"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","sourcesContent":["import {\n    ActionName,\n    calculateActionName,\n    runAction,\n    QueryParams,\n    QueryMatcher,\n    DeterministicSortComparator,\n    StateResolveFunctionInput,\n    getStateSet,\n    logStateSet,\n    StateResolveFunction,\n    UNKNOWN_VALUE\n} from 'event-reduce-js';\nimport type { RxQuery, MangoQuery, RxChangeEvent, RxDocumentWriteData } from './types';\nimport { runPluginHooks } from './hooks';\nimport { rxChangeEventToEventReduceChangeEvent } from './rx-change-event';\nimport objectPath from 'object-path';\nimport { newRxError } from './rx-error';\n\nexport type EventReduceResultNeg = {\n    runFullQueryAgain: true,\n};\nexport type EventReduceResultPos<RxDocumentType> = {\n    runFullQueryAgain: false,\n    changed: boolean,\n    newResults: RxDocumentType[];\n};\nexport type EventReduceResult<RxDocumentType> = EventReduceResultNeg | EventReduceResultPos<RxDocumentType>;\n\n\nexport function getSortFieldsOfQuery<RxDocType>(\n    primaryKey: keyof RxDocType,\n    query: MangoQuery<RxDocType>\n): (string | keyof RxDocType)[] {\n    if (!query.sort || query.sort.length === 0) {\n        return [primaryKey];\n    } else {\n        return query.sort.map(part => Object.keys(part)[0]);\n    }\n}\n\n\n\nexport const RXQUERY_QUERY_PARAMS_CACHE: WeakMap<RxQuery, QueryParams<any>> = new WeakMap();\nexport function getQueryParams<RxDocType>(\n    rxQuery: RxQuery<RxDocType>\n): QueryParams<RxDocType> {\n    if (!RXQUERY_QUERY_PARAMS_CACHE.has(rxQuery)) {\n        const collection = rxQuery.collection;\n        const queryJson: MangoQuery<RxDocType> = rxQuery.getPreparedQuery();\n        const primaryKey = collection.schema.primaryPath;\n\n        /**\n         * Create a custom sort comparator\n         * that uses the hooks to ensure\n         * we send for example compressed documents to be sorted by compressed queries.\n         */\n        const sortComparator = collection.storageInstance.getSortComparator(queryJson);\n        const useSortComparator: DeterministicSortComparator<RxDocType> = (docA: RxDocType, docB: RxDocType) => {\n            const sortComparatorData = {\n                docA,\n                docB,\n                rxQuery\n            };\n            runPluginHooks('preSortComparator', sortComparatorData);\n            return sortComparator(sortComparatorData.docA, sortComparatorData.docB);\n        };\n\n        /**\n         * Create a custom query matcher\n         * that uses the hooks to ensure\n         * we send for example compressed documents to match compressed queries.\n         */\n        const queryMatcher = collection.storageInstance.getQueryMatcher(queryJson);\n        const useQueryMatcher: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            const queryMatcherData = {\n                doc,\n                rxQuery\n            };\n            runPluginHooks('preQueryMatcher', queryMatcherData);\n\n            return queryMatcher(queryMatcherData.doc);\n        };\n\n        const ret: QueryParams<any> = {\n            primaryKey: rxQuery.collection.schema.primaryPath as any,\n            skip: queryJson.skip,\n            limit: queryJson.limit,\n            sortFields: getSortFieldsOfQuery(primaryKey, rxQuery.mangoQuery) as string[],\n            sortComparator: useSortComparator,\n            queryMatcher: useQueryMatcher\n        };\n        RXQUERY_QUERY_PARAMS_CACHE.set(rxQuery, ret);\n        return ret;\n    } else {\n        return RXQUERY_QUERY_PARAMS_CACHE.get(rxQuery) as QueryParams<RxDocType>;\n    }\n}\n\n\nexport function calculateNewResults<RxDocumentType>(\n    rxQuery: RxQuery<RxDocumentType>,\n    rxChangeEvents: RxChangeEvent<RxDocumentType>[]\n): EventReduceResult<RxDocumentType> {\n    if (!rxQuery.collection.database.eventReduce) {\n        return {\n            runFullQueryAgain: true\n        };\n    }\n    const queryParams = getQueryParams(rxQuery);\n    const previousResults: RxDocumentType[] = rxQuery._resultsData.slice();\n\n    const previousResultsMap: Map<string, RxDocumentType> = rxQuery._resultsDataMap;\n    let changed: boolean = false;\n\n    const foundNonOptimizeable = rxChangeEvents.find(cE => {\n        const eventReduceEvent = rxChangeEventToEventReduceChangeEvent(cE);\n\n        const stateResolveFunctionInput: StateResolveFunctionInput<RxDocumentType> = {\n            queryParams,\n            changeEvent: eventReduceEvent,\n            previousResults,\n            keyDocumentMap: previousResultsMap\n        }\n\n\n        /*\n        // use this to check if all states are calculated correctly\n        const stateSet = getStateSet(stateResolveFunctionInput);\n        console.dir(stateResolveFunctionInput);\n        console.log('state set:');\n        logStateSet(stateSet);\n        */\n\n        const actionName: ActionName = calculateActionName(stateResolveFunctionInput);\n        if (actionName === 'runFullQueryAgain') {\n            return true;\n        } else if (actionName !== 'doNothing') {\n            changed = true;\n            runAction(\n                actionName,\n                queryParams,\n                eventReduceEvent,\n                previousResults,\n                previousResultsMap\n            );\n            return false;\n        }\n    });\n    if (foundNonOptimizeable) {\n        return {\n            runFullQueryAgain: true,\n        };\n    } else {\n        return {\n            runFullQueryAgain: false,\n            changed,\n            newResults: previousResults\n        };\n    }\n}\n"],"file":"event-reduce.js"}