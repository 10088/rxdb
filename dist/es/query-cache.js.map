{"version":3,"sources":["../../src/query-cache.ts"],"names":["nextTick","now","requestIdlePromise","QueryCache","_map","Map","getByQuery","rxQuery","stringRep","toString","has","set","get","createQueryCache","uncacheRxQuery","queryCache","uncached","countRxQuerySubscribers","refCount$","observers","length","DEFAULT_TRY_TO_KEEP_MAX","DEFAULT_UNEXECUTED_LIFETME","defaultCacheReplacementPolicyMonad","tryToKeepMax","unExecutedLifetime","_collection","size","minUnExecutedLifetime","maybeUncash","queriesInCache","Array","from","values","_lastEnsureEqual","_creationTime","push","mustUncache","sortedByLastUsage","sort","a","b","toRemove","slice","forEach","defaultCacheReplacementPolicy","COLLECTIONS_WITH_RUNNING_CLEANUP","WeakSet","triggerCacheReplacement","rxCollection","add","then","destroyed","cacheReplacementPolicy","_queryCache"],"mappings":"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","sourcesContent":["/**\n * the query-cache makes sure that on every query-state, exactly one instance can exist\n * if you use the same mango-query more then once, it will reuse the first RxQuery\n */\nimport type {\n    RxQuery,\n    RxCacheReplacementPolicy,\n    RxCollection\n} from './types';\nimport {\n    nextTick,\n    now,\n    requestIdlePromise\n} from './util';\n\nexport class QueryCache {\n    public _map: Map<string, RxQuery> = new Map();\n\n    /**\n     * check if an equal query is in the cache,\n     * if true, return the cached one,\n     * if false, save the given one and return it\n     */\n    getByQuery(rxQuery: RxQuery): RxQuery {\n        const stringRep = rxQuery.toString();\n        if (!this._map.has(stringRep)) {\n            this._map.set(stringRep, rxQuery);\n        }\n        return this._map.get(stringRep) as RxQuery;\n    }\n}\n\nexport function createQueryCache() {\n    return new QueryCache();\n}\n\n\nexport function uncacheRxQuery(queryCache: QueryCache, rxQuery: RxQuery) {\n    rxQuery.uncached = true;\n    const stringRep = rxQuery.toString();\n    queryCache._map.delete(stringRep);\n\n}\n\n\nexport function countRxQuerySubscribers(rxQuery: RxQuery): number {\n    return rxQuery.refCount$.observers.length;\n}\n\n\nexport const DEFAULT_TRY_TO_KEEP_MAX = 100;\nexport const DEFAULT_UNEXECUTED_LIFETME = 30 * 1000;\n\n/**\n * The default cache replacement policy\n * See docs-src/query-cache.md to learn how it should work.\n * Notice that this runs often and should block the cpu as less as possible\n * This is a monad which makes it easier to unit test\n */\nexport const defaultCacheReplacementPolicyMonad: (\n    tryToKeepMax: number,\n    unExecutedLifetime: number\n) => RxCacheReplacementPolicy = (\n    tryToKeepMax,\n    unExecutedLifetime\n) => (\n    _collection: RxCollection,\n    queryCache: QueryCache\n) => {\n            if (queryCache._map.size < tryToKeepMax) {\n                return;\n            }\n\n            const minUnExecutedLifetime = now() - unExecutedLifetime;\n            const maybeUncash: RxQuery[] = [];\n\n            const queriesInCache = Array.from(queryCache._map.values());\n            for (const rxQuery of queriesInCache) {\n                // filter out queries with subscribers\n                if (countRxQuerySubscribers(rxQuery) > 0) {\n                    continue;\n                }\n                // directly uncache queries that never executed and are older then unExecutedLifetime\n                if (rxQuery._lastEnsureEqual === 0 && rxQuery._creationTime < minUnExecutedLifetime) {\n                    uncacheRxQuery(queryCache, rxQuery);\n                    continue;\n                }\n                maybeUncash.push(rxQuery);\n            }\n\n            const mustUncache = maybeUncash.length - tryToKeepMax;\n            if (mustUncache <= 0) {\n                return;\n            }\n\n            const sortedByLastUsage = maybeUncash.sort((a, b) => a._lastEnsureEqual - b._lastEnsureEqual);\n            const toRemove = sortedByLastUsage.slice(0, mustUncache);\n            toRemove.forEach(rxQuery => uncacheRxQuery(queryCache, rxQuery));\n        };\n\n\nexport const defaultCacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicyMonad(\n    DEFAULT_TRY_TO_KEEP_MAX,\n    DEFAULT_UNEXECUTED_LIFETME\n);\n\nexport const COLLECTIONS_WITH_RUNNING_CLEANUP: WeakSet<RxCollection> = new WeakSet();\n\n/**\n * Triggers the cache replacement policy after waitTime has passed.\n * We do not run this directly because at exactly the time a query is created,\n * we need all CPU to minimize latency.\n * Also this should not be triggered multiple times when waitTime is still waiting.\n */\nexport function triggerCacheReplacement(\n    rxCollection: RxCollection\n) {\n    if (COLLECTIONS_WITH_RUNNING_CLEANUP.has(rxCollection)) {\n        // already started\n        return;\n    }\n\n    COLLECTIONS_WITH_RUNNING_CLEANUP.add(rxCollection);\n\n    /**\n     * Do not run directly to not reduce result latency of a new query\n     */\n    nextTick() // wait at least one tick\n        .then(() => requestIdlePromise()) // and then wait for the CPU to be idle\n        .then(() => {\n            if (!rxCollection.destroyed) {\n                rxCollection.cacheReplacementPolicy(rxCollection, rxCollection._queryCache);\n            }\n            COLLECTIONS_WITH_RUNNING_CLEANUP.delete(rxCollection);\n        });\n}\n"],"file":"query-cache.js"}