{"version":3,"sources":["../../../../src/plugins/replication-graphql/query-builder-from-rx-schema.ts"],"names":["fillUpOptionals","SPACING","ucfirst","newRxError","pullQueryBuilderFromRxSchema","collectionName","input","batchSize","schema","prefixes","ucCollectionName","queryName","feed","outputFields","Object","keys","properties","filter","k","ignoreOutputKeys","includes","push","deletedFlag","builder","doc","queryKeys","feedKeys","map","key","subSchema","document","args","type","value","keyString","query","join","variables","pushQueryBuilderFromRxSchema","set","sendDoc","entries","forEach","v","ignoreInputKeys","_deleted"],"mappings":"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","sourcesContent":["import {\n    GraphQLSchemaFromRxSchemaInputSingleCollection,\n    fillUpOptionals,\n    Prefixes,\n    SPACING\n} from './graphql-schema-from-rx-schema';\nimport { ucfirst } from '../../util';\nimport { RxGraphQLReplicationQueryBuilder } from '../../types';\nimport { newRxError } from '../../rx-error';\n\nexport function pullQueryBuilderFromRxSchema(\n    collectionName: string,\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection,\n    batchSize: number = 5\n): RxGraphQLReplicationQueryBuilder {\n    input = fillUpOptionals(input);\n    const schema = input.schema;\n    const prefixes: Prefixes = input.prefixes as any;\n\n    const ucCollectionName = ucfirst(collectionName);\n    const queryName = prefixes.feed + ucCollectionName;\n\n    const outputFields = Object.keys(schema.properties).filter(k => !(input.ignoreOutputKeys as string[]).includes(k));\n    outputFields.push(input.deletedFlag);\n\n    const builder: RxGraphQLReplicationQueryBuilder = (doc: any) => {\n\n        const queryKeys = input.feedKeys.map(key => {\n            const subSchema: any = schema.properties[key];\n            if (!subSchema) {\n                throw newRxError('GQL1', {\n                    document: doc,\n                    schema,\n                    key,\n                    args: {\n                        feedKeys: input.feedKeys\n                    }\n                });\n            }\n            const type = subSchema.type;\n            const value = doc ? doc[key] : null;\n            let keyString = key + ': ';\n            if (type === 'number' || type === 'integer' || !value) {\n                keyString += value;\n            } else {\n                keyString += '\"' + value + '\"';\n            }\n            return keyString;\n        });\n        queryKeys.push('limit: ' + batchSize);\n\n        const query = '' +\n            '{\\n' +\n            SPACING + queryName + '(' + queryKeys.join(', ') + ') {\\n' +\n            SPACING + SPACING + outputFields.join('\\n' + SPACING + SPACING) + '\\n' +\n            SPACING + '}\\n' +\n            '}';\n        return {\n            query,\n            variables: {}\n        };\n    };\n\n    return builder;\n}\n\n\nexport function pushQueryBuilderFromRxSchema(\n    collectionName: string,\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection\n): RxGraphQLReplicationQueryBuilder {\n    input = fillUpOptionals(input);\n    const prefixes: Prefixes = input.prefixes as any;\n\n    const ucCollectionName = ucfirst(collectionName);\n    const queryName = prefixes.set + ucCollectionName;\n\n    const builder: RxGraphQLReplicationQueryBuilder = (doc: any) => {\n        const query = '' +\n            'mutation Set' + ucCollectionName + '($' + collectionName + ': ' + ucCollectionName + 'Input) {\\n' +\n            SPACING + queryName + '(' + collectionName + ': $' + collectionName + ') {\\n' +\n            SPACING + SPACING + input.deletedFlag + '\\n' + // GraphQL enforces to return at least one field\n            SPACING + '}\\n' +\n            '}';\n\n        const sendDoc: any = {};\n        Object.entries(doc).forEach(([k, v]) => {\n            if (\n                // skip if in ignoreInputKeys list\n                !(input.ignoreInputKeys as string[]).includes(k) &&\n                // only use properties that are in the schema\n                input.schema.properties[k]\n            ) {\n                sendDoc[k] = v;\n            }\n        });\n\n        // add deleted flag\n        sendDoc[input.deletedFlag] = !!doc._deleted;\n\n        const variables = {\n            [collectionName]: sendDoc\n        };\n        return {\n            query,\n            variables\n        };\n    };\n\n    return builder;\n}\n"],"file":"query-builder-from-rx-schema.js"}