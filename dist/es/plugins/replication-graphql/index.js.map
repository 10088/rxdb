{"version":3,"file":"index.js","names":["GraphQLClient","objectPath","ensureNotFalsy","fastUnsecureHash","GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","removeGraphQLWebSocketRef","getGraphQLWebSocket","Subject","RxGraphQLReplicationState","url","clientState","replicationIdentifierHash","collection","deletedField","pull","push","live","retryTime","autoStart","setHeaders","headers","client","http","credentials","setCredentials","syncGraphQL","waitForLeadership","mutateableClientState","pullStream$","replicationPrimitivesPull","pullBatchSize","batchSize","handler","lastPulledCheckpoint","queryBuilder","pullGraphQL","query","variables","result","docsData","data","documents","newCheckpoint","checkpoint","errors","dataPath","Object","keys","get","responseModifier","modifier","stream$","asObservable","replicationPrimitivesPush","rows","pushObj","graphqlReplicationState","ws","mustUseSocket","streamQueryBuilder","startBefore","start","bind","wsClient","on","next","subscribe","streamResponse","firstField","error","complete","cancelBefore","cancel","RxDBReplicationGraphQLPlugin","name","init","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with remote graphql endpoint\n */\n\nimport GraphQLClient from 'graphql-client';\nimport objectPath from 'object-path';\nimport {\n    ensureNotFalsy,\n    fastUnsecureHash\n} from '../../util';\n\nimport {\n    GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX\n} from './helper';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    RxPlugin,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    GraphQLServerUrl,\n    RxReplicationPullStreamItem\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    SyncOptionsGraphQL,\n    WithDeleted\n} from '../../index';\n\nimport {\n    removeGraphQLWebSocketRef,\n    getGraphQLWebSocket\n} from './graphql-websocket';\nimport { Subject } from 'rxjs';\n\nexport class RxGraphQLReplicationState<RxDocType, CheckpointType> extends RxReplicationState<RxDocType, CheckpointType> {\n    constructor(\n        public readonly url: GraphQLServerUrl,\n        public readonly clientState: { headers: any; client: any, credentials: string | undefined },\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            deletedField,\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n\n    setHeaders(headers: { [k: string]: string }): void {\n        this.clientState.headers = headers;\n        this.clientState.client = GraphQLClient({\n            url: this.url.http,\n            headers,\n            credentials: this.clientState.credentials\n        });\n    }\n\n    setCredentials(credentials: string | undefined) {\n        this.clientState.credentials = credentials\n        this.clientState.client = GraphQLClient({\n            url: this.url.http,\n            headers: this.clientState.headers,\n            credentials\n        });\n    }\n}\n\nexport function syncGraphQL<RxDocType, CheckpointType>(\n    this: RxCollection,\n    {\n        url,\n        headers = {},\n        credentials,\n        deletedField = '_deleted',\n        waitForLeadership = true,\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5, // in ms\n        autoStart = true,\n    }: SyncOptionsGraphQL<RxDocType, CheckpointType>\n): RxGraphQLReplicationState<RxDocType, CheckpointType> {\n    const collection = this;\n\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        headers,\n        credentials,\n        client: GraphQLClient({\n            url: url.http,\n            headers,\n            credentials\n        })\n    };\n\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CheckpointType> | undefined;\n    if (pull) {\n        const pullBatchSize = pull.batchSize ? pull.batchSize : 20;\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CheckpointType\n            ) {\n                const pullGraphQL = await pull.queryBuilder(lastPulledCheckpoint, pullBatchSize);\n                const result = await mutateableClientState.client.query(pullGraphQL.query, pullGraphQL.variables);\n                if (result.errors) {\n                    throw result.errors;\n                }\n\n                const dataPath = pull.dataPath || ['data', Object.keys(result.data)[0]];\n                let data: any = objectPath.get(result, dataPath);\n\n                if (pull.responseModifier) {\n                    data = await pull.responseModifier(\n                        data,\n                        'handler',\n                        lastPulledCheckpoint\n                    );\n                }\n\n                const docsData: WithDeleted<RxDocType>[] = data.documents;\n                const newCheckpoint = data.checkpoint;\n\n                return {\n                    documents: docsData,\n                    checkpoint: newCheckpoint\n                }\n            },\n            batchSize: pull.batchSize,\n            modifier: pull.modifier,\n            stream$: pullStream$.asObservable()\n        }\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const pushObj = await push.queryBuilder(rows);\n                const result = await mutateableClientState.client.query(pushObj.query, pushObj.variables);\n\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = Object.keys(result.data)[0];\n                const data: any = objectPath.get(result.data, dataPath);\n                return data;\n            },\n            batchSize: push.batchSize,\n            modifier: push.modifier\n        };\n    }\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        url,\n        mutateableClientState,\n        GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX + fastUnsecureHash(url.http ? url.http : url.ws as any),\n        collection,\n        deletedField,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        live,\n        retryTime,\n        autoStart\n    );\n\n    const mustUseSocket = url.ws &&\n        pull &&\n        pull.streamQueryBuilder &&\n        live;\n\n    const startBefore = graphqlReplicationState.start.bind(graphqlReplicationState);\n    graphqlReplicationState.start = () => {\n        if (mustUseSocket) {\n            const wsClient = getGraphQLWebSocket(ensureNotFalsy(url.ws));\n\n            wsClient.on('connected', () => {\n                pullStream$.next('RESYNC');\n            });\n\n            const query: any = ensureNotFalsy(pull.streamQueryBuilder)(mutateableClientState.headers);\n\n            wsClient.subscribe(\n                query,\n                {\n                    next: async (streamResponse: any) => {\n                        const firstField = Object.keys(streamResponse.data)[0];\n                        let data = streamResponse.data[firstField];\n                        if (pull.responseModifier) {\n                            data = await pull.responseModifier(\n                                data,\n                                'stream'\n                            );\n                        }\n                        pullStream$.next(data);\n                    },\n                    error: (error: any) => {\n                        pullStream$.error(error);\n                    },\n                    complete: () => {\n                        pullStream$.complete();\n                    }\n                });\n        }\n        return startBefore();\n    }\n\n    const cancelBefore = graphqlReplicationState.cancel.bind(graphqlReplicationState);\n    graphqlReplicationState.cancel = () => {\n        pullStream$.complete();\n        if (mustUseSocket) {\n            removeGraphQLWebSocketRef(ensureNotFalsy(url.ws));\n        }\n        return cancelBefore();\n    }\n\n    startReplicationOnLeaderShip(waitForLeadership, graphqlReplicationState);\n    return graphqlReplicationState;\n}\n\nexport * from './helper';\nexport * from './graphql-schema-from-rx-schema';\nexport * from './query-builder-from-rx-schema';\nexport * from './graphql-websocket';\n\nexport const RxDBReplicationGraphQLPlugin: RxPlugin = {\n    name: 'replication-graphql',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncGraphQL = syncGraphQL;\n        }\n    }\n};\n"],"mappings":"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"}