{"version":3,"file":"data-migrator.js","names":["Subject","deepEqual","clone","toPromise","flatClone","getHeightOfRevision","createRevision","PROMISE_RESOLVE_VOID","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_NULL","getDefaultRxDocumentMeta","createRxSchema","newRxError","runAsyncPluginHooks","runPluginHooks","getPreviousVersions","getMigrationStateByDatabase","map","getAllDocuments","getWrappedStorageInstance","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","_migrateDocuments","oldCollection","documentsData","Promise","all","docData","migrateDocumentData","migratedDocuments","actions","action","bulkDeleteInputData","writeDeleted","_deleted","_attachments","_rev","previous","document","length","storageInstance","bulkWrite","bulkWriteToStorageInput","forEach","idx","migratedDocData","res","type","migrated","doc","newestCollection","push","isDocumentDataWithoutRevisionEqual","newHeight","newRevision","attachmentsBefore","saveData","_getOldCollections","dataMigrator","getOldCollectionDocs","oldColDocs","colDoc","createOldCollection","data","schema","version","filter","schemaObj","database","storageInstanceCreationParams","databaseInstanceToken","token","databaseName","name","collectionName","options","instanceCreationOptions","multiInstance","storage","createStorageInstance","ret","DataMigrator","migrationStrategies","_migrated","nonMigratedOldCollections","allOldCollections","currentSchema","migrate","batchSize","state","done","total","handled","success","deleted","percent","stateSubject","allSubject","allList","getValue","slice","asObservable","next","then","countAll","oldCol","primaryPath","allDocs","totalCount","reduce","cur","prev","collection","currentCol","shift","currentPromise","migrationState$","migrateOldCollection","sub","subscribe","subState","Math","round","error","e","unsubscribe","c","close","complete","pipe","withCollection","migratePromise","_migratePromise","mustMigrate","must","rej","state$","err","collectionDocKeys","jsonSchema","internalStore","findDocumentsById","key","docsObj","Object","values","runStrategyIfNotNull","docOrNull","retPromise","getBatchOfOldCollection","preparedQuery","statics","prepareQuery","selector","sort","limit","skip","query","result","documents","mutateableDocData","nextVersion","resolve","_meta","validate","asRxError","fromVersion","toVersion","originalDoc","finalDoc","errors","parameters","doc1","doc2","doc1NoRev","assign","undefined","doc2NoRev","deleteOldCollection","remove","removeCollectionDoc","_migrate","observer","allBatchesDone","handleOneBatch","batch"],"sources":["../../../../src/plugins/migration/data-migrator.ts"],"sourcesContent":["/**\n * The DataMigrator handles the documents from collections with older schemas\n * and transforms/saves them into the newest collection\n */\n/**\n * TODO this should be completely rewritten because:\n * - This could have been done in much less code which would be easier to uderstand\n *\n */\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport deepEqual from 'fast-deep-equal';\nimport {\n    clone,\n    toPromise,\n    flatClone,\n    getHeightOfRevision,\n    createRevision,\n    PROMISE_RESOLVE_VOID,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_NULL,\n    getDefaultRxDocumentMeta\n} from '../../util';\nimport {\n    createRxSchema\n} from '../../rx-schema';\nimport {\n    RxError,\n    newRxError\n} from '../../rx-error';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from '../../hooks';\nimport type {\n    RxCollection,\n    RxDatabase,\n    MigrationState,\n    NumberFunctionMap,\n    OldRxCollection,\n    WithAttachmentsData,\n    RxJsonSchema,\n    RxDocumentData,\n    RxStorageInstanceCreationParams,\n    InternalStoreCollectionDocType\n} from '../../types';\nimport {\n    RxSchema,\n    getPreviousVersions\n} from '../../rx-schema';\nimport {\n    getMigrationStateByDatabase,\n    MigrationStateWithCollection\n} from './migration-state';\nimport { map } from 'rxjs/operators';\nimport {\n    getAllDocuments,\n    getWrappedStorageInstance\n} from '../../rx-storage-helper';\nimport {\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION\n} from '../../rx-database-internal-store';\n\nexport class DataMigrator {\n\n    constructor(\n        public newestCollection: RxCollection,\n        public migrationStrategies: NumberFunctionMap\n    ) {\n        this.currentSchema = newestCollection.schema;\n        this.database = newestCollection.database;\n        this.name = newestCollection.name;\n    }\n\n    public currentSchema: RxSchema;\n    public database: RxDatabase;\n    public name: string;\n\n\n    private _migrated: boolean = false;\n    private _migratePromise?: Promise<any>;\n    private nonMigratedOldCollections: OldRxCollection[] = [];\n    private allOldCollections: OldRxCollection[] = [];\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        if (this._migrated) {\n            throw newRxError('DM1');\n        }\n        this._migrated = true;\n\n        const state = {\n            done: false, // true if finished\n            total: 0, // will be the doc-count\n            handled: 0, // amount of handled docs\n            success: 0, // handled docs which successed\n            deleted: 0, // handled docs which got deleted\n            percent: 0 // percentage\n        };\n\n        const stateSubject: Subject<MigrationStateWithCollection> = new Subject();\n\n        /**\n         * Add to output of RxDatabase.migrationStates\n         */\n        const allSubject = getMigrationStateByDatabase(this.newestCollection.database);\n        const allList = allSubject.getValue().slice(0);\n        allList.push(stateSubject.asObservable());\n        allSubject.next(allList);\n\n        /**\n         * TODO this is a side-effect which might throw\n         * We did this because it is not possible to create new Observer(async(...))\n         * @link https://github.com/ReactiveX/rxjs/issues/4074\n         * In the future the whole migration plugin should be rewritten without rxjs\n         * so we do not have this problem.\n         */\n        (() => {\n            return _getOldCollections(this)\n                .then(ret => {\n                    this.nonMigratedOldCollections = ret;\n                    this.allOldCollections = this.nonMigratedOldCollections.slice(0);\n                    const countAll: Promise<number[]> = Promise.all(\n                        this.nonMigratedOldCollections\n                            .map(oldCol => getAllDocuments(\n                                oldCol.schema.primaryPath,\n                                oldCol.storageInstance\n                            ).then(allDocs => allDocs.length))\n                    );\n                    return countAll;\n                })\n                .then(countAll => {\n                    const totalCount: number = countAll\n                        .reduce((cur, prev) => prev = cur + prev, 0);\n                    state.total = totalCount;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    let currentCol = this.nonMigratedOldCollections.shift();\n                    let currentPromise = PROMISE_RESOLVE_VOID;\n                    while (currentCol) {\n                        const migrationState$ = migrateOldCollection(\n                            currentCol,\n                            batchSize\n                        );\n                        currentPromise = currentPromise.then(() => {\n                            return new Promise(res => {\n                                const sub = migrationState$.subscribe({\n                                    next: (subState: any) => {\n                                        state.handled++;\n                                        (state as any)[subState.type] = (state as any)[subState.type] + 1;\n                                        state.percent = Math.round(state.handled / state.total * 100);\n                                        stateSubject.next({\n                                            collection: this.newestCollection,\n                                            state: flatClone(state)\n                                        });\n                                    },\n                                    error: (e: any) => {\n                                        sub.unsubscribe();\n                                        // TODO we should not have to catch here.\n                                        this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                                        stateSubject.error(e);\n                                    },\n                                    complete: () => {\n                                        if (currentCol) {\n                                            // TODO we should not have to catch here.\n                                            currentCol.storageInstance.close().catch(() => { });\n                                        }\n                                        sub.unsubscribe();\n                                        res();\n                                    }\n                                });\n                            });\n                        });\n                        currentCol = this.nonMigratedOldCollections.shift();\n                    }\n                    return currentPromise;\n                })\n                .then(() => {\n                    state.done = true;\n                    state.percent = 100;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    stateSubject.complete();\n                });\n        })();\n\n\n        return stateSubject.pipe(\n            map(withCollection => withCollection.state)\n        );\n    }\n\n    migratePromise(batchSize: number): Promise<any> {\n        if (!this._migratePromise) {\n            this._migratePromise = mustMigrate(this)\n                .then(must => {\n                    if (!must) {\n                        return PROMISE_RESOLVE_FALSE;\n                    } else {\n                        return new Promise((res, rej) => {\n                            const state$ = this.migrate(batchSize);\n                            (state$ as any).subscribe(null, rej, res);\n                            this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                        })\n                            .catch(err => {\n                                this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                                throw err;\n                            });\n                    }\n                });\n        }\n        return this._migratePromise;\n    }\n}\n\nexport async function createOldCollection(\n    version: number,\n    schemaObj: RxJsonSchema<any>,\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection> {\n    const database = dataMigrator.newestCollection.database;\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: dataMigrator.newestCollection.name,\n        schema: schemaObj,\n        options: dataMigrator.newestCollection.instanceCreationOptions,\n        multiInstance: database.multiInstance\n    };\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    const storageInstance = await database.storage.createStorageInstance(\n        storageInstanceCreationParams\n    );\n    const ret: OldRxCollection = {\n        version,\n        dataMigrator,\n        newestCollection: dataMigrator.newestCollection,\n        database,\n        schema: createRxSchema(schemaObj, false),\n        storageInstance\n    };\n\n    ret.storageInstance = getWrappedStorageInstance(\n        ret.database,\n        storageInstance,\n        schemaObj\n    );\n\n    return ret;\n}\n\n\nexport function getOldCollectionDocs(\n    dataMigrator: DataMigrator\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n\n    const collectionDocKeys = getPreviousVersions(dataMigrator.currentSchema.jsonSchema)\n        .map(version => dataMigrator.name + '-' + version);\n\n    return dataMigrator.database.internalStore.findDocumentsById(\n        collectionDocKeys.map(key => getPrimaryKeyOfInternalDocument(\n            key,\n            INTERNAL_CONTEXT_COLLECTION\n        )),\n        false\n    ).then(docsObj => Object.values(docsObj));\n}\n\n/**\n * get an array with OldCollection-instances from all existing old storage-instances\n */\nexport async function _getOldCollections(\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection[]> {\n    const oldColDocs = await getOldCollectionDocs(dataMigrator);\n\n    return Promise.all(\n        oldColDocs\n            .map(colDoc => {\n                if (!colDoc) {\n                    return null as any;\n                }\n                return createOldCollection(\n                    colDoc.data.schema.version,\n                    colDoc.data.schema,\n                    dataMigrator\n                );\n            })\n            .filter(colDoc => colDoc !== null)\n    );\n}\n\n\n/**\n * returns true if a migration is needed\n */\nexport function mustMigrate(dataMigrator: DataMigrator): Promise<boolean> {\n    if (dataMigrator.currentSchema.version === 0) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    return getOldCollectionDocs(dataMigrator)\n        .then(oldColDocs => {\n            if (oldColDocs.length === 0) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n}\n\nexport function runStrategyIfNotNull(\n    oldCollection: OldRxCollection,\n    version: number,\n    docOrNull: any | null\n): Promise<any | null> {\n    if (docOrNull === null) {\n        return PROMISE_RESOLVE_NULL;\n    } else {\n        const ret = oldCollection.dataMigrator.migrationStrategies[version](docOrNull, oldCollection);\n        const retPromise = toPromise(ret);\n        return retPromise;\n    }\n}\n\nexport function getBatchOfOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize: number\n): Promise<any[]> {\n    const storage = oldCollection.database.storage;\n    const storageInstance = oldCollection.storageInstance;\n    const preparedQuery = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [oldCollection.schema.primaryPath]: 'asc' } as any],\n            limit: batchSize,\n            skip: 0\n        }\n    );\n\n    return storageInstance\n        .query(preparedQuery)\n        .then(result => result.documents\n            .map(doc => {\n                doc = flatClone(doc);\n                return doc;\n            })\n        );\n}\n\n/**\n * runs the doc-data through all following migrationStrategies\n * so it will match the newest schema.\n * @throws Error if final doc does not match final schema or migrationStrategy crashes\n * @return final object or null if migrationStrategy deleted it\n */\nexport function migrateDocumentData(\n    oldCollection: OldRxCollection,\n    docData: any\n): Promise<any | null> {\n    /**\n     * We cannot deep-clone Blob or Buffer\n     * so we just flat clone it here\n     * and attach it to the deep cloned document data.\n     */\n    const attachmentsBefore = flatClone(docData._attachments);\n    const mutateableDocData = clone(docData);\n    mutateableDocData._attachments = attachmentsBefore;\n\n    let nextVersion = oldCollection.version + 1;\n\n    // run the document throught migrationStrategies\n    let currentPromise = Promise.resolve(mutateableDocData);\n    while (nextVersion <= oldCollection.newestCollection.schema.version) {\n        const version = nextVersion;\n        currentPromise = currentPromise.then(docOrNull => runStrategyIfNotNull(\n            oldCollection,\n            version,\n            docOrNull\n        ));\n        nextVersion++;\n    }\n\n    return currentPromise.then(doc => {\n        if (doc === null) {\n            return PROMISE_RESOLVE_NULL;\n        }\n\n        /**\n         * Add _meta field if missing.\n         * We need this to migration documents from pre-12.0.0 state\n         * to version 12.0.0. Therefore we need to add the _meta field if it is missing.\n         * TODO remove this in the major version 13.0.0 \n         */\n        if (!doc._meta) {\n            doc._meta = getDefaultRxDocumentMeta();\n        }\n\n        // check final schema\n        try {\n            oldCollection.newestCollection.schema.validate(doc);\n        } catch (err) {\n            const asRxError: RxError = err as any;\n            throw newRxError('DM2', {\n                fromVersion: oldCollection.version,\n                toVersion: oldCollection.newestCollection.schema.version,\n                originalDoc: docData,\n                finalDoc: doc,\n                /**\n                 * pass down data from parent error,\n                 * to make it better understandable what did not work\n                 */\n                errors: asRxError.parameters.errors,\n                schema: asRxError.parameters.schema\n            });\n        }\n        return doc;\n    });\n}\n\n\nexport function isDocumentDataWithoutRevisionEqual<T>(doc1: T, doc2: T): boolean {\n    const doc1NoRev = Object.assign({}, doc1, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    const doc2NoRev = Object.assign({}, doc2, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    return deepEqual(doc1NoRev, doc2NoRev);\n}\n\n/**\n * transform documents data and save them to the new collection\n * @return status-action with status and migrated document\n */\nexport async function _migrateDocuments(\n    oldCollection: OldRxCollection,\n    documentsData: any[]\n): Promise<{ type: string, doc: any }[]> {\n\n    // run hooks that might mutate documentsData\n    await Promise.all(\n        documentsData.map(docData => runAsyncPluginHooks(\n            'preMigrateDocument',\n            {\n                docData,\n                oldCollection\n            }\n        ))\n    );\n    // run the migration strategies on each document\n    const migratedDocuments: (any | null)[] = await Promise.all(\n        documentsData.map(docData => migrateDocumentData(oldCollection, docData))\n    );\n\n\n    const bulkWriteToStorageInput: RxDocumentData<any>[] = [];\n    const actions: any[] = [];\n\n    documentsData.forEach((docData, idx) => {\n        const migratedDocData: any | null = migratedDocuments[idx];\n        const action = {\n            res: null as any,\n            type: '',\n            migrated: migratedDocData,\n            doc: docData,\n            oldCollection,\n            newestCollection: oldCollection.newestCollection\n        };\n        actions.push(action);\n\n        /**\n         * Determiniticly handle the revision\n         * so migrating the same data on multiple instances\n         * will result in the same output.\n         */\n        if (isDocumentDataWithoutRevisionEqual(docData, migratedDocData)) {\n            /**\n             * Data not changed by migration strategies, keep the same revision.\n             * This ensures that other replicated instances that did not migrate already\n             * will still have the same document.\n             */\n            migratedDocData._rev = docData._rev;\n        } else if (migratedDocData !== null) {\n            /**\n             * data changed, increase revision height\n             * so replicating instances use our new document data\n             */\n            const newHeight = getHeightOfRevision(docData._rev) + 1;\n            const newRevision = newHeight + '-' + createRevision(migratedDocData);\n            migratedDocData._rev = newRevision;\n        }\n\n\n        if (migratedDocData) {\n            /**\n             * save to newest collection\n             * notice that this data also contains the attachments data\n             */\n            const attachmentsBefore = migratedDocData._attachments;\n            const saveData: WithAttachmentsData<any> = migratedDocData;\n            saveData._attachments = attachmentsBefore;\n            bulkWriteToStorageInput.push(saveData);\n            action.res = saveData;\n            action.type = 'success';\n        } else {\n            /**\n             * Migration strategy returned null\n             * which means we should not migrate this document,\n             * just drop it.\n             */\n            action.type = 'deleted';\n        }\n    });\n\n    /**\n     * Write the documents to the newest collection.\n     * We need to add as revision\n     * because we provide the _rev by our own\n     * to have deterministic revisions in case the migration\n     * runs on multiple nodes which must lead to the equal storage state.\n     */\n    if (bulkWriteToStorageInput.length) {\n        await oldCollection.newestCollection.storageInstance.bulkWrite(\n            bulkWriteToStorageInput.map(document => ({ document })),\n            'data-migrator-import'\n        );\n    }\n\n    // run hooks\n    await Promise.all(\n        actions.map(action => runAsyncPluginHooks(\n            'postMigrateDocument',\n            action\n        ))\n    );\n\n    // remove the documents from the old collection storage instance\n    const bulkDeleteInputData = documentsData.map(docData => {\n        const writeDeleted = flatClone(docData);\n        writeDeleted._deleted = true;\n        writeDeleted._attachments = {};\n        writeDeleted._rev = createRevision(writeDeleted, docData);\n        return {\n            previous: docData,\n            document: writeDeleted\n        };\n    });\n\n    if (bulkDeleteInputData.length) {\n        await oldCollection.storageInstance.bulkWrite(\n            bulkDeleteInputData,\n            'data-migrator-delete'\n        );\n    }\n\n    return actions;\n}\n\n\n/**\n * deletes this.storageInstance and removes it from the database.collectionsCollection\n */\nexport function deleteOldCollection(\n    oldCollection: OldRxCollection\n): Promise<void> {\n    return oldCollection.storageInstance.remove()\n        .then(\n            () => oldCollection.database.removeCollectionDoc(\n                oldCollection.dataMigrator.name,\n                oldCollection.schema\n            )\n        );\n}\n\n/**\n * runs the migration on all documents and deletes the storage instance afterwards\n */\nexport function migrateOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize = 10\n): Observable<any> {\n    if (oldCollection._migrate) {\n        // already running\n        throw newRxError('DM3');\n    }\n    oldCollection._migrate = true;\n\n    const observer = new Subject();\n\n    /**\n     * TODO this is a side-effect which might throw\n     * @see DataMigrator.migrate()\n     */\n    (() => {\n        let error: any;\n        const allBatchesDone = () => {\n            // remove this oldCollection\n            return deleteOldCollection(oldCollection)\n                .then(() => observer.complete());\n        };\n        const handleOneBatch = () => {\n            return getBatchOfOldCollection(oldCollection, batchSize)\n                .then(batch => {\n                    if (batch.length === 0) {\n                        allBatchesDone();\n                        return false;\n                    } else {\n                        return _migrateDocuments(oldCollection, batch)\n                            .then((actions: any[]) => actions.forEach(action => observer.next(action)))\n                            .catch(e => error = e)\n                            .then(() => true);\n                    }\n                })\n                .then(next => {\n                    if (!next) {\n                        return;\n                    }\n                    if (error) {\n                        observer.error(error);\n                    } else {\n                        handleOneBatch();\n                    }\n                });\n        };\n        handleOneBatch();\n    })();\n\n    return observer.asObservable();\n}\n\nexport function migratePromise(\n    oldCollection: OldRxCollection,\n    batchSize?: number\n): Promise<any> {\n    if (!oldCollection._migratePromise) {\n        oldCollection._migratePromise = new Promise((res, rej) => {\n            const state$ = migrateOldCollection(oldCollection, batchSize);\n            (state$ as any).subscribe(null, rej, res);\n        });\n    }\n    return oldCollection._migratePromise;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,OADJ,QAGO,MAHP;AAIA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SACIC,KADJ,EAEIC,SAFJ,EAGIC,SAHJ,EAIIC,mBAJJ,EAKIC,cALJ,EAMIC,oBANJ,EAOIC,qBAPJ,EAQIC,oBARJ,EASIC,wBATJ,QAUO,YAVP;AAWA,SACIC,cADJ,QAEO,iBAFP;AAGA,SAEIC,UAFJ,QAGO,gBAHP;AAIA,SACIC,mBADJ,EAEIC,cAFJ,QAGO,aAHP;AAgBA,SAEIC,mBAFJ,QAGO,iBAHP;AAIA,SACIC,2BADJ,QAGO,mBAHP;AAIA,SAASC,GAAT,QAAoB,gBAApB;AACA,SACIC,eADJ,EAEIC,yBAFJ,QAGO,yBAHP;AAIA,SACIC,+BADJ,EAEIC,2BAFJ,QAGO,kCAHP;;AA6XA;AACA;AACA;AACA;AACA,WAAsBC,iBAAtB,YAAsBA,iBAAtB,CACIC,aADJ,EAEIC,aAFJ;EAAA,IAGyC;IAErC;IAFqC,uBAG/BC,OAAO,CAACC,GAAR,CACFF,aAAa,CAACP,GAAd,CAAkB,UAAAU,OAAO;MAAA,OAAId,mBAAmB,CAC5C,oBAD4C,EAE5C;QACIc,OAAO,EAAPA,OADJ;QAEIJ,aAAa,EAAbA;MAFJ,CAF4C,CAAvB;IAAA,CAAzB,CADE,CAH+B;MAYrC;MAZqC,uBAaWE,OAAO,CAACC,GAAR,CAC5CF,aAAa,CAACP,GAAd,CAAkB,UAAAU,OAAO;QAAA,OAAIC,mBAAmB,CAACL,aAAD,EAAgBI,OAAhB,CAAvB;MAAA,CAAzB,CAD4C,CAbX,iBAa/BE,iBAb+B;QAAA;UA2FrC;UA3FqC,uBA4F/BJ,OAAO,CAACC,GAAR,CACFI,OAAO,CAACb,GAAR,CAAY,UAAAc,MAAM;YAAA,OAAIlB,mBAAmB,CACrC,qBADqC,EAErCkB,MAFqC,CAAvB;UAAA,CAAlB,CADE,CA5F+B;YAmGrC;YACA,IAAMC,mBAAmB,GAAGR,aAAa,CAACP,GAAd,CAAkB,UAAAU,OAAO,EAAI;cACrD,IAAMM,YAAY,GAAG7B,SAAS,CAACuB,OAAD,CAA9B;cACAM,YAAY,CAACC,QAAb,GAAwB,IAAxB;cACAD,YAAY,CAACE,YAAb,GAA4B,EAA5B;cACAF,YAAY,CAACG,IAAb,GAAoB9B,cAAc,CAAC2B,YAAD,EAAeN,OAAf,CAAlC;cACA,OAAO;gBACHU,QAAQ,EAAEV,OADP;gBAEHW,QAAQ,EAAEL;cAFP,CAAP;YAIH,CAT2B,CAA5B;;YApGqC;cAAA,IA+GjCD,mBAAmB,CAACO,MA/Ga;gBAAA,uBAgH3BhB,aAAa,CAACiB,eAAd,CAA8BC,SAA9B,CACFT,mBADE,EAEF,sBAFE,CAhH2B;cAAA;YAAA;;YAAA;cAsHrC,OAAOF,OAAP;YAtHqC,KAsH9BA,OAtH8B;UAAA;QAAA;;QAkBrC,IAAMY,uBAA8C,GAAG,EAAvD;QACA,IAAMZ,OAAc,GAAG,EAAvB;QAEAN,aAAa,CAACmB,OAAd,CAAsB,UAAChB,OAAD,EAAUiB,GAAV,EAAkB;UACpC,IAAMC,eAA2B,GAAGhB,iBAAiB,CAACe,GAAD,CAArD;UACA,IAAMb,MAAM,GAAG;YACXe,GAAG,EAAE,IADM;YAEXC,IAAI,EAAE,EAFK;YAGXC,QAAQ,EAAEH,eAHC;YAIXI,GAAG,EAAEtB,OAJM;YAKXJ,aAAa,EAAbA,aALW;YAMX2B,gBAAgB,EAAE3B,aAAa,CAAC2B;UANrB,CAAf;UAQApB,OAAO,CAACqB,IAAR,CAAapB,MAAb;UAEA;AACR;AACA;AACA;AACA;;UACQ,IAAIqB,kCAAkC,CAACzB,OAAD,EAAUkB,eAAV,CAAtC,EAAkE;YAC9D;AACZ;AACA;AACA;AACA;YACYA,eAAe,CAACT,IAAhB,GAAuBT,OAAO,CAACS,IAA/B;UACH,CAPD,MAOO,IAAIS,eAAe,KAAK,IAAxB,EAA8B;YACjC;AACZ;AACA;AACA;YACY,IAAMQ,SAAS,GAAGhD,mBAAmB,CAACsB,OAAO,CAACS,IAAT,CAAnB,GAAoC,CAAtD;YACA,IAAMkB,WAAW,GAAGD,SAAS,GAAG,GAAZ,GAAkB/C,cAAc,CAACuC,eAAD,CAApD;YACAA,eAAe,CAACT,IAAhB,GAAuBkB,WAAvB;UACH;;UAGD,IAAIT,eAAJ,EAAqB;YACjB;AACZ;AACA;AACA;YACY,IAAMU,iBAAiB,GAAGV,eAAe,CAACV,YAA1C;YACA,IAAMqB,QAAkC,GAAGX,eAA3C;YACAW,QAAQ,CAACrB,YAAT,GAAwBoB,iBAAxB;YACAb,uBAAuB,CAACS,IAAxB,CAA6BK,QAA7B;YACAzB,MAAM,CAACe,GAAP,GAAaU,QAAb;YACAzB,MAAM,CAACgB,IAAP,GAAc,SAAd;UACH,CAXD,MAWO;YACH;AACZ;AACA;AACA;AACA;YACYhB,MAAM,CAACgB,IAAP,GAAc,SAAd;UACH;QACJ,CAtDD;QAwDA;AACJ;AACA;AACA;AACA;AACA;AACA;;QAnFyC;UAAA,IAoFjCL,uBAAuB,CAACH,MApFS;YAAA,uBAqF3BhB,aAAa,CAAC2B,gBAAd,CAA+BV,eAA/B,CAA+CC,SAA/C,CACFC,uBAAuB,CAACzB,GAAxB,CAA4B,UAAAqB,QAAQ;cAAA,OAAK;gBAAEA,QAAQ,EAARA;cAAF,CAAL;YAAA,CAApC,CADE,EAEF,sBAFE,CArF2B;UAAA;QAAA;;QAAA;MAAA;IAAA;EAuHxC,CA1HD;IAAA;EAAA;AAAA;AA6HA;AACA;AACA;;AAxSA;AACA;AACA;AACA,WAAsBmB,kBAAtB,YAAsBA,kBAAtB,CACIC,YADJ;EAAA,IAE8B;IAAA,uBACDC,oBAAoB,CAACD,YAAD,CADnB,iBACpBE,UADoB;MAG1B,OAAOnC,OAAO,CAACC,GAAR,CACHkC,UAAU,CACL3C,GADL,CACS,UAAA4C,MAAM,EAAI;QACX,IAAI,CAACA,MAAL,EAAa;UACT,OAAO,IAAP;QACH;;QACD,OAAOC,mBAAmB,CACtBD,MAAM,CAACE,IAAP,CAAYC,MAAZ,CAAmBC,OADG,EAEtBJ,MAAM,CAACE,IAAP,CAAYC,MAFU,EAGtBN,YAHsB,CAA1B;MAKH,CAVL,EAWKQ,MAXL,CAWY,UAAAL,MAAM;QAAA,OAAIA,MAAM,KAAK,IAAf;MAAA,CAXlB,CADG,CAAP;IAH0B;EAiB7B,CAnBD;IAAA;EAAA;AAAA;AAsBA;AACA;AACA;;AApFA,WAAsBC,mBAAtB,YAAsBA,mBAAtB,CACIG,OADJ,EAEIE,SAFJ,EAGIT,YAHJ;EAAA,IAI4B;IACxB,IAAMU,QAAQ,GAAGV,YAAY,CAACR,gBAAb,CAA8BkB,QAA/C;IACA,IAAMC,6BAAwE,GAAG;MAC7EC,qBAAqB,EAAEF,QAAQ,CAACG,KAD6C;MAE7EC,YAAY,EAAEJ,QAAQ,CAACK,IAFsD;MAG7EC,cAAc,EAAEhB,YAAY,CAACR,gBAAb,CAA8BuB,IAH+B;MAI7ET,MAAM,EAAEG,SAJqE;MAK7EQ,OAAO,EAAEjB,YAAY,CAACR,gBAAb,CAA8B0B,uBALsC;MAM7EC,aAAa,EAAET,QAAQ,CAACS;IANqD,CAAjF;IAQA/D,cAAc,CACV,4BADU,EAEVuD,6BAFU,CAAd;IAVwB,uBAeMD,QAAQ,CAACU,OAAT,CAAiBC,qBAAjB,CAC1BV,6BAD0B,CAfN,iBAelB7B,eAfkB;MAkBxB,IAAMwC,GAAoB,GAAG;QACzBf,OAAO,EAAPA,OADyB;QAEzBP,YAAY,EAAZA,YAFyB;QAGzBR,gBAAgB,EAAEQ,YAAY,CAACR,gBAHN;QAIzBkB,QAAQ,EAARA,QAJyB;QAKzBJ,MAAM,EAAErD,cAAc,CAACwD,SAAD,EAAY,KAAZ,CALG;QAMzB3B,eAAe,EAAfA;MANyB,CAA7B;MASAwC,GAAG,CAACxC,eAAJ,GAAsBrB,yBAAyB,CAC3C6D,GAAG,CAACZ,QADuC,EAE3C5B,eAF2C,EAG3C2B,SAH2C,CAA/C;MAMA,OAAOa,GAAP;IAjCwB;EAkC3B,CAtCD;IAAA;EAAA;AAAA;AA1JA,WAAaC,YAAb;EAEI,sBACW/B,gBADX,EAEWgC,mBAFX,EAGE;IAAA,KAWMC,SAXN,GAW2B,KAX3B;IAAA,KAaMC,yBAbN,GAaqD,EAbrD;IAAA,KAcMC,iBAdN,GAc6C,EAd7C;IAAA,KAFSnC,gBAET,GAFSA,gBAET;IAAA,KADSgC,mBACT,GADSA,mBACT;IACE,KAAKI,aAAL,GAAqBpC,gBAAgB,CAACc,MAAtC;IACA,KAAKI,QAAL,GAAgBlB,gBAAgB,CAACkB,QAAjC;IACA,KAAKK,IAAL,GAAYvB,gBAAgB,CAACuB,IAA7B;EACH;;EATL;;EAAA,OAoBIc,OApBJ,GAoBI,mBAA4D;IAAA;;IAAA,IAApDC,SAAoD,uEAAhC,EAAgC;;IACxD,IAAI,KAAKL,SAAT,EAAoB;MAChB,MAAMvE,UAAU,CAAC,KAAD,CAAhB;IACH;;IACD,KAAKuE,SAAL,GAAiB,IAAjB;IAEA,IAAMM,KAAK,GAAG;MACVC,IAAI,EAAE,KADI;MACG;MACbC,KAAK,EAAE,CAFG;MAEA;MACVC,OAAO,EAAE,CAHC;MAGE;MACZC,OAAO,EAAE,CAJC;MAIE;MACZC,OAAO,EAAE,CALC;MAKE;MACZC,OAAO,EAAE,CANC,CAMC;;IAND,CAAd;IASA,IAAMC,YAAmD,GAAG,IAAIhG,OAAJ,EAA5D;IAEA;AACR;AACA;;IACQ,IAAMiG,UAAU,GAAGjF,2BAA2B,CAAC,KAAKkC,gBAAL,CAAsBkB,QAAvB,CAA9C;IACA,IAAM8B,OAAO,GAAGD,UAAU,CAACE,QAAX,GAAsBC,KAAtB,CAA4B,CAA5B,CAAhB;IACAF,OAAO,CAAC/C,IAAR,CAAa6C,YAAY,CAACK,YAAb,EAAb;IACAJ,UAAU,CAACK,IAAX,CAAgBJ,OAAhB;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQ,CAAC,YAAM;MACH,OAAOzC,kBAAkB,CAAC,KAAD,CAAlB,CACF8C,IADE,CACG,UAAAvB,GAAG,EAAI;QACT,KAAI,CAACI,yBAAL,GAAiCJ,GAAjC;QACA,KAAI,CAACK,iBAAL,GAAyB,KAAI,CAACD,yBAAL,CAA+BgB,KAA/B,CAAqC,CAArC,CAAzB;QACA,IAAMI,QAA2B,GAAG/E,OAAO,CAACC,GAAR,CAChC,KAAI,CAAC0D,yBAAL,CACKnE,GADL,CACS,UAAAwF,MAAM;UAAA,OAAIvF,eAAe,CAC1BuF,MAAM,CAACzC,MAAP,CAAc0C,WADY,EAE1BD,MAAM,CAACjE,eAFmB,CAAf,CAGb+D,IAHa,CAGR,UAAAI,OAAO;YAAA,OAAIA,OAAO,CAACpE,MAAZ;UAAA,CAHC,CAAJ;QAAA,CADf,CADgC,CAApC;QAOA,OAAOiE,QAAP;MACH,CAZE,EAaFD,IAbE,CAaG,UAAAC,QAAQ,EAAI;QACd,IAAMI,UAAkB,GAAGJ,QAAQ,CAC9BK,MADsB,CACf,UAACC,GAAD,EAAMC,IAAN;UAAA,OAAeA,IAAI,GAAGD,GAAG,GAAGC,IAA5B;QAAA,CADe,EACmB,CADnB,CAA3B;QAEAtB,KAAK,CAACE,KAAN,GAAciB,UAAd;QACAZ,YAAY,CAACM,IAAb,CAAkB;UACdU,UAAU,EAAE,KAAI,CAAC9D,gBADH;UAEduC,KAAK,EAAErF,SAAS,CAACqF,KAAD;QAFF,CAAlB;;QAIA,IAAIwB,UAAU,GAAG,KAAI,CAAC7B,yBAAL,CAA+B8B,KAA/B,EAAjB;;QACA,IAAIC,cAAc,GAAG5G,oBAArB;;QATc;UAWV,IAAM6G,eAAe,GAAGC,oBAAoB,CACxCJ,UADwC,EAExCzB,SAFwC,CAA5C;UAIA2B,cAAc,GAAGA,cAAc,CAACZ,IAAf,CAAoB,YAAM;YACvC,OAAO,IAAI9E,OAAJ,CAAY,UAAAqB,GAAG,EAAI;cACtB,IAAMwE,GAAG,GAAGF,eAAe,CAACG,SAAhB,CAA0B;gBAClCjB,IAAI,EAAE,cAACkB,QAAD,EAAmB;kBACrB/B,KAAK,CAACG,OAAN;kBACCH,KAAD,CAAe+B,QAAQ,CAACzE,IAAxB,IAAiC0C,KAAD,CAAe+B,QAAQ,CAACzE,IAAxB,IAAgC,CAAhE;kBACA0C,KAAK,CAACM,OAAN,GAAgB0B,IAAI,CAACC,KAAL,CAAWjC,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACE,KAAtB,GAA8B,GAAzC,CAAhB;kBACAK,YAAY,CAACM,IAAb,CAAkB;oBACdU,UAAU,EAAE,KAAI,CAAC9D,gBADH;oBAEduC,KAAK,EAAErF,SAAS,CAACqF,KAAD;kBAFF,CAAlB;gBAIH,CATiC;gBAUlCkC,KAAK,EAAE,eAACC,CAAD,EAAY;kBACfN,GAAG,CAACO,WAAJ,GADe,CAEf;;kBACA,KAAI,CAACxC,iBAAL,CAAuB1C,OAAvB,CAA+B,UAAAmF,CAAC;oBAAA,OAAIA,CAAC,CAACtF,eAAF,CAAkBuF,KAAlB,YAAgC,YAAM,CAAG,CAAzC,CAAJ;kBAAA,CAAhC;;kBACA/B,YAAY,CAAC2B,KAAb,CAAmBC,CAAnB;gBACH,CAfiC;gBAgBlCI,QAAQ,EAAE,oBAAM;kBACZ,IAAIf,UAAJ,EAAgB;oBACZ;oBACAA,UAAU,CAACzE,eAAX,CAA2BuF,KAA3B,YAAyC,YAAM,CAAG,CAAlD;kBACH;;kBACDT,GAAG,CAACO,WAAJ;kBACA/E,GAAG;gBACN;cAvBiC,CAA1B,CAAZ;YAyBH,CA1BM,CAAP;UA2BH,CA5BgB,CAAjB;UA6BAmE,UAAU,GAAG,KAAI,CAAC7B,yBAAL,CAA+B8B,KAA/B,EAAb;QA5CU;;QAUd,OAAOD,UAAP,EAAmB;UAAA;QAmClB;;QACD,OAAOE,cAAP;MACH,CA5DE,EA6DFZ,IA7DE,CA6DG,YAAM;QACRd,KAAK,CAACC,IAAN,GAAa,IAAb;QACAD,KAAK,CAACM,OAAN,GAAgB,GAAhB;QACAC,YAAY,CAACM,IAAb,CAAkB;UACdU,UAAU,EAAE,KAAI,CAAC9D,gBADH;UAEduC,KAAK,EAAErF,SAAS,CAACqF,KAAD;QAFF,CAAlB;QAIAO,YAAY,CAACgC,QAAb;MACH,CArEE,CAAP;IAsEH,CAvED;;IA0EA,OAAOhC,YAAY,CAACiC,IAAb,CACHhH,GAAG,CAAC,UAAAiH,cAAc;MAAA,OAAIA,cAAc,CAACzC,KAAnB;IAAA,CAAf,CADA,CAAP;EAGH,CAjIL;;EAAA,OAmII0C,cAnIJ,GAmII,wBAAe3C,SAAf,EAAgD;IAAA;;IAC5C,IAAI,CAAC,KAAK4C,eAAV,EAA2B;MACvB,KAAKA,eAAL,GAAuBC,WAAW,CAAC,IAAD,CAAX,CAClB9B,IADkB,CACb,UAAA+B,IAAI,EAAI;QACV,IAAI,CAACA,IAAL,EAAW;UACP,OAAO9H,qBAAP;QACH,CAFD,MAEO;UACH,OAAO,IAAIiB,OAAJ,CAAY,UAACqB,GAAD,EAAMyF,GAAN,EAAc;YAC7B,IAAMC,MAAM,GAAG,MAAI,CAACjD,OAAL,CAAaC,SAAb,CAAf;;YACCgD,MAAD,CAAgBjB,SAAhB,CAA0B,IAA1B,EAAgCgB,GAAhC,EAAqCzF,GAArC;;YACA,MAAI,CAACuC,iBAAL,CAAuB1C,OAAvB,CAA+B,UAAAmF,CAAC;cAAA,OAAIA,CAAC,CAACtF,eAAF,CAAkBuF,KAAlB,YAAgC,YAAM,CAAG,CAAzC,CAAJ;YAAA,CAAhC;UACH,CAJM,WAKI,UAAAU,GAAG,EAAI;YACV,MAAI,CAACpD,iBAAL,CAAuB1C,OAAvB,CAA+B,UAAAmF,CAAC;cAAA,OAAIA,CAAC,CAACtF,eAAF,CAAkBuF,KAAlB,YAAgC,YAAM,CAAG,CAAzC,CAAJ;YAAA,CAAhC;;YACA,MAAMU,GAAN;UACH,CARE,CAAP;QASH;MACJ,CAfkB,CAAvB;IAgBH;;IACD,OAAO,KAAKL,eAAZ;EACH,CAvJL;;EAAA;AAAA;AAmMA,OAAO,SAASzE,oBAAT,CACHD,YADG,EAEsD;EAEzD,IAAMgF,iBAAiB,GAAG3H,mBAAmB,CAAC2C,YAAY,CAAC4B,aAAb,CAA2BqD,UAA5B,CAAnB,CACrB1H,GADqB,CACjB,UAAAgD,OAAO;IAAA,OAAIP,YAAY,CAACe,IAAb,GAAoB,GAApB,GAA0BR,OAA9B;EAAA,CADU,CAA1B;EAGA,OAAOP,YAAY,CAACU,QAAb,CAAsBwE,aAAtB,CAAoCC,iBAApC,CACHH,iBAAiB,CAACzH,GAAlB,CAAsB,UAAA6H,GAAG;IAAA,OAAI1H,+BAA+B,CACxD0H,GADwD,EAExDzH,2BAFwD,CAAnC;EAAA,CAAzB,CADG,EAKH,KALG,EAMLkF,IANK,CAMA,UAAAwC,OAAO;IAAA,OAAIC,MAAM,CAACC,MAAP,CAAcF,OAAd,CAAJ;EAAA,CANP,CAAP;AAOH;AA8BD,OAAO,SAASV,WAAT,CAAqB3E,YAArB,EAAmE;EACtE,IAAIA,YAAY,CAAC4B,aAAb,CAA2BrB,OAA3B,KAAuC,CAA3C,EAA8C;IAC1C,OAAOzD,qBAAP;EACH;;EACD,OAAOmD,oBAAoB,CAACD,YAAD,CAApB,CACF6C,IADE,CACG,UAAA3C,UAAU,EAAI;IAChB,IAAIA,UAAU,CAACrB,MAAX,KAAsB,CAA1B,EAA6B;MACzB,OAAO,KAAP;IACH,CAFD,MAEO;MACH,OAAO,IAAP;IACH;EACJ,CAPE,CAAP;AAQH;AAED,OAAO,SAAS2G,oBAAT,CACH3H,aADG,EAEH0C,OAFG,EAGHkF,SAHG,EAIgB;EACnB,IAAIA,SAAS,KAAK,IAAlB,EAAwB;IACpB,OAAO1I,oBAAP;EACH,CAFD,MAEO;IACH,IAAMuE,GAAG,GAAGzD,aAAa,CAACmC,YAAd,CAA2BwB,mBAA3B,CAA+CjB,OAA/C,EAAwDkF,SAAxD,EAAmE5H,aAAnE,CAAZ;IACA,IAAM6H,UAAU,GAAGjJ,SAAS,CAAC6E,GAAD,CAA5B;IACA,OAAOoE,UAAP;EACH;AACJ;AAED,OAAO,SAASC,uBAAT,CACH9H,aADG,EAEHiE,SAFG,EAGW;EAAA;;EACd,IAAMV,OAAO,GAAGvD,aAAa,CAAC6C,QAAd,CAAuBU,OAAvC;EACA,IAAMtC,eAAe,GAAGjB,aAAa,CAACiB,eAAtC;EACA,IAAM8G,aAAa,GAAGxE,OAAO,CAACyE,OAAR,CAAgBC,YAAhB,CAClBhH,eAAe,CAACwB,MADE,EAElB;IACIyF,QAAQ,EAAE,EADd;IAEIC,IAAI,EAAE,kBAAInI,aAAa,CAACyC,MAAd,CAAqB0C,WAAzB,IAAuC,KAAvC,QAFV;IAGIiD,KAAK,EAAEnE,SAHX;IAIIoE,IAAI,EAAE;EAJV,CAFkB,CAAtB;EAUA,OAAOpH,eAAe,CACjBqH,KADE,CACIP,aADJ,EAEF/C,IAFE,CAEG,UAAAuD,MAAM;IAAA,OAAIA,MAAM,CAACC,SAAP,CACX9I,GADW,CACP,UAAAgC,GAAG,EAAI;MACRA,GAAG,GAAG7C,SAAS,CAAC6C,GAAD,CAAf;MACA,OAAOA,GAAP;IACH,CAJW,CAAJ;EAAA,CAFT,CAAP;AAQH;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASrB,mBAAT,CACHL,aADG,EAEHI,OAFG,EAGgB;EACnB;AACJ;AACA;AACA;AACA;EACI,IAAM4B,iBAAiB,GAAGnD,SAAS,CAACuB,OAAO,CAACQ,YAAT,CAAnC;EACA,IAAM6H,iBAAiB,GAAG9J,KAAK,CAACyB,OAAD,CAA/B;EACAqI,iBAAiB,CAAC7H,YAAlB,GAAiCoB,iBAAjC;EAEA,IAAI0G,WAAW,GAAG1I,aAAa,CAAC0C,OAAd,GAAwB,CAA1C,CAVmB,CAYnB;;EACA,IAAIkD,cAAc,GAAG1F,OAAO,CAACyI,OAAR,CAAgBF,iBAAhB,CAArB;;EAbmB;IAef,IAAM/F,OAAO,GAAGgG,WAAhB;IACA9C,cAAc,GAAGA,cAAc,CAACZ,IAAf,CAAoB,UAAA4C,SAAS;MAAA,OAAID,oBAAoB,CAClE3H,aADkE,EAElE0C,OAFkE,EAGlEkF,SAHkE,CAAxB;IAAA,CAA7B,CAAjB;IAKAc,WAAW;EArBI;;EAcnB,OAAOA,WAAW,IAAI1I,aAAa,CAAC2B,gBAAd,CAA+Bc,MAA/B,CAAsCC,OAA5D,EAAqE;IAAA;EAQpE;;EAED,OAAOkD,cAAc,CAACZ,IAAf,CAAoB,UAAAtD,GAAG,EAAI;IAC9B,IAAIA,GAAG,KAAK,IAAZ,EAAkB;MACd,OAAOxC,oBAAP;IACH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,IAAI,CAACwC,GAAG,CAACkH,KAAT,EAAgB;MACZlH,GAAG,CAACkH,KAAJ,GAAYzJ,wBAAwB,EAApC;IACH,CAb6B,CAe9B;;;IACA,IAAI;MACAa,aAAa,CAAC2B,gBAAd,CAA+Bc,MAA/B,CAAsCoG,QAAtC,CAA+CnH,GAA/C;IACH,CAFD,CAEE,OAAOwF,GAAP,EAAY;MACV,IAAM4B,SAAkB,GAAG5B,GAA3B;MACA,MAAM7H,UAAU,CAAC,KAAD,EAAQ;QACpB0J,WAAW,EAAE/I,aAAa,CAAC0C,OADP;QAEpBsG,SAAS,EAAEhJ,aAAa,CAAC2B,gBAAd,CAA+Bc,MAA/B,CAAsCC,OAF7B;QAGpBuG,WAAW,EAAE7I,OAHO;QAIpB8I,QAAQ,EAAExH,GAJU;;QAKpB;AAChB;AACA;AACA;QACgByH,MAAM,EAAEL,SAAS,CAACM,UAAV,CAAqBD,MATT;QAUpB1G,MAAM,EAAEqG,SAAS,CAACM,UAAV,CAAqB3G;MAVT,CAAR,CAAhB;IAYH;;IACD,OAAOf,GAAP;EACH,CAlCM,CAAP;AAmCH;AAGD,OAAO,SAASG,kCAAT,CAA+CwH,IAA/C,EAAwDC,IAAxD,EAA0E;EAC7E,IAAMC,SAAS,GAAG9B,MAAM,CAAC+B,MAAP,CAAc,EAAd,EAAkBH,IAAlB,EAAwB;IACtCzI,YAAY,EAAE6I,SADwB;IAEtC5I,IAAI,EAAE4I;EAFgC,CAAxB,CAAlB;EAIA,IAAMC,SAAS,GAAGjC,MAAM,CAAC+B,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwB;IACtC1I,YAAY,EAAE6I,SADwB;IAEtC5I,IAAI,EAAE4I;EAFgC,CAAxB,CAAlB;EAIA,OAAO/K,SAAS,CAAC6K,SAAD,EAAYG,SAAZ,CAAhB;AACH;AAsID,OAAO,SAASC,mBAAT,CACH3J,aADG,EAEU;EACb,OAAOA,aAAa,CAACiB,eAAd,CAA8B2I,MAA9B,GACF5E,IADE,CAEC;IAAA,OAAMhF,aAAa,CAAC6C,QAAd,CAAuBgH,mBAAvB,CACF7J,aAAa,CAACmC,YAAd,CAA2Be,IADzB,EAEFlD,aAAa,CAACyC,MAFZ,CAAN;EAAA,CAFD,CAAP;AAOH;AAED;AACA;AACA;;AACA,OAAO,SAASqD,oBAAT,CACH9F,aADG,EAGY;EAAA,IADfiE,SACe,uEADH,EACG;;EACf,IAAIjE,aAAa,CAAC8J,QAAlB,EAA4B;IACxB;IACA,MAAMzK,UAAU,CAAC,KAAD,CAAhB;EACH;;EACDW,aAAa,CAAC8J,QAAd,GAAyB,IAAzB;EAEA,IAAMC,QAAQ,GAAG,IAAItL,OAAJ,EAAjB;EAEA;AACJ;AACA;AACA;;EACI,CAAC,YAAM;IACH,IAAI2H,KAAJ;;IACA,IAAM4D,cAAc,GAAG,SAAjBA,cAAiB,GAAM;MACzB;MACA,OAAOL,mBAAmB,CAAC3J,aAAD,CAAnB,CACFgF,IADE,CACG;QAAA,OAAM+E,QAAQ,CAACtD,QAAT,EAAN;MAAA,CADH,CAAP;IAEH,CAJD;;IAKA,IAAMwD,cAAc,GAAG,SAAjBA,cAAiB,GAAM;MACzB,OAAOnC,uBAAuB,CAAC9H,aAAD,EAAgBiE,SAAhB,CAAvB,CACFe,IADE,CACG,UAAAkF,KAAK,EAAI;QACX,IAAIA,KAAK,CAAClJ,MAAN,KAAiB,CAArB,EAAwB;UACpBgJ,cAAc;UACd,OAAO,KAAP;QACH,CAHD,MAGO;UACH,OAAOjK,iBAAiB,CAACC,aAAD,EAAgBkK,KAAhB,CAAjB,CACFlF,IADE,CACG,UAACzE,OAAD;YAAA,OAAoBA,OAAO,CAACa,OAAR,CAAgB,UAAAZ,MAAM;cAAA,OAAIuJ,QAAQ,CAAChF,IAAT,CAAcvE,MAAd,CAAJ;YAAA,CAAtB,CAApB;UAAA,CADH,WAEI,UAAA6F,CAAC;YAAA,OAAID,KAAK,GAAGC,CAAZ;UAAA,CAFL,EAGFrB,IAHE,CAGG;YAAA,OAAM,IAAN;UAAA,CAHH,CAAP;QAIH;MACJ,CAXE,EAYFA,IAZE,CAYG,UAAAD,IAAI,EAAI;QACV,IAAI,CAACA,IAAL,EAAW;UACP;QACH;;QACD,IAAIqB,KAAJ,EAAW;UACP2D,QAAQ,CAAC3D,KAAT,CAAeA,KAAf;QACH,CAFD,MAEO;UACH6D,cAAc;QACjB;MACJ,CArBE,CAAP;IAsBH,CAvBD;;IAwBAA,cAAc;EACjB,CAhCD;;EAkCA,OAAOF,QAAQ,CAACjF,YAAT,EAAP;AACH;AAED,OAAO,SAAS8B,cAAT,CACH5G,aADG,EAEHiE,SAFG,EAGS;EACZ,IAAI,CAACjE,aAAa,CAAC6G,eAAnB,EAAoC;IAChC7G,aAAa,CAAC6G,eAAd,GAAgC,IAAI3G,OAAJ,CAAY,UAACqB,GAAD,EAAMyF,GAAN,EAAc;MACtD,IAAMC,MAAM,GAAGnB,oBAAoB,CAAC9F,aAAD,EAAgBiE,SAAhB,CAAnC;MACCgD,MAAD,CAAgBjB,SAAhB,CAA0B,IAA1B,EAAgCgB,GAAhC,EAAqCzF,GAArC;IACH,CAH+B,CAAhC;EAIH;;EACD,OAAOvB,aAAa,CAAC6G,eAArB;AACH"}