{"version":3,"sources":["../../../../src/plugins/migration/data-migrator.ts"],"names":["Subject","deepEqual","clone","toPromise","flatClone","getHeightOfRevision","createRevision","PROMISE_RESOLVE_VOID","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_NULL","getDefaultRxDocumentMeta","createRxSchema","newRxError","runAsyncPluginHooks","runPluginHooks","getPreviousVersions","getMigrationStateByDatabase","map","getAllDocuments","getWrappedStorageInstance","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","_migrateDocuments","oldCollection","documentsData","Promise","all","docData","migrateDocumentData","migratedDocuments","actions","action","bulkDeleteInputData","writeDeleted","_deleted","previous","document","length","storageInstance","bulkWrite","bulkWriteToStorageInput","forEach","idx","migratedDocData","res","type","migrated","doc","newestCollection","push","isDocumentDataWithoutRevisionEqual","_rev","newHeight","newRevision","attachmentsBefore","_attachments","saveData","bulkAddRevisions","_getOldCollections","dataMigrator","getOldCollectionDocs","oldColDocs","colDoc","createOldCollection","data","schema","version","filter","schemaObj","database","storageInstanceCreationParams","databaseName","name","collectionName","options","instanceCreationOptions","multiInstance","storage","createStorageInstance","ret","DataMigrator","migrationStrategies","_migrated","nonMigratedOldCollections","allOldCollections","currentSchema","migrate","batchSize","state","done","total","handled","success","deleted","percent","stateSubject","allSubject","allList","getValue","slice","asObservable","next","then","countAll","oldCol","primaryPath","allDocs","totalCount","reduce","cur","prev","collection","currentCol","shift","currentPromise","migrationState$","migrateOldCollection","sub","subscribe","subState","Math","round","e","unsubscribe","c","close","error","complete","pipe","withCollection","migratePromise","_migratePromise","mustMigrate","must","rej","state$","err","collectionDocKeys","jsonSchema","internalStore","findDocumentsById","key","docsObj","Object","values","runStrategyIfNotNull","docOrNull","retPromise","getBatchOfOldCollection","preparedQuery","statics","prepareQuery","selector","sort","limit","query","result","documents","mutateableDocData","nextVersion","resolve","_meta","validate","asRxError","fromVersion","toVersion","originalDoc","finalDoc","errors","parameters","doc1","doc2","doc1NoRev","assign","undefined","doc2NoRev","deleteOldCollection","remove","removeCollectionDoc","_migrate","observer","allBatchesDone","handleOneBatch","batch"],"mappings":"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","sourcesContent":["/**\n * The DataMigrator handles the documents from collections with older schemas\n * and transforms/saves them into the newest collection\n */\n/**\n * TODO this should be completely rewritten because:\n * - This could have been done in much less code which would be easier to uderstand\n *\n */\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport deepEqual from 'fast-deep-equal';\nimport {\n    clone,\n    toPromise,\n    flatClone,\n    getHeightOfRevision,\n    createRevision,\n    PROMISE_RESOLVE_VOID,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_NULL,\n    getDefaultRxDocumentMeta\n} from '../../util';\nimport {\n    createRxSchema\n} from '../../rx-schema';\nimport {\n    RxError,\n    newRxError\n} from '../../rx-error';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from '../../hooks';\nimport type {\n    RxCollection,\n    RxDatabase,\n    MigrationState,\n    NumberFunctionMap,\n    OldRxCollection,\n    WithAttachmentsData,\n    RxJsonSchema,\n    RxDocumentData,\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport {\n    RxSchema,\n    getPreviousVersions\n} from '../../rx-schema';\nimport {\n    getMigrationStateByDatabase,\n    MigrationStateWithCollection\n} from './migration-state';\nimport { map } from 'rxjs/operators';\nimport {\n    getAllDocuments,\n    getWrappedStorageInstance\n} from '../../rx-storage-helper';\nimport { getPrimaryKeyOfInternalDocument, InternalStoreCollectionDocType, INTERNAL_CONTEXT_COLLECTION } from '../../rx-database-internal-store';\n\nexport class DataMigrator {\n\n    constructor(\n        public newestCollection: RxCollection,\n        public migrationStrategies: NumberFunctionMap\n    ) {\n        this.currentSchema = newestCollection.schema;\n        this.database = newestCollection.database;\n        this.name = newestCollection.name;\n    }\n\n    public currentSchema: RxSchema;\n    public database: RxDatabase;\n    public name: string;\n\n\n    private _migrated: boolean = false;\n    private _migratePromise?: Promise<any>;\n    private nonMigratedOldCollections: OldRxCollection[] = [];\n    private allOldCollections: OldRxCollection[] = [];\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        if (this._migrated) {\n            throw newRxError('DM1');\n        }\n        this._migrated = true;\n\n        const state = {\n            done: false, // true if finished\n            total: 0, // will be the doc-count\n            handled: 0, // amount of handled docs\n            success: 0, // handled docs which successed\n            deleted: 0, // handled docs which got deleted\n            percent: 0 // percentage\n        };\n\n        const stateSubject: Subject<MigrationStateWithCollection> = new Subject();\n\n        /**\n         * Add to output of RxDatabase.migrationStates\n         */\n        const allSubject = getMigrationStateByDatabase(this.newestCollection.database);\n        const allList = allSubject.getValue().slice(0);\n        allList.push(stateSubject.asObservable());\n        allSubject.next(allList);\n\n        /**\n         * TODO this is a side-effect which might throw\n         * We did this because it is not possible to create new Observer(async(...))\n         * @link https://github.com/ReactiveX/rxjs/issues/4074\n         * In the future the whole migration plugin should be rewritten without rxjs\n         * so we do not have this problem.\n         */\n        (() => {\n            return _getOldCollections(this)\n                .then(ret => {\n                    this.nonMigratedOldCollections = ret;\n                    this.allOldCollections = this.nonMigratedOldCollections.slice(0);\n                    const countAll: Promise<number[]> = Promise.all(\n                        this.nonMigratedOldCollections\n                            .map(oldCol => getAllDocuments(\n                                oldCol.schema.primaryPath,\n                                this.database.storage,\n                                oldCol.storageInstance\n                            ).then(allDocs => allDocs.length))\n                    );\n                    return countAll;\n                })\n                .then(countAll => {\n                    const totalCount: number = countAll\n                        .reduce((cur, prev) => prev = cur + prev, 0);\n                    state.total = totalCount;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    let currentCol = this.nonMigratedOldCollections.shift();\n                    let currentPromise = PROMISE_RESOLVE_VOID;\n                    while (currentCol) {\n                        const migrationState$ = migrateOldCollection(\n                            currentCol,\n                            batchSize\n                        );\n                        currentPromise = currentPromise.then(() => {\n                            return new Promise(res => {\n                                const sub = migrationState$.subscribe(\n                                    (subState: any) => {\n                                        state.handled++;\n                                        (state as any)[subState.type] = (state as any)[subState.type] + 1;\n                                        state.percent = Math.round(state.handled / state.total * 100);\n                                        stateSubject.next({\n                                            collection: this.newestCollection,\n                                            state: flatClone(state)\n                                        });\n                                    },\n                                    (e: any) => {\n                                        sub.unsubscribe();\n                                        this.allOldCollections.forEach(c => c.storageInstance.close());\n                                        stateSubject.error(e);\n                                    }, () => {\n                                        if (currentCol) {\n                                            currentCol.storageInstance.close();\n                                        }\n                                        sub.unsubscribe();\n                                        res();\n                                    });\n                            });\n                        });\n                        currentCol = this.nonMigratedOldCollections.shift();\n                    }\n                    return currentPromise;\n                })\n                .then(() => {\n                    state.done = true;\n                    state.percent = 100;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    stateSubject.complete();\n                });\n        })();\n\n\n        return stateSubject.pipe(\n            map(withCollection => withCollection.state)\n        );\n    }\n\n    migratePromise(batchSize: number): Promise<any> {\n        if (!this._migratePromise) {\n            this._migratePromise = mustMigrate(this)\n                .then(must => {\n                    if (!must) {\n                        return PROMISE_RESOLVE_FALSE;\n                    } else {\n                        return new Promise((res, rej) => {\n                            const state$ = this.migrate(batchSize);\n                            (state$ as any).subscribe(null, rej, res);\n                            this.allOldCollections.forEach(c => c.storageInstance.close());\n                        })\n                            .catch(err => {\n                                this.allOldCollections.forEach(c => c.storageInstance.close());\n                                throw err;\n                            });\n                    }\n                });\n        }\n        return this._migratePromise;\n    }\n}\n\nexport async function createOldCollection(\n    version: number,\n    schemaObj: RxJsonSchema<any>,\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection> {\n    const database = dataMigrator.newestCollection.database;\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseName: database.name,\n        collectionName: dataMigrator.newestCollection.name,\n        schema: schemaObj,\n        options: dataMigrator.newestCollection.instanceCreationOptions,\n        multiInstance: database.multiInstance\n    };\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    const storageInstance = await database.storage.createStorageInstance(\n        storageInstanceCreationParams\n    );\n    const ret: OldRxCollection = {\n        version,\n        dataMigrator,\n        newestCollection: dataMigrator.newestCollection,\n        database,\n        schema: createRxSchema(schemaObj, false),\n        storageInstance\n    };\n\n    ret.storageInstance = getWrappedStorageInstance(\n        ret.database,\n        storageInstance,\n        schemaObj\n    );\n\n    return ret;\n}\n\n\nexport function getOldCollectionDocs(\n    dataMigrator: DataMigrator\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n\n    const collectionDocKeys = getPreviousVersions(dataMigrator.currentSchema.jsonSchema)\n        .map(version => dataMigrator.name + '-' + version);\n\n    return dataMigrator.database.internalStore.findDocumentsById(\n        collectionDocKeys.map(key => getPrimaryKeyOfInternalDocument(\n            key,\n            INTERNAL_CONTEXT_COLLECTION\n        )),\n        false\n    ).then(docsObj => Object.values(docsObj));\n}\n\n/**\n * get an array with OldCollection-instances from all existing old storage-instances\n */\nexport async function _getOldCollections(\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection[]> {\n    const oldColDocs = await getOldCollectionDocs(dataMigrator);\n\n    return Promise.all(\n        oldColDocs\n            .map(colDoc => {\n                if (!colDoc) {\n                    return null as any;\n                }\n                return createOldCollection(\n                    colDoc.data.schema.version,\n                    colDoc.data.schema,\n                    dataMigrator\n                );\n            })\n            .filter(colDoc => colDoc !== null)\n    );\n}\n\n\n/**\n * returns true if a migration is needed\n */\nexport function mustMigrate(dataMigrator: DataMigrator): Promise<boolean> {\n    if (dataMigrator.currentSchema.version === 0) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    return getOldCollectionDocs(dataMigrator)\n        .then(oldColDocs => {\n            if (oldColDocs.length === 0) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n}\n\nexport function runStrategyIfNotNull(\n    oldCollection: OldRxCollection,\n    version: number,\n    docOrNull: any | null\n): Promise<any | null> {\n    if (docOrNull === null) {\n        return PROMISE_RESOLVE_NULL;\n    } else {\n        const ret = oldCollection.dataMigrator.migrationStrategies[version](docOrNull, oldCollection);\n        const retPromise = toPromise(ret);\n        return retPromise;\n    }\n}\n\nexport function getBatchOfOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize: number\n): Promise<any[]> {\n    const storage = oldCollection.database.storage;\n    const storageInstance = oldCollection.storageInstance;\n    const preparedQuery = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [oldCollection.schema.primaryPath]: 'asc' } as any],\n            limit: batchSize\n        }\n    );\n\n    return storageInstance\n        .query(preparedQuery)\n        .then(result => result.documents\n            .map(doc => {\n                doc = flatClone(doc);\n                return doc;\n            })\n        );\n}\n\n/**\n * runs the doc-data through all following migrationStrategies\n * so it will match the newest schema.\n * @throws Error if final doc does not match final schema or migrationStrategy crashes\n * @return final object or null if migrationStrategy deleted it\n */\nexport function migrateDocumentData(\n    oldCollection: OldRxCollection,\n    docData: any\n): Promise<any | null> {\n    /**\n     * We cannot deep-clone Blob or Buffer\n     * so we just flat clone it here\n     * and attach it to the deep cloned document data.\n     */\n    const attachmentsBefore = flatClone(docData._attachments);\n    const mutateableDocData = clone(docData);\n    mutateableDocData._attachments = attachmentsBefore;\n\n    let nextVersion = oldCollection.version + 1;\n\n    // run the document throught migrationStrategies\n    let currentPromise = Promise.resolve(mutateableDocData);\n    while (nextVersion <= oldCollection.newestCollection.schema.version) {\n        const version = nextVersion;\n        currentPromise = currentPromise.then(docOrNull => runStrategyIfNotNull(\n            oldCollection,\n            version,\n            docOrNull\n        ));\n        nextVersion++;\n    }\n\n    return currentPromise.then(doc => {\n        if (doc === null) {\n            return PROMISE_RESOLVE_NULL;\n        }\n\n        /**\n         * Add _meta field if missing.\n         * We need this to migration documents from pre-12.0.0 state\n         * to version 12.0.0. Therefore we need to add the _meta field if it is missing.\n         * TODO remove this in the major version 13.0.0 \n         */\n        if (!doc._meta) {\n            doc._meta = getDefaultRxDocumentMeta();\n        }\n\n        // check final schema\n        try {\n            oldCollection.newestCollection.schema.validate(doc);\n        } catch (err) {\n            const asRxError: RxError = err as any;\n            throw newRxError('DM2', {\n                fromVersion: oldCollection.version,\n                toVersion: oldCollection.newestCollection.schema.version,\n                originalDoc: docData,\n                finalDoc: doc,\n                /**\n                 * pass down data from parent error,\n                 * to make it better understandable what did not work\n                 */\n                errors: asRxError.parameters.errors,\n                schema: asRxError.parameters.schema\n            });\n        }\n        return doc;\n    });\n}\n\n\nexport function isDocumentDataWithoutRevisionEqual<T>(doc1: T, doc2: T): boolean {\n    const doc1NoRev = Object.assign({}, doc1, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    const doc2NoRev = Object.assign({}, doc2, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    return deepEqual(doc1NoRev, doc2NoRev);\n}\n\n/**\n * transform documents data and save them to the new collection\n * @return status-action with status and migrated document\n */\nexport async function _migrateDocuments(\n    oldCollection: OldRxCollection,\n    documentsData: any[]\n): Promise<{ type: string, doc: any }[]> {\n\n    // run hooks that might mutate documentsData\n    await Promise.all(\n        documentsData.map(docData => runAsyncPluginHooks(\n            'preMigrateDocument',\n            {\n                docData,\n                oldCollection\n            }\n        ))\n    );\n    // run the migration strategies on each document\n    const migratedDocuments: (any | null)[] = await Promise.all(\n        documentsData.map(docData => migrateDocumentData(oldCollection, docData))\n    );\n\n\n    const bulkWriteToStorageInput: any[] = [];\n    const actions: any[] = [];\n\n    documentsData.forEach((docData, idx) => {\n        const migratedDocData: any | null = migratedDocuments[idx];\n        const action = {\n            res: null as any,\n            type: '',\n            migrated: migratedDocData,\n            doc: docData,\n            oldCollection,\n            newestCollection: oldCollection.newestCollection\n        };\n        actions.push(action);\n\n        /**\n         * Determiniticly handle the revision\n         * so migrating the same data on multiple instances\n         * will result in the same output.\n         */\n        if (isDocumentDataWithoutRevisionEqual(docData, migratedDocData)) {\n            /**\n             * Data not changed by migration strategies, keep the same revision.\n             * This ensures that other replicated instances that did not migrate already\n             * will still have the same document.\n             */\n            migratedDocData._rev = docData._rev;\n        } else if (migratedDocData !== null) {\n            /**\n             * data changed, increase revision height\n             * so replicating instances use our new document data\n             */\n            const newHeight = getHeightOfRevision(docData._rev) + 1;\n            const newRevision = newHeight + '-' + createRevision(migratedDocData);\n            migratedDocData._rev = newRevision;\n        }\n\n\n        if (migratedDocData) {\n            /**\n             * save to newest collection\n             * notice that this data also contains the attachments data\n             */\n            const attachmentsBefore = migratedDocData._attachments;\n            const saveData: WithAttachmentsData<any> = migratedDocData;\n            saveData._attachments = attachmentsBefore;\n            bulkWriteToStorageInput.push(saveData);\n            action.res = saveData;\n            action.type = 'success';\n        } else {\n            /**\n             * Migration strategy returned null\n             * which means we should not migrate this document,\n             * just drop it.\n             */\n            action.type = 'deleted';\n        }\n    });\n\n    /**\n     * Write the documents to the newest collection.\n     * We need to add as revision\n     * because we provide the _rev by our own\n     * to have deterministic revisions in case the migration\n     * runs on multiple nodes which must lead to the equal storage state.\n     */\n    if (bulkWriteToStorageInput.length) {\n        await oldCollection.newestCollection.storageInstance.bulkAddRevisions(bulkWriteToStorageInput);\n    }\n\n    // run hooks\n    await Promise.all(\n        actions.map(action => runAsyncPluginHooks(\n            'postMigrateDocument',\n            action\n        ))\n    );\n\n    // remove the documents from the old collection storage instance\n    const bulkDeleteInputData = documentsData.map(docData => {\n        const writeDeleted = flatClone(docData);\n        writeDeleted._deleted = true;\n        return {\n            previous: docData,\n            document: writeDeleted\n        };\n    });\n\n    if (bulkDeleteInputData.length) {\n        await oldCollection.storageInstance.bulkWrite(bulkDeleteInputData);\n    }\n\n    return actions;\n}\n\n\n/**\n * deletes this.storageInstance and removes it from the database.collectionsCollection\n */\nexport function deleteOldCollection(\n    oldCollection: OldRxCollection\n): Promise<void> {\n    return oldCollection.storageInstance.remove()\n        .then(\n            () => oldCollection.database.removeCollectionDoc(\n                oldCollection.dataMigrator.name,\n                oldCollection.schema\n            )\n        );\n}\n\n/**\n * runs the migration on all documents and deletes the storage instance afterwards\n */\nexport function migrateOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize = 10\n): Observable<any> {\n    if (oldCollection._migrate) {\n        // already running\n        throw newRxError('DM3');\n    }\n    oldCollection._migrate = true;\n\n    const observer = new Subject();\n\n    /**\n     * TODO this is a side-effect which might throw\n     * @see DataMigrator.migrate()\n     */\n    (() => {\n        let error: any;\n        const allBatchesDone = () => {\n            // remove this oldCollection\n            return deleteOldCollection(oldCollection)\n                .then(() => observer.complete());\n        };\n        const handleOneBatch = () => {\n            return getBatchOfOldCollection(oldCollection, batchSize)\n                .then(batch => {\n                    if (batch.length === 0) {\n                        allBatchesDone();\n                        return false;\n                    } else {\n                        return _migrateDocuments(oldCollection, batch)\n                            .then((actions: any[]) => actions.forEach(action => observer.next(action)))\n                            .catch(e => error = e)\n                            .then(() => true);\n                    }\n                })\n                .then(next => {\n                    if (!next) {\n                        return;\n                    }\n                    if (error) {\n                        observer.error(error);\n                    } else {\n                        handleOneBatch();\n                    }\n                });\n        };\n        handleOneBatch();\n    })();\n\n    return observer.asObservable();\n}\n\nexport function migratePromise(\n    oldCollection: OldRxCollection,\n    batchSize?: number\n): Promise<any> {\n    if (!oldCollection._migratePromise) {\n        oldCollection._migratePromise = new Promise((res, rej) => {\n            const state$ = migrateOldCollection(oldCollection, batchSize);\n            (state$ as any).subscribe(null, rej, res);\n        });\n    }\n    return oldCollection._migratePromise;\n}\n"],"file":"data-migrator.js"}