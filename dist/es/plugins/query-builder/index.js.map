{"version":3,"sources":["../../../../src/plugins/query-builder/index.ts"],"names":["createQueryBuilder","OTHER_MANGO_ATTRIBUTES","OTHER_MANGO_OPERATORS","RxQueryBase","tunnelQueryCache","clone","RXQUERY_OTHER_FLAG","runBuildingStep","rxQuery","functionName","value","queryBuilder","mangoQuery","other","_path","queryBuilderJson","toJSON","newQuery","op","query","collection","path","tunneled","applyBuildingStep","proto","RxDBQueryBuilderPlugin","name","rxdb","prototypes","RxQuery","forEach","attribute","operator"],"mappings":"AAAA,SACIA,kBADJ,EAEIC,sBAFJ,EAGIC,qBAHJ,QAIO,8BAJP;AAMA,SAASC,WAAT,EAAsBC,gBAAtB,QAA8C,gBAA9C;AACA,SAASC,KAAT,QAAsB,YAAtB,C,CAEA;;AACA,IAAMC,kBAAkB,GAAG,kBAA3B;AAEA,OAAO,SAASC,eAAT,CACHC,OADG,EAEHC,YAFG,EAGHC,KAHG,EAImC;AACtC,MAAMC,YAAY,GAAGX,kBAAkB,CAACK,KAAK,CAACG,OAAO,CAACI,UAAT,CAAN,CAAvC;;AACA,MAAIJ,OAAO,CAACK,KAAR,CAAcP,kBAAd,CAAJ,EAAuC;AACnCK,IAAAA,YAAY,CAACG,KAAb,GAAqBN,OAAO,CAACK,KAAR,CAAcP,kBAAd,CAArB;AACH;;AAEAK,EAAAA,YAAD,CAAsBF,YAAtB,EAAoCC,KAApC,EANsC,CAMM;;AAE5C,MAAMK,gBAAgB,GAAGJ,YAAY,CAACK,MAAb,EAAzB;AACA,MAAMC,QAAQ,GAAG,IAAId,WAAJ,CACbK,OAAO,CAACU,EADK,EAEbH,gBAAgB,CAACI,KAFJ,EAGbX,OAAO,CAACY,UAHK,CAAjB;;AAKA,MAAIL,gBAAgB,CAACM,IAArB,EAA2B;AACvBJ,IAAAA,QAAQ,CAACJ,KAAT,CAAeP,kBAAf,IAAqCS,gBAAgB,CAACM,IAAtD;AACH;;AAED,MAAMC,QAAQ,GAAGlB,gBAAgB,CAACa,QAAD,CAAjC;AACA,SAAOK,QAAP;AACH;AAED,OAAO,SAASC,iBAAT,CACHC,KADG,EAEHf,YAFG,EAGC;AACJe,EAAAA,KAAK,CAACf,YAAD,CAAL,GAAsB,UAAyBC,KAAzB,EAAqC;AACvD,WAAOH,eAAe,CAAC,IAAD,EAAOE,YAAP,EAAqBC,KAArB,CAAtB;AACH,GAFD;AAGH;AAED,cAAc,8BAAd;AAEA,OAAO,IAAMe,sBAAgC,GAAG;AAC5CC,EAAAA,IAAI,EAAE,eADsC;AAE5CC,EAAAA,IAAI,EAAE,IAFsC;AAG5CC,EAAAA,UAAU,EAAE;AACRC,IAAAA,OADQ,mBACAL,KADA,EACY;AAChB,OACI,OADJ,EAEI,QAFJ,EAGI,IAHJ,EAII,IAJJ,EAKI,KALJ,EAMI,KANJ,EAOI,KAPJ,EAQI,QARJ,EASI,WATJ,EAUI,MAVJ,EAWEM,OAXF,CAWU,UAAAC,SAAS,EAAI;AACnBR,QAAAA,iBAAiB,CAACC,KAAD,EAAQO,SAAR,CAAjB;AACH,OAbD;AAcA9B,MAAAA,sBAAsB,CAAC6B,OAAvB,CAA+B,UAAAC,SAAS,EAAI;AACxCR,QAAAA,iBAAiB,CAACC,KAAD,EAAQO,SAAR,CAAjB;AACH,OAFD;AAGA7B,MAAAA,qBAAqB,CAAC4B,OAAtB,CAA8B,UAAAE,QAAQ,EAAI;AACtCT,QAAAA,iBAAiB,CAACC,KAAD,EAAQQ,QAAR,CAAjB;AACH,OAFD;AAGH;AAtBO;AAHgC,CAAzC","sourcesContent":["import {\n    createQueryBuilder,\n    OTHER_MANGO_ATTRIBUTES,\n    OTHER_MANGO_OPERATORS\n} from './mquery/nosql-query-builder';\nimport type { RxPlugin, RxQuery } from '../../types';\nimport { RxQueryBase, tunnelQueryCache } from '../../rx-query';\nimport { clone } from '../../util';\n\n// if the query-builder plugin is used, we have to save it's last path\nconst RXQUERY_OTHER_FLAG = 'queryBuilderPath';\n\nexport function runBuildingStep<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQuery<RxDocumentType, RxQueryResult>,\n    functionName: string,\n    value: any\n): RxQuery<RxDocumentType, RxQueryResult> {\n    const queryBuilder = createQueryBuilder(clone(rxQuery.mangoQuery));\n    if (rxQuery.other[RXQUERY_OTHER_FLAG]) {\n        queryBuilder._path = rxQuery.other[RXQUERY_OTHER_FLAG];\n    }\n\n    (queryBuilder as any)[functionName](value); // run\n\n    const queryBuilderJson = queryBuilder.toJSON();\n    const newQuery = new RxQueryBase(\n        rxQuery.op,\n        queryBuilderJson.query,\n        rxQuery.collection\n    ) as RxQuery;\n    if (queryBuilderJson.path) {\n        newQuery.other[RXQUERY_OTHER_FLAG] = queryBuilderJson.path;\n    }\n\n    const tunneled = tunnelQueryCache(newQuery);\n    return tunneled;\n}\n\nexport function applyBuildingStep(\n    proto: any,\n    functionName: string\n): void {\n    proto[functionName] = function (this: RxQuery, value: any) {\n        return runBuildingStep(this, functionName, value);\n    };\n}\n\nexport * from './mquery/nosql-query-builder';\n\nexport const RxDBQueryBuilderPlugin: RxPlugin = {\n    name: 'query-builder',\n    rxdb: true,\n    prototypes: {\n        RxQuery(proto: any) {\n            [\n                'where',\n                'equals',\n                'eq',\n                'or',\n                'nor',\n                'and',\n                'mod',\n                'exists',\n                'elemMatch',\n                'sort'\n            ].forEach(attribute => {\n                applyBuildingStep(proto, attribute);\n            });\n            OTHER_MANGO_ATTRIBUTES.forEach(attribute => {\n                applyBuildingStep(proto, attribute);\n            });\n            OTHER_MANGO_OPERATORS.forEach(operator => {\n                applyBuildingStep(proto, operator);\n            });\n        }\n    }\n};\n"],"file":"index.js"}