{"version":3,"sources":["../../../../src/plugins/pouchdb/rx-storage-pouchdb.ts"],"names":["flatClone","adapterObject","isLevelDown","PouchDB","filterInMemoryFields","massageSelector","newRxError","getPrimaryFieldOfPrimaryKey","RxStorageInstancePouch","RxStorageKeyObjectInstancePouch","pouchHash","pouchSwapPrimaryToId","primarySwapPouchDbQuerySelector","getSchemaByObjectPath","RxStoragePouchStatics","hash","data","getSortComparator","schema","query","primaryPath","primaryKey","sortOptions","sort","inMemoryFields","Object","keys","selector","filter","key","startsWith","fun","a","b","args","rows","map","doc","sortedRows","length","_id","getQueryMatcher","massagedSelector","cloned","row","rowsMatched","ret","prepareQuery","mutateableQuery","forEach","sortPart","comparisonOperators","keyUsed","some","op","includes","schemaObj","type","$gt","$regex","path","sortArray","part","direction","values","useKey","newPart","entries","k","v","Array","isArray","RxStoragePouch","adapter","pouchSettings","name","statics","checkPouchAdapter","createPouch","location","options","pouchDbParameters","settings","pouchDBOptions","assign","pouch","createStorageInstance","params","pouchLocation","getPouchLocation","databaseName","collectionName","version","createIndexesOnPouch","createKeyObjectStorageInstance","useOptions","auto_compaction","revs_limit","adapters","leveldb","indexes","getIndexes","before","existingIndexes","Set","idx","Promise","all","indexMaybeArray","indexArray","indexName","join","has","createIndex","ddoc","index","fields","dbName","schemaVersion","prefix","split","last","pop","getRxStoragePouch","Error","storage"],"mappings":"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","sourcesContent":["\nimport type {\n    PouchDBInstance,\n    PouchSettings,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    RxStorage,\n    RxKeyObjectStorageInstanceCreationParams,\n    MangoQuery,\n    MangoQuerySortPart,\n    RxDocumentWriteData,\n    PreparedQuery,\n    MangoQuerySortDirection,\n    RxStorageStatics,\n} from '../../types';\n\nimport {\n    flatClone,\n    adapterObject\n} from '../../util';\nimport {\n    isLevelDown,\n    PouchDB\n} from './pouch-db';\nimport {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport { newRxError } from '../../rx-error';\n\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport { RxStorageInstancePouch } from './rx-storage-instance-pouch';\nimport { RxStorageKeyObjectInstancePouch } from './rx-storage-key-object-instance-pouch';\nimport { pouchHash, PouchStorageInternals, pouchSwapPrimaryToId, primarySwapPouchDbQuerySelector } from './pouchdb-helper';\nimport type { DeterministicSortComparator, QueryMatcher } from 'event-reduce-js';\nimport { getSchemaByObjectPath } from '../../rx-schema-helper';\n\n\nexport const RxStoragePouchStatics: RxStorageStatics = {\n\n    /**\n     * create the same diggest as an attachment with that data\n     * would have created by pouchdb internally.\n     */\n    hash(data: Buffer | Blob | string): Promise<string> {\n        return pouchHash(data);\n    },\n\n\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const sortOptions: MangoQuerySortPart[] = query.sort ? (query.sort as any) : [{\n            [primaryPath]: 'asc'\n        }];\n        const inMemoryFields = Object\n            .keys(query.selector)\n            .filter(key => !key.startsWith('$'));\n\n        const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            /**\n             * Sorting on two documents with the same primary is not allowed\n             * because it might end up in a non-deterministic result.\n             */\n            if (a[primaryPath] === b[primaryPath]) {\n                throw newRxError('SNH', { args: { a, b }, primaryPath: primaryPath as any });\n            }\n\n            // TODO use createFieldSorter\n            // TODO make a performance test\n            const rows = [a, b].map(doc => ({\n                doc: pouchSwapPrimaryToId<RxDocType>(primaryPath, doc)\n            }));\n            const sortedRows: { doc: any }[] = filterInMemoryFields(\n                rows,\n                {\n                    selector: {},\n                    sort: sortOptions\n                },\n                inMemoryFields\n            );\n            if (sortedRows.length !== 2) {\n                throw newRxError('SNH', {\n                    query,\n                    primaryPath: primaryPath as any,\n                    args: {\n                        rows,\n                        sortedRows\n                    }\n                });\n            }\n            if (sortedRows[0].doc._id === rows[0].doc._id) {\n                return -1;\n            } else {\n                return 1;\n            }\n        };\n        return fun;\n    },\n\n    /**\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n    getQueryMatcher<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const massagedSelector = massageSelector(query.selector);\n\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocType) => {\n            const cloned = pouchSwapPrimaryToId(primaryPath, doc);\n            const row = {\n                doc: cloned\n            };\n            const rowsMatched = filterInMemoryFields(\n                [row],\n                { selector: massagedSelector },\n                Object.keys(query.selector)\n            );\n            const ret = rowsMatched && rowsMatched.length === 1;\n            return ret;\n        };\n        return fun;\n    },\n\n\n    /**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\n     prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        mutateableQuery: MangoQuery<RxDocType>\n    ): PreparedQuery<RxDocType> {\n        const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const query = mutateableQuery;\n\n        /**\n         * because sort wont work on unused keys we have to workaround\n         * so we add the key to the selector if necessary\n         * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n         */\n        if (query.sort) {\n            query.sort.forEach(sortPart => {\n                const key = Object.keys(sortPart)[0];\n                const comparisonOperators = ['$gt', '$gte', '$lt', '$lte'];\n                const keyUsed = query.selector[key] && Object.keys(query.selector[key]).some(op => comparisonOperators.includes(op)) || false;\n                if (!keyUsed) {\n                    const schemaObj = getSchemaByObjectPath(schema, key);\n                    if (!schemaObj) {\n                        throw newRxError('QU5', {\n                            query,\n                            key,\n                            schema\n                        });\n                    }\n                    if (!query.selector[key]) {\n                        query.selector[key] = {};\n                    }\n                    switch (schemaObj.type) {\n                        case 'number':\n                        case 'integer':\n                            // TODO change back to -Infinity when issue resolved\n                            // @link https://github.com/pouchdb/pouchdb/issues/6454\n                            // -Infinity does not work since pouchdb 6.2.0\n                            query.selector[key].$gt = -9999999999999999999999999999;\n                            break;\n                        case 'string':\n                            /**\n                             * strings need an empty string, see\n                             * @link https://github.com/pubkey/rxdb/issues/585\n                             */\n                            if (typeof query.selector[key] !== 'string') {\n                                query.selector[key].$gt = '';\n                            }\n                            break;\n                        default:\n                            query.selector[key].$gt = null;\n                            break;\n                    }\n                }\n            });\n        }\n\n        // regex does not work over the primary key\n        // TODO move this to dev mode\n        if (query.selector[primaryKey as any] && query.selector[primaryKey as any].$regex) {\n            throw newRxError('QU4', {\n                path: primaryKey as any,\n                query: mutateableQuery\n            });\n        }\n\n        // primary-swap sorting\n        if (query.sort) {\n            const sortArray: MangoQuerySortPart<RxDocType>[] = query.sort.map(part => {\n                const key = Object.keys(part)[0];\n                const direction: MangoQuerySortDirection = Object.values(part)[0];\n                const useKey = key === primaryKey ? '_id' : key;\n                const newPart = { [useKey]: direction };\n                return newPart as any;\n            });\n            query.sort = sortArray;\n        }\n\n        // strip empty selectors\n        Object.entries(query.selector).forEach(([k, v]) => {\n            if (\n                typeof v === 'object' &&\n                v !== null &&\n                !Array.isArray(v) &&\n                Object.keys((v as any)).length === 0\n            ) {\n                delete query.selector[k];\n            }\n        });\n\n        query.selector = primarySwapPouchDbQuerySelector(query.selector, primaryKey);\n\n        /**\n         * To ensure a deterministic sorting,\n         * we have to ensure the primary key is always part\n         * of the sort query.\n\n        * TODO This should be done but will not work with pouchdb\n         * because it will throw\n         * 'Cannot sort on field(s) \"key\" when using the default index'\n         * So we likely have to modify the indexes so that this works. \n         */\n        /*\n        if (!mutateableQuery.sort) {\n            mutateableQuery.sort = [{ [this.primaryPath]: 'asc' }] as any;\n        } else {\n            const isPrimaryInSort = mutateableQuery.sort\n                .find(p => firstPropertyNameOfObject(p) === this.primaryPath);\n            if (!isPrimaryInSort) {\n                mutateableQuery.sort.push({ [this.primaryPath]: 'asc' } as any);\n            }\n        }\n        */\n\n        return query;\n    }\n};\n\nexport class RxStoragePouch implements RxStorage<PouchStorageInternals, PouchSettings> {\n    public name: string = 'pouchdb';\n    public statics = RxStoragePouchStatics;\n\n    constructor(\n        public adapter: any,\n        public pouchSettings: PouchSettings = {}\n    ) {\n        checkPouchAdapter(adapter);\n    }\n\n    private async createPouch(\n        location: string,\n        options: PouchSettings\n    ): Promise<PouchDBInstance> {\n        const pouchDbParameters = {\n            location: location,\n            adapter: adapterObject(this.adapter),\n            settings: options\n        };\n        const pouchDBOptions = Object.assign(\n            {},\n            pouchDbParameters.adapter,\n            this.pouchSettings,\n            pouchDbParameters.settings\n        );\n        const pouch = new PouchDB(\n            pouchDbParameters.location,\n            pouchDBOptions\n        ) as PouchDBInstance;\n\n        /**\n         * In the past we found some errors where the PouchDB is not directly useable\n         * so we we had to call .info() first to ensure it can be used.\n         * I commented this out for now to get faster database/collection creation.\n         * We might have to add this again if something fails.\n         */\n        // await pouch.info();\n\n        return pouch;\n    }\n\n    public async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, PouchSettings>\n    ): Promise<RxStorageInstancePouch<RxDocType>> {\n        const pouchLocation = getPouchLocation(\n            params.databaseName,\n            params.collectionName,\n            params.schema.version\n        );\n        const pouch = await this.createPouch(\n            pouchLocation,\n            params.options\n        );\n        await createIndexesOnPouch(pouch, params.schema);\n        return new RxStorageInstancePouch(\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                pouch\n            },\n            params.options\n        );\n    }\n\n    public async createKeyObjectStorageInstance(\n        params: RxKeyObjectStorageInstanceCreationParams<PouchSettings>\n    ): Promise<RxStorageKeyObjectInstancePouch> {\n        const useOptions = flatClone(params.options);\n        // no compaction because this only stores local documents\n        useOptions.auto_compaction = false;\n        useOptions.revs_limit = 1;\n\n        /**\n         * TODO shouldnt we use a different location\n         * for the local storage? Or at least make sure we\n         * reuse the same pouchdb instance?\n         */\n        const pouchLocation = getPouchLocation(\n            params.databaseName,\n            params.collectionName,\n            0\n        );\n        const pouch = await this.createPouch(\n            pouchLocation,\n            params.options\n        );\n\n        return new RxStorageKeyObjectInstancePouch(\n            params.databaseName,\n            params.collectionName,\n            {\n                pouch\n            },\n            params.options\n        );\n    }\n}\n\n/**\n * Checks if all is ok with the given adapter,\n * else throws an error.\n */\nexport function checkPouchAdapter(adapter: string | any) {\n    if (typeof adapter === 'string') {\n        // TODO make a function hasAdapter()\n        if (!(PouchDB as any).adapters || !(PouchDB as any).adapters[adapter]) {\n            throw newRxError('DB9', {\n                adapter\n            });\n        }\n    } else {\n        isLevelDown(adapter);\n        if (!(PouchDB as any).adapters || !(PouchDB as any).adapters.leveldb) {\n            throw newRxError('DB10', {\n                adapter\n            });\n        }\n    }\n}\n\n/**\n * Creates the indexes of the schema inside of the pouchdb instance.\n * Will skip indexes that already exist.\n */\nexport async function createIndexesOnPouch(\n    pouch: PouchDBInstance,\n    schema: RxJsonSchema<any>\n): Promise<void> {\n    if (!schema.indexes) {\n        return;\n    }\n\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const before = await pouch.getIndexes();\n    const existingIndexes: Set<string> = new Set(\n        before.indexes.map(idx => idx.name)\n    );\n\n    await Promise.all(\n        schema.indexes.map(async (indexMaybeArray) => {\n            let indexArray: string[] = Array.isArray(indexMaybeArray) ? indexMaybeArray : [indexMaybeArray];\n\n            /**\n             * replace primary key with _id\n             * because that is the enforced primary key on pouchdb.\n             */\n            indexArray = indexArray.map(key => {\n                if (key === primaryKey) {\n                    return '_id';\n                } else {\n                    return key;\n                }\n            });\n\n            const indexName = 'idx-rxdb-index-' + indexArray.join(',');\n            if (existingIndexes.has(indexName)) {\n                // index already exists\n                return;\n            }\n            /**\n             * TODO we might have even better performance by doing a bulkDocs\n             * on index creation\n             */\n            return pouch.createIndex({\n                name: indexName,\n                ddoc: indexName,\n                index: {\n                    fields: indexArray\n                }\n            });\n        })\n    );\n}\n\n/**\n * returns the pouchdb-database-name\n */\nexport function getPouchLocation(\n    dbName: string,\n    collectionName: string,\n    schemaVersion: number\n): string {\n    const prefix = dbName + '-rxdb-' + schemaVersion + '-';\n    if (!collectionName.includes('/')) {\n        return prefix + collectionName;\n    } else {\n        // if collectionName is a path, we have to prefix the last part only\n        const split = collectionName.split('/');\n        const last = split.pop();\n\n        let ret = split.join('/');\n        ret += '/' + prefix + last;\n        return ret;\n    }\n}\n\nexport function getRxStoragePouch(\n    adapter: any,\n    pouchSettings?: PouchSettings\n): RxStoragePouch {\n    if (!adapter) {\n        throw new Error('adapter missing');\n    }\n    const storage = new RxStoragePouch(adapter, pouchSettings);\n    return storage;\n}\n"],"file":"rx-storage-pouchdb.js"}