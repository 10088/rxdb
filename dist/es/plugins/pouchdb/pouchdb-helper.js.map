{"version":3,"sources":["../../../../src/plugins/pouchdb/pouchdb-helper.ts"],"names":["binaryMd5","blobBufferUtil","flatClone","getHeightOfRevision","newRxError","OPEN_POUCHDB_STORAGE_INSTANCES","Set","POUCHDB_LOCAL_PREFIX","POUCHDB_DESIGN_PREFIX","pouchHash","data","Promise","res","digest","pouchSwapIdToPrimary","primaryKey","docData","_id","pouchDocumentDataToRxDocumentData","pouchDoc","useDoc","_revisions","_attachments","Object","entries","forEach","key","value","type","content_type","length","rxDocumentDataToPouchDocumentData","doc","pouchSwapPrimaryToId","useValue","stub","idValue","ret","pouchStripLocalFlagFromPrimary","str","substring","getEventKey","isLocal","primary","revision","Error","prefix","eventKey","pouchChangeRowToChangeEvent","args","id","revHeight","_rev","_deleted","operation","previous","pouchChangeRowToChangeStreamEvent","pouchRow","deleted","previousDoc","ev","sequence","seq","primarySwapPouchDbQuerySelector","selector","Array","isArray","map","item","k","v","startsWith","writeAttachmentsToAttachments","attachments","all","obj","asWrite","toString","hash","asString"],"mappings":"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","sourcesContent":["import type {\n    ChangeStreamEvent,\n    PouchChangeRow,\n    PouchDBInstance,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxDocumentData,\n    RxDocumentWriteData,\n    WithAttachments\n} from '../../types';\nimport type { RxStorageInstancePouch } from './rx-storage-instance-pouch';\nimport type {\n    RxStorageKeyObjectInstancePouch\n} from './rx-storage-key-object-instance-pouch';\nimport { binaryMd5 } from 'pouchdb-md5';\nimport {\n    blobBufferUtil,\n    flatClone,\n    getHeightOfRevision\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type { ChangeEvent } from 'event-reduce-js';\n\nexport type PouchStorageInternals = {\n    pouch: PouchDBInstance;\n};\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_POUCHDB_STORAGE_INSTANCES: Set<RxStorageKeyObjectInstancePouch | RxStorageInstancePouch<any>> = new Set();\n\n/**\n * prefix of local pouchdb documents\n */\nexport const POUCHDB_LOCAL_PREFIX: '_local/' = '_local/';\n/**\n * Pouchdb stores indexes as design documents,\n * we have to filter them out and not return the\n * design documents to the outside.\n */\nexport const POUCHDB_DESIGN_PREFIX: '_design/' = '_design/';\n\n\nexport function pouchHash(data: Buffer | Blob | string): Promise<string> {\n    return new Promise(res => {\n        binaryMd5(data, (digest: string) => {\n            res('md5-' + digest);\n        });\n    });\n}\n\nexport function pouchSwapIdToPrimary<T>(\n    primaryKey: keyof T,\n    docData: any\n): any {\n\n    if (primaryKey === '_id' || docData[primaryKey]) {\n        return docData;\n    }\n    docData = flatClone(docData);\n    docData[primaryKey] = docData._id;\n    delete docData._id;\n\n    return docData;\n}\n\nexport function pouchDocumentDataToRxDocumentData<T>(\n    primaryKey: keyof T,\n    pouchDoc: WithAttachments<T>\n): RxDocumentData<T> {\n    let useDoc: RxDocumentData<T> = pouchSwapIdToPrimary(primaryKey, pouchDoc);\n\n    // always flat clone becaues we mutate the _attachments property.\n    useDoc = flatClone(useDoc);\n    delete (useDoc as any)._revisions;\n\n    useDoc._attachments = {};\n    if (pouchDoc._attachments) {\n        Object.entries(pouchDoc._attachments).forEach(([key, value]) => {\n            if ((value as any).data) {\n                useDoc._attachments[key] = {\n                    data: (value as any).data,\n                    type: (value as any).type ? (value as any).type : (value as any).content_type\n                } as any;\n            } else {\n                useDoc._attachments[key] = {\n                    digest: value.digest,\n                    // TODO why do we need to access value.type?\n                    type: (value as any).type ? (value as any).type : value.content_type,\n                    length: value.length\n                };\n            }\n        });\n    }\n\n    return useDoc;\n}\n\nexport function rxDocumentDataToPouchDocumentData<T>(\n    primaryKey: keyof T,\n    doc: RxDocumentData<T> | RxDocumentWriteData<T>\n): WithAttachments<T & { _id: string; }> {\n    let pouchDoc: WithAttachments<T> = pouchSwapPrimaryToId(primaryKey, doc);\n\n    // always flat clone becaues we mutate the _attachments property.\n    pouchDoc = flatClone(pouchDoc);\n\n    pouchDoc._attachments = {};\n    if (doc._attachments) {\n        Object.entries(doc._attachments).forEach(([key, value]) => {\n            const useValue: RxAttachmentWriteData & RxAttachmentData = value as any;\n            if (useValue.data) {\n                (pouchDoc as any)._attachments[key] = {\n                    data: useValue.data,\n                    content_type: useValue.type\n                };\n            } else {\n                (pouchDoc as any)._attachments[key] = {\n                    digest: useValue.digest,\n                    content_type: useValue.type,\n                    length: useValue.length,\n                    stub: true\n                };\n            }\n        });\n    }\n\n    return pouchDoc as any;\n}\n\n\n/**\n * Swaps the primaryKey of the document\n * to the _id property.\n */\nexport function pouchSwapPrimaryToId<RxDocType>(\n    primaryKey: keyof RxDocType,\n    docData: any\n): RxDocType & { _id: string } {\n    // optimisation shortcut\n    if (primaryKey === '_id') {\n        return docData;\n    }\n\n    const idValue = docData[primaryKey];\n    const ret = flatClone(docData);\n    delete ret[primaryKey];\n    ret._id = idValue;\n    return ret;\n}\n\n/**\n * in:  '_local/foobar'\n * out: 'foobar'\n */\nexport function pouchStripLocalFlagFromPrimary(str: string): string {\n    return str.substring(POUCHDB_LOCAL_PREFIX.length);\n}\n\nexport function getEventKey(\n    isLocal: boolean,\n    primary: string,\n    revision: string\n): string {\n\n    // TODO remove this check this should never happen\n    if (!primary) {\n        throw new Error('primary missing !!');\n    }\n\n    const prefix = isLocal ? 'local' : 'non-local';\n    const eventKey = prefix + '|' + primary + '|' + revision;\n    return eventKey;\n}\n\nexport function pouchChangeRowToChangeEvent<DocumentData>(\n    primaryKey: keyof DocumentData,\n    pouchDoc: any\n): ChangeEvent<RxDocumentData<DocumentData>> {\n    if (!pouchDoc) {\n        throw newRxError('SNH', { args: { pouchDoc } });\n    }\n    const id = pouchDoc._id;\n\n    const doc = pouchDocumentDataToRxDocumentData<DocumentData>(\n        primaryKey,\n        pouchDoc as any\n    );\n    const revHeight = doc._rev ? getHeightOfRevision(doc._rev) : 1;\n\n    if (pouchDoc._deleted) {\n        return {\n            operation: 'DELETE',\n            id,\n            doc: null,\n            previous: doc\n        };\n    } else if (revHeight === 1) {\n        return {\n            operation: 'INSERT',\n            id,\n            doc,\n            previous: null\n        };\n    } else {\n        return {\n            operation: 'UPDATE',\n            id,\n            doc: doc,\n            previous: 'UNKNOWN'\n        };\n    }\n}\n\nexport function pouchChangeRowToChangeStreamEvent<DocumentData>(\n    primaryKey: keyof DocumentData,\n    pouchRow: PouchChangeRow\n): ChangeStreamEvent<DocumentData> {\n    const doc = pouchRow.doc;\n    if (!doc) {\n        throw newRxError('SNH', { args: { pouchRow } });\n    }\n    const revHeight = getHeightOfRevision(doc._rev);\n\n    if (pouchRow.deleted) {\n        const previousDoc = flatClone(\n            pouchDocumentDataToRxDocumentData(\n                primaryKey,\n                pouchRow.doc as any\n            )\n        );\n        delete previousDoc._deleted;\n        const ev: ChangeStreamEvent<DocumentData> = {\n            sequence: pouchRow.seq,\n            id: pouchRow.id,\n            operation: 'DELETE',\n            doc: null,\n            previous: previousDoc\n        };\n        return ev;\n    } else if (revHeight === 1) {\n        const ev: ChangeStreamEvent<DocumentData> = {\n            sequence: pouchRow.seq,\n            id: pouchRow.id,\n            operation: 'INSERT',\n            doc: pouchDocumentDataToRxDocumentData(\n                primaryKey,\n                pouchRow.doc as any\n            ),\n            previous: null\n        };\n        return ev;\n    } else {\n        const ev: ChangeStreamEvent<DocumentData> = {\n            sequence: pouchRow.seq,\n            id: pouchRow.id,\n            operation: 'UPDATE',\n            doc: pouchDocumentDataToRxDocumentData(\n                primaryKey,\n                pouchRow.doc as any\n            ),\n            previous: 'UNKNOWN'\n        };\n        return ev;\n    }\n}\n\n\n/**\n * Runs a primary swap with transform all custom primaryKey occurences\n * into '_id'\n * @recursive\n */\nexport function primarySwapPouchDbQuerySelector<RxDocType>(selector: any, primaryKey: keyof RxDocType): any {\n    if (primaryKey === '_id') {\n        return selector;\n    }\n    if (Array.isArray(selector)) {\n        return selector.map(item => primarySwapPouchDbQuerySelector(item, primaryKey));\n    } else if (typeof selector === 'object') {\n        const ret: any = {};\n        Object.entries(selector).forEach(([k, v]) => {\n            if (k === primaryKey) {\n                ret._id = v;\n            } else {\n                if (k.startsWith('$')) {\n                    ret[k] = primarySwapPouchDbQuerySelector(v, primaryKey);\n                } else {\n                    ret[k] = v;\n                }\n            }\n        });\n        return ret;\n    } else {\n        return selector;\n    }\n}\n\n\nexport async function writeAttachmentsToAttachments(\n    attachments: { [attachmentId: string]: RxAttachmentData | RxAttachmentWriteData; }\n): Promise<{ [attachmentId: string]: RxAttachmentData; }> {\n    if (!attachments) {\n        return {};\n    }\n    const ret: { [attachmentId: string]: RxAttachmentData; } = {};\n    await Promise.all(\n        Object.entries(attachments).map(async ([key, obj]) => {\n            if (!obj.type) {\n                throw newRxError('SNH', { args: { obj } });\n            }\n            if ((obj as RxAttachmentWriteData).data) {\n                const asWrite = (obj as RxAttachmentWriteData);\n                const [hash, asString] = await Promise.all([\n                    pouchHash(asWrite.data),\n                    blobBufferUtil.toString(asWrite.data)\n                ]);\n                const length = asString.length;\n                ret[key] = {\n                    digest: hash,\n                    length,\n                    type: asWrite.type\n                };\n            } else {\n                ret[key] = obj as RxAttachmentData;\n            }\n        })\n    );\n    return ret;\n}\n\n"],"file":"pouchdb-helper.js"}