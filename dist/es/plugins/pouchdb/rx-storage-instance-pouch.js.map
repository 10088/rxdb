{"version":3,"file":"rx-storage-instance-pouch.js","names":["ObliviousSet","Subject","newRxError","OPEN_POUCHDB_STORAGE_INSTANCES","POUCHDB_DESIGN_PREFIX","pouchDocumentDataToRxDocumentData","pouchSwapIdToPrimary","rxDocumentDataToPouchDocumentData","writeAttachmentsToAttachments","blobBufferUtil","flatClone","getFromMapOrThrow","getFromObjectOrThrow","PROMISE_RESOLVE_VOID","getCustomEventEmitterByPouch","getPrimaryFieldOfPrimaryKey","_settle","pact","state","value","s","_Pact","v","o","bind","then","observer","lastId","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","RxStorageInstancePouch","storage","databaseName","collectionName","schema","internals","options","id","changes$","subs","nonParallelQueue","add","primaryPath","primaryKey","emitter","pouch","emittedEventBulkIds","eventSub","subject","subscribe","eventBulk","events","length","has","forEach","event","change","doc","previous","next","push","close","sub","unsubscribe","remove","destroy","bulkWrite","documentWrites","args","writeRowById","Map","insertDocsById","writeDocs","map","writeData","document","_meta","lwt","primary","set","storeDocumentData","previousDocsInDb","ret","success","error","bulkDocs","new_edits","custom","pouchResult","Promise","all","resultRow","writeRow","previousDoc","err","isError","status","documentId","documentInDb","pushObj","_rev","rev","_attachments","query","preparedQuery","find","findResult","documents","docs","pouchDoc","useDoc","getAttachmentData","attachmentId","getAttachment","attachmentData","toBase64String","findDocumentsById","ids","deleted","retDocs","changes","live","since","doc_ids","style","viaChanges","results","get","firstDoc","useFirstDoc","allDocs","include_docs","keys","rows","filter","row","docData","changeStream","asObservable","cleanup","_minimumDeletedTime","compact","getChangedDocumentsSince","limit","checkpoint","changedDocuments","documentsData","Object","sequence","lastSequence","Error","changeRow","pouchChangesOpts","descending","first","skippedDesignDocuments","pouchResults","addChangedDocuments","isDesignDoc","startsWith","seq","concat","last_seq","conflictResultionTasks","resolveConflictResultionTask","_taskSolution"],"sources":["../../../../src/plugins/pouchdb/rx-storage-instance-pouch.ts"],"sourcesContent":["import { ObliviousSet } from 'oblivious-set';\nimport {\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    PouchBulkDocResultRow,\n    PouchChangedDocumentsSinceCheckpoint,\n    PouchChangesOptionsNonLive,\n    PouchSettings,\n    PouchWriteError,\n    PreparedQuery,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport {\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    POUCHDB_DESIGN_PREFIX,\n    pouchDocumentDataToRxDocumentData,\n    PouchStorageInternals,\n    pouchSwapIdToPrimary,\n    rxDocumentDataToPouchDocumentData,\n    writeAttachmentsToAttachments\n} from './pouchdb-helper';\nimport {\n    blobBufferUtil,\n    flatClone,\n    getFromMapOrThrow,\n    getFromObjectOrThrow,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport {\n    getCustomEventEmitterByPouch\n} from './custom-events-plugin';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\n\n\nlet lastId = 0;\n\nexport class RxStorageInstancePouch<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    PouchStorageInternals,\n    PouchSettings\n> {\n    public readonly id: number = lastId++;\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private subs: Subscription[] = [];\n    private primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n\n    /**\n     * Some PouchDB operations give wrong results when they run in parallel.\n     * So we have to ensure they are queued up.\n     */\n    private nonParallelQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n    constructor(\n        public readonly storage: RxStorage<PouchStorageInternals, PouchSettings>,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n\n        /**\n         * Instead of listening to pouch.changes,\n         * we have overwritten pouchdbs bulkDocs()\n         * and create our own event stream, this will work more relyable\n         * and does not mix up with write events from other sources.\n         */\n        const emitter = getCustomEventEmitterByPouch<RxDocType>(this.internals.pouch);\n\n        /**\n         * Contains all eventIds that of emitted events,\n         * used because multi-instance pouchdbs often will reemit the same\n         * event on the other browser tab so we have to de-duplicate them.\n         */\n        const emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n        const eventSub = emitter.subject.subscribe(async (eventBulk) => {\n            if (\n                eventBulk.events.length === 0 ||\n                emittedEventBulkIds.has(eventBulk.id)\n            ) {\n                return;\n            }\n            emittedEventBulkIds.add(eventBulk.id);\n\n            // rewrite primaryPath of all events\n            eventBulk.events.forEach(event => {\n                if (event.change.doc) {\n                    event.change.doc = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.doc as any\n                    );\n                }\n                if (event.change.previous) {\n                    event.change.previous = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.previous as any\n                    );\n                }\n            });\n\n            this.changes$.next(eventBulk);\n        });\n        this.subs.push(eventSub);\n    }\n\n    close() {\n        this.subs.forEach(sub => sub.unsubscribe());\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        this.subs.forEach(sub => sub.unsubscribe());\n\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        await this.internals.pouch.destroy();\n    }\n    public async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[]\n    ): Promise<\n        RxStorageBulkWriteResponse<RxDocType>\n    > {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const writeRowById: Map<string, BulkWriteRow<RxDocType>> = new Map();\n        const insertDocsById: Map<string, any> = new Map();\n        const writeDocs: (RxDocType & { _id: string; _rev: string })[] = documentWrites.map(writeData => {\n\n            /**\n             * Ensure that _meta.lwt is set correctly\n             */\n            if (\n                writeData.document._meta.lwt < 1000 ||\n                (\n                    writeData.previous &&\n                    writeData.previous._meta.lwt >= writeData.document._meta.lwt\n                )\n            ) {\n                throw newRxError('SNH', {\n                    args: writeData\n                });\n            }\n\n            const primary: string = (writeData.document as any)[this.primaryPath];\n            writeRowById.set(primary, writeData);\n            const storeDocumentData: any = rxDocumentDataToPouchDocumentData<RxDocType>(\n                this.primaryPath,\n                writeData.document\n            );\n            insertDocsById.set(primary, storeDocumentData);\n            return storeDocumentData;\n        });\n\n        const previousDocsInDb: Map<string, RxDocumentData<any>> = new Map();\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        this.nonParallelQueue = this.nonParallelQueue.then(async () => {\n            const pouchResult = await this.internals.pouch.bulkDocs(writeDocs, {\n                new_edits: false,\n                custom: {\n                    primaryPath: this.primaryPath,\n                    writeRowById,\n                    insertDocsById,\n                    previousDocsInDb\n                }\n            } as any);\n            return Promise.all(\n                pouchResult.map(async (resultRow) => {\n                    const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n                    if ((resultRow as PouchWriteError).error) {\n                        const previousDoc = getFromMapOrThrow(previousDocsInDb, resultRow.id);\n                        const err: RxStorageBulkWriteError<RxDocType> = {\n                            isError: true,\n                            status: 409,\n                            documentId: resultRow.id,\n                            writeRow,\n                            documentInDb: pouchDocumentDataToRxDocumentData(\n                                this.primaryPath,\n                                previousDoc\n                            )\n                        };\n                        ret.error[resultRow.id] = err;\n                    } else {\n                        let pushObj: RxDocumentData<RxDocType> = flatClone(writeRow.document) as any;\n                        pushObj = pouchSwapIdToPrimary(this.primaryPath, pushObj);\n                        pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                        // replace the inserted attachments with their diggest\n                        pushObj._attachments = {};\n                        if (!writeRow.document._attachments) {\n                            writeRow.document._attachments = {};\n                        } else {\n                            pushObj._attachments = await writeAttachmentsToAttachments(writeRow.document._attachments);\n                        }\n                        ret.success[resultRow.id] = pushObj;\n                    }\n                })\n            );\n        });\n        await this.nonParallelQueue;\n        return ret;\n    }\n\n    public async query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        const findResult = await this.internals.pouch.find<RxDocType>(preparedQuery);\n        const ret: RxStorageQueryResult<RxDocType> = {\n            documents: findResult.docs.map(pouchDoc => {\n                const useDoc = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    pouchDoc\n                );\n                return useDoc;\n            })\n        };\n        return ret;\n    }\n\n    async getAttachmentData(\n        documentId: string,\n        attachmentId: string\n    ): Promise<string> {\n        const attachmentData = await this.internals.pouch.getAttachment(\n            documentId,\n            attachmentId\n        );\n        const ret = await blobBufferUtil.toBase64String(attachmentData);\n        return ret;\n    }\n\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        /**\n         * On deleted documents, PouchDB will only return the tombstone.\n         * So we have to get the properties directly for each document\n         * with the hack of getting the changes and then make one request per document\n         * with the latest revision.\n         * TODO create an issue at pouchdb on how to get the document data of deleted documents,\n         * when one past revision was written via new_edits=false\n         * @link https://stackoverflow.com/a/63516761/3443137\n         */\n        if (deleted) {\n            const retDocs: RxDocumentDataById<RxDocType> = {};\n            this.nonParallelQueue = this.nonParallelQueue.then(async () => {\n                const viaChanges = await this.internals.pouch.changes({\n                    live: false,\n                    since: 0,\n                    doc_ids: ids,\n                    style: 'all_docs'\n                });\n                await Promise.all(\n                    viaChanges.results.map(async (result) => {\n                        const firstDoc = await this.internals.pouch.get(\n                            result.id,\n                            {\n                                rev: result.changes[0].rev,\n                                deleted: 'ok',\n                                style: 'all_docs'\n                            }\n                        );\n                        const useFirstDoc = pouchDocumentDataToRxDocumentData(\n                            this.primaryPath,\n                            firstDoc\n                        );\n                        retDocs[result.id] = useFirstDoc;\n                    })\n                );\n            });\n            await this.nonParallelQueue;\n            return retDocs;\n        } else {\n            const ret: RxDocumentDataById<RxDocType> = {};\n            this.nonParallelQueue = this.nonParallelQueue.then(async () => {\n                const pouchResult = await this.internals.pouch.allDocs({\n                    include_docs: true,\n                    keys: ids\n                });\n                pouchResult.rows\n                    .filter(row => !!row.doc)\n                    .forEach(row => {\n                        let docData = row.doc;\n                        docData = pouchDocumentDataToRxDocumentData(\n                            this.primaryPath,\n                            docData\n                        );\n                        ret[row.id] = docData;\n                    });\n            });\n            await this.nonParallelQueue;\n            return ret;\n        }\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    cleanup(_minimumDeletedTime: number): Promise<boolean> {\n        /**\n         * PouchDB does not support purging documents.\n         * So instead we run a compaction that might at least help a bit\n         * in freeing up disc space.\n         * @link https://github.com/pouchdb/pouchdb/issues/802\n         */\n        return this.internals.pouch\n            .compact()\n            .then(() => true);\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: PouchChangedDocumentsSinceCheckpoint\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: PouchChangedDocumentsSinceCheckpoint;\n    }[]> {\n        if (!limit || typeof limit !== 'number') {\n            throw new Error('wrong limit');\n        }\n\n        const pouchChangesOpts: PouchChangesOptionsNonLive = {\n            live: false,\n            limit: limit,\n            include_docs: false,\n            since: checkpoint ? checkpoint.sequence : 0,\n            descending: false\n        };\n\n        let lastSequence = 0;\n        let first = true;\n        let skippedDesignDocuments = 0;\n        let changedDocuments: { id: string; sequence: number; }[] = [];\n        /**\n         * Because PouchDB also returns changes of _design documents,\n         * we have to fill up the results with more changes if this happens.\n         */\n        while (first || skippedDesignDocuments > 0) {\n            first = false;\n            skippedDesignDocuments = 0;\n            const pouchResults = await this.internals.pouch.changes(pouchChangesOpts);\n            const addChangedDocuments = pouchResults.results\n                .filter(row => {\n                    const isDesignDoc = row.id.startsWith(POUCHDB_DESIGN_PREFIX);\n                    if (isDesignDoc) {\n                        skippedDesignDocuments = skippedDesignDocuments + 1;\n                        return false;\n                    } else {\n                        return true;\n                    }\n                })\n                .map(row => ({\n                    id: row.id,\n                    sequence: row.seq\n                }));\n            changedDocuments = changedDocuments.concat(addChangedDocuments);\n            lastSequence = pouchResults.last_seq;\n\n            // modify pouch options for next run of pouch.changes()\n            pouchChangesOpts.since = lastSequence;\n            pouchChangesOpts.limit = skippedDesignDocuments;\n        }\n\n        const documentsData = await this.findDocumentsById(\n            changedDocuments.map(o => o.id),\n            true\n        );\n\n        if (\n            Object.keys(documentsData).length > 0 &&\n            checkpoint && checkpoint.sequence === lastSequence\n        ) {\n            /**\n             * When documents are returned, it makes no sense\n             * if the sequence is equal to the one given at the checkpoint.\n             */\n            throw new Error('same sequence');\n        }\n\n        return changedDocuments.map(changeRow => {\n            return {\n                checkpoint: {\n                    sequence: changeRow.sequence\n                },\n                document: getFromObjectOrThrow(documentsData, changeRow.id)\n            };\n        });\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n}\n"],"mappings":"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"}