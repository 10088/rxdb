{"version":3,"sources":["../../../../src/plugins/pouchdb/rx-storage-instance-pouch.ts"],"names":["ObliviousSet","Subject","newRxError","getPrimaryFieldOfPrimaryKey","OPEN_POUCHDB_STORAGE_INSTANCES","POUCHDB_DESIGN_PREFIX","pouchDocumentDataToRxDocumentData","pouchSwapIdToPrimary","rxDocumentDataToPouchDocumentData","writeAttachmentsToAttachments","flatClone","getFromMapOrThrow","PROMISE_RESOLVE_VOID","getCustomEventEmitterByPouch","lastId","RxStorageInstancePouch","databaseName","collectionName","schema","internals","options","id","changes$","subs","add","primaryPath","primaryKey","emitter","pouch","emittedEventBulkIds","eventSub","subject","subscribe","ev","events","length","has","forEach","event","change","doc","previous","next","push","close","sub","unsubscribe","remove","destroy","bulkAddRevisions","documents","args","writeData","map","bulkDocs","new_edits","set_new_edit_as_latest_revision","bulkWrite","documentWrites","writeRowById","Map","insertDocs","primary","document","set","storeDocumentData","_rev","custom","pouchResult","ret","success","error","Promise","all","resultRow","writeRow","err","isError","status","documentId","pushObj","rev","_attachments","query","preparedQuery","find","findResult","docs","pouchDoc","useDoc","getAttachmentData","attachmentId","getAttachment","attachmentData","findDocumentsById","ids","deleted","changes","live","since","doc_ids","style","viaChanges","retDocs","results","result","get","firstDoc","useFirstDoc","allDocs","include_docs","keys","rows","filter","row","docData","changeStream","asObservable","getChangedDocuments","pouchChangesOpts","limit","sinceSequence","descending","direction","pouchResults","changedDocuments","startsWith","sequence","seq","lastSequence","last_seq"],"mappings":";;AAGA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAEIC,OAFJ,QAKO,MALP;AAMA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,2BAAT,QAA4C,iBAA5C;AAmBA,SAEIC,8BAFJ,EAIIC,qBAJJ,EAMIC,iCANJ,EAQIC,oBARJ,EASIC,iCATJ,EAUIC,6BAVJ,QAWO,kBAXP;AAgBA,SACIC,SADJ,EAEIC,iBAFJ,EAIIC,oBAJJ,QAMO,YANP;AAOA,SACIC,4BADJ,QAEO,wBAFP;AAKA,IAAIC,MAAM,GAAG,CAAb;AAEA,WAAaC,sBAAb;AAWI,kCACoBC,YADpB,EAEoBC,cAFpB,EAGoBC,MAHpB,EAIoBC,SAJpB,EAKoBC,OALpB,EAME;AAAA;;AAAA,SAZcC,EAYd,GAZ2BP,MAAM,EAYjC;AAAA,SAVMQ,QAUN,GAVsF,IAAIrB,OAAJ,EAUtF;AAAA,SATMsB,IASN,GAT6B,EAS7B;AAAA,SALkBP,YAKlB,GALkBA,YAKlB;AAAA,SAJkBC,cAIlB,GAJkBA,cAIlB;AAAA,SAHkBC,MAGlB,GAHkBA,MAGlB;AAAA,SAFkBC,SAElB,GAFkBA,SAElB;AAAA,SADkBC,OAClB,GADkBA,OAClB;AACEhB,IAAAA,8BAA8B,CAACoB,GAA/B,CAAmC,IAAnC;AACA,SAAKC,WAAL,GAAmBtB,2BAA2B,CAAC,KAAKe,MAAL,CAAYQ,UAAb,CAA9C;AAEA;AACR;AACA;AACA;AACA;AACA;;AACQ,QAAMC,OAAO,GAAGd,4BAA4B,CAAY,KAAKM,SAAL,CAAeS,KAA3B,CAA5C;AAEA;AACR;AACA;AACA;AACA;;AACQ,QAAMC,mBAAyC,GAAG,IAAI7B,YAAJ,CAAiB,KAAK,IAAtB,CAAlD;AAEA,QAAM8B,QAAQ,GAAGH,OAAO,CAACI,OAAR,CAAgBC,SAAhB;AAAA,0EAA0B,iBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEnCA,EAAE,CAACC,MAAH,CAAUC,MAAV,KAAqB,CAArB,IACAN,mBAAmB,CAACO,GAApB,CAAwBH,EAAE,CAACZ,EAA3B,CAHmC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOvCQ,gBAAAA,mBAAmB,CAACL,GAApB,CAAwBS,EAAE,CAACZ,EAA3B,EAPuC,CASvC;;AACAY,gBAAAA,EAAE,CAACC,MAAH,CAAUG,OAAV,CAAkB,UAAAC,KAAK,EAAI;AACvB,sBAAIA,KAAK,CAACC,MAAN,CAAaC,GAAjB,EAAsB;AAClBF,oBAAAA,KAAK,CAACC,MAAN,CAAaC,GAAb,GAAmBjC,oBAAoB,CACnC,KAAI,CAACkB,WAD8B,EAEnCa,KAAK,CAACC,MAAN,CAAaC,GAFsB,CAAvC;AAIH;;AACD,sBAAIF,KAAK,CAACC,MAAN,CAAaE,QAAjB,EAA2B;AACvBH,oBAAAA,KAAK,CAACC,MAAN,CAAaE,QAAb,GAAwBlC,oBAAoB,CACxC,KAAI,CAACkB,WADmC,EAExCa,KAAK,CAACC,MAAN,CAAaE,QAF2B,CAA5C;AAIH;AACJ,iBAbD;;AAeA,gBAAA,KAAI,CAACnB,QAAL,CAAcoB,IAAd,CAAmBT,EAAnB;;AAzBuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA1B;;AAAA;AAAA;AAAA;AAAA,QAAjB;AA2BA,SAAKV,IAAL,CAAUoB,IAAV,CAAeb,QAAf;AACH;;AAhEL;;AAAA,SAkEIc,KAlEJ,GAkEI,iBAAQ;AACJ,SAAKrB,IAAL,CAAUc,OAAV,CAAkB,UAAAQ,GAAG;AAAA,aAAIA,GAAG,CAACC,WAAJ,EAAJ;AAAA,KAArB;AACA1C,IAAAA,8BAA8B,UAA9B,CAAsC,IAAtC,EAFI,CAIJ;AACA;;AACA,WAAOQ,oBAAP;AACH,GAzEL;;AAAA,SA2EUmC,MA3EV;AAAA,2EA2EI;AAAA;AAAA;AAAA;AAAA;AACI,mBAAKxB,IAAL,CAAUc,OAAV,CAAkB,UAAAQ,GAAG;AAAA,uBAAIA,GAAG,CAACC,WAAJ,EAAJ;AAAA,eAArB;AAEA1C,cAAAA,8BAA8B,UAA9B,CAAsC,IAAtC;AAHJ;AAAA,qBAIU,KAAKe,SAAL,CAAeS,KAAf,CAAqBoB,OAArB,EAJV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3EJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAkFiBC,gBAlFjB;AAAA,qFAkFI,kBACIC,SADJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGQA,SAAS,CAACf,MAAV,KAAqB,CAH7B;AAAA;AAAA;AAAA;;AAAA,oBAIcjC,UAAU,CAAC,IAAD,EAAO;AACnBiD,gBAAAA,IAAI,EAAE;AACFD,kBAAAA,SAAS,EAATA;AADE;AADa,eAAP,CAJxB;;AAAA;AAWUE,cAAAA,SAXV,GAWsBF,SAAS,CAACG,GAAV,CAAc,UAAAb,GAAG,EAAI;AACnC,uBAAOhC,iCAAiC,CACpC,MAAI,CAACiB,WAD+B,EAEpCe,GAFoC,CAAxC;AAIH,eALiB,CAXtB,EAkBI;;AAlBJ;AAAA,qBAmBU,KAAKrB,SAAL,CAAeS,KAAf,CAAqB0B,QAArB,CACFF,SADE,EAEF;AACIG,gBAAAA,SAAS,EAAE,KADf;AAEIC,gBAAAA,+BAA+B,EAAE;AAFrC,eAFE,CAnBV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlFJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA8GiBC,SA9GjB;AAAA,8EA8GI,kBACIC,cADJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKQA,cAAc,CAACvB,MAAf,KAA0B,CALlC;AAAA;AAAA;AAAA;;AAAA,oBAMcjC,UAAU,CAAC,IAAD,EAAO;AACnBiD,gBAAAA,IAAI,EAAE;AACFO,kBAAAA,cAAc,EAAdA;AADE;AADa,eAAP,CANxB;;AAAA;AAaUC,cAAAA,YAbV,GAa+D,IAAIC,GAAJ,EAb/D;AAcUC,cAAAA,UAdV,GAcsEH,cAAc,CAACL,GAAf,CAAmB,UAAAD,SAAS,EAAI;AAC9F,oBAAMU,OAAe,GAAIV,SAAS,CAACW,QAAX,CAA4B,MAAI,CAACtC,WAAjC,CAAxB;AACAkC,gBAAAA,YAAY,CAACK,GAAb,CAAiBF,OAAjB,EAA0BV,SAA1B;AAEA,oBAAMa,iBAAsB,GAAGzD,iCAAiC,CAC5D,MAAI,CAACiB,WADuD,EAE5D2B,SAAS,CAACW,QAFkD,CAAhE,CAJ8F,CAS9F;;AACA,oBAAIX,SAAS,CAACX,QAAd,EAAwB;AACpBwB,kBAAAA,iBAAiB,CAACC,IAAlB,GAAyBd,SAAS,CAACX,QAAV,CAAmByB,IAA5C;AACH;;AAED,uBAAOD,iBAAP;AACH,eAfiE,CAdtE;AAAA;AAAA,qBA+B8B,KAAK9C,SAAL,CAAeS,KAAf,CAAqB0B,QAArB,CAA8BO,UAA9B,EAA0C;AAChEM,gBAAAA,MAAM,EAAE;AACJ1C,kBAAAA,WAAW,EAAE,KAAKA,WADd;AAEJkC,kBAAAA,YAAY,EAAZA;AAFI;AADwD,eAA1C,CA/B9B;;AAAA;AA+BUS,cAAAA,WA/BV;AAsCUC,cAAAA,GAtCV,GAsCuD;AAC/CC,gBAAAA,OAAO,EAAE,EADsC;AAE/CC,gBAAAA,KAAK,EAAE;AAFwC,eAtCvD;AAAA;AAAA,qBA2CUC,OAAO,CAACC,GAAR,CACFL,WAAW,CAACf,GAAZ;AAAA,qFAAgB,kBAAOqB,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACNC,0BAAAA,QADM,GACKhE,iBAAiB,CAACgD,YAAD,EAAee,SAAS,CAACrD,EAAzB,CADtB;;AAAA,+BAEPqD,SAAD,CAA+BH,KAFvB;AAAA;AAAA;AAAA;;AAGFK,0BAAAA,GAHE,GAGwC;AAC5CC,4BAAAA,OAAO,EAAE,IADmC;AAE5CC,4BAAAA,MAAM,EAAE,GAFoC;AAG5CC,4BAAAA,UAAU,EAAEL,SAAS,CAACrD,EAHsB;AAI5CsD,4BAAAA,QAAQ,EAARA;AAJ4C,2BAHxC;AASRN,0BAAAA,GAAG,CAACE,KAAJ,CAAUG,SAAS,CAACrD,EAApB,IAA0BuD,GAA1B;AATQ;AAAA;;AAAA;AAWJI,0BAAAA,OAXI,GAWiCtE,SAAS,CAACiE,QAAQ,CAACZ,QAAV,CAX1C;AAYRiB,0BAAAA,OAAO,GAAGzE,oBAAoB,CAAC,MAAI,CAACkB,WAAN,EAAmBuD,OAAnB,CAA9B;AACAA,0BAAAA,OAAO,CAACd,IAAR,GAAgBQ,SAAD,CAAqCO,GAApD,CAbQ,CAeR;;AAAA;AACAD,0BAAAA,OAAO,CAACE,YAAR,GAAuB,EAAvB;;AAhBQ,8BAiBHP,QAAQ,CAACZ,QAAT,CAAkBmB,YAjBf;AAAA;AAAA;AAAA;;AAkBJP,0BAAAA,QAAQ,CAACZ,QAAT,CAAkBmB,YAAlB,GAAiC,EAAjC;AAlBI;AAAA;;AAAA;AAAA;AAAA,iCAoByBzE,6BAA6B,CAACkE,QAAQ,CAACZ,QAAT,CAAkBmB,YAAnB,CApBtD;;AAAA;AAoBJF,0BAAAA,OAAO,CAACE,YApBJ;;AAAA;AAsBRb,0BAAAA,GAAG,CAACC,OAAJ,CAAYI,SAAS,CAACrD,EAAtB,IAA4B2D,OAA5B;;AAtBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAhB;;AAAA;AAAA;AAAA;AAAA,kBADE,CA3CV;;AAAA;AAAA,gDAuEWX,GAvEX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA9GJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwLiBc,KAxLjB;AAAA,0EAwLI,kBACIC,aADJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAG6B,KAAKjE,SAAL,CAAeS,KAAf,CAAqByD,IAArB,CAAqCD,aAArC,CAH7B;;AAAA;AAGUE,cAAAA,UAHV;AAIUjB,cAAAA,GAJV,GAIiD;AACzCnB,gBAAAA,SAAS,EAAEoC,UAAU,CAACC,IAAX,CAAgBlC,GAAhB,CAAoB,UAAAmC,QAAQ,EAAI;AACvC,sBAAMC,MAAM,GAAGnF,iCAAiC,CAC5C,MAAI,CAACmB,WADuC,EAE5C+D,QAF4C,CAAhD;AAIA,yBAAOC,MAAP;AACH,iBANU;AAD8B,eAJjD;AAAA,gDAaWpB,GAbX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxLJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAwMUqB,iBAxMV;AAAA,sFAwMI,kBACIX,UADJ,EAEIY,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIiC,KAAKxE,SAAL,CAAeS,KAAf,CAAqBgE,aAArB,CACzBb,UADyB,EAEzBY,YAFyB,CAJjC;;AAAA;AAIUE,cAAAA,cAJV;AAAA,gDAQWA,cARX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAxMJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAmNUC,iBAnNV;AAAA,sFAmNI,kBAAwBC,GAAxB,EAAuCC,OAAvC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAUQA,OAVR;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAWiC,KAAK7E,SAAL,CAAeS,KAAf,CAAqBqE,OAArB,CAA6B;AAClDC,gBAAAA,IAAI,EAAE,KAD4C;AAElDC,gBAAAA,KAAK,EAAE,CAF2C;AAGlDC,gBAAAA,OAAO,EAAEL,GAHyC;AAIlDM,gBAAAA,KAAK,EAAE;AAJ2C,eAA7B,CAXjC;;AAAA;AAWcC,cAAAA,UAXd;AAkBcC,cAAAA,OAlBd,GAkB6E,EAlB7E;AAAA;AAAA,qBAmBc/B,OAAO,CAACC,GAAR,CACF6B,UAAU,CAACE,OAAX,CAAmBnD,GAAnB;AAAA,qFAAuB,kBAAOoD,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACI,MAAI,CAACtF,SAAL,CAAeS,KAAf,CAAqB8E,GAArB,CACnBD,MAAM,CAACpF,EADY,EAEnB;AACI4D,4BAAAA,GAAG,EAAEwB,MAAM,CAACR,OAAP,CAAe,CAAf,EAAkBhB,GAD3B;AAEIe,4BAAAA,OAAO,EAAE,IAFb;AAGIK,4BAAAA,KAAK,EAAE;AAHX,2BAFmB,CADJ;;AAAA;AACbM,0BAAAA,QADa;AASbC,0BAAAA,WATa,GASCtG,iCAAiC,CACjD,MAAI,CAACmB,WAD4C,EAEjDkF,QAFiD,CATlC;AAanBJ,0BAAAA,OAAO,CAACE,MAAM,CAACpF,EAAR,CAAP,GAAqBuF,WAArB;;AAbmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAvB;;AAAA;AAAA;AAAA;AAAA,kBADE,CAnBd;;AAAA;AAAA,gDAoCeL,OApCf;;AAAA;AAAA;AAAA,qBAwC8B,KAAKpF,SAAL,CAAeS,KAAf,CAAqBiF,OAArB,CAA6B;AACnDC,gBAAAA,YAAY,EAAE,IADqC;AAEnDC,gBAAAA,IAAI,EAAEhB;AAF6C,eAA7B,CAxC9B;;AAAA;AAwCU3B,cAAAA,WAxCV;AA6CUC,cAAAA,GA7CV,GA6CqE,EA7CrE;AA8CID,cAAAA,WAAW,CAAC4C,IAAZ,CACKC,MADL,CACY,UAAAC,GAAG;AAAA,uBAAI,CAAC,CAACA,GAAG,CAAC1E,GAAV;AAAA,eADf,EAEKH,OAFL,CAEa,UAAA6E,GAAG,EAAI;AACZ,oBAAIC,OAAO,GAAGD,GAAG,CAAC1E,GAAlB;AACA2E,gBAAAA,OAAO,GAAG7G,iCAAiC,CACvC,MAAI,CAACmB,WADkC,EAEvC0F,OAFuC,CAA3C;AAIA9C,gBAAAA,GAAG,CAAC6C,GAAG,CAAC7F,EAAL,CAAH,GAAc8F,OAAd;AACH,eATL;AA9CJ,gDAyDW9C,GAzDX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnNJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA+QI+C,YA/QJ,GA+QI,wBAAuF;AACnF,WAAO,KAAK9F,QAAL,CAAc+F,YAAd,EAAP;AACH,GAjRL;;AAAA,SAmRUC,mBAnRV;AAAA,wFAmRI,mBACIlG,OADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AASUmG,cAAAA,gBATV,GASyD;AACjDrB,gBAAAA,IAAI,EAAE,KAD2C;AAEjDsB,gBAAAA,KAAK,EAAEpG,OAAO,CAACoG,KAFkC;AAGjDV,gBAAAA,YAAY,EAAE,KAHmC;AAIjDX,gBAAAA,KAAK,EAAE/E,OAAO,CAACqG,aAJkC;AAKjDC,gBAAAA,UAAU,EAAEtG,OAAO,CAACuG,SAAR,KAAsB,QAAtB,GAAiC,IAAjC,GAAwC;AALH,eATzD;AAAA;AAAA,qBAgB+B,KAAKxG,SAAL,CAAeS,KAAf,CAAqBqE,OAArB,CAA6BsB,gBAA7B,CAhB/B;;AAAA;AAgBUK,cAAAA,YAhBV;;AAkBI;AACR;AACA;AACA;AACA;AACA;AACcC,cAAAA,gBAxBV,GAwB6BD,YAAY,CAACpB,OAAb,CACpBS,MADoB,CACb,UAAAC,GAAG;AAAA,uBAAI,CAACA,GAAG,CAAC7F,EAAJ,CAAOyG,UAAP,CAAkBzH,qBAAlB,CAAL;AAAA,eADU,EAEpBgD,GAFoB,CAEhB,UAAA6D,GAAG;AAAA,uBAAK;AACT7F,kBAAAA,EAAE,EAAE6F,GAAG,CAAC7F,EADC;AAET0G,kBAAAA,QAAQ,EAAEb,GAAG,CAACc;AAFL,iBAAL;AAAA,eAFa,CAxB7B;AA8BUC,cAAAA,YA9BV,GA8ByBL,YAAY,CAACM,QA9BtC;AAAA,iDA+BW;AACHL,gBAAAA,gBAAgB,EAAhBA,gBADG;AAEHI,gBAAAA,YAAY,EAAZA;AAFG,eA/BX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnRJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    Observable,\n    Subject,\n    Subscription,\n    tap\n} from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    BlobBuffer,\n    BulkWriteRow,\n    ChangeStreamOnceOptions,\n    EventBulk,\n    PouchBulkDocResultRow,\n    PouchChangesOptionsNonLive,\n    PouchSettings,\n    PouchWriteError,\n    PreparedQuery,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageQueryResult\n} from '../../types';\nimport {\n    getEventKey,\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    pouchChangeRowToChangeEvent,\n    POUCHDB_DESIGN_PREFIX,\n    POUCHDB_LOCAL_PREFIX,\n    pouchDocumentDataToRxDocumentData,\n    PouchStorageInternals,\n    pouchSwapIdToPrimary,\n    rxDocumentDataToPouchDocumentData,\n    writeAttachmentsToAttachments\n} from './pouchdb-helper';\nimport {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport {\n    flatClone,\n    getFromMapOrThrow,\n    getHeightOfRevision,\n    PROMISE_RESOLVE_VOID,\n    randomCouchString\n} from '../../util';\nimport {\n    getCustomEventEmitterByPouch\n} from './custom-events-plugin';\n\n\nlet lastId = 0;\n\nexport class RxStorageInstancePouch<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    PouchStorageInternals,\n    PouchSettings\n> {\n    public readonly id: number = lastId++;\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private subs: Subscription[] = [];\n    private primaryPath: keyof RxDocType;\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n\n        /**\n         * Instead of listening to pouch.changes,\n         * we have overwritten pouchdbs bulkDocs()\n         * and create our own event stream, this will work more relyable\n         * and does not mix up with write events from other sources.\n         */\n        const emitter = getCustomEventEmitterByPouch<RxDocType>(this.internals.pouch);\n\n        /**\n         * Contains all eventIds that of emitted events,\n         * used because multi-instance pouchdbs often will reemit the same\n         * event on the other browser tab so we have to de-duplicate them.\n         */\n        const emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n        const eventSub = emitter.subject.subscribe(async (ev) => {\n            if (\n                ev.events.length === 0 ||\n                emittedEventBulkIds.has(ev.id)\n            ) {\n                return;\n            }\n            emittedEventBulkIds.add(ev.id);\n\n            // rewrite primaryPath of all events\n            ev.events.forEach(event => {\n                if (event.change.doc) {\n                    event.change.doc = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.doc as any\n                    );\n                }\n                if (event.change.previous) {\n                    event.change.previous = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.previous as any\n                    );\n                }\n            });\n\n            this.changes$.next(ev);\n        });\n        this.subs.push(eventSub);\n    }\n\n    close() {\n        this.subs.forEach(sub => sub.unsubscribe());\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        this.subs.forEach(sub => sub.unsubscribe());\n\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        await this.internals.pouch.destroy();\n    }\n\n    public async bulkAddRevisions(\n        documents: RxDocumentData<RxDocType>[]\n    ): Promise<void> {\n        if (documents.length === 0) {\n            throw newRxError('P3', {\n                args: {\n                    documents\n                }\n            });\n        }\n\n        const writeData = documents.map(doc => {\n            return rxDocumentDataToPouchDocumentData(\n                this.primaryPath,\n                doc\n            );\n        });\n\n        // we do not need the response here because pouchdb returns an empty array on new_edits: false\n        await this.internals.pouch.bulkDocs(\n            writeData,\n            {\n                new_edits: false,\n                set_new_edit_as_latest_revision: true\n            }\n        );\n    }\n\n    public async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[]\n    ): Promise<\n        RxStorageBulkWriteResponse<RxDocType>\n    > {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const writeRowById: Map<string, BulkWriteRow<RxDocType>> = new Map();\n        const insertDocs: (RxDocType & { _id: string; _rev: string })[] = documentWrites.map(writeData => {\n            const primary: string = (writeData.document as any)[this.primaryPath];\n            writeRowById.set(primary, writeData);\n\n            const storeDocumentData: any = rxDocumentDataToPouchDocumentData<RxDocType>(\n                this.primaryPath,\n                writeData.document\n            );\n\n            // if previous document exists, we have to send the previous revision to pouchdb.\n            if (writeData.previous) {\n                storeDocumentData._rev = writeData.previous._rev;\n            }\n\n            return storeDocumentData;\n        });\n\n        const pouchResult = await this.internals.pouch.bulkDocs(insertDocs, {\n            custom: {\n                primaryPath: this.primaryPath,\n                writeRowById\n            }\n        } as any);\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        await Promise.all(\n            pouchResult.map(async (resultRow) => {\n                const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n                if ((resultRow as PouchWriteError).error) {\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: resultRow.id,\n                        writeRow\n                    };\n                    ret.error[resultRow.id] = err;\n                } else {\n                    let pushObj: RxDocumentData<RxDocType> = flatClone(writeRow.document) as any;\n                    pushObj = pouchSwapIdToPrimary(this.primaryPath, pushObj);\n                    pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                    // replace the inserted attachments with their diggest\n                    pushObj._attachments = {};\n                    if (!writeRow.document._attachments) {\n                        writeRow.document._attachments = {};\n                    } else {\n                        pushObj._attachments = await writeAttachmentsToAttachments(writeRow.document._attachments);\n                    }\n                    ret.success[resultRow.id] = pushObj;\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    public async query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        const findResult = await this.internals.pouch.find<RxDocType>(preparedQuery);\n        const ret: RxStorageQueryResult<RxDocType> = {\n            documents: findResult.docs.map(pouchDoc => {\n                const useDoc = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    pouchDoc\n                );\n                return useDoc;\n            })\n        };\n        return ret;\n    }\n\n    async getAttachmentData(\n        documentId: string,\n        attachmentId: string\n    ): Promise<BlobBuffer> {\n        const attachmentData = await this.internals.pouch.getAttachment(\n            documentId,\n            attachmentId\n        );\n        return attachmentData;\n    }\n\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        /**\n         * On deleted documents, pouchdb will only return the tombstone.\n         * So we have to get the properties directly for each document\n         * with the hack of getting the changes and then make one request per document\n         * with the latest revision.\n         * TODO create an issue at pouchdb on how to get the document data of deleted documents,\n         * when one past revision was written via new_edits=false\n         * @link https://stackoverflow.com/a/63516761/3443137\n         */\n        if (deleted) {\n            const viaChanges = await this.internals.pouch.changes({\n                live: false,\n                since: 0,\n                doc_ids: ids,\n                style: 'all_docs'\n            });\n\n            const retDocs: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n            await Promise.all(\n                viaChanges.results.map(async (result) => {\n                    const firstDoc = await this.internals.pouch.get(\n                        result.id,\n                        {\n                            rev: result.changes[0].rev,\n                            deleted: 'ok',\n                            style: 'all_docs'\n                        }\n                    );\n                    const useFirstDoc = pouchDocumentDataToRxDocumentData(\n                        this.primaryPath,\n                        firstDoc\n                    );\n                    retDocs[result.id] = useFirstDoc;\n                })\n            );\n            return retDocs;\n        }\n\n\n        const pouchResult = await this.internals.pouch.allDocs({\n            include_docs: true,\n            keys: ids\n        });\n\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n        pouchResult.rows\n            .filter(row => !!row.doc)\n            .forEach(row => {\n                let docData = row.doc;\n                docData = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    docData\n                );\n                ret[row.id] = docData;\n            });\n\n        return ret;\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: {\n            id: string;\n            sequence: number;\n        }[];\n        lastSequence: number;\n    }> {\n        const pouchChangesOpts: PouchChangesOptionsNonLive = {\n            live: false,\n            limit: options.limit,\n            include_docs: false,\n            since: options.sinceSequence,\n            descending: options.direction === 'before' ? true : false\n        };\n        const pouchResults = await this.internals.pouch.changes(pouchChangesOpts);\n\n        /**\n         * TODO stripping the internal docs\n         * results in having a non-full result set that maybe no longer\n         * reaches the options.limit. We should fill up again\n         * to ensure pagination works correctly.\n         */\n        const changedDocuments = pouchResults.results\n            .filter(row => !row.id.startsWith(POUCHDB_DESIGN_PREFIX))\n            .map(row => ({\n                id: row.id,\n                sequence: row.seq\n            }));\n        const lastSequence = pouchResults.last_seq;\n        return {\n            changedDocuments,\n            lastSequence\n        };\n    }\n}\n"],"file":"rx-storage-instance-pouch.js"}