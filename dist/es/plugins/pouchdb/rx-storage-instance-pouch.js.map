{"version":3,"sources":["../../../../src/plugins/pouchdb/rx-storage-instance-pouch.ts"],"names":["Subject","newRxError","getPrimaryFieldOfPrimaryKey","getEventKey","OPEN_POUCHDB_STORAGE_INSTANCES","pouchChangeRowToChangeEvent","POUCHDB_DESIGN_PREFIX","POUCHDB_LOCAL_PREFIX","pouchDocumentDataToRxDocumentData","pouchSwapIdToPrimary","pouchSwapPrimaryToId","primarySwapPouchDbQuerySelector","rxDocumentDataToPouchDocumentData","writeAttachmentsToAttachments","filterInMemoryFields","massageSelector","flatClone","getFromMapOrThrow","getHeightOfRevision","PROMISE_RESOLVE_VOID","getCustomEventEmitterByPouch","getSchemaByObjectPath","RxStorageInstancePouch","databaseName","collectionName","schema","internals","options","changes$","subs","add","primaryPath","primaryKey","emitter","pouch","emittedEventIds","obliviousSet","eventSub","subject","subscribe","ev","writeOptions","hasOwnProperty","new_edits","Promise","all","writeDocs","map","writeDoc","id","_id","_attachments","previousDoc","previousDocs","get","_rev","_deleted","event","operation","doc","previous","args","addEventToChangeStream","startTime","endTime","custom","writeDocsById","Map","forEach","set","writeResult","resultRow","startsWith","rev","writeMap","writeRowById","error","writeRow","newDoc","document","push","change","primary","eventId","has","storageChangeEvent","documentId","next","close","sub","unsubscribe","remove","destroy","getSortComparator","query","sortOptions","sort","inMemoryFields","Object","keys","selector","filter","key","fun","a","b","rows","sortedRows","length","getQueryMatcher","massagedSelector","cloned","row","rowsMatched","ret","prepareQuery","mutateableQuery","sortPart","comparisonOperators","keyUsed","some","op","includes","schemaObj","type","$gt","$regex","path","sortArray","part","direction","values","useKey","newPart","entries","k","v","Array","isArray","bulkAddRevisions","documents","writeData","bulkDocs","set_new_edit_as_latest_revision","bulkWrite","documentWrites","insertDocs","storeDocumentData","pouchResult","success","err","isError","status","pushObj","preparedQuery","find","findResult","docs","pouchDoc","useDoc","getAttachmentData","attachmentId","getAttachment","attachmentData","findDocumentsById","ids","deleted","changes","live","since","doc_ids","style","viaChanges","retDocs","results","result","firstDoc","useFirstDoc","allDocs","include_docs","docData","changeStream","asObservable","getChangedDocuments","pouchChangesOpts","limit","sinceSequence","descending","pouchResults","changedDocuments","sequence","seq","lastSequence","last_seq"],"mappings":"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","sourcesContent":["import type {\n    ChangeEvent,\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    BlobBuffer,\n    BulkWriteRow,\n    ChangeStreamOnceOptions,\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    PouchBulkDocResultRow,\n    PouchChangesOptionsNonLive,\n    PouchSettings,\n    PouchWriteError,\n    PreparedQuery,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageQueryResult\n} from '../../types';\nimport {\n    getEventKey,\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    pouchChangeRowToChangeEvent,\n    POUCHDB_DESIGN_PREFIX,\n    POUCHDB_LOCAL_PREFIX,\n    pouchDocumentDataToRxDocumentData,\n    PouchStorageInternals,\n    pouchSwapIdToPrimary,\n    pouchSwapPrimaryToId,\n    primarySwapPouchDbQuerySelector,\n    rxDocumentDataToPouchDocumentData,\n    writeAttachmentsToAttachments\n} from './pouchdb-helper';\nimport {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport {\n    flatClone,\n    getFromMapOrThrow,\n    getHeightOfRevision,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport {\n    getCustomEventEmitterByPouch\n} from './custom-events-plugin';\nimport { getSchemaByObjectPath } from '../../rx-schema-helper';\n\nexport class RxStorageInstancePouch<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    PouchStorageInternals,\n    PouchSettings\n> {\n\n    private changes$: Subject<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = new Subject();\n    private subs: Subscription[] = [];\n    private emittedEventIds: ObliviousSet<string>;\n    private primaryPath: keyof RxDocType;\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n\n        /**\n         * Instead of listening to pouch.changes,\n         * we have overwritten pouchdbs bulkDocs()\n         * and create our own event stream, this will work more relyable\n         * and does not mix up with write events from other sources.\n         */\n        const emitter = getCustomEventEmitterByPouch(this.internals.pouch);\n        this.emittedEventIds = emitter.obliviousSet;\n        const eventSub = emitter.subject.subscribe(async (ev) => {\n            if (ev.writeOptions.hasOwnProperty('new_edits') && !ev.writeOptions.new_edits) {\n                await Promise.all(\n                    ev.writeDocs.map(async (writeDoc) => {\n                        const id = writeDoc._id;\n\n                        writeDoc = pouchDocumentDataToRxDocumentData(\n                            this.primaryPath,\n                            writeDoc\n                        );\n\n                        writeDoc._attachments = await writeAttachmentsToAttachments(writeDoc._attachments);\n\n                        let previousDoc = ev.previousDocs.get(id);\n                        if (previousDoc) {\n                            previousDoc = pouchDocumentDataToRxDocumentData(\n                                this.primaryPath,\n                                previousDoc\n                            );\n                        }\n\n                        if (\n                            previousDoc &&\n                            getHeightOfRevision(previousDoc._rev) > getHeightOfRevision(writeDoc._rev)\n                        ) {\n                            // not the newest revision was added\n                            // TODO is comparing the height enough to compare revisions?\n                            return;\n                        }\n                        if (!previousDoc && writeDoc._deleted) {\n                            // deleted document was added as revision\n                            return;\n                        }\n\n                        if (previousDoc && previousDoc._deleted && writeDoc._deleted) {\n                            // delete document was deleted again\n                            return;\n                        }\n\n                        let event: ChangeEvent<RxDocumentData<RxDocType>>;\n                        if ((!previousDoc || previousDoc._deleted) && !writeDoc._deleted) {\n                            // was insert\n                            event = {\n                                operation: 'INSERT',\n                                doc: writeDoc,\n                                id: id,\n                                previous: null\n                            };\n                        } else if (writeDoc._deleted && previousDoc && !previousDoc._deleted) {\n                            // was delete\n                            previousDoc._rev = writeDoc._rev;\n                            event = {\n                                operation: 'DELETE',\n                                doc: null,\n                                id: id,\n                                previous: previousDoc\n                            };\n                        } else if (\n                            previousDoc\n                        ) {\n                            // was update\n                            event = {\n                                operation: 'UPDATE',\n                                doc: writeDoc,\n                                id: id,\n                                previous: previousDoc\n                            };\n                        } else {\n                            throw newRxError('SNH', { args: { writeDoc } });\n                        }\n                        this.addEventToChangeStream(\n                            event,\n                            ev.startTime,\n                            ev.endTime\n                        );\n                    })\n                );\n                return;\n            }\n\n\n            /**\n             * There is no write map given for internal pouchdb document writes\n             * like it is done with replication.\n             */\n            if (!ev.writeOptions.custom) {\n                const writeDocsById: Map<string, any> = new Map();\n                ev.writeDocs.forEach(writeDoc => writeDocsById.set(writeDoc._id, writeDoc));\n\n                await Promise.all(\n                    ev.writeResult.map(async (resultRow) => {\n                        const id = resultRow.id;\n                        if (\n                            id.startsWith(POUCHDB_DESIGN_PREFIX) ||\n                            id.startsWith(POUCHDB_LOCAL_PREFIX)\n                        ) {\n                            return;\n                        }\n                        let writeDoc = getFromMapOrThrow(writeDocsById, resultRow.id);\n                        writeDoc._attachments = await writeAttachmentsToAttachments(writeDoc._attachments);\n\n                        writeDoc = flatClone(writeDoc);\n                        writeDoc._rev = (resultRow as any).rev;\n                        const event = pouchChangeRowToChangeEvent<RxDocType>(\n                            this.primaryPath,\n                            writeDoc\n                        );\n                        this.addEventToChangeStream(event);\n                    })\n                );\n\n                return;\n            }\n\n            const writeMap: Map<string, BulkWriteRow<RxDocType>> = ev.writeOptions.custom.writeRowById;\n            await Promise.all(\n                ev.writeResult.map(async (resultRow) => {\n                    if ((resultRow as PouchWriteError).error) {\n                        return;\n                    }\n\n                    const id = resultRow.id;\n                    const writeRow = getFromMapOrThrow(writeMap, id);\n                    const newDoc = pouchDocumentDataToRxDocumentData(\n                        this.primaryPath,\n                        writeRow.document as any\n                    );\n                    newDoc._attachments = await writeAttachmentsToAttachments(newDoc._attachments);\n                    newDoc._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                    let event: ChangeEvent<RxDocumentData<RxDocType>>;\n                    if (!writeRow.previous || writeRow.previous._deleted) {\n                        // was insert\n                        event = {\n                            operation: 'INSERT',\n                            doc: newDoc,\n                            id: id,\n                            previous: null\n                        };\n                    } else if (writeRow.document._deleted) {\n                        // was delete\n\n                        // we need to add the new revision to the previous doc\n                        // so that the eventkey is calculated correctly.\n                        // Is this a hack? idk.\n                        const previousDoc = pouchDocumentDataToRxDocumentData(\n                            this.primaryPath,\n                            writeRow.previous as any\n                        );\n                        previousDoc._attachments = await writeAttachmentsToAttachments(previousDoc._attachments);\n                        previousDoc._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                        event = {\n                            operation: 'DELETE',\n                            doc: null,\n                            id: resultRow.id,\n                            previous: previousDoc\n                        };\n                    } else {\n                        // was update\n                        event = {\n                            operation: 'UPDATE',\n                            doc: newDoc,\n                            id: resultRow.id,\n                            previous: writeRow.previous\n                        };\n                    }\n\n                    if (\n                        writeRow.document._deleted &&\n                        (\n                            !writeRow.previous ||\n                            writeRow.previous._deleted\n                        )\n                    ) {\n                        /**\n                         * A deleted document was newly added to the storage engine,\n                         * do not emit an event.\n                         */\n                    } else {\n                        this.addEventToChangeStream(\n                            event,\n                            ev.startTime,\n                            ev.endTime\n                        );\n                    }\n\n                })\n            );\n        });\n        this.subs.push(eventSub);\n    }\n\n    private addEventToChangeStream(\n        change: ChangeEvent<RxDocumentData<RxDocType>>,\n        startTime?: number,\n        endTime?: number\n    ) {\n        const doc: RxDocumentData<RxDocType> = change.operation === 'DELETE' ? change.previous as any : change.doc as any;\n        const primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        const primary: string = (doc as any)[primaryPath];\n\n        const eventId = getEventKey(false, primary, doc._rev);\n\n        if (this.emittedEventIds.has(eventId)) {\n            return;\n        }\n\n        this.emittedEventIds.add(eventId);\n        const storageChangeEvent: RxStorageChangeEvent<RxDocumentData<RxDocType>> = {\n            eventId,\n            documentId: primary,\n            change,\n            startTime,\n            endTime\n        };\n\n        this.changes$.next(storageChangeEvent);\n    }\n\n    close() {\n        this.subs.forEach(sub => sub.unsubscribe());\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        this.subs.forEach(sub => sub.unsubscribe());\n\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        await this.internals.pouch.destroy();\n    }\n\n    getSortComparator(\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        const sortOptions: MangoQuerySortPart[] = query.sort ? (query.sort as any) : [{\n            [primaryPath]: 'asc'\n        }];\n        const inMemoryFields = Object\n            .keys(query.selector)\n            .filter(key => !key.startsWith('$'));\n\n        const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            /**\n             * Sorting on two documents with the same primary is not allowed\n             * because it might end up in a non-deterministic result.\n             */\n            if (a[primaryPath] === b[primaryPath]) {\n                throw newRxError('SNH', { args: { a, b }, primaryPath: primaryPath as any });\n            }\n\n            // TODO use createFieldSorter\n            // TODO make a performance test\n            const rows = [a, b].map(doc => ({\n                doc: pouchSwapPrimaryToId<RxDocType>(this.primaryPath, doc)\n            }));\n            const sortedRows: { doc: any }[] = filterInMemoryFields(\n                rows,\n                {\n                    selector: {},\n                    sort: sortOptions\n                },\n                inMemoryFields\n            );\n            if (sortedRows.length !== 2) {\n                throw newRxError('SNH', {\n                    query,\n                    primaryPath: this.primaryPath as any,\n                    args: {\n                        rows,\n                        sortedRows\n                    }\n                });\n            }\n            if (sortedRows[0].doc._id === rows[0].doc._id) {\n                return -1;\n            } else {\n                return 1;\n            }\n        };\n        return fun;\n    }\n\n\n    /**\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n    getQueryMatcher(\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const massagedSelector = massageSelector(query.selector);\n\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocType) => {\n            const cloned = pouchSwapPrimaryToId(this.primaryPath, doc);\n            const row = {\n                doc: cloned\n            };\n            const rowsMatched = filterInMemoryFields(\n                [row],\n                { selector: massagedSelector },\n                Object.keys(query.selector)\n            );\n            const ret = rowsMatched && rowsMatched.length === 1;\n            return ret;\n        };\n        return fun;\n    }\n\n\n    /**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\n    prepareQuery(\n        mutateableQuery: MangoQuery<RxDocType>\n    ): PreparedQuery<RxDocType> {\n        const primaryKey = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        const query = mutateableQuery;\n\n        /**\n         * because sort wont work on unused keys we have to workaround\n         * so we add the key to the selector if necessary\n         * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n         */\n        if (query.sort) {\n            query.sort.forEach(sortPart => {\n                const key = Object.keys(sortPart)[0];\n                const comparisonOperators = ['$gt', '$gte', '$lt', '$lte'];\n                const keyUsed = query.selector[key] && Object.keys(query.selector[key]).some(op => comparisonOperators.includes(op)) || false;\n                if (!keyUsed) {\n                    const schemaObj = getSchemaByObjectPath(this.schema, key);\n                    if (!schemaObj) {\n                        throw newRxError('QU5', {\n                            query,\n                            key\n                        });\n                    }\n                    if (!query.selector[key]) {\n                        query.selector[key] = {};\n                    }\n                    switch (schemaObj.type) {\n                        case 'number':\n                        case 'integer':\n                            // TODO change back to -Infinity when issue resolved\n                            // @link https://github.com/pouchdb/pouchdb/issues/6454\n                            // -Infinity does not work since pouchdb 6.2.0\n                            query.selector[key].$gt = -9999999999999999999999999999;\n                            break;\n                        case 'string':\n                            /**\n                             * strings need an empty string, see\n                             * @link https://github.com/pubkey/rxdb/issues/585\n                             */\n                            if (typeof query.selector[key] !== 'string') {\n                                query.selector[key].$gt = '';\n                            }\n                            break;\n                        default:\n                            query.selector[key].$gt = null;\n                            break;\n                    }\n                }\n            });\n        }\n\n        // regex does not work over the primary key\n        // TODO move this to dev mode\n        if (query.selector[primaryKey as any] && query.selector[primaryKey as any].$regex) {\n            throw newRxError('QU4', {\n                path: primaryKey as any,\n                query: mutateableQuery\n            });\n        }\n\n        // primary-swap sorting\n        if (query.sort) {\n            const sortArray: MangoQuerySortPart<RxDocType>[] = query.sort.map(part => {\n                const key = Object.keys(part)[0];\n                const direction: MangoQuerySortDirection = Object.values(part)[0];\n                const useKey = key === primaryKey ? '_id' : key;\n                const newPart = { [useKey]: direction };\n                return newPart as any;\n            });\n            query.sort = sortArray;\n        }\n\n        // strip empty selectors\n        Object.entries(query.selector).forEach(([k, v]) => {\n            if (\n                typeof v === 'object' &&\n                v !== null &&\n                !Array.isArray(v) &&\n                Object.keys((v as any)).length === 0\n            ) {\n                delete query.selector[k];\n            }\n        });\n\n        query.selector = primarySwapPouchDbQuerySelector(query.selector, this.primaryPath);\n\n        /**\n         * To ensure a deterministic sorting,\n         * we have to ensure the primary key is always part\n         * of the sort query.\n\n        * TODO This should be done but will not work with pouchdb\n         * because it will throw\n         * 'Cannot sort on field(s) \"key\" when using the default index'\n         * So we likely have to modify the indexes so that this works. \n         */\n        /*\n        if (!mutateableQuery.sort) {\n            mutateableQuery.sort = [{ [this.primaryPath]: 'asc' }] as any;\n        } else {\n            const isPrimaryInSort = mutateableQuery.sort\n                .find(p => firstPropertyNameOfObject(p) === this.primaryPath);\n            if (!isPrimaryInSort) {\n                mutateableQuery.sort.push({ [this.primaryPath]: 'asc' } as any);\n            }\n        }\n        */\n\n        return query;\n    }\n\n    public async bulkAddRevisions(\n        documents: RxDocumentData<RxDocType>[]\n    ): Promise<void> {\n        if (documents.length === 0) {\n            throw newRxError('P3', {\n                args: {\n                    documents\n                }\n            });\n        }\n\n        const writeData = documents.map(doc => {\n            return rxDocumentDataToPouchDocumentData(\n                this.primaryPath,\n                doc\n            );\n        });\n\n        // we do not need the response here because pouchdb returns an empty array on new_edits: false\n        await this.internals.pouch.bulkDocs(\n            writeData,\n            {\n                new_edits: false,\n                set_new_edit_as_latest_revision: true\n            }\n        );\n    }\n\n    public async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[]\n    ): Promise<\n        RxStorageBulkWriteResponse<RxDocType>\n    > {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const writeRowById: Map<string, BulkWriteRow<RxDocType>> = new Map();\n\n        const insertDocs: (RxDocType & { _id: string; _rev: string })[] = documentWrites.map(writeData => {\n            const primary: string = (writeData.document as any)[this.primaryPath];\n            writeRowById.set(primary, writeData);\n\n            const storeDocumentData: any = rxDocumentDataToPouchDocumentData<RxDocType>(\n                this.primaryPath,\n                writeData.document\n            );\n\n\n            // if previous document exists, we have to send the previous revision to pouchdb.\n            if (writeData.previous) {\n                storeDocumentData._rev = writeData.previous._rev;\n            }\n\n            return storeDocumentData;\n        });\n\n        const pouchResult = await this.internals.pouch.bulkDocs(insertDocs, {\n            custom: {\n                writeRowById\n            }\n        } as any);\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: new Map(),\n            error: new Map()\n        };\n\n        await Promise.all(\n            pouchResult.map(async (resultRow) => {\n                const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n                if ((resultRow as PouchWriteError).error) {\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: resultRow.id,\n                        writeRow\n                    };\n                    ret.error.set(resultRow.id, err);\n                } else {\n                    let pushObj: RxDocumentData<RxDocType> = flatClone(writeRow.document) as any;\n                    pushObj = pouchSwapIdToPrimary(this.primaryPath, pushObj);\n                    pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                    // replace the inserted attachments with their diggest\n                    pushObj._attachments = {};\n                    if (!writeRow.document._attachments) {\n                        writeRow.document._attachments = {};\n                    } else {\n                        pushObj._attachments = await writeAttachmentsToAttachments(writeRow.document._attachments);\n                    }\n                    ret.success.set(resultRow.id, pushObj);\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    public async query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        const findResult = await this.internals.pouch.find<RxDocType>(preparedQuery);\n        const ret: RxStorageQueryResult<RxDocType> = {\n            documents: findResult.docs.map(pouchDoc => {\n                const useDoc = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    pouchDoc\n                );\n                return useDoc;\n            })\n        };\n        return ret;\n    }\n\n    async getAttachmentData(\n        documentId: string,\n        attachmentId: string\n    ): Promise<BlobBuffer> {\n        const attachmentData = await this.internals.pouch.getAttachment(\n            documentId,\n            attachmentId\n        );\n        return attachmentData;\n    }\n\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<Map<string, RxDocumentData<RxDocType>>> {\n        /**\n         * On deleted documents, pouchdb will only return the tombstone.\n         * So we have to get the properties directly for each document\n         * with the hack of getting the changes and then make one request per document\n         * with the latest revision.\n         * TODO create an issue at pouchdb on how to get the document data of deleted documents,\n         * when one past revision was written via new_edits=false\n         * @link https://stackoverflow.com/a/63516761/3443137\n         */\n        if (deleted) {\n            const viaChanges = await this.internals.pouch.changes({\n                live: false,\n                since: 0,\n                doc_ids: ids,\n                style: 'all_docs'\n            });\n\n            const retDocs = new Map();\n            await Promise.all(\n                viaChanges.results.map(async (result) => {\n                    const firstDoc = await this.internals.pouch.get(\n                        result.id,\n                        {\n                            rev: result.changes[0].rev,\n                            deleted: 'ok',\n                            style: 'all_docs'\n                        }\n                    );\n                    const useFirstDoc = pouchDocumentDataToRxDocumentData(\n                        this.primaryPath,\n                        firstDoc\n                    );\n                    retDocs.set(result.id, useFirstDoc);\n                })\n            );\n            return retDocs;\n        }\n\n\n        const pouchResult = await this.internals.pouch.allDocs({\n            include_docs: true,\n            keys: ids\n        });\n\n        const ret = new Map();\n        pouchResult.rows\n            .filter(row => !!row.doc)\n            .forEach(row => {\n                let docData = row.doc;\n                docData = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    docData\n                );\n                ret.set(row.id, docData);\n            });\n\n        return ret;\n    }\n\n    changeStream(): Observable<RxStorageChangeEvent<RxDocumentData<RxDocType>>> {\n        return this.changes$.asObservable();\n    }\n\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: {\n            id: string;\n            sequence: number;\n        }[];\n        lastSequence: number;\n    }> {\n        const pouchChangesOpts: PouchChangesOptionsNonLive = {\n            live: false,\n            limit: options.limit,\n            include_docs: false,\n            since: options.sinceSequence,\n            descending: options.direction === 'before' ? true : false\n        };\n        const pouchResults = await this.internals.pouch.changes(pouchChangesOpts);\n\n        /**\n         * TODO stripping the internal docs\n         * results in having a non-full result set that maybe no longer\n         * reaches the options.limit. We should fill up again\n         * to ensure pagination works correctly.\n         */\n        const changedDocuments = pouchResults.results\n            .filter(row => !row.id.startsWith(POUCHDB_DESIGN_PREFIX))\n            .map(row => ({\n                id: row.id,\n                sequence: row.seq\n            }));\n        const lastSequence = pouchResults.last_seq;\n        return {\n            changedDocuments,\n            lastSequence\n        };\n    }\n}\n"],"file":"rx-storage-instance-pouch.js"}