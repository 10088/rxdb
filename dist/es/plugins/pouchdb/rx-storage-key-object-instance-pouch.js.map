{"version":3,"sources":["../../../../src/plugins/pouchdb/rx-storage-key-object-instance-pouch.ts"],"names":["Subject","newRxError","flatClone","getFromMapOrThrow","now","PROMISE_RESOLVE_VOID","getEventKey","OPEN_POUCHDB_STORAGE_INSTANCES","POUCHDB_LOCAL_PREFIX","pouchStripLocalFlagFromPrimary","RxStorageKeyObjectInstancePouch","databaseName","collectionName","internals","options","changes$","add","close","remove","pouch","destroy","bulkWrite","documentWrites","length","args","writeRowById","Map","insertDocs","map","writeRow","set","document","_id","storeDocumentData","previous","_rev","startTime","bulkDocs","pouchResult","endTime","ret","success","error","forEach","resultRow","id","err","isError","status","documentId","pushObj","rev","_attachments","event","operation","doc","_deleted","previousDoc","eventId","storageChangeEvent","change","next","findLocalDocumentsById","ids","Promise","all","prefixedId","get","docData","changeStream","asObservable"],"mappings":"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","sourcesContent":["import { ChangeEvent } from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageKeyObjectInstance,\n    RxStorageChangeEvent,\n    RxLocalDocumentData,\n    BulkWriteLocalRow,\n    RxLocalStorageBulkWriteResponse,\n    PouchWriteError,\n    RxStorageBulkWriteLocalError,\n    PouchBulkDocResultRow,\n    PouchSettings\n} from '../../types';\nimport {\n    flatClone,\n    getFromMapOrThrow,\n    now,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport {\n    getEventKey,\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    POUCHDB_LOCAL_PREFIX,\n    PouchStorageInternals,\n    pouchStripLocalFlagFromPrimary\n} from './pouchdb-helper';\n\nexport class RxStorageKeyObjectInstancePouch implements RxStorageKeyObjectInstance<PouchStorageInternals, PouchSettings> {\n\n    private changes$: Subject<RxStorageChangeEvent<RxLocalDocumentData>> = new Subject();\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n    }\n\n    close(): Promise<void> {\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        await this.internals.pouch.destroy();\n    }\n\n    public async bulkWrite<D = any>(\n        documentWrites: BulkWriteLocalRow<D>[]\n    ): Promise<RxLocalStorageBulkWriteResponse<D>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const writeRowById: Map<string, BulkWriteLocalRow<D>> = new Map();\n\n        const insertDocs: RxLocalDocumentData<D>[] = documentWrites.map(writeRow => {\n            writeRowById.set(writeRow.document._id, writeRow);\n            const storeDocumentData = flatClone(writeRow.document);\n\n            /**\n             * add local prefix\n             * Local documents always have _id as primary\n             */\n            storeDocumentData._id = POUCHDB_LOCAL_PREFIX + storeDocumentData._id;\n\n            // if previous document exists, we have to send the previous revision to pouchdb.\n            if (writeRow.previous) {\n                storeDocumentData._rev = writeRow.previous._rev;\n            }\n\n            return storeDocumentData;\n        });\n\n        const startTime = now();\n        const pouchResult = await this.internals.pouch.bulkDocs(insertDocs);\n        const endTime = now();\n        const ret: RxLocalStorageBulkWriteResponse<D> = {\n            success: new Map(),\n            error: new Map()\n        };\n\n        pouchResult.forEach(resultRow => {\n            resultRow.id = pouchStripLocalFlagFromPrimary(resultRow.id);\n            const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n            if ((resultRow as PouchWriteError).error) {\n                const err: RxStorageBulkWriteLocalError<D> = {\n                    isError: true,\n                    status: 409,\n                    documentId: resultRow.id,\n                    writeRow\n                };\n                ret.error.set(resultRow.id, err);\n            } else {\n                const pushObj: RxLocalDocumentData<D> = flatClone(writeRow.document);\n                pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n                // local document cannot have attachments\n                pushObj._attachments = {};\n                ret.success.set(resultRow.id, pushObj as any);\n\n                /**\n                 * Emit a write event to the changestream.\n                 * We do this here and not by observing the internal pouchdb changes\n                 * because here we have the previous document data and do\n                 * not have to fill previous with 'UNKNOWN'.\n                 */\n                let event: ChangeEvent<RxLocalDocumentData<D>>;\n                if (!writeRow.previous) {\n                    // was insert\n                    event = {\n                        operation: 'INSERT',\n                        doc: pushObj,\n                        id: resultRow.id,\n                        previous: null\n                    };\n                } else if (writeRow.document._deleted) {\n                    // was delete\n\n                    // we need to add the new revision to the previous doc\n                    // so that the eventkey is calculated correctly.\n                    // Is this a hack? idk.\n                    const previousDoc = flatClone(writeRow.previous);\n                    previousDoc._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                    event = {\n                        operation: 'DELETE',\n                        doc: null,\n                        id: resultRow.id,\n                        previous: previousDoc\n                    };\n                } else {\n                    // was update\n                    event = {\n                        operation: 'UPDATE',\n                        doc: pushObj,\n                        id: resultRow.id,\n                        previous: writeRow.previous\n                    };\n                }\n\n                if (\n                    writeRow.document._deleted &&\n                    (\n                        !writeRow.previous ||\n                        writeRow.previous._deleted\n                    )\n                ) {\n                    /**\n                     * A deleted document was newly added to the storage engine,\n                     * do not emit an event.\n                     */\n                } else {\n\n                    const doc: RxLocalDocumentData<D> = event.operation === 'DELETE' ? event.previous as any : event.doc as any;\n                    const eventId = getEventKey(true, doc._id, doc._rev ? doc._rev : '');\n\n                    const storageChangeEvent: RxStorageChangeEvent<RxLocalDocumentData<D>> = {\n                        eventId,\n                        documentId: resultRow.id,\n                        change: event,\n                        startTime,\n                        endTime\n                    };\n\n\n                    this.changes$.next(storageChangeEvent);\n                }\n\n            }\n\n\n        });\n\n\n\n        return ret;\n    }\n\n    async findLocalDocumentsById<D = any>(ids: string[]): Promise<Map<string, RxLocalDocumentData<D>>> {\n        const ret = new Map();\n\n        /**\n         * Pouchdb is not able to bulk-request local documents\n         * with the pouch.allDocs() method.\n         * so we need to get each by a single call.\n         * TODO create an issue at the pouchdb repo\n         */\n        await Promise.all(\n            ids.map(async (id) => {\n                const prefixedId = POUCHDB_LOCAL_PREFIX + id;\n                try {\n                    const docData = await this.internals.pouch.get(prefixedId);\n                    docData._id = id;\n                    ret.set(id, docData);\n                } catch (err) {\n                    // do not add to result list on error\n                }\n            })\n        );\n        return ret;\n    }\n\n    changeStream(): Observable<RxStorageChangeEvent<RxLocalDocumentData>> {\n        return this.changes$.asObservable();\n    }\n}\n"],"file":"rx-storage-key-object-instance-pouch.js"}