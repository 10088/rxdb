{"version":3,"sources":["../../../../src/plugins/pouchdb/pouch-statics.ts"],"names":["filterInMemoryFields","massageSelector","newRxError","pouchHash","pouchSwapPrimaryToId","POUCH_HASH_KEY","primarySwapPouchDbQuerySelector","getSchemaByObjectPath","getPrimaryFieldOfPrimaryKey","overwritable","RxStoragePouchStatics","hash","data","hashKey","getSortComparator","schema","query","primaryPath","primaryKey","sortOptions","sort","inMemoryFields","Object","keys","selector","filter","key","startsWith","fun","a","b","args","rows","map","doc","sortedRows","length","_id","getQueryMatcher","massagedSelector","cloned","row","rowsMatched","ret","prepareQuery","mutateableQuery","preparePouchDbQuery","forEach","sortPart","comparisonOperators","keyUsed","some","op","includes","schemaObj","type","$gt","isDevMode","$regex","path","sortArray","part","direction","values","useKey","newPart","entries","k","v","Array","isArray"],"mappings":"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","sourcesContent":["import {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport { newRxError } from '../../rx-error';\n\nimport {\n    pouchHash,\n    pouchSwapPrimaryToId,\n    POUCH_HASH_KEY,\n    primarySwapPouchDbQuerySelector\n} from './pouchdb-helper';\nimport type { DeterministicSortComparator, QueryMatcher } from 'event-reduce-js';\nimport { getSchemaByObjectPath } from '../../rx-schema-helper';\nimport type {\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    PreparedQuery,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageStatics\n} from '../../types';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport { overwritable } from '../../overwritable';\n\nexport const RxStoragePouchStatics: RxStorageStatics = {\n\n    /**\n     * create the same diggest as an attachment with that data\n     * would have created by pouchdb internally.\n     */\n    hash(data: Buffer | Blob | string): Promise<string> {\n        return pouchHash(data);\n    },\n    hashKey: POUCH_HASH_KEY,\n\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const sortOptions: MangoQuerySortPart[] = query.sort ? (query.sort as any) : [{\n            [primaryPath]: 'asc'\n        }];\n        const inMemoryFields = Object\n            .keys(query.selector)\n            .filter(key => !key.startsWith('$'));\n\n        const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            /**\n             * Sorting on two documents with the same primary is not allowed\n             * because it might end up in a non-deterministic result.\n             */\n            if (a[primaryPath] === b[primaryPath]) {\n                throw newRxError('SNH', { args: { a, b }, primaryPath: primaryPath as any });\n            }\n\n            // TODO use createFieldSorter\n            // TODO make a performance test\n            const rows = [a, b].map(doc => ({\n                doc: pouchSwapPrimaryToId<RxDocType>(primaryPath, doc)\n            }));\n            const sortedRows: { doc: any }[] = filterInMemoryFields(\n                rows,\n                {\n                    selector: {},\n                    sort: sortOptions\n                },\n                inMemoryFields\n            );\n            if (sortedRows.length !== 2) {\n                throw newRxError('SNH', {\n                    query,\n                    primaryPath: primaryPath as any,\n                    args: {\n                        rows,\n                        sortedRows\n                    }\n                });\n            }\n            if (sortedRows[0].doc._id === rows[0].doc._id) {\n                return -1;\n            } else {\n                return 1;\n            }\n        };\n        return fun;\n    },\n\n    /**\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n    getQueryMatcher<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const massagedSelector = massageSelector(query.selector);\n\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocType) => {\n            const cloned = pouchSwapPrimaryToId(primaryPath, doc);\n            const row = {\n                doc: cloned\n            };\n            const rowsMatched = filterInMemoryFields(\n                [row],\n                { selector: massagedSelector },\n                Object.keys(query.selector)\n            );\n            const ret = rowsMatched && rowsMatched.length === 1;\n            return ret;\n        };\n        return fun;\n    },\n\n\n    /**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        mutateableQuery: MangoQuery<RxDocType>\n    ): PreparedQuery<RxDocType> {\n        return preparePouchDbQuery(\n            schema,\n            mutateableQuery\n        );\n    }\n};\n\n/**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\nexport function preparePouchDbQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocType>,\n    mutateableQuery: MangoQuery<RxDocType>\n): PreparedQuery<RxDocType> {\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const query = mutateableQuery;\n\n    /**\n     * because sort wont work on unused keys we have to workaround\n     * so we add the key to the selector if necessary\n     * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n     */\n    if (query.sort) {\n        query.sort.forEach(sortPart => {\n            const key = Object.keys(sortPart)[0];\n            const comparisonOperators = ['$gt', '$gte', '$lt', '$lte'];\n            const keyUsed = query.selector[key] && Object.keys(query.selector[key]).some(op => comparisonOperators.includes(op)) || false;\n            if (!keyUsed) {\n                const schemaObj = getSchemaByObjectPath(schema, key);\n                if (!schemaObj) {\n                    throw newRxError('QU5', {\n                        query,\n                        key,\n                        schema\n                    });\n                }\n                if (!query.selector[key]) {\n                    query.selector[key] = {};\n                }\n                switch (schemaObj.type) {\n                    case 'number':\n                    case 'integer':\n                        // TODO change back to -Infinity when issue resolved\n                        // @link https://github.com/pouchdb/pouchdb/issues/6454\n                        // -Infinity does not work since pouchdb 6.2.0\n                        query.selector[key].$gt = -9999999999999999999999999999;\n                        break;\n                    case 'string':\n                        /**\n                         * strings need an empty string, see\n                         * @link https://github.com/pubkey/rxdb/issues/585\n                         */\n                        if (typeof query.selector[key] !== 'string') {\n                            query.selector[key].$gt = '';\n                        }\n                        break;\n                    default:\n                        query.selector[key].$gt = null;\n                        break;\n                }\n            }\n        });\n    }\n\n    // regex does not work over the primary key\n    if (\n        overwritable.isDevMode() &&\n        query.selector[primaryKey as any] &&\n        query.selector[primaryKey as any].$regex\n    ) {\n        throw newRxError('QU4', {\n            path: primaryKey as any,\n            query: mutateableQuery\n        });\n    }\n\n    // primary-swap sorting\n    if (query.sort) {\n        const sortArray: MangoQuerySortPart<RxDocType>[] = query.sort.map(part => {\n            const key = Object.keys(part)[0];\n            const direction: MangoQuerySortDirection = Object.values(part)[0];\n            const useKey = key === primaryKey ? '_id' : key;\n            const newPart = { [useKey]: direction };\n            return newPart as any;\n        });\n        query.sort = sortArray;\n    }\n\n    // strip empty selectors\n    Object.entries(query.selector).forEach(([k, v]) => {\n        if (\n            typeof v === 'object' &&\n            v !== null &&\n            !Array.isArray(v) &&\n            Object.keys((v as any)).length === 0\n        ) {\n            delete query.selector[k];\n        }\n    });\n\n    query.selector = primarySwapPouchDbQuerySelector(query.selector, primaryKey);\n\n    /**\n     * To ensure a deterministic sorting,\n     * we have to ensure the primary key is always part\n     * of the sort query.\n\n    * TODO This should be done but will not work with pouchdb\n     * because it will throw\n     * 'Cannot sort on field(s) \"key\" when using the default index'\n     * So we likely have to modify the indexes so that this works. \n     */\n    /*\n    if (!mutateableQuery.sort) {\n        mutateableQuery.sort = [{ [this.primaryPath]: 'asc' }] as any;\n    } else {\n        const isPrimaryInSort = mutateableQuery.sort\n            .find(p => firstPropertyNameOfObject(p) === this.primaryPath);\n        if (!isPrimaryInSort) {\n            mutateableQuery.sort.push({ [this.primaryPath]: 'asc' } as any);\n        }\n    }\n    */\n\n    return query;\n}\n"],"file":"pouch-statics.js"}