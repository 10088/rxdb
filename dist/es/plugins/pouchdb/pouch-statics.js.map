{"version":3,"sources":["../../../../src/plugins/pouchdb/pouch-statics.ts"],"names":["filterInMemoryFields","massageSelector","newRxError","getPouchIndexDesignDocNameByIndex","pouchHash","pouchSwapPrimaryToId","POUCH_HASH_KEY","primarySwapPouchDbQuerySelector","getSchemaByObjectPath","getPrimaryFieldOfPrimaryKey","overwritable","isMaybeReadonlyArray","RxStoragePouchStatics","hash","data","hashKey","getSortComparator","schema","query","primaryPath","primaryKey","sortOptions","sort","inMemoryFields","Object","keys","selector","filter","key","startsWith","fun","a","b","args","rows","map","doc","sortedRows","length","_id","getQueryMatcher","massagedSelector","_deleted","cloned","row","rowsMatched","ret","prepareQuery","mutateableQuery","preparePouchDbQuery","forEach","sortPart","comparisonOperators","keyUsed","some","op","includes","schemaObj","type","$gt","isDevMode","$regex","path","sortArray","part","direction","values","useKey","newPart","entries","k","v","Array","isArray","index","indexMaybeArray","indexArray","str","indexName","use_index"],"mappings":"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","sourcesContent":["import {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport { newRxError } from '../../rx-error';\n\nimport {\n    getPouchIndexDesignDocNameByIndex,\n    pouchHash,\n    pouchSwapPrimaryToId,\n    POUCH_HASH_KEY,\n    primarySwapPouchDbQuerySelector\n} from './pouchdb-helper';\nimport type { DeterministicSortComparator, QueryMatcher } from 'event-reduce-js';\nimport { getSchemaByObjectPath } from '../../rx-schema-helper';\nimport type {\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    PreparedQuery,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageStatics\n} from '../../types';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport { overwritable } from '../../overwritable';\nimport { isMaybeReadonlyArray } from '../../util';\n\nexport const RxStoragePouchStatics: RxStorageStatics = {\n\n    /**\n     * create the same diggest as an attachment with that data\n     * would have created by pouchdb internally.\n     */\n    hash(data: Buffer | Blob | string): Promise<string> {\n        return pouchHash(data);\n    },\n    hashKey: POUCH_HASH_KEY,\n\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const sortOptions: MangoQuerySortPart[] = query.sort ? (query.sort as any) : [{\n            [primaryPath]: 'asc'\n        }];\n        const inMemoryFields = Object\n            .keys(query.selector)\n            .filter(key => !key.startsWith('$'));\n\n        const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            /**\n             * Sorting on two documents with the same primary is not allowed\n             * because it might end up in a non-deterministic result.\n             */\n            if (a[primaryPath] === b[primaryPath]) {\n                throw newRxError('SNH', { args: { a, b }, primaryPath: primaryPath as any });\n            }\n\n            // TODO use createFieldSorter\n            // TODO make a performance test\n            const rows = [a, b].map(doc => ({\n                doc: pouchSwapPrimaryToId<RxDocType>(primaryPath, doc)\n            }));\n            const sortedRows: { doc: any }[] = filterInMemoryFields(\n                rows,\n                {\n                    selector: {},\n                    sort: sortOptions\n                },\n                inMemoryFields\n            );\n            if (sortedRows.length !== 2) {\n                throw newRxError('SNH', {\n                    query,\n                    primaryPath: primaryPath as any,\n                    args: {\n                        rows,\n                        sortedRows\n                    }\n                });\n            }\n            if (sortedRows[0].doc._id === rows[0].doc._id) {\n                return -1;\n            } else {\n                return 1;\n            }\n        };\n        return fun;\n    },\n\n    /**\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n    getQueryMatcher<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const massagedSelector = massageSelector(query.selector);\n\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            if (doc._deleted) {\n                return false;\n            }\n            const cloned = pouchSwapPrimaryToId(primaryPath, doc);\n            const row = {\n                doc: cloned\n            };\n            const rowsMatched = filterInMemoryFields(\n                [row],\n                { selector: massagedSelector },\n                Object.keys(query.selector)\n            );\n            const ret = rowsMatched && rowsMatched.length === 1;\n            return ret;\n        };\n        return fun;\n    },\n\n\n    /**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        mutateableQuery: MangoQuery<RxDocType>\n    ): PreparedQuery<RxDocType> {\n        return preparePouchDbQuery(\n            schema,\n            mutateableQuery\n        );\n    }\n};\n\n/**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\nexport function preparePouchDbQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocType>,\n    mutateableQuery: MangoQuery<RxDocType>\n): PreparedQuery<RxDocType> {\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const query = mutateableQuery;\n\n    /**\n     * because sort wont work on unused keys we have to workaround\n     * so we add the key to the selector if necessary\n     * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n     */\n    if (query.sort) {\n        query.sort.forEach(sortPart => {\n            const key = Object.keys(sortPart)[0];\n            const comparisonOperators = ['$gt', '$gte', '$lt', '$lte', '$eq'];\n            const keyUsed = query.selector[key] &&\n                Object.keys(query.selector[key]).some(op => comparisonOperators.includes(op))\n                || false; // TODO why we need this '|| false' ?\n\n            if (!keyUsed) {\n                const schemaObj = getSchemaByObjectPath(schema, key);\n                if (!schemaObj) {\n                    throw newRxError('QU5', {\n                        query,\n                        key,\n                        schema\n                    });\n                }\n                if (!query.selector[key]) {\n                    query.selector[key] = {};\n                }\n                switch (schemaObj.type) {\n                    case 'number':\n                    case 'integer':\n                        // TODO change back to -Infinity when issue resolved\n                        // @link https://github.com/pouchdb/pouchdb/issues/6454\n                        // -Infinity does not work since pouchdb 6.2.0\n                        query.selector[key].$gt = -9999999999999999999999999999;\n                        break;\n                    case 'string':\n                        /**\n                         * strings need an empty string, see\n                         * @link https://github.com/pubkey/rxdb/issues/585\n                         */\n                        if (typeof query.selector[key] !== 'string') {\n                            query.selector[key].$gt = '';\n                        }\n                        break;\n                    default:\n                        query.selector[key].$gt = null;\n                        break;\n                }\n            }\n        });\n    }\n\n    // regex does not work over the primary key\n    if (\n        overwritable.isDevMode() &&\n        query.selector[primaryKey as any] &&\n        query.selector[primaryKey as any].$regex\n    ) {\n        throw newRxError('QU4', {\n            path: primaryKey as any,\n            query: mutateableQuery\n        });\n    }\n\n    // primary-swap sorting\n    if (query.sort) {\n        const sortArray: MangoQuerySortPart<RxDocType>[] = query.sort.map(part => {\n            const key = Object.keys(part)[0];\n            const direction: MangoQuerySortDirection = Object.values(part)[0];\n            const useKey = key === primaryKey ? '_id' : key;\n            const newPart = { [useKey]: direction };\n            return newPart as any;\n        });\n        query.sort = sortArray;\n    }\n\n    // strip empty selectors\n    Object.entries(query.selector).forEach(([k, v]) => {\n        if (\n            typeof v === 'object' &&\n            v !== null &&\n            !Array.isArray(v) &&\n            Object.keys((v as any)).length === 0\n        ) {\n            delete query.selector[k];\n        }\n    });\n\n    /**\n     * Set use_index\n     * @link https://pouchdb.com/guides/mango-queries.html#use_index\n     */\n    if (mutateableQuery.index) {\n        const indexMaybeArray = mutateableQuery.index;\n        let indexArray: string[] = isMaybeReadonlyArray(indexMaybeArray) ? indexMaybeArray : [indexMaybeArray];\n        indexArray = indexArray.map(str => {\n            if (str === primaryKey) {\n                return '_id';\n            } else {\n                return str;\n            }\n        });\n        const indexName = getPouchIndexDesignDocNameByIndex(indexArray);\n        delete mutateableQuery.index;\n        (mutateableQuery as any).use_index = indexName;\n    }\n\n    query.selector = primarySwapPouchDbQuerySelector(query.selector, primaryKey);\n\n    return query;\n}\n"],"file":"pouch-statics.js"}