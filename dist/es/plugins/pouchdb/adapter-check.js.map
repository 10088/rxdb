{"version":3,"sources":["../../../../src/plugins/pouchdb/adapter-check.ts"],"names":["PouchDB","adapterObject","now","PROMISE_RESOLVE_FALSE","randomCouchString","POUCHDB_LOCATION","checkAdapter","adapter","_id","pouch","auto_compaction","revs_limit","err","recoveredDoc","info","then","put","value","ok","time","get","doc","remove"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SACIA,OADJ,QAEO,YAFP;AAGA,SACIC,aADJ,EAEIC,GAFJ,EAGIC,qBAHJ,EAIIC,iBAJJ,QAKO,YALP;;AAUA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,gBAAgB,GAAG,oBAAzB;AAEP,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAAkD;AACrD;AACA,MAAMC,GAAG,GAAGH,gBAAgB,GAAG,GAAnB,GAAyBD,iBAAiB,CAAC,EAAD,CAAtD;;AAEA,MAAIK,KAAJ;;AACA,MAAI;AACAA,IAAAA,KAAK,GAAG,IAAKT,OAAL,CACJK,gBADI,EAEJJ,aAAa,CAACM,OAAD,CAFT,EAEoB;AACxBG,MAAAA,eAAe,EAAE,IADO;AAExBC,MAAAA,UAAU,EAAE;AAFY,KAFpB,CAAR;AAOH,GARD,CAQE,OAAOC,GAAP,EAAY;AACV,WAAOT,qBAAP;AACH;;AAED,MAAIU,YAAJ;AACA,SAAOJ,KAAK,CAACK,IAAN,GAAa;AAChB;AADG,GAEFC,IAFE,CAEG;AAAA,WAAMN,KAAK,CAACO,GAAN,CAAU;AAClBR,MAAAA,GAAG,EAAHA,GADkB;AAElBS,MAAAA,KAAK,EAAE;AACHC,QAAAA,EAAE,EAAE,IADD;AAEHC,QAAAA,IAAI,EAAEjB,GAAG;AAFN;AAFW,KAAV,CAAN;AAAA,GAFH,EASH;AATG,GAUFa,IAVE,CAUG;AAAA,WAAMN,KAAK,CAACW,GAAN,CAAUZ,GAAV,CAAN;AAAA,GAVH,EAWFO,IAXE,CAWG,UAAAM,GAAG;AAAA,WAAIR,YAAY,GAAGQ,GAAnB;AAAA,GAXN,EAYH;AAZG,GAaFN,IAbE,CAaG;AAAA,WAAMN,KAAK,CAACa,MAAN,CAAaT,YAAb,CAAN;AAAA,GAbH,EAcFE,IAdE,CAcG;AAAA,WAAM,IAAN;AAAA,GAdH,EAeFA,IAfE,CAeG,YAAM;AACR,QAAIF,YAAY,IAAIA,YAAY,CAACI,KAA7B,IAAsCJ,YAAY,CAACI,KAAb,CAAmBC,EAA7D,EACI,OAAO,IAAP,CADJ,KAGI,OAAO,KAAP;AACP,GApBE,WAqBI;AAAA,WAAM,KAAN;AAAA,GArBJ,CAAP;AAuBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["/**\n * this plugin adds the checkAdapter-function to rxdb\n * you can use it to check if the given adapter is working in the current environmet\n */\nimport {\n    PouchDB\n} from './pouch-db';\nimport {\n    adapterObject,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString\n} from '../../util';\nimport type {\n    PouchDBInstance\n} from '../../types';\n\n/**\n * The same pouchdb-location is used on each run\n * To ensure when this is run multiple times,\n * there will not be many created databases\n */\nexport const POUCHDB_LOCATION = 'rxdb-adapter-check';\n\nexport function checkAdapter(adapter: any): Promise<any> {\n    // id of the document which is stored and removed to ensure everything works\n    const _id = POUCHDB_LOCATION + '-' + randomCouchString(12);\n\n    let pouch: PouchDBInstance;\n    try {\n        pouch = new (PouchDB as any)(\n            POUCHDB_LOCATION,\n            adapterObject(adapter), {\n            auto_compaction: true,\n            revs_limit: 1\n        }\n        );\n    } catch (err) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let recoveredDoc: any;\n    return pouch.info() // ensure that we wait until db is useable\n        // ensure write works\n        .then(() => pouch.put({\n            _id,\n            value: {\n                ok: true,\n                time: now()\n            }\n        }))\n        // ensure read works\n        .then(() => pouch.get(_id))\n        .then(doc => recoveredDoc = doc)\n        // ensure remove works\n        .then(() => pouch.remove(recoveredDoc))\n        .then(() => true)\n        .then(() => {\n            if (recoveredDoc && recoveredDoc.value && recoveredDoc.value.ok)\n                return true;\n            else\n                return false;\n        })\n        .catch(() => false);\n\n    /**\n     * NOTICE:\n     * Do not remove the pouchdb-instance after the test\n     * The problem is that when this function is call in parallel,\n     * for example when you restore the tabs from a browser-session and open\n     * the same website multiple times at the same time,\n     * calling destroy would possibly crash the other call\n     */\n}\n"],"file":"adapter-check.js"}