{"version":3,"file":"rx-storage-remote.js","names":["ensureNotFalsy","firstValueFrom","filter","Subject","PROMISE_RESOLVE_VOID","randomCouchString","RxStorageMessageChannel","settings","name","messageChannelByPort","WeakMap","requestIdSeed","lastRequestId","statics","getRequestId","newId","createStorageInstance","params","requestId","waitForOkPromise","messages$","pipe","msg","answerTo","send","connectionId","method","waitForOkResult","error","Error","toString","RxStorageInstanceMessageChannel","databaseName","collectionName","schema","options","storage","internals","changes$","conflicts$","subs","closed","push","subscribe","next","requestRemote","methodName","responsePromise","message","response","bulkWrite","documentWrites","context","findDocumentsById","ids","deleted","query","preparedQuery","count","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","changeStream","asObservable","cleanup","minDeletedTime","close","forEach","sub","unsubscribe","complete","remove","conflictResultionTasks","resolveConflictResultionTask","taskSolution","getRxStorageRemote"],"sources":["../../../../src/plugins/storage-remote/rx-storage-remote.ts"],"sourcesContent":["import { ensureNotFalsy } from 'event-reduce-js';\nimport {\n    firstValueFrom,\n    filter,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageStatics\n} from '../../types';\nimport {\n    PROMISE_RESOLVE_VOID,\n    randomCouchString\n} from '../../util';\nimport type {\n    MessageFromRemote,\n    MessageToRemote,\n    RxStorageMessageChannelInternals,\n    RxStorageRemoteSettings\n} from './storage-remote-types';\n\n\n\n\nexport class RxStorageMessageChannel implements RxStorage<RxStorageMessageChannelInternals, any> {\n    public readonly statics: RxStorageStatics;\n    public readonly name: string = 'remote';\n    public readonly messageChannelByPort = new WeakMap<MessagePort, MessageChannel>();\n    private requestIdSeed: string = randomCouchString(10);\n    private lastRequestId: number = 0;\n    constructor(\n        public readonly settings: RxStorageRemoteSettings\n    ) {\n        this.statics = settings.statics;\n    }\n\n    public getRequestId() {\n        const newId = this.lastRequestId++;\n        return this.requestIdSeed + '|' + newId;\n    }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceMessageChannel<RxDocType>> {\n\n        const requestId = this.getRequestId();\n        const waitForOkPromise = firstValueFrom(this.settings.messages$.pipe(\n            filter(msg => msg.answerTo === requestId)\n        ));\n        this.settings.send({\n            connectionId: this.getRequestId(),\n            method: 'create',\n            requestId,\n            params\n        });\n\n        const waitForOkResult = await waitForOkPromise;\n        if (waitForOkResult.error) {\n            throw new Error('could not create instance ' + waitForOkResult.error.toString());\n        }\n        return new RxStorageInstanceMessageChannel(\n            this,\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                params,\n                connectionId: ensureNotFalsy(waitForOkResult.connectionId)\n            },\n            params.options\n        );\n    }\n}\n\nexport class RxStorageInstanceMessageChannel<RxDocType> implements RxStorageInstance<RxDocType, RxStorageMessageChannelInternals, any, any> {\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> = new Subject();\n    private conflicts$: Subject<RxConflictResultionTask<RxDocType>> = new Subject();\n    private subs: Subscription[] = [];\n\n    private closed: boolean = false;\n    messages$: Observable<MessageFromRemote>;\n\n    constructor(\n        public readonly storage: RxStorageMessageChannel,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: RxStorageMessageChannelInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.messages$ = this.storage.settings.messages$.pipe(\n            filter(msg => msg.connectionId === this.internals.connectionId)\n        );\n        this.subs.push(\n            this.messages$.subscribe(msg => {\n                if (msg.method === 'changeStream') {\n                    this.changes$.next(msg.return);\n                }\n                if (msg.method === 'conflictResultionTasks') {\n                    this.conflicts$.next(msg.return);\n                }\n            })\n        );\n    }\n\n    private async requestRemote(\n        methodName: keyof RxStorageInstance<any, any, any>,\n        params: any\n    ) {\n        const requestId = this.storage.getRequestId();\n        const responsePromise = firstValueFrom(\n            this.messages$.pipe(\n                filter(msg => msg.answerTo === requestId)\n            )\n        );\n        const message: MessageToRemote = {\n            connectionId: this.internals.connectionId,\n            requestId,\n            method: methodName,\n            params\n        };\n        this.storage.settings.send(message);\n        const response = await responsePromise;\n        if (response.error) {\n            throw new Error(response.error);\n        } else {\n            return response.return;\n        }\n    }\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.requestRemote('bulkWrite', [documentWrites, context]);\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        return this.requestRemote('findDocumentsById', [ids, deleted]);\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.requestRemote('query', [preparedQuery]);\n    }\n    count(preparedQuery: any): Promise<RxStorageCountResult> {\n        return this.requestRemote('count', [preparedQuery]);\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        return this.requestRemote('getAttachmentData', [documentId, attachmentId]);\n    }\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<\n        {\n            documents: RxDocumentData<RxDocType>[];\n            checkpoint: any;\n        }> {\n        return this.requestRemote('getChangedDocumentsSince', [limit, checkpoint]);\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number): Promise<boolean> {\n        return this.requestRemote('cleanup', [minDeletedTime]);\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return PROMISE_RESOLVE_VOID;\n        }\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.changes$.complete();\n        await this.requestRemote('close', []);\n    }\n    async remove(): Promise<void> {\n        await this.requestRemote('remove', []);\n    }\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.conflicts$;\n    }\n    async resolveConflictResultionTask(taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        await this.requestRemote('resolveConflictResultionTask', [taskSolution]);\n    }\n}\n\nexport function getRxStorageRemote(settings: RxStorageRemoteSettings): RxStorageMessageChannel {\n    return new RxStorageMessageChannel(settings);\n}\n"],"mappings":"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"}