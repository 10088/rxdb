{"version":3,"file":"remote.js","names":["filter","ensureNotFalsy","createAnswer","createErrorAnswer","deepEqual","body","recover","result","e","then","exposeRxStorageRemote","settings","instanceByFullName","Map","messages$","pipe","msg","method","subscribe","state","connectionIds","add","connectionId","subs","push","storageInstance","changeStream","changes","message","answerTo","send","conflictResultionTasks","conflicts","subMsg","plainMessage","Array","isArray","params","size","forEach","sub","unsubscribe","fullName","err","databaseName","collectionName","schema","version","join","get","storage","createStorageInstance","newRxStorageInstance","Set","set","Error"],"sources":["../../../../src/plugins/storage-remote/remote.ts"],"sourcesContent":["import { filter, Subscription } from 'rxjs';\nimport type {\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport {\n    ensureNotFalsy\n} from '../../util';\nimport { createAnswer, createErrorAnswer } from './storage-remote-helpers';\nimport type {\n    MessageFromRemote,\n    MessageToRemote,\n    RxStorageRemoteExposeSettings,\n    RxStorageRemoteExposeType\n} from './storage-remote-types';\nimport deepEqual from 'fast-deep-equal';\n\n/**\n * Run this on the 'remote' part,\n * so that RxStorageMessageChannel can connect to it.\n */\nexport function exposeRxStorageRemote(settings: RxStorageRemoteExposeSettings): RxStorageRemoteExposeType {\n    type InstanceState = {\n        storageInstance: RxStorageInstance<any, any, any>;\n        connectionIds: Set<string>;\n        params: RxStorageInstanceCreationParams<any, any>;\n    };\n    const instanceByFullName: Map<string, InstanceState> = new Map();\n\n\n    settings.messages$.pipe(\n        filter(msg => msg.method === 'create')\n    ).subscribe(async (msg) => {\n        const connectionId = msg.connectionId;\n        /**\n         * Do an isArray check here\n         * for runtime check types to ensure we have\n         * instance creation params and not method input params.\n         */\n        if (Array.isArray(msg.params)) {\n            return;\n        }\n        const params = msg.params;\n        /**\n         * We de-duplicate the storage instances.\n         * This makes sense in many environments like\n         * electron where on main process contains the storage\n         * for multiple renderer processes. Same goes for SharedWorkers etc.\n         */\n        const fullName = [\n            params.databaseName,\n            params.collectionName,\n            params.schema.version\n        ].join('|');\n        let state = instanceByFullName.get(fullName);\n        if (!state) {\n            try {\n                const newRxStorageInstance = await settings.storage.createStorageInstance(params);\n                state = {\n                    storageInstance: newRxStorageInstance,\n                    connectionIds: new Set(),\n                    params\n                };\n                instanceByFullName.set(fullName, state);\n            } catch (err: any) {\n                settings.send(createErrorAnswer(msg, err));\n                return;\n            }\n        } else {\n            // if instance already existed, ensure that the schema is equal\n            if (!deepEqual(params.schema, state.params.schema)) {\n                settings.send(createErrorAnswer(msg, new Error('Remote storage: schema not equal to existing storage')));\n            }\n        }\n        state.connectionIds.add(msg.connectionId);\n        const subs: Subscription[] = [];\n        /**\n         * Automatically subscribe to the streams$\n         * because we always need them.\n         */\n        subs.push(\n            state.storageInstance.changeStream().subscribe(changes => {\n                const message: MessageFromRemote = {\n                    connectionId,\n                    answerTo: 'changestream',\n                    method: 'changeStream',\n                    return: changes\n                };\n\n                settings.send(message);\n            })\n        );\n        subs.push(\n            state.storageInstance.conflictResultionTasks().subscribe(conflicts => {\n                const message: MessageFromRemote = {\n                    connectionId,\n                    answerTo: 'conflictResultionTasks',\n                    method: 'conflictResultionTasks',\n                    return: conflicts\n                };\n                settings.send(message);\n            })\n        );\n        subs.push(\n            settings.messages$.pipe(\n                filter(subMsg => (subMsg as MessageToRemote).connectionId === connectionId)\n            ).subscribe(async (plainMessage) => {\n                const message: MessageToRemote = plainMessage as any;\n                if (message.method === 'create') {\n                    return;\n                }\n                if (!Array.isArray(message.params)) {\n                    return;\n                }\n                let result;\n                try {\n                    /**\n                     * On calls to 'close()',\n                     * we only close the main instance if there are no other\n                     * ports connected.\n                     */\n                    if (\n                        message.method === 'close' &&\n                        ensureNotFalsy(state).connectionIds.size > 1\n                    ) {\n                        settings.send(createAnswer(message, null));\n                        ensureNotFalsy(state).connectionIds.delete(connectionId);\n                        subs.forEach(sub => sub.unsubscribe());\n                        return;\n                    }\n                    result = await (ensureNotFalsy(state).storageInstance as any)[message.method](\n                        message.params[0],\n                        message.params[1],\n                        message.params[2],\n                        message.params[3]\n                    );\n                    if (\n                        message.method === 'close' ||\n                        message.method === 'remove'\n                    ) {\n                        subs.forEach(sub => sub.unsubscribe());\n                        ensureNotFalsy(state).connectionIds.delete(connectionId);\n                        instanceByFullName.delete(fullName);\n                        /**\n                         * TODO how to notify the other ports on remove() ?\n                         */\n                    }\n                    settings.send(createAnswer(message, result));\n                } catch (err: any) {\n                    settings.send(createErrorAnswer(message, err));\n                }\n            })\n        );\n\n        settings.send(createAnswer(msg, 'ok'));\n    });\n\n    return {\n        instanceByFullName\n    };\n}\n"],"mappings":"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"}