{"version":3,"file":"key-compression.js","names":["createCompressionTable","compressObject","decompressObject","compressedPath","compressQuery","DEFAULT_COMPRESSION_FLAG","createCompressedJsonSchema","overwritable","getPrimaryFieldOfPrimaryKey","flatClone","isMaybeReadonlyArray","COMPRESSION_STATE_BY_SCHEMA","WeakMap","createCompressionState","schema","compressionSchema","primaryKey","table","compressedSchema","composedPrimary","newComposedPrimary","key","fields","map","field","separator","indexes","newIndexes","idx","subIdx","getCompressionStateByRxJsonSchema","state","get","deepFreezeWhenDevMode","set","RxDBKeyCompressionPlugin","name","rxdb","prototypes","hooks","prePrepareQuery","after","input","rxQuery","mangoQuery","collection","jsonSchema","keyCompression","compressionState","compressedQuery","preCreateRxStorageInstance","params","preQueryMatcher","doc","preSortComparator","docA","docB","preWriteToStorageInstance","attachments","_attachments","postReadFromInstance","before"],"sources":["../../../src/plugins/key-compression.ts"],"sourcesContent":["/**\n * this plugin adds the keycompression-capabilities to rxdb\n * if you dont use this, ensure that you set disableKeyComression to false in your schema\n */\n\nimport {\n    createCompressionTable,\n    CompressionTable,\n    JsonSchema as KeyCompressionJsonSchema,\n    compressObject,\n    decompressObject,\n    compressedPath,\n    compressQuery,\n    DEFAULT_COMPRESSION_FLAG,\n    createCompressedJsonSchema\n} from 'jsonschema-key-compression';\nimport {\n    overwritable\n} from '../overwritable';\nimport { getPrimaryFieldOfPrimaryKey } from '../rx-schema-helper';\n\nimport type {\n    RxPlugin,\n    RxJsonSchema,\n    CompositePrimaryKey\n} from '../types';\nimport { flatClone, isMaybeReadonlyArray } from '../util';\n\ndeclare type CompressionState = {\n    table: CompressionTable;\n    // the compressed schema\n    schema: RxJsonSchema<any>;\n};\n\n/**\n * Cache the compression table and the compressed schema\n * by the storage instance for better performance.\n */\nconst COMPRESSION_STATE_BY_SCHEMA: WeakMap<\n    RxJsonSchema<any>,\n    CompressionState\n> = new WeakMap();\n\nexport function createCompressionState(\n    schema: RxJsonSchema<any>\n): CompressionState {\n    const compressionSchema: KeyCompressionJsonSchema = flatClone(schema) as any;\n    delete (compressionSchema as any).primaryKey;\n\n\n\n    const table = createCompressionTable(\n        compressionSchema,\n        DEFAULT_COMPRESSION_FLAG,\n        [\n            /**\n             * Do not compress the primary field\n             * for easier debugging.\n             */\n            getPrimaryFieldOfPrimaryKey(schema.primaryKey),\n            '_rev',\n            '_attachments',\n            '_deleted',\n            '_meta'\n        ]\n    );\n\n    delete (compressionSchema as any).primaryKey;\n    const compressedSchema: RxJsonSchema<any> = createCompressedJsonSchema(\n        table,\n        compressionSchema\n    ) as RxJsonSchema<any>;\n\n    // also compress primary key\n    if (typeof schema.primaryKey !== 'string') {\n        const composedPrimary: CompositePrimaryKey<any> = schema.primaryKey;\n        const newComposedPrimary: CompositePrimaryKey<any> = {\n            key: compressedPath(table, composedPrimary.key as string),\n            fields: composedPrimary.fields.map(field => compressedPath(table, field as string)),\n            separator: composedPrimary.separator\n        };\n        compressedSchema.primaryKey = newComposedPrimary;\n    } else {\n        compressedSchema.primaryKey = compressedPath(table, schema.primaryKey);\n    }\n\n    /**\n     * the key compression module does not know about indexes\n     * in the schema, so we have to also compress them here.\n     */\n    if (schema.indexes) {\n        const newIndexes = schema.indexes.map(idx => {\n            if (isMaybeReadonlyArray(idx)) {\n                return idx.map(subIdx => compressedPath(table, subIdx));\n            } else {\n                return compressedPath(table, idx);\n            }\n        });\n        compressedSchema.indexes = newIndexes;\n    }\n\n    return {\n        table,\n        schema: compressedSchema\n    };\n}\n\nexport function getCompressionStateByRxJsonSchema(\n    schema: RxJsonSchema<any>\n): CompressionState {\n    let state = COMPRESSION_STATE_BY_SCHEMA.get(schema);\n    if (!state) {\n        /**\n         * Because we cache the state by the JsonSchema,\n         * it must be ausured that the given schema object never changes.\n         */\n        overwritable.deepFreezeWhenDevMode(schema);\n\n        state = createCompressionState(schema);\n        COMPRESSION_STATE_BY_SCHEMA.set(schema, state);\n    }\n    return state;\n}\n\nexport const RxDBKeyCompressionPlugin: RxPlugin = {\n    name: 'key-compression',\n    rxdb: true,\n    prototypes: {},\n    overwritable: {},\n    hooks: {\n        /**\n         * replace the keys of a query-obj with the compressed keys\n         * because the storage instance only knows the compressed schema\n         * @return compressed queryJSON\n         */\n        prePrepareQuery: {\n            after: (input) => {\n                const rxQuery = input.rxQuery;\n                const mangoQuery = input.mangoQuery;\n\n                if (!rxQuery.collection.schema.jsonSchema.keyCompression) {\n                    return;\n                }\n                const compressionState = getCompressionStateByRxJsonSchema(\n                    rxQuery.collection.schema.jsonSchema\n                );\n\n                const compressedQuery = compressQuery(\n                    compressionState.table,\n                    mangoQuery as any\n                );\n\n                input.mangoQuery = compressedQuery as any;\n            }\n        },\n        preCreateRxStorageInstance: {\n            after: (params) => {\n                /**\n                 * When key compression is used,\n                 * the storage instance only knows about the compressed schema\n                 */\n                if (params.schema.keyCompression) {\n                    const compressionState = createCompressionState(params.schema);\n                    params.schema = compressionState.schema;\n                }\n            }\n        },\n        preQueryMatcher: {\n            after: (params) => {\n                if (!params.rxQuery.collection.schema.jsonSchema.keyCompression) {\n                    return;\n                }\n                const state = getCompressionStateByRxJsonSchema(params.rxQuery.collection.schema.jsonSchema);\n                params.doc = compressObject(\n                    state.table,\n                    params.doc\n                );\n            }\n        },\n        preSortComparator: {\n            after: (params) => {\n                if (!params.rxQuery.collection.schema.jsonSchema.keyCompression) {\n                    return;\n                }\n                const state = getCompressionStateByRxJsonSchema(params.rxQuery.collection.schema.jsonSchema);\n                params.docA = compressObject(\n                    state.table,\n                    params.docA\n                );\n                params.docB = compressObject(\n                    state.table,\n                    params.docB\n                );\n            }\n        },\n        preWriteToStorageInstance: {\n            /**\n             * Must run as last because other plugin hooks\n             * might no longer work when the key-compression\n             * changed the document keys.\n             */\n            after: (params: {\n                primaryPath: string,\n                schema: RxJsonSchema<any>,\n                doc: any;\n            }) => {\n                if (!params.schema.keyCompression) {\n                    return;\n                }\n                const state = getCompressionStateByRxJsonSchema(params.schema);\n\n                /**\n                 * Do not send attachments to compressObject()\n                 * because it will deep clone which does not work on Blob or Buffer.\n                 */\n                params.doc = flatClone(params.doc);\n                const attachments = params.doc._attachments;\n                delete params.doc._attachments;\n\n                params.doc = compressObject(\n                    state.table,\n                    params.doc\n                );\n                params.doc._attachments = attachments;\n            }\n        },\n        postReadFromInstance: {\n            /**\n             * Use 'before' because it must de-compress\n             * the object keys before the other hooks can work.\n             */\n            before: (params: {\n                primaryPath: string,\n                schema: RxJsonSchema<any>,\n                doc: any;\n            }) => {\n                if (!params.schema.keyCompression) {\n                    return;\n                }\n                const state = getCompressionStateByRxJsonSchema(params.schema);\n\n                params.doc = decompressObject(\n                    state.table,\n                    params.doc\n                );\n            }\n        }\n    }\n};\n"],"mappings":"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"}