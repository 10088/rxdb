{"version":3,"sources":["../../../src/plugins/key-compression.ts"],"names":["createCompressionTable","compressObject","decompressObject","compressedPath","compressQuery","DEFAULT_COMPRESSION_FLAG","createCompressedJsonSchema","getPrimaryFieldOfPrimaryKey","flatClone","COMPRESSION_STATE_BY_COLLECTION","WeakMap","createCompressionState","schema","compressionSchema","primaryKey","table","compressedSchema","composedPrimary","newComposedPrimary","key","fields","map","field","separator","indexes","newIndexes","idx","Array","isArray","subIdx","getCompressionStateByStorageInstance","collection","state","get","jsonSchema","set","rxdb","prototypes","overwritable","RxDBKeyCompressionPlugin","name","hooks","prePrepareQuery","input","rxQuery","mangoQuery","keyCompression","compressionState","compressedQuery","preCreateRxStorageInstance","params","preQueryMatcher","doc","preSortComparator","docA","docB","preWriteToStorageInstance","attachments","_attachments","postReadFromInstance"],"mappings":"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","sourcesContent":["/**\n * this plugin adds the keycompression-capabilities to rxdb\n * if you dont use this, ensure that you set disableKeyComression to false in your schema\n */\n\nimport {\n    createCompressionTable,\n    CompressionTable,\n    JsonSchema as KeyCompressionJsonSchema,\n    compressObject,\n    decompressObject,\n    compressedPath,\n    compressQuery,\n    DEFAULT_COMPRESSION_FLAG,\n    createCompressedJsonSchema\n} from 'jsonschema-key-compression';\nimport { getPrimaryFieldOfPrimaryKey } from '../rx-schema';\n\nimport type {\n    RxPlugin,\n    RxJsonSchema,\n    RxCollection,\n    CompositePrimaryKey\n} from '../types';\nimport { flatClone } from '../util';\n\ndeclare type CompressionState = {\n    table: CompressionTable;\n    // the compressed schema\n    schema: RxJsonSchema<any>;\n};\n\n/**\n * Cache the compression table and the compressed schema\n * by the storage instance for better performance.\n */\nconst COMPRESSION_STATE_BY_COLLECTION: WeakMap<\n    RxCollection,\n    CompressionState\n> = new WeakMap();\n\nexport function createCompressionState(\n    schema: RxJsonSchema<any>\n): CompressionState {\n    const compressionSchema: KeyCompressionJsonSchema = flatClone(schema) as any;\n    delete (compressionSchema as any).primaryKey;\n\n\n\n    const table = createCompressionTable(\n        compressionSchema,\n        DEFAULT_COMPRESSION_FLAG,\n        [\n            /**\n             * Do not compress the primary field\n             * for easier debugging.\n             */\n            getPrimaryFieldOfPrimaryKey(schema.primaryKey) as string,\n            '_rev',\n            '_attachments',\n            '_deleted'\n        ]\n    );\n\n    delete (compressionSchema as any).primaryKey;\n    const compressedSchema: RxJsonSchema<any> = createCompressedJsonSchema(\n        table,\n        compressionSchema\n    ) as RxJsonSchema<any>;\n\n    // also compress primary key\n    if (typeof schema.primaryKey !== 'string') {\n        const composedPrimary: CompositePrimaryKey<any> = schema.primaryKey as any;\n        const newComposedPrimary: CompositePrimaryKey<any> = {\n            key: compressedPath(table, composedPrimary.key as string),\n            fields: composedPrimary.fields.map(field => compressedPath(table, field as string)),\n            separator: composedPrimary.separator\n        };\n        compressedSchema.primaryKey = newComposedPrimary;\n    } else {\n        compressedSchema.primaryKey = compressedPath(table, schema.primaryKey);\n    }\n\n    /**\n     * the key compression module does not know about indexes\n     * in the schema, so we have to also compress them here.\n     */\n    if (schema.indexes) {\n        const newIndexes = schema.indexes.map(idx => {\n            if (Array.isArray(idx)) {\n                return idx.map(subIdx => compressedPath(table, subIdx));\n            } else {\n                return compressedPath(table, idx);\n            }\n        });\n        compressedSchema.indexes = newIndexes;\n    }\n\n    return {\n        table,\n        schema: compressedSchema\n    };\n}\n\nexport function getCompressionStateByStorageInstance(\n    collection: RxCollection\n): CompressionState {\n    let state = COMPRESSION_STATE_BY_COLLECTION.get(collection);\n    if (!state) {\n        state = createCompressionState(collection.schema.jsonSchema);\n        COMPRESSION_STATE_BY_COLLECTION.set(collection, state);\n    }\n    return state;\n}\n\nexport const rxdb = true;\nexport const prototypes = {};\nexport const overwritable = {};\n\nexport const RxDBKeyCompressionPlugin: RxPlugin = {\n    name: 'key-compression',\n    rxdb,\n    prototypes,\n    overwritable,\n    hooks: {\n        /**\n         * replace the keys of a query-obj with the compressed keys\n         * because the storage instance only knows the compressed schema\n         * @return compressed queryJSON\n         */\n        prePrepareQuery(\n            input\n        ) {\n            const rxQuery = input.rxQuery;\n            const mangoQuery = input.mangoQuery;\n\n            if (!rxQuery.collection.schema.jsonSchema.keyCompression) {\n                return;\n            }\n            const compressionState = getCompressionStateByStorageInstance(\n                rxQuery.collection\n            );\n\n            const compressedQuery = compressQuery(\n                compressionState.table,\n                mangoQuery as any\n            );\n            input.mangoQuery = compressedQuery as any;\n        },\n        preCreateRxStorageInstance(params) {\n            /**\n             * When key compression is used,\n             * the storage instance only knows about the compressed schema\n             */\n            if (params.schema.keyCompression) {\n                const compressionState = createCompressionState(params.schema);\n                params.schema = compressionState.schema;\n            }\n        },\n        preQueryMatcher(params) {\n            if (!params.rxQuery.collection.schema.jsonSchema.keyCompression) {\n                return;\n            }\n            const state = getCompressionStateByStorageInstance(params.rxQuery.collection);\n            params.doc = compressObject(\n                state.table,\n                params.doc\n            );\n        },\n        preSortComparator(params) {\n            if (!params.rxQuery.collection.schema.jsonSchema.keyCompression) {\n                return;\n            }\n            const state = getCompressionStateByStorageInstance(params.rxQuery.collection);\n            params.docA = compressObject(\n                state.table,\n                params.docA\n            );\n            params.docB = compressObject(\n                state.table,\n                params.docB\n            );\n        },\n        preWriteToStorageInstance(params: {\n            collection: RxCollection<any, {}, {}, {}>;\n            doc: any;\n        }) {\n            if (!params.collection.schema.jsonSchema.keyCompression) {\n                return;\n            }\n            const state = getCompressionStateByStorageInstance(params.collection);\n\n            /**\n             * Do not send attachments to compressObject()\n             * because it will deep clone which does not work on Blob or Buffer.\n             */\n            const attachments = params.doc._attachments;\n            delete params.doc._attachments;\n\n            params.doc = compressObject(\n                state.table,\n                params.doc\n            );\n            params.doc._attachments = attachments;\n        },\n        postReadFromInstance(params) {\n            if (!params.collection.schema.jsonSchema.keyCompression) {\n                return;\n            }\n            const state = getCompressionStateByStorageInstance(params.collection);\n            params.doc = decompressObject(\n                state.table,\n                params.doc\n            );\n        }\n    }\n};\n"],"file":"key-compression.js"}