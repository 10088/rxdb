{"version":3,"file":"check-schema.js","names":["objectPath","newRxError","getPrimaryFieldOfPrimaryKey","getSchemaByObjectPath","flattenObject","isMaybeReadonlyArray","trimDots","rxDocumentProperties","checkFieldNameRegex","fieldName","includes","regexStr","regex","RegExp","match","validateFieldsDeep","rxJsonSchema","primaryPath","primaryKey","checkField","schemaObj","path","Array","isArray","hasOwnProperty","type","required","length","items","isNested","split","primary","charAt","traverse","currentObj","currentPath","Object","keys","forEach","attributeName","properties","nextPath","checkPrimaryKey","jsonSchema","schema","validatePrimarySchemaPart","schemaPart","args","key","compositePrimaryKey","keySchemaPart","fields","field","primaryPathSchemaPart","maxLength","getSchemaPropertyRealPath","shortPath","pathParts","realPath","i","concat","checkSchema","_rev","version","value","indexes","unique","encrypted","index","indexAsArray","multipleOf","maximum","minimum","parentPath","lastPathPart","partParts","pop","join","parentSchemaPart","map","splitted","filter","elem","pos","arr","indexOf","get","replace","reduce","indexPaths","currentIndex","push","indexPath","propPath"],"sources":["../../../../src/plugins/dev-mode/check-schema.ts"],"sourcesContent":["/**\n * does additional checks over the schema-json\n * to ensure nothing is broken or not supported\n */\n\nimport objectPath from 'object-path';\nimport {\n    newRxError\n} from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey, getSchemaByObjectPath } from '../../rx-schema-helper';\nimport type {\n    CompositePrimaryKey,\n    JsonSchema,\n    JsonSchemaTypes,\n    RxJsonSchema,\n    TopLevelProperty\n} from '../../types';\nimport {\n    flattenObject, isMaybeReadonlyArray,\n    trimDots\n} from '../../util';\nimport { rxDocumentProperties } from './entity-properties';\n\n/**\n * checks if the fieldname is allowed\n * this makes sure that the fieldnames can be transformed into javascript-vars\n * and does not conquer the observe$ and populate_ fields\n * @throws {Error}\n */\nexport function checkFieldNameRegex(fieldName: string) {\n    if (fieldName === '_deleted') {\n        return;\n    }\n\n    if (['properties', 'language'].includes(fieldName)) {\n        throw newRxError('SC23', {\n            fieldName\n        });\n    }\n\n    const regexStr = '^[a-zA-Z](?:[[a-zA-Z0-9_]*]?[a-zA-Z0-9])?$';\n    const regex = new RegExp(regexStr);\n    if (\n        /**\n         * It must be allowed to set _id as primaryKey.\n         * This makes it sometimes easier to work with RxDB+CouchDB\n         * @link https://github.com/pubkey/rxdb/issues/681\n         */\n        fieldName !== '_id' &&\n        !fieldName.match(regex)\n    ) {\n        throw newRxError('SC1', {\n            regex: regexStr,\n            fieldName\n        });\n    }\n}\n\n/**\n * validate that all schema-related things are ok\n */\nexport function validateFieldsDeep(rxJsonSchema: RxJsonSchema<any>): true {\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function checkField(\n        fieldName: string,\n        schemaObj: any,\n        path: string\n    ) {\n        if (\n            typeof fieldName === 'string' &&\n            typeof schemaObj === 'object' &&\n            !Array.isArray(schemaObj)\n        ) checkFieldNameRegex(fieldName);\n\n        // 'item' only allowed it type=='array'\n        if (schemaObj.hasOwnProperty('item') && schemaObj.type !== 'array') {\n            throw newRxError('SC2', {\n                fieldName\n            });\n        }\n\n        /**\n         * required fields cannot be set via 'required: true',\n         * but must be set via required: []\n         */\n        if (schemaObj.hasOwnProperty('required') && typeof schemaObj.required === 'boolean') {\n            throw newRxError('SC24', {\n                fieldName\n            });\n        }\n\n\n        // if ref given, must be type=='string', type=='array' with string-items or type==['string','null']\n        if (schemaObj.hasOwnProperty('ref')) {\n            if (Array.isArray(schemaObj.type)) {\n                if (schemaObj.type.length > 2 || !schemaObj.type.includes('string') || !schemaObj.type.includes('null')) {\n                    throw newRxError('SC4', {\n                        fieldName\n                    });\n                }\n            } else {\n                switch (schemaObj.type) {\n                    case 'string':\n                        break;\n                    case 'array':\n                        if (!schemaObj.items || !schemaObj.items.type || schemaObj.items.type !== 'string') {\n                            throw newRxError('SC3', {\n                                fieldName\n                            });\n                        }\n                        break;\n                    default:\n                        throw newRxError('SC4', {\n                            fieldName\n                        });\n                }\n            }\n        }\n\n        const isNested = path.split('.').length >= 2;\n\n        // nested only\n        if (isNested) {\n            if (schemaObj.primary) {\n                throw newRxError('SC6', {\n                    path,\n                    primary: schemaObj.primary\n                });\n            }\n\n            if (schemaObj.default) {\n                throw newRxError('SC7', {\n                    path\n                });\n            }\n        }\n\n        // first level\n        if (!isNested) {\n\n            // if _id is used, it must be primaryKey\n            if (\n                fieldName === '_id' &&\n                primaryPath !== '_id'\n            ) {\n                throw newRxError('COL2', {\n                    fieldName\n                });\n            }\n\n            // check underscore fields\n            if (fieldName.charAt(0) === '_') {\n                if (\n                    // exceptional allow underscore on these fields.\n                    fieldName === '_id' ||\n                    fieldName === '_deleted'\n                ) {\n                    return;\n                }\n                throw newRxError('SC8', {\n                    fieldName\n                });\n            }\n        }\n    }\n\n    function traverse(currentObj: any, currentPath: any) {\n        if (typeof currentObj !== 'object') return;\n        Object.keys(currentObj).forEach(attributeName => {\n            if (!currentObj.properties) {\n                checkField(\n                    attributeName,\n                    currentObj[attributeName],\n                    currentPath\n                );\n            }\n            let nextPath = currentPath;\n            if (attributeName !== 'properties') nextPath = nextPath + '.' + attributeName;\n            traverse(currentObj[attributeName], nextPath);\n        });\n    }\n    traverse(rxJsonSchema, '');\n    return true;\n}\n\nexport function checkPrimaryKey(\n    jsonSchema: RxJsonSchema<any>\n) {\n    if (!jsonSchema.primaryKey) {\n        throw newRxError('SC30', { schema: jsonSchema });\n    }\n\n\n\n    function validatePrimarySchemaPart(\n        schemaPart: JsonSchema | TopLevelProperty\n    ) {\n        if (!schemaPart) {\n            throw newRxError('SC33', { schema: jsonSchema });\n        }\n\n        const type: string = schemaPart.type as any;\n        if (\n            !type ||\n            !['string', 'number', 'integer'].includes(type)\n        ) {\n            throw newRxError('SC32', { schema: jsonSchema, args: { schemaPart } });\n        }\n    }\n\n    if (typeof jsonSchema.primaryKey === 'string') {\n        const key = jsonSchema.primaryKey;\n        const schemaPart = jsonSchema.properties[key];\n        validatePrimarySchemaPart(schemaPart);\n    } else {\n        const compositePrimaryKey: CompositePrimaryKey<any> = jsonSchema.primaryKey as any;\n\n        const keySchemaPart = getSchemaByObjectPath(jsonSchema, compositePrimaryKey.key);\n        validatePrimarySchemaPart(keySchemaPart);\n\n        compositePrimaryKey.fields.forEach(field => {\n            const schemaPart = getSchemaByObjectPath(jsonSchema, field);\n            validatePrimarySchemaPart(schemaPart);\n        });\n    }\n\n\n    /**\n     * The primary key must have a maxLength set\n     * which is required by some RxStorage implementations\n     * to ensure we can craft custom index strings.\n     */\n    const primaryPath = getPrimaryFieldOfPrimaryKey(jsonSchema.primaryKey);\n    const primaryPathSchemaPart = jsonSchema.properties[primaryPath as any];\n    if (!primaryPathSchemaPart.maxLength) {\n        throw newRxError('SC39', { schema: jsonSchema, args: { primaryPathSchemaPart } });\n    }\n}\n\n/**\n * computes real path of the object path in the collection schema\n */\nfunction getSchemaPropertyRealPath(shortPath: string) {\n    const pathParts = shortPath.split('.');\n    let realPath = '';\n    for (let i = 0; i < pathParts.length; i += 1) {\n        if (pathParts[i] !== '[]') {\n            realPath = realPath.concat('.properties.'.concat(pathParts[i]));\n        } else {\n            realPath = realPath.concat('.items');\n        }\n    }\n    return trimDots(realPath);\n}\n\n/**\n * does the checking\n * @throws {Error} if something is not ok\n */\nexport function checkSchema(jsonSchema: RxJsonSchema<any>) {\n\n    if (!jsonSchema.primaryKey) {\n        throw newRxError('SC30', {\n            schema: jsonSchema\n        });\n    }\n\n    if (!jsonSchema.hasOwnProperty('properties')) {\n        throw newRxError('SC29', {\n            schema: jsonSchema\n        });\n    }\n\n    // _rev MUST NOT exist, it is added by RxDB\n    if (jsonSchema.properties._rev) {\n        throw newRxError('SC10', {\n            schema: jsonSchema\n        });\n    }\n\n    // check version\n    if (!jsonSchema.hasOwnProperty('version') ||\n        typeof jsonSchema.version !== 'number' ||\n        jsonSchema.version < 0\n    ) {\n        throw newRxError('SC11', {\n            version: jsonSchema.version\n        });\n    }\n\n    validateFieldsDeep(jsonSchema);\n    checkPrimaryKey(jsonSchema);\n\n    Object.keys(jsonSchema.properties).forEach(key => {\n        const value: any = jsonSchema.properties[key];\n        // check primary\n        if (key === jsonSchema.primaryKey) {\n            if (jsonSchema.indexes && jsonSchema.indexes.includes(key)) {\n                throw newRxError('SC13', {\n                    value,\n                    schema: jsonSchema\n                });\n            }\n            if (value.unique) {\n                throw newRxError('SC14', {\n                    value,\n                    schema: jsonSchema\n                });\n            }\n            if (jsonSchema.encrypted && jsonSchema.encrypted.includes(key)) {\n                throw newRxError('SC15', {\n                    value,\n                    schema: jsonSchema\n                });\n            }\n            if (value.type !== 'string') {\n                throw newRxError('SC16', {\n                    value,\n                    schema: jsonSchema\n                });\n            }\n        }\n\n        // check if RxDocument-property\n        if (rxDocumentProperties().includes(key)) {\n            throw newRxError('SC17', {\n                key,\n                schema: jsonSchema\n            });\n        }\n    });\n\n    // check format of jsonSchema.indexes\n    if (jsonSchema.indexes) {\n        // should be an array\n        if (!isMaybeReadonlyArray(jsonSchema.indexes)) {\n            throw newRxError('SC18', {\n                indexes: jsonSchema.indexes,\n                schema: jsonSchema\n            });\n        }\n\n        jsonSchema.indexes.forEach(index => {\n            // should contain strings or array of strings\n            if (!(typeof index === 'string' || Array.isArray(index))) {\n                throw newRxError('SC19', { index, schema: jsonSchema });\n            }\n            // if is a compound index it must contain strings\n            if (Array.isArray(index)) {\n                for (let i = 0; i < index.length; i += 1) {\n                    if (typeof index[i] !== 'string') {\n                        throw newRxError('SC20', { index, schema: jsonSchema });\n                    }\n                }\n            }\n\n            /**\n             * To be able to craft custom indexable string with compound fields,\n             * we need to know the maximum fieldlength of the fields values\n             * when they are transformed to strings.\n             * Therefore we need to enforce some properties inside of the schema.\n             */\n            const indexAsArray = isMaybeReadonlyArray(index) ? index : [index];\n            indexAsArray.forEach(fieldName => {\n                const schemaPart = getSchemaByObjectPath(\n                    jsonSchema,\n                    fieldName\n                );\n\n\n                const type: JsonSchemaTypes = schemaPart.type as any;\n                switch (type) {\n                    case 'string':\n                        const maxLength = schemaPart.maxLength;\n                        if (!maxLength) {\n                            throw newRxError('SC34', {\n                                index,\n                                field: fieldName,\n                                schema: jsonSchema\n                            });\n                        }\n                        break;\n                    case 'number':\n                    case 'integer':\n                        const multipleOf = schemaPart.multipleOf;\n                        if (!multipleOf) {\n                            throw newRxError('SC35', {\n                                index,\n                                field: fieldName,\n                                schema: jsonSchema\n                            });\n                        }\n                        const maximum = schemaPart.maximum;\n                        const minimum = schemaPart.minimum;\n                        if (\n                            typeof maximum === 'undefined' ||\n                            typeof minimum === 'undefined'\n                        ) {\n                            throw newRxError('SC37', {\n                                index,\n                                field: fieldName,\n                                schema: jsonSchema\n                            });\n                        }\n                        break;\n                    case 'boolean':\n                        /**\n                         * If a boolean field is used as an index,\n                         * it must be required.\n                         */\n                        let parentPath = '';\n                        let lastPathPart = fieldName;\n                        if (fieldName.includes('.')) {\n                            const partParts = fieldName.split('.');\n                            lastPathPart = partParts.pop();\n                            parentPath = partParts.join('.');\n                        }\n                        const parentSchemaPart = getSchemaByObjectPath(\n                            jsonSchema,\n                            parentPath\n                        );\n                        if (\n                            !parentSchemaPart.required ||\n                            !parentSchemaPart.required.includes(lastPathPart)\n                        ) {\n                            throw newRxError('SC38', {\n                                index,\n                                field: fieldName,\n                                schema: jsonSchema\n                            });\n                        }\n                        break;\n\n                    default:\n                        throw newRxError('SC36', {\n                            fieldName,\n                            type: schemaPart.type as any,\n                            schema: jsonSchema,\n                        });\n                }\n            });\n\n        });\n    }\n\n    // remove backward-compatibility for index: true\n    Object.keys(flattenObject(jsonSchema))\n        .map(key => {\n            // flattenObject returns only ending paths, we need all paths pointing to an object\n            const splitted = key.split('.');\n            splitted.pop(); // all but last\n            return splitted.join('.');\n        })\n        .filter(key => key !== '')\n        .filter((elem, pos, arr) => arr.indexOf(elem) === pos) // unique\n        .filter(key => { // check if this path defines an index\n            const value = objectPath.get(jsonSchema, key);\n            return !!value.index;\n        })\n        .forEach(key => { // replace inner properties\n            key = key.replace('properties.', ''); // first\n            key = key.replace(/\\.properties\\./g, '.'); // middle\n            throw newRxError('SC26', {\n                index: trimDots(key),\n                schema: jsonSchema\n            });\n        });\n\n    /* check types of the indexes */\n    (jsonSchema.indexes || [])\n        .reduce((indexPaths: string[], currentIndex) => {\n            if (isMaybeReadonlyArray(currentIndex)) {\n                indexPaths.concat(currentIndex);\n            } else {\n                indexPaths.push(currentIndex);\n            }\n            return indexPaths;\n        }, [])\n        .filter((elem, pos, arr) => arr.indexOf(elem) === pos) // from now on working only with unique indexes\n        .map(indexPath => {\n            const realPath = getSchemaPropertyRealPath(indexPath); // real path in the collection schema\n            const schemaObj = objectPath.get(jsonSchema, realPath); // get the schema of the indexed property\n            if (!schemaObj || typeof schemaObj !== 'object') {\n                throw newRxError('SC21', {\n                    index: indexPath,\n                    schema: jsonSchema\n                });\n            }\n            return { indexPath, schemaObj };\n        })\n        .filter(index =>\n            index.schemaObj.type !== 'string' &&\n            index.schemaObj.type !== 'integer' &&\n            index.schemaObj.type !== 'number'\n        )\n        .forEach(index => {\n            throw newRxError('SC22', {\n                key: index.indexPath,\n                type: index.schemaObj.type,\n                schema: jsonSchema\n            });\n        });\n\n\n    /**\n     * TODO\n     * in 9.0.0 we changed the way encrypted fields are defined\n     * This check ensures people do not oversee the breaking change\n     * Remove this check in the future\n     */\n    Object.keys(flattenObject(jsonSchema))\n        .map(key => {\n            // flattenObject returns only ending paths, we need all paths pointing to an object\n            const splitted = key.split('.');\n            splitted.pop(); // all but last\n            return splitted.join('.');\n        })\n        .filter(key => key !== '' && key !== 'attachments')\n        .filter((elem, pos, arr) => arr.indexOf(elem) === pos) // unique\n        .filter(key => {\n            // check if this path defines an encrypted field\n            const value = objectPath.get(jsonSchema, key);\n            return !!value.encrypted;\n        })\n        .forEach(key => { // replace inner properties\n            key = key.replace('properties.', ''); // first\n            key = key.replace(/\\.properties\\./g, '.'); // middle\n            throw newRxError('SC27', {\n                index: trimDots(key),\n                schema: jsonSchema\n            });\n        });\n\n    /* ensure encrypted fields exist in the schema */\n    if (jsonSchema.encrypted) {\n        jsonSchema.encrypted\n            .forEach(propPath => {\n                // real path in the collection schema\n                const realPath = getSchemaPropertyRealPath(propPath);\n                // get the schema of the indexed property\n                const schemaObj = objectPath.get(jsonSchema, realPath);\n                if (!schemaObj || typeof schemaObj !== 'object') {\n                    throw newRxError('SC28', {\n                        field: propPath,\n                        schema: jsonSchema\n                    });\n                }\n            });\n    }\n}\n"],"mappings":"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"}