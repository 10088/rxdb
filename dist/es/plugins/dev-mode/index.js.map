{"version":3,"sources":["../../../../src/plugins/dev-mode/index.ts"],"names":["ERROR_MESSAGES","checkSchema","checkOrmDocumentMethods","checkOrmMethods","checkMigrationStrategies","ensureCollectionNameValid","ensureDatabaseNameIsValid","checkMangoQuery","checkQuery","newRxError","deepFreeze","deepFreezeWhenDevMode","obj","DEV_MODE_PLUGIN_NAME","RxDBDevModePlugin","name","rxdb","overwritable","isDevMode","tunnelErrorMessage","code","console","error","Error","hooks","preAddRxPlugin","args","plugin","plugins","preCreateRxSchema","preCreateRxDatabase","preCreateRxCollection","schema","methods","charAt","preCreateRxQuery","prePrepareQuery","createRxCollection","statics","attachments","migrationStrategies"],"mappings":"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","sourcesContent":["import type {\n    RxPlugin,\n    RxCollectionCreator,\n    RxDatabaseCreator,\n    RxPluginPreAddRxPluginArgs,\n    RxErrorKey\n} from '../../types';\n\nimport {\n    ERROR_MESSAGES\n} from './error-messages';\nimport {\n    checkSchema\n} from './check-schema';\nimport { checkOrmDocumentMethods, checkOrmMethods } from './check-orm';\nimport { checkMigrationStrategies } from './check-migration-strategies';\nimport {\n    ensureCollectionNameValid,\n    ensureDatabaseNameIsValid\n} from './unallowed-properties';\nimport { checkMangoQuery, checkQuery } from './check-query';\nimport { newRxError } from '../../rx-error';\nimport { DeepReadonly } from '../../types/util';\n\nexport * from './check-schema';\nexport * from './unallowed-properties';\n\nimport deepFreeze from 'deep-freeze';\n\n/**\n * Deep freezes and object when in dev-mode.\n * Deep-Freezing has the same performaance as deep-cloning, so we only do that in dev-mode.\n * Also we can ensure the readonly state via typescript\n * @link https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n */\nexport function deepFreezeWhenDevMode<T>(obj: T): DeepReadonly<T> {\n    // direct return if falsy\n    if (!obj) {\n        return obj as any;\n    }\n\n    return deepFreeze(obj);\n}\n\n\nconst DEV_MODE_PLUGIN_NAME = 'dev-mode';\nexport const RxDBDevModePlugin: RxPlugin = {\n    name: DEV_MODE_PLUGIN_NAME,\n    rxdb: true,\n    overwritable: {\n        isDevMode() {\n            return true;\n        },\n        deepFreezeWhenDevMode,\n        tunnelErrorMessage(code: RxErrorKey) {\n            if (!ERROR_MESSAGES[code]) {\n                console.error('RxDB: Error-Code not known: ' + code);\n                throw new Error('Error-Code ' + code + ' not known, contact the maintainer');\n            }\n            return ERROR_MESSAGES[code];\n        }\n    },\n    hooks: {\n        preAddRxPlugin: (args: RxPluginPreAddRxPluginArgs) => {\n            /**\n             * throw when dev mode is added multiple times\n             * because there is no way that this was done intentional.\n             * Likely the developer has mixed core and default usage of RxDB.\n             */\n            if (args.plugin.name === DEV_MODE_PLUGIN_NAME) {\n                throw newRxError('DEV1', {\n                    plugins: args.plugins\n                });\n            }\n        },\n        preCreateRxSchema: checkSchema,\n        preCreateRxDatabase: (args: RxDatabaseCreator<any, any>) => {\n            ensureDatabaseNameIsValid(args);\n        },\n        preCreateRxCollection: (args: RxCollectionCreator & { name: string; }) => {\n            ensureCollectionNameValid(args);\n            checkOrmDocumentMethods(args.schema as any, args.methods);\n            if (args.name.charAt(0) === '_') {\n                throw newRxError('DB2', {\n                    name: args.name\n                });\n            }\n            if (!args.schema) {\n                throw newRxError('DB4', {\n                    name: args.name,\n                    args\n                });\n            }\n        },\n        preCreateRxQuery: (args) => {\n            checkQuery(args);\n        },\n        prePrepareQuery: (args) => {\n            checkMangoQuery(args);\n        },\n        createRxCollection: (args: RxCollectionCreator) => {\n            // check ORM-methods\n            checkOrmMethods(args.statics);\n            checkOrmMethods(args.methods);\n            checkOrmMethods(args.attachments);\n\n            // check migration strategies\n            if (args.schema && args.migrationStrategies) {\n                checkMigrationStrategies(\n                    args.schema,\n                    args.migrationStrategies\n                );\n            }\n        }\n    }\n};\n"],"file":"index.js"}