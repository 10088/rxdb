{"version":3,"sources":["../../../../src/plugins/dev-mode/check-migration-strategies.ts"],"names":["newRxTypeError","newRxError","getPreviousVersions","checkMigrationStrategies","schema","migrationStrategies","Array","isArray","previousVersions","length","Object","keys","have","should","map","vNr","v","s","filter","strat","forEach","version","type"],"mappings":"AACA,SAASA,cAAT,EAAyBC,UAAzB,QAA2C,gBAA3C;AACA,SAASC,mBAAT,QAAoC,iBAApC;AAGA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CACHC,MADG,EAEHC,mBAFG,EAGI;AACP;AACA,MACI,OAAOA,mBAAP,KAA+B,QAA/B,IACAC,KAAK,CAACC,OAAN,CAAcF,mBAAd,CAFJ,EAGE;AACE,UAAML,cAAc,CAAC,OAAD,EAAU;AAC1BI,MAAAA,MAAM,EAANA;AAD0B,KAAV,CAApB;AAGH;;AAED,MAAMI,gBAAgB,GAAGN,mBAAmB,CAACE,MAAD,CAA5C,CAXO,CAaP;;AACA,MACII,gBAAgB,CAACC,MAAjB,KAA4BC,MAAM,CAC7BC,IADuB,CAClBN,mBADkB,EACGI,MAFnC,EAGE;AACE,UAAMR,UAAU,CAAC,OAAD,EAAU;AACtBW,MAAAA,IAAI,EAAEF,MAAM,CAACC,IAAP,CAAYN,mBAAZ,CADgB;AAEtBQ,MAAAA,MAAM,EAAEL;AAFc,KAAV,CAAhB;AAIH,GAtBM,CAwBP;;;AACAA,EAAAA,gBAAgB,CACXM,GADL,CACS,UAAAC,GAAG;AAAA,WAAK;AACTC,MAAAA,CAAC,EAAED,GADM;AAETE,MAAAA,CAAC,EAAEZ,mBAAmB,CAAEU,GAAG,GAAG,CAAR;AAFb,KAAL;AAAA,GADZ,EAKKG,MALL,CAKY,UAAAC,KAAK;AAAA,WAAI,OAAOA,KAAK,CAACF,CAAb,KAAmB,UAAvB;AAAA,GALjB,EAMKG,OANL,CAMa,UAAAD,KAAK,EAAI;AACd,UAAMnB,cAAc,CAAC,OAAD,EAAU;AAC1BqB,MAAAA,OAAO,EAAEF,KAAK,CAACH,CADW;AAE1BM,MAAAA,IAAI,EAAE,OAAOH,KAFa;AAG1Bf,MAAAA,MAAM,EAANA;AAH0B,KAAV,CAApB;AAKH,GAZL;AAcA,SAAO,IAAP;AACH","sourcesContent":["import type { RxJsonSchema, NumberFunctionMap } from '../../types';\nimport { newRxTypeError, newRxError } from '../../rx-error';\nimport { getPreviousVersions } from '../../rx-schema';\n\n\n/**\n * checks if the migrationStrategies are ok, throws if not\n * @throws {Error|TypeError} if not ok\n */\nexport function checkMigrationStrategies(\n    schema: RxJsonSchema<any>,\n    migrationStrategies: NumberFunctionMap\n): boolean {\n    // migrationStrategies must be object not array\n    if (\n        typeof migrationStrategies !== 'object' ||\n        Array.isArray(migrationStrategies)\n    ) {\n        throw newRxTypeError('COL11', {\n            schema\n        });\n    }\n\n    const previousVersions = getPreviousVersions(schema);\n\n    // for every previousVersion there must be strategy\n    if (\n        previousVersions.length !== Object\n            .keys(migrationStrategies).length\n    ) {\n        throw newRxError('COL12', {\n            have: Object.keys(migrationStrategies),\n            should: previousVersions\n        });\n    }\n\n    // every strategy must have number as property and be a function\n    previousVersions\n        .map(vNr => ({\n            v: vNr,\n            s: migrationStrategies[(vNr + 1)]\n        }))\n        .filter(strat => typeof strat.s !== 'function')\n        .forEach(strat => {\n            throw newRxTypeError('COL13', {\n                version: strat.v,\n                type: typeof strat,\n                schema\n            });\n        });\n\n    return true;\n}\n"],"file":"check-migration-strategies.js"}