{"version":3,"sources":["../../../src/plugins/json-dump.ts"],"names":["hash","now","createRxQuery","_getDefaultQuery","newRxError","_handleToStorageInstance","dumpRxDatabase","decrypted","collections","json","name","instanceToken","token","encrypted","passwordHash","password","useCollections","Object","keys","filter","colName","includes","charAt","map","Promise","all","col","exportJSON","then","cols","importDumpRxDatabase","dump","missingCollections","length","colDump","importJSON","dumpRxCollection","schemaHash","schema","docs","database","query","_queryStorageInstance","undefined","docData","_rev","_attachments","importDumpRxCollection","exportedJSON","own","doc","_crypter","decrypt","validate","startTime","lockedRun","writeMe","document","storageInstance","bulkWrite","rxdb","prototypes","RxDatabase","proto","RxCollection","overwritable","RxDBJsonDumpPlugin"],"mappings":"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","sourcesContent":["/**\n * this plugin adds the json export/import capabilities to RxDB\n */\nimport {\n    hash,\n    now\n} from '../util';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from '../rx-query';\nimport {\n    newRxError\n} from '../rx-error';\nimport type {\n    RxDatabase,\n    RxCollection,\n    RxPlugin,\n    RxDocumentData,\n    BulkWriteRow\n} from '../types';\nimport { _handleToStorageInstance } from '../rx-collection-helper';\n\nfunction dumpRxDatabase(\n    this: RxDatabase,\n    decrypted = false,\n    collections?: string[]\n): Promise<any> {\n    const json: any = {\n        name: this.name,\n        instanceToken: this.token,\n        encrypted: false,\n        passwordHash: null,\n        collections: []\n    };\n\n    if (this.password) {\n        json.passwordHash = hash(this.password);\n        if (decrypted) json.encrypted = false;\n        else json.encrypted = true;\n    }\n\n    const useCollections = Object.keys(this.collections)\n        .filter(colName => !collections || collections.includes(colName))\n        .filter(colName => colName.charAt(0) !== '_')\n        .map(colName => this.collections[colName]);\n\n    return Promise.all(\n        useCollections\n            .map(col => col.exportJSON(decrypted))\n    ).then(cols => {\n        json.collections = cols;\n        return json;\n    });\n}\n\nconst importDumpRxDatabase = function (\n    this: RxDatabase,\n    dump: any\n) {\n    /**\n     * collections must be created before the import\n     * because we do not know about the other collection-settings here\n     */\n    const missingCollections = dump.collections\n        .filter((col: any) => !this.collections[col.name])\n        .map((col: any) => col.name);\n    if (missingCollections.length > 0) {\n        throw newRxError('JD1', {\n            missingCollections\n        });\n    }\n\n    return Promise.all(\n        dump.collections\n            .map((colDump: any) => this.collections[colDump.name].importJSON(colDump))\n    );\n};\n\nconst dumpRxCollection = function (\n    this: RxCollection,\n    decrypted = false\n) {\n    const encrypted = !decrypted;\n\n    const json: any = {\n        name: this.name,\n        schemaHash: this.schema.hash,\n        encrypted: false,\n        passwordHash: null,\n        docs: []\n    };\n\n    if (this.database.password && encrypted) {\n        json.passwordHash = hash(this.database.password);\n        json.encrypted = true;\n    }\n\n    const query = createRxQuery(\n        'find',\n        _getDefaultQuery(),\n        this\n    );\n    return this._queryStorageInstance(query, undefined, encrypted)\n        .then((docs: any) => {\n            json.docs = docs.map((docData: any) => {\n                delete docData._rev;\n                delete docData._attachments;\n                return docData;\n            });\n            return json;\n        });\n};\n\nfunction importDumpRxCollection<RxDocType>(\n    this: RxCollection<RxDocType>,\n    exportedJSON: any\n): Promise<any> {\n    // check schemaHash\n    if (exportedJSON.schemaHash !== this.schema.hash) {\n        throw newRxError('JD2', {\n            schemaHash: exportedJSON.schemaHash,\n            own: this.schema.hash\n        });\n    }\n\n    // check if passwordHash matches own\n    if (\n        exportedJSON.encrypted &&\n        exportedJSON.passwordHash !== hash(this.database.password)\n    ) {\n        throw newRxError('JD3', {\n            passwordHash: exportedJSON.passwordHash,\n            own: hash(this.database.password)\n        });\n    }\n\n    const docs: RxDocumentData<RxDocType>[] = exportedJSON.docs\n        // decrypt\n        .map((doc: any) => this._crypter.decrypt(doc))\n        // validate schema\n        .map((doc: any) => this.schema.validate(doc));\n\n    let startTime: number;\n    return this.database.lockedRun(\n        // write to disc\n        () => {\n            startTime = now();\n            const writeMe: BulkWriteRow<RxDocType>[] = docs.map(doc => ({\n                document: _handleToStorageInstance(this, doc)\n            }));\n            return this.storageInstance.bulkWrite(writeMe);\n        }\n    );\n}\n\nexport const rxdb = true;\nexport const prototypes = {\n    RxDatabase: (proto: any) => {\n        proto.exportJSON = dumpRxDatabase;\n        proto.importJSON = importDumpRxDatabase;\n    },\n    RxCollection: (proto: any) => {\n        proto.exportJSON = dumpRxCollection;\n        proto.importJSON = importDumpRxCollection;\n    }\n};\n\nexport const overwritable = {};\n\nexport const RxDBJsonDumpPlugin: RxPlugin = {\n    name: 'json-dump',\n    rxdb,\n    prototypes,\n    overwritable\n};\n"],"file":"json-dump.js"}