{"version":3,"file":"attachments.js","names":["map","blobBufferUtil","createRevision","flatClone","newRxError","flatCloneDocWithMeta","hashAttachmentData","writeSingle","runAsyncPluginHooks","ensureSchemaSupportsAttachments","doc","schemaJson","collection","schema","jsonSchema","attachments","link","postMigrateDocument","_action","preMigrateDocument","data","docData","_attachments","newAttachments","Promise","all","Object","keys","attachmentId","attachment","docPrimary","oldCollection","primaryPath","storageInstance","getAttachmentData","rawAttachmentData","hookInput","database","type","plainData","digest","length","putAttachment","attachmentData","skipIfSame","dataSize","size","storageStatics","storage","statics","toBase64String","dataString","hookAttachmentData","id","then","hash","hashKey","newDigest","_atomicQueue","_data","currentMeta","getAttachment","docWriteData","_rev","writeRow","previous","document","writeResult","fromStorageInstanceResult","newData","_dataSync$","next","_assignMethodsToAttachment","entries","forEach","funName","fun","defineProperty","get","bind","RxAttachment","remove","getData","primary","plainDataBase64","createBlobBufferFromBase64","getStringData","toString","rxDocument","getValue","allAttachments","RxDBAttachmentsPlugin","name","rxdb","prototypes","RxDocument","proto","allAttachments$","pipe","attachmentsData","overwritable","hooks","after"],"sources":["../../../src/plugins/attachments.ts"],"sourcesContent":["import {\n    map\n} from 'rxjs/operators';\n\nimport {\n    blobBufferUtil,\n    createRevision,\n    flatClone\n} from './../util';\nimport {\n    newRxError\n} from '../rx-error';\nimport type {\n    RxDocument,\n    RxPlugin,\n    BlobBuffer,\n    OldRxCollection,\n    RxDocumentWriteData,\n    RxAttachmentData,\n    RxDocumentData,\n    RxAttachmentCreator,\n    RxAttachmentWriteData\n} from '../types';\nimport { flatCloneDocWithMeta, hashAttachmentData, writeSingle } from '../rx-storage-helper';\nimport { runAsyncPluginHooks } from '../hooks';\n\nfunction ensureSchemaSupportsAttachments(doc: any) {\n    const schemaJson = doc.collection.schema.jsonSchema;\n    if (!schemaJson.attachments) {\n        throw newRxError('AT1', {\n            link: 'https://pubkey.github.io/rxdb/rx-attachment.html'\n        });\n    }\n}\n\nconst _assignMethodsToAttachment = function (attachment: any) {\n    Object\n        .entries(attachment.doc.collection.attachments)\n        .forEach(([funName, fun]) => {\n            Object.defineProperty(attachment, funName, {\n                get: () => (fun as any).bind(attachment)\n            });\n        });\n};\n\n/**\n * an RxAttachment is basically just the attachment-stub\n * wrapped so that you can access the attachment-data\n */\nexport class RxAttachment {\n    public doc: RxDocument;\n    public id: string;\n    public type: string;\n    public length: number;\n    public digest: string;\n    constructor({\n        doc,\n        id,\n        type,\n        length,\n        digest\n    }: any) {\n        this.doc = doc;\n        this.id = id;\n        this.type = type;\n        this.length = length;\n        this.digest = digest;\n\n        _assignMethodsToAttachment(this);\n    }\n\n    async remove(): Promise<void> {\n        this.doc._atomicQueue = this.doc._atomicQueue\n            .then(async () => {\n                const docWriteData: RxDocumentWriteData<{}> = flatCloneDocWithMeta(this.doc._data);\n                docWriteData._attachments = flatClone(docWriteData._attachments);\n                delete docWriteData._attachments[this.id];\n\n\n                docWriteData._rev = createRevision(docWriteData, this.doc._data);\n\n                const writeResult: RxDocumentData<any> = await writeSingle(\n                    this.doc.collection.storageInstance,\n                    {\n                        previous: flatClone(this.doc._data), // TODO do we need a flatClone here?\n                        document: docWriteData\n                    },\n                    'attachment-remove'\n                );\n\n                const newData = flatClone(this.doc._data);\n                newData._rev = writeResult._rev;\n                newData._attachments = writeResult._attachments;\n                this.doc._dataSync$.next(newData);\n\n            });\n        return this.doc._atomicQueue;\n    }\n\n    /**\n     * returns the data for the attachment\n     */\n    async getData(): Promise<BlobBuffer> {\n        const plainDataBase64 = await this.doc.collection.storageInstance.getAttachmentData(\n            this.doc.primary,\n            this.id\n        );\n        const hookInput = {\n            database: this.doc.collection.database,\n            schema: this.doc.collection.schema.jsonSchema,\n            type: this.type,\n            plainData: plainDataBase64\n        };\n        await runAsyncPluginHooks('postReadAttachment', hookInput);\n        const ret = await blobBufferUtil.createBlobBufferFromBase64(\n            hookInput.plainData,\n            this.type as any\n        );\n        return ret;\n    }\n\n    async getStringData(): Promise<string> {\n        const data = await this.getData();\n        const asString = await blobBufferUtil.toString(data);\n        return asString;\n    }\n}\n\nexport function fromStorageInstanceResult(\n    id: string,\n    attachmentData: RxAttachmentData,\n    rxDocument: RxDocument\n) {\n    return new RxAttachment({\n        doc: rxDocument,\n        id,\n        type: attachmentData.type,\n        length: attachmentData.length,\n        digest: attachmentData.digest\n    });\n}\n\nexport async function putAttachment(\n    this: RxDocument,\n    attachmentData: RxAttachmentCreator,\n    /**\n     * If set to true, the write will be skipped\n     * when the attachment already contains the same data.\n     */\n    skipIfSame: boolean = true\n): Promise<RxAttachment> {\n    ensureSchemaSupportsAttachments(this);\n\n\n    const dataSize = blobBufferUtil.size(attachmentData.data);\n    const storageStatics = this.collection.database.storage.statics;\n    const dataString = await blobBufferUtil.toBase64String(attachmentData.data);\n\n    const hookAttachmentData = {\n        id: attachmentData.id,\n        type: attachmentData.type,\n        data: dataString\n    };\n    await runAsyncPluginHooks('preWriteAttachment', {\n        database: this.collection.database,\n        schema: this.collection.schema.jsonSchema,\n        attachmentData: hookAttachmentData\n    });\n\n    const {\n        id, data, type\n    } = hookAttachmentData;\n\n    const newDigest = await hashAttachmentData(\n        dataString,\n        storageStatics\n    ).then(hash => storageStatics.hashKey + '-' + hash);\n\n    this._atomicQueue = this._atomicQueue\n        .then(async () => {\n            if (skipIfSame && this._data._attachments && this._data._attachments[id]) {\n                const currentMeta = this._data._attachments[id];\n                if (currentMeta.type === type && currentMeta.digest === newDigest) {\n                    // skip because same data and same type\n                    return this.getAttachment(id);\n                }\n            }\n\n            const docWriteData: RxDocumentWriteData<{}> = flatCloneDocWithMeta(this._data);\n            docWriteData._attachments = flatClone(docWriteData._attachments);\n\n            docWriteData._attachments[id] = {\n                digest: newDigest,\n                length: dataSize,\n                type,\n                data\n            };\n\n            docWriteData._rev = createRevision(docWriteData, this._data);\n\n            const writeRow = {\n                previous: flatClone(this._data),\n                document: flatClone(docWriteData)\n            };\n\n            const writeResult = await writeSingle(\n                this.collection.storageInstance,\n                writeRow,\n                'attachment-put'\n            );\n\n            const attachmentData = writeResult._attachments[id];\n            const attachment = fromStorageInstanceResult(\n                id,\n                attachmentData,\n                this\n            );\n\n            const newData = flatClone(this._data);\n            newData._rev = writeResult._rev;\n            newData._attachments = writeResult._attachments;\n            this._dataSync$.next(newData);\n\n            return attachment;\n        });\n    return this._atomicQueue;\n}\n\n/**\n * get an attachment of the document by its id\n */\nexport function getAttachment(\n    this: RxDocument,\n    id: string\n): RxAttachment | null {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n    if (!docData._attachments || !docData._attachments[id])\n        return null;\n\n    const attachmentData = docData._attachments[id];\n    const attachment = fromStorageInstanceResult(\n        id,\n        attachmentData,\n        this\n    );\n    return attachment;\n}\n\n/**\n * returns all attachments of the document\n */\nexport function allAttachments(\n    this: RxDocument\n): RxAttachment[] {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n\n    // if there are no attachments, the field is missing\n    if (!docData._attachments) {\n        return [];\n    }\n    return Object.keys(docData._attachments)\n        .map(id => {\n            return fromStorageInstanceResult(\n                id,\n                docData._attachments[id],\n                this\n            );\n        });\n}\n\nexport async function preMigrateDocument<RxDocType>(\n    data: {\n        docData: RxDocumentData<RxDocType>;\n        oldCollection: OldRxCollection\n    }\n): Promise<void> {\n    const attachments = data.docData._attachments;\n    if (attachments) {\n        const newAttachments: { [attachmentId: string]: RxAttachmentWriteData } = {};\n        await Promise.all(\n            Object.keys(attachments).map(async (attachmentId) => {\n                const attachment: RxAttachmentData = attachments[attachmentId];\n                const docPrimary: string = (data.docData as any)[data.oldCollection.schema.primaryPath];\n\n                let rawAttachmentData = await data.oldCollection.storageInstance.getAttachmentData(docPrimary, attachmentId);\n\n                const hookInput = {\n                    database: data.oldCollection.database,\n                    schema: data.oldCollection.schema.jsonSchema,\n                    type: attachment.type,\n                    plainData: rawAttachmentData\n                };\n                await runAsyncPluginHooks('postReadAttachment', hookInput);\n                rawAttachmentData = hookInput.plainData;\n\n                newAttachments[attachmentId] = {\n                    digest: attachment.digest,\n                    length: attachment.length,\n                    type: attachment.type,\n                    data: rawAttachmentData\n                };\n            })\n        );\n\n        /**\n         * Hooks mutate the input\n         * instead of returning stuff\n         */\n        (data.docData as RxDocumentWriteData<RxDocType>)._attachments = newAttachments;\n    }\n}\n\nexport async function postMigrateDocument(_action: any): Promise<void> {\n    /**\n     * No longer needed because\n     * we store the attachemnts data buffers directly in the document.\n     */\n    return;\n}\n\nexport const RxDBAttachmentsPlugin: RxPlugin = {\n    name: 'attachments',\n    rxdb: true,\n    prototypes: {\n        RxDocument: (proto: any) => {\n            proto.putAttachment = putAttachment;\n            proto.getAttachment = getAttachment;\n            proto.allAttachments = allAttachments;\n            Object.defineProperty(proto, 'allAttachments$', {\n                get: function allAttachments$() {\n                    return this._dataSync$\n                        .pipe(\n                            map((data: any) => {\n                                if (!data['_attachments']) {\n                                    return {};\n                                }\n                                return data['_attachments'];\n                            }),\n                            map((attachmentsData: any) => Object.entries(\n                                attachmentsData\n                            )),\n                            map(entries => {\n                                return (entries as any)\n                                    .map(([id, attachmentData]: any) => {\n                                        return fromStorageInstanceResult(\n                                            id,\n                                            attachmentData,\n                                            this\n                                        );\n                                    });\n                            })\n                        );\n                }\n            });\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preMigrateDocument: {\n            after: preMigrateDocument\n        },\n        postMigrateDocument: {\n            after: postMigrateDocument\n        }\n    }\n};\n"],"mappings":"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"}