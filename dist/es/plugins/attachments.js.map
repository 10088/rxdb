{"version":3,"file":"attachments.js","names":["map","blobBufferUtil","flatClone","PROMISE_RESOLVE_VOID","newRxError","flatCloneDocWithMeta","writeSingle","ensureSchemaSupportsAttachments","doc","schemaJson","collection","schema","jsonSchema","attachments","link","preMigrateDocument","data","docData","_attachments","newAttachments","Promise","all","Object","keys","attachmentId","attachment","docPrimary","oldCollection","primaryPath","storageInstance","getAttachmentData","rawAttachmentData","length","type","putAttachment","attachmentData","_skipIfSame","dataSize","size","toBase64String","dataString","id","_atomicQueue","then","docWriteData","_data","writeRow","previous","document","writeResult","attachmentDataOfId","fromStorageInstanceResult","newData","_rev","_dataSync$","next","_assignMethodsToAttachment","entries","forEach","funName","fun","defineProperty","get","bind","RxAttachment","digest","remove","getData","primary","plainDataBase64","createBlobBufferFromBase64","getStringData","toString","rxDocument","getAttachment","getValue","allAttachments","postMigrateDocument","_action","RxDBAttachmentsPlugin","name","rxdb","prototypes","RxDocument","proto","allAttachments$","pipe","attachmentsData","overwritable","hooks","after"],"sources":["../../../src/plugins/attachments.ts"],"sourcesContent":["import {\n    map\n} from 'rxjs/operators';\n\nimport {\n    blobBufferUtil,\n    flatClone,\n    PROMISE_RESOLVE_VOID\n} from './../util';\nimport {\n    newRxError\n} from '../rx-error';\nimport type {\n    RxDocument,\n    RxPlugin,\n    BlobBuffer,\n    OldRxCollection,\n    RxDocumentWriteData,\n    RxAttachmentData,\n    RxDocumentData,\n    RxAttachmentCreator,\n    RxAttachmentWriteData\n} from '../types';\nimport { flatCloneDocWithMeta, writeSingle } from '../rx-storage-helper';\n\n\n\nfunction ensureSchemaSupportsAttachments(doc: any) {\n    const schemaJson = doc.collection.schema.jsonSchema;\n    if (!schemaJson.attachments) {\n        throw newRxError('AT1', {\n            link: 'https://pubkey.github.io/rxdb/rx-attachment.html'\n        });\n    }\n}\n\nconst _assignMethodsToAttachment = function (attachment: any) {\n    Object\n        .entries(attachment.doc.collection.attachments)\n        .forEach(([funName, fun]) => {\n            Object.defineProperty(attachment, funName, {\n                get: () => (fun as any).bind(attachment)\n            });\n        });\n};\n\n/**\n * an RxAttachment is basically just the attachment-stub\n * wrapped so that you can access the attachment-data\n */\nexport class RxAttachment {\n    public doc: RxDocument;\n    public id: string;\n    public type: string;\n    public length: number;\n    public digest: string;\n    constructor({\n        doc,\n        id,\n        type,\n        length,\n        digest\n    }: any) {\n        this.doc = doc;\n        this.id = id;\n        this.type = type;\n        this.length = length;\n        this.digest = digest;\n\n        _assignMethodsToAttachment(this);\n    }\n\n    remove(): Promise<void> {\n        this.doc._atomicQueue = this.doc._atomicQueue\n            .then(async () => {\n                const docWriteData: RxDocumentWriteData<{}> = flatCloneDocWithMeta(this.doc._data);\n                docWriteData._attachments = flatClone(docWriteData._attachments);\n                delete docWriteData._attachments[this.id];\n                const writeResult: RxDocumentData<any> = await writeSingle(\n                    this.doc.collection.storageInstance,\n                    {\n                        previous: flatClone(this.doc._data), // TODO do we need a flatClone here?\n                        document: docWriteData\n                    },\n                    'attachment-remove'\n                );\n\n                const newData = flatClone(this.doc._data);\n                newData._rev = writeResult._rev;\n                newData._attachments = writeResult._attachments;\n                this.doc._dataSync$.next(newData);\n\n            });\n        return this.doc._atomicQueue;\n    }\n\n    /**\n     * returns the data for the attachment\n     */\n    async getData(): Promise<BlobBuffer> {\n        const plainDataBase64 = await this.doc.collection.storageInstance.getAttachmentData(\n            this.doc.primary,\n            this.id\n        );\n        const ret = await blobBufferUtil.createBlobBufferFromBase64(\n            plainDataBase64,\n            this.type as any\n        );\n        return ret;\n    }\n\n    async getStringData(): Promise<string> {\n        const data = await this.getData();\n        const asString = await blobBufferUtil.toString(data);\n        return asString;\n    }\n}\n\nexport function fromStorageInstanceResult(\n    id: string,\n    attachmentData: RxAttachmentData,\n    rxDocument: RxDocument\n) {\n    return new RxAttachment({\n        doc: rxDocument,\n        id,\n        type: attachmentData.type,\n        length: attachmentData.length,\n        digest: attachmentData.digest\n    });\n}\n\nexport async function putAttachment(\n    this: RxDocument,\n    attachmentData: RxAttachmentCreator,\n    /**\n     * If set to true, the write will be skipped\n     * when the attachment already contains the same data.\n     * @deprecated The check if the data has changed is now performed\n     * inside of the RxStorage, no longer by RxDB itself. So we do\n     * no longer need 'skipIfSame'.\n     */\n    _skipIfSame: boolean = true\n): Promise<RxAttachment> {\n    ensureSchemaSupportsAttachments(this);\n\n    const dataSize = blobBufferUtil.size(attachmentData.data);\n    const dataString = await blobBufferUtil.toBase64String(attachmentData.data);\n\n    const id = attachmentData.id;\n    const type = attachmentData.type;\n    const data = dataString;\n\n    this._atomicQueue = this._atomicQueue\n        .then(async () => {\n            const docWriteData: RxDocumentWriteData<{}> = flatCloneDocWithMeta(this._data);\n            docWriteData._attachments = flatClone(docWriteData._attachments);\n\n            docWriteData._attachments[id] = {\n                length: dataSize,\n                type,\n                data\n            };\n            const writeRow = {\n                previous: flatClone(this._data),\n                document: flatClone(docWriteData)\n            };\n\n            const writeResult = await writeSingle(\n                this.collection.storageInstance,\n                writeRow,\n                'attachment-put'\n            );\n\n            const attachmentDataOfId = writeResult._attachments[id];\n            const attachment = fromStorageInstanceResult(\n                id,\n                attachmentDataOfId,\n                this\n            );\n\n            const newData = flatClone(this._data);\n            newData._rev = writeResult._rev;\n            newData._attachments = writeResult._attachments;\n            this._dataSync$.next(newData);\n\n            return attachment;\n        });\n    return this._atomicQueue;\n}\n\n/**\n * get an attachment of the document by its id\n */\nexport function getAttachment(\n    this: RxDocument,\n    id: string\n): RxAttachment | null {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n    if (!docData._attachments || !docData._attachments[id])\n        return null;\n\n    const attachmentData = docData._attachments[id];\n    const attachment = fromStorageInstanceResult(\n        id,\n        attachmentData,\n        this\n    );\n    return attachment;\n}\n\n/**\n * returns all attachments of the document\n */\nexport function allAttachments(\n    this: RxDocument\n): RxAttachment[] {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n\n    // if there are no attachments, the field is missing\n    if (!docData._attachments) {\n        return [];\n    }\n    return Object.keys(docData._attachments)\n        .map(id => {\n            return fromStorageInstanceResult(\n                id,\n                docData._attachments[id],\n                this\n            );\n        });\n}\n\nexport async function preMigrateDocument<RxDocType>(\n    data: {\n        docData: RxDocumentData<RxDocType>;\n        oldCollection: OldRxCollection;\n    }\n): Promise<void> {\n    const attachments = data.docData._attachments;\n    if (attachments) {\n        const newAttachments: { [attachmentId: string]: RxAttachmentWriteData; } = {};\n        await Promise.all(\n            Object.keys(attachments).map(async (attachmentId) => {\n                const attachment: RxAttachmentData = attachments[attachmentId];\n                const docPrimary: string = (data.docData as any)[data.oldCollection.schema.primaryPath];\n                const rawAttachmentData = await data.oldCollection.storageInstance.getAttachmentData(docPrimary, attachmentId);\n                newAttachments[attachmentId] = {\n                    length: attachment.length,\n                    type: attachment.type,\n                    data: rawAttachmentData\n                };\n            })\n        );\n\n        /**\n         * Hooks mutate the input\n         * instead of returning stuff\n         */\n        (data.docData as RxDocumentWriteData<RxDocType>)._attachments = newAttachments;\n    }\n}\n\nexport function postMigrateDocument(_action: any): Promise<void> {\n    /**\n     * No longer needed because\n     * we store the attachments data buffers directly in the document.\n     */\n    return PROMISE_RESOLVE_VOID;\n}\n\nexport const RxDBAttachmentsPlugin: RxPlugin = {\n    name: 'attachments',\n    rxdb: true,\n    prototypes: {\n        RxDocument: (proto: any) => {\n            proto.putAttachment = putAttachment;\n            proto.getAttachment = getAttachment;\n            proto.allAttachments = allAttachments;\n            Object.defineProperty(proto, 'allAttachments$', {\n                get: function allAttachments$() {\n                    return this._dataSync$\n                        .pipe(\n                            map((data: any) => {\n                                if (!data['_attachments']) {\n                                    return {};\n                                }\n                                return data['_attachments'];\n                            }),\n                            map((attachmentsData: any) => Object.entries(\n                                attachmentsData\n                            )),\n                            map(entries => {\n                                return (entries as any)\n                                    .map(([id, attachmentData]: any) => {\n                                        return fromStorageInstanceResult(\n                                            id,\n                                            attachmentData,\n                                            this\n                                        );\n                                    });\n                            })\n                        );\n                }\n            });\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preMigrateDocument: {\n            after: preMigrateDocument\n        },\n        postMigrateDocument: {\n            after: postMigrateDocument\n        }\n    }\n};\n"],"mappings":"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"}