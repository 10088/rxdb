{"version":3,"file":"dexie-query.js","names":["dexieReplaceIfStartsWithPipe","DEXIE_DOCS_TABLE_NAME","fromDexieToStorage","RxStorageDexieStatics","dexieQuery","instance","preparedQuery","internals","state","query","queryMatcher","getQueryMatcher","schema","sortComparator","getSortComparator","skip","limit","Infinity","skipPlusLimit","queryPlan","keyRange","getKeyRangeByQueryPlan","dexieDb","_options","IDBKeyRange","queryPlanFields","index","rows","transaction","dexieTable","dexieTx","tx","idbtrans","store","objectStore","length","primaryPath","indexName","map","field","join","cursorReq","openCursor","Promise","res","onsuccess","e","cursor","target","result","docData","value","push","sortFieldsSameAsIndexFields","sort","slice","documents","window","Error","bound","startKeys","endKeys","inclusiveStart","inclusiveEnd"],"sources":["../../../../src/plugins/dexie/dexie-query.ts"],"sourcesContent":["import type {\n    DexiePreparedQuery,\n    RxQueryPlan,\n    RxStorageQueryResult\n} from '../../types';\nimport {\n    dexieReplaceIfStartsWithPipe,\n    DEXIE_DOCS_TABLE_NAME,\n    fromDexieToStorage\n} from './dexie-helper';\nimport { RxStorageDexieStatics } from './rx-storage-dexie';\nimport type { RxStorageInstanceDexie } from './rx-storage-instance-dexie';\n\n\nexport function getKeyRangeByQueryPlan(\n    queryPlan: RxQueryPlan,\n    IDBKeyRange?: any\n) {\n    if (!IDBKeyRange) {\n        if (typeof window === 'undefined') {\n            throw new Error('IDBKeyRange missing');\n        } else {\n            IDBKeyRange = window.IDBKeyRange;\n        }\n    }\n\n    /**\n     * If index has only one field,\n     * we have to pass the keys directly, not the key arrays.\n     */\n    if (queryPlan.index.length === 1) {\n        return IDBKeyRange.bound(\n            queryPlan.startKeys[0],\n            queryPlan.endKeys[0],\n            queryPlan.inclusiveStart,\n            queryPlan.inclusiveEnd\n        );\n    }\n\n    return IDBKeyRange.bound(\n        queryPlan.startKeys,\n        queryPlan.endKeys,\n        queryPlan.inclusiveStart,\n        queryPlan.inclusiveEnd\n    );\n\n}\n\n\n/**\n * Runs mango queries over the Dexie.js database.\n */\nexport async function dexieQuery<RxDocType>(\n    instance: RxStorageInstanceDexie<RxDocType>,\n    preparedQuery: DexiePreparedQuery<RxDocType>\n): Promise<RxStorageQueryResult<RxDocType>> {\n    const state = await instance.internals;\n    const query = preparedQuery.query;\n    const queryMatcher = RxStorageDexieStatics.getQueryMatcher(\n        instance.schema,\n        preparedQuery\n    );\n    const sortComparator = RxStorageDexieStatics.getSortComparator(instance.schema, preparedQuery);\n\n    const skip = query.skip ? query.skip : 0;\n    const limit = query.limit ? query.limit : Infinity;\n    const skipPlusLimit = skip + limit;\n    const queryPlan = preparedQuery.queryPlan;\n\n    const keyRange = getKeyRangeByQueryPlan(\n        queryPlan,\n        (state.dexieDb as any)._options.IDBKeyRange\n    );\n\n    const queryPlanFields: string[] = queryPlan.index;\n\n    let rows: any[] = [];\n    await state.dexieDb.transaction(\n        'r',\n        state.dexieTable,\n        async (dexieTx) => {\n            /**\n             * TODO here we use the native IndexedDB transaction\n             * to get the cursor.\n             * Instead we should not leave Dexie.js API and find\n             * a way to create the cursor with Dexie.js.\n             */\n            const tx = (dexieTx as any).idbtrans;\n\n            // const nativeIndexedDB = state.dexieDb.backendDB();\n            // const trans = nativeIndexedDB.transaction([DEXIE_DOCS_TABLE_NAME], 'readonly');\n\n            const store = tx.objectStore(DEXIE_DOCS_TABLE_NAME);\n            let index: any;\n            if (\n                queryPlanFields.length === 1 &&\n                queryPlanFields[0] === instance.primaryPath\n            ) {\n                index = store;\n            } else {\n                let indexName: string;\n                if (queryPlanFields.length === 1) {\n                    indexName = dexieReplaceIfStartsWithPipe(queryPlanFields[0]);\n                } else {\n                    indexName = '[' +\n                        queryPlanFields\n                            .map(field => dexieReplaceIfStartsWithPipe(field))\n                            .join('+')\n                        + ']';\n                }\n                index = store.index(indexName);\n            }\n            const cursorReq = index.openCursor(keyRange);\n            await new Promise<void>(res => {\n                cursorReq.onsuccess = function (e: any) {\n                    const cursor = e.target.result;\n                    if (cursor) {\n                        // We have a record in cursor.value\n                        const docData = fromDexieToStorage(cursor.value);\n                        if (\n                            queryMatcher(docData)\n                        ) {\n                            rows.push(docData);\n                        }\n\n                        /**\n                         * If we do not have to manually sort\n                         * and have enough documents,\n                         * we can abort iterating over the cursor\n                         * because we already have every relevant document.\n                         */\n                        if (\n                            queryPlan.sortFieldsSameAsIndexFields &&\n                            rows.length === skipPlusLimit\n                        ) {\n                            res();\n                        } else {\n                            cursor.continue();\n                        }\n                    } else {\n                        // Iteration complete\n                        res();\n                    }\n                };\n            });\n\n\n        }\n    );\n\n\n    if (!queryPlan.sortFieldsSameAsIndexFields) {\n        rows = rows.sort(sortComparator);\n    }\n\n    // apply skip and limit boundaries.\n    rows = rows.slice(skip, skipPlusLimit);\n\n    /**\n     * Comment this in for debugging to check all fields in the database.\n     */\n    // const docsInDb = await state.dexieTable.filter(queryMatcher).toArray();\n    // let documents = docsInDb\n    //     .map(docData => stripDexieKey(docData))\n    //     .sort(sortComparator);\n    // if (preparedQuery.skip) {\n    //     documents = documents.slice(preparedQuery.skip);\n    // }\n    // if (preparedQuery.limit && documents.length > preparedQuery.limit) {\n    //     documents = documents.slice(0, preparedQuery.limit);\n    // }\n\n\n\n    return {\n        documents: rows\n    };\n}\n"],"mappings":"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"}