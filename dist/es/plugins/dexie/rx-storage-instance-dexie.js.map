{"version":3,"file":"rx-storage-instance-dexie.js","names":["Subject","now","randomCouchString","PROMISE_RESOLVE_VOID","RX_META_LWT_MINIMUM","sortDocumentsByLastWriteTime","newRxError","closeDexieDb","fromDexieToStorage","fromStorageToDexie","getDexieDbWithTables","getDocsInDb","dexieQuery","getPrimaryFieldOfPrimaryKey","getNewestOfDocumentStates","getUniqueDeterministicEventKey","addRxStorageMultiInstanceSupport","createDexieStorageInstance","storage","params","settings","internals","databaseName","collectionName","schema","instance","RxStorageInstanceDexie","options","instanceId","changes$","closed","primaryPath","primaryKey","bulkWrite","documentWrites","context","state","ret","success","error","eventBulk","id","events","checkpoint","documentKeys","map","writeRow","document","dexieDb","transaction","dexieTable","dexieDeletedTable","docsInDb","d","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","changesIds","forEach","docIndex","startTime","documentInDb","insertedIsDeleted","_deleted","writeDoc","Object","assign","_attachments","push","eventId","documentId","change","doc","operation","previous","endTime","revInDb","_rev","err","isError","status","isDeleted","args","Promise","all","length","bulkPut","bulkDelete","lastState","values","lwt","_meta","event","next","findDocumentsById","ids","deleted","idx","bulkGet","query","preparedQuery","getChangedDocumentsSince","limit","sinceLwt","sinceId","table","where","above","toArray","changedDocuments","changedDocsNormal","changedDocsDeleted","changedDocs","concat","slice","docData","remove","clear","close","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","below","toRemove","removeIds","getAttachmentData","_documentId","_attachmentId","Error","database","collection","complete","conflictResultionTasks","resolveConflictResultionTask","_taskSolution"],"sources":["../../../../src/plugins/dexie/rx-storage-instance-dexie.ts"],"sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    randomCouchString,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint\n} from '../../types';\nimport {\n    DexiePreparedQuery,\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport { RxStorageDexie } from './rx-storage-dexie';\nimport {\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb\n} from './dexie-helper';\nimport { dexieQuery } from './dexie-query';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { getNewestOfDocumentStates, getUniqueDeterministicEventKey } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n        ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint> = {\n            id: randomCouchString(10),\n            events: [],\n            checkpoint: null,\n            context\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDb = docsInDb.map(d => d ? fromDexieToStorage(d) : d);\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n                const changesIds: string[] = [];\n\n                documentWrites.forEach((writeRow, docIndex) => {\n                    const id: string = writeRow.document[this.primaryPath] as any;\n                    const startTime = now();\n                    const documentInDb = docsInDb[docIndex];\n                    if (!documentInDb) {\n                        /**\n                         * It is possible to insert already deleted documents,\n                         * this can happen on replication.\n                         */\n                        const insertedIsDeleted = writeRow.document._deleted ? true : false;\n                        const writeDoc = Object.assign(\n                            {},\n                            writeRow.document,\n                            {\n                                _deleted: insertedIsDeleted,\n                                // TODO attachments are currently not working with dexie.js\n                                _attachments: {} as any\n                            }\n                        );\n                        changesIds.push(id);\n                        if (insertedIsDeleted) {\n                            bulkPutDeletedDocs.push(writeDoc);\n                        } else {\n                            bulkPutDocs.push(writeDoc);\n                            eventBulk.events.push({\n                                eventId: getUniqueDeterministicEventKey(this, this.primaryPath as any, writeRow),\n                                documentId: id,\n                                change: {\n                                    doc: writeDoc,\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null\n                                },\n                                startTime,\n                                // will be filled up before the event is pushed into the changestream\n                                endTime: startTime\n                            });\n                        }\n\n                        ret.success[id] = writeDoc;\n                    } else {\n                        // update existing document\n                        const revInDb: string = documentInDb._rev;\n\n                        if (\n                            (\n                                !writeRow.previous\n                            ) ||\n                            (\n                                !!writeRow.previous &&\n                                revInDb !== writeRow.previous._rev\n                            )\n                        ) {\n                            // conflict error\n                            const err: RxStorageBulkWriteError<RxDocType> = {\n                                isError: true,\n                                status: 409,\n                                documentId: id,\n                                writeRow: writeRow,\n                                documentInDb\n                            };\n                            ret.error[id] = err;\n                        } else {\n                            const isDeleted = !!writeRow.document._deleted;\n                            const writeDoc: any = Object.assign(\n                                {},\n                                writeRow.document,\n                                {\n                                    _deleted: isDeleted,\n                                    // TODO attachments are currently not working with lokijs\n                                    _attachments: {}\n                                }\n                            );\n                            changesIds.push(id);\n                            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Insert document that was deleted before.\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                bulkRemoveDeletedDocs.push(id);\n                                change = {\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Update existing non-deleted document\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                change = {\n                                    id,\n                                    operation: 'UPDATE',\n                                    previous: writeRow.previous,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                                /**\n                                 * Set non-deleted document to deleted.\n                                 */\n                                bulkPutDeletedDocs.push(writeDoc);\n                                bulkRemoveDocs.push(id);\n\n                                change = {\n                                    id,\n                                    operation: 'DELETE',\n                                    previous: writeRow.previous,\n                                    doc: null\n                                };\n                            } else if (\n                                writeRow.previous && writeRow.previous._deleted &&\n                                writeRow.document._deleted\n                            ) {\n                                // deleted doc was overwritten with other deleted doc\n                                bulkPutDeletedDocs.push(writeDoc);\n                            }\n                            if (!change) {\n                                if (\n                                    writeRow.previous && writeRow.previous._deleted &&\n                                    writeRow.document._deleted\n                                ) {\n                                    // deleted doc got overwritten with other deleted doc -> do not send an event\n                                } else {\n                                    throw newRxError('SNH', { args: { writeRow } });\n                                }\n                            } else {\n                                eventBulk.events.push({\n                                    eventId: getUniqueDeterministicEventKey(this, this.primaryPath as any, writeRow),\n                                    documentId: id,\n                                    change,\n                                    startTime,\n                                    // will be filled up before the event is pushed into the changestream\n                                    endTime: startTime\n                                });\n                            }\n                            ret.success[id] = writeDoc;\n                        }\n                    }\n                });\n\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        if (eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            eventBulk.checkpoint = {\n                id: (lastState as any)[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n\n            const endTime = now();\n            eventBulk.events.forEach(event => event.endTime = endTime);\n            this.changes$.next(eventBulk);\n        }\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        const state = await this.internals;\n        const ret: RxDocumentDataById<RxDocType> = {};\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids)\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret[id] = fromDexieToStorage(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: DexiePreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: RxStorageDefaultCheckpoint;\n    }[]> {\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n        const state = await this.internals;\n\n\n        const [changedDocsNormal, changedDocsDeleted] = await Promise.all(\n            [\n                state.dexieTable,\n                state.dexieDeletedTable\n            ].map(async (table) => {\n                const query = table\n                    .where('[_meta.lwt+' + this.primaryPath + ']')\n                    .above([sinceLwt, sinceId])\n                    .limit(limit);\n                const changedDocuments: RxDocumentData<RxDocType>[] = await query.toArray();\n                return changedDocuments.map(d => fromDexieToStorage(d));\n            })\n        );\n        let changedDocs = changedDocsNormal.concat(changedDocsDeleted);\n\n        changedDocs = sortDocumentsByLastWriteTime(this.primaryPath as any, changedDocs);\n        changedDocs = changedDocs.slice(0, limit);\n        return changedDocs.map(docData => ({\n            document: docData,\n            checkpoint: {\n                id: docData[this.primaryPath] as any,\n                lwt: docData._meta.lwt\n            }\n        }));\n    }\n\n    async remove(): Promise<void> {\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieDeletedTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieDeletedTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                const toRemove = await state.dexieDeletedTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = toRemove.map(doc => doc[this.primaryPath]);\n                await state.dexieDeletedTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            throw newRxError('SNH', {\n                database: this.databaseName,\n                collection: this.collectionName\n            });\n        }\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\n\nexport async function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        params,\n        instance\n    );\n\n    return instance;\n}\n"],"mappings":"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"}