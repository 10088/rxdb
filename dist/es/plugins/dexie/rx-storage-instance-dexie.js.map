{"version":3,"file":"rx-storage-instance-dexie.js","names":["Subject","now","PROMISE_RESOLVE_VOID","RX_META_LWT_MINIMUM","sortDocumentsByLastWriteTime","lastOfArray","ensureNotFalsy","closeDexieDb","fromDexieToStorage","fromStorageToDexie","getDexieDbWithTables","getDocsInDb","RX_STORAGE_NAME_DEXIE","dexieQuery","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","getNewestOfDocumentStates","addRxStorageMultiInstanceSupport","newRxError","instanceId","RxStorageInstanceDexie","storage","databaseName","collectionName","schema","internals","options","settings","changes$","closed","primaryPath","primaryKey","bulkWrite","documentWrites","context","ensureNotClosed","state","ret","success","error","documentKeys","map","writeRow","document","categorized","dexieDb","transaction","dexieTable","dexieDeletedTable","docsInDbMap","Map","docsInDbWithInternals","forEach","docWithDexieInternals","doc","set","errors","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","bulkInsertDocs","row","docId","push","bulkUpdateDocs","_deleted","previous","args","Promise","all","length","bulkPut","d","bulkDelete","eventBulk","events","lastState","Object","values","checkpoint","id","lwt","_meta","endTime","event","next","findDocumentsById","ids","deleted","idx","documentInDb","docsInDb","bulkGet","query","preparedQuery","getChangedDocumentsSince","limit","sinceLwt","sinceId","table","where","above","toArray","changedDocuments","changedDocsNormal","changedDocsDeleted","changedDocs","concat","slice","lastDoc","documents","remove","clear","close","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","below","toRemove","removeIds","getAttachmentData","_documentId","_attachmentId","Error","complete","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createDexieStorageInstance","params","instance","resolve"],"sources":["../../../../src/plugins/dexie/rx-storage-instance-dexie.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime,\n    lastOfArray,\n    ensureNotFalsy\n} from '../../util';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    CategorizeBulkWriteRowsOutput\n} from '../../types';\nimport {\n    DexiePreparedQuery,\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport { RxStorageDexie } from './rx-storage-dexie';\nimport {\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb,\n    RX_STORAGE_NAME_DEXIE\n} from './dexie-helper';\nimport { dexieQuery } from './dexie-query';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows, getNewestOfDocumentStates } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance';\nimport { newRxError } from '../../rx-error';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined = null as any;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                const docsInDbMap = new Map<string, RxDocumentData<RxDocType>>();\n                const docsInDbWithInternals = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDbWithInternals.forEach(docWithDexieInternals => {\n                    const doc = docWithDexieInternals ? fromDexieToStorage(docWithDexieInternals) : docWithDexieInternals;\n                    if (doc) {\n                        docsInDbMap.set(doc[this.primaryPath], doc);\n                    }\n                    return doc;\n                });\n\n                categorized = categorizeBulkWriteRows<RxDocType>(\n                    this,\n                    this.primaryPath as any,\n                    docsInDbMap,\n                    documentWrites,\n                    context\n                );\n                ret.error = categorized.errors;\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n\n                categorized.bulkInsertDocs.forEach(row => {\n                    const docId: string = (row.document as any)[this.primaryPath];\n                    ret.success[docId] = row.document;\n                    bulkPutDocs.push(row.document);\n                });\n                categorized.bulkUpdateDocs.forEach(row => {\n                    const docId: string = (row.document as any)[this.primaryPath];\n                    ret.success[docId] = row.document;\n                    if (\n                        row.document._deleted &&\n                        (row.previous && !row.previous._deleted)\n                    ) {\n                        // newly deleted\n                        bulkRemoveDocs.push(docId);\n                        bulkPutDeletedDocs.push(row.document);\n                    } else if (\n                        row.document._deleted &&\n                        row.previous && row.previous._deleted\n                    ) {\n                        // deleted was modified but is still deleted\n                        bulkPutDeletedDocs.push(row.document);\n                    } else if (!row.document._deleted) {\n                        // non-deleted was changed\n                        bulkPutDocs.push(row.document);\n                    } else {\n                        throw newRxError('SNH', { args: { row } });\n                    }\n                });\n\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        if (ensureNotFalsy(categorized).eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            ensureNotFalsy(categorized).eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            const endTime = now();\n            ensureNotFalsy(categorized).eventBulk.events.forEach(event => (event as any).endTime = endTime);\n            this.changes$.next(ensureNotFalsy(categorized).eventBulk);\n        }\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxDocumentDataById<RxDocType> = {};\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids)\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret[id] = fromDexieToStorage(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: DexiePreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        ensureNotClosed(this);\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n        const state = await this.internals;\n\n\n        const [changedDocsNormal, changedDocsDeleted] = await Promise.all(\n            [\n                state.dexieTable,\n                state.dexieDeletedTable\n            ].map(async (table) => {\n                const query = table\n                    .where('[_meta.lwt+' + this.primaryPath + ']')\n                    .above([sinceLwt, sinceId])\n                    .limit(limit);\n                const changedDocuments: RxDocumentData<RxDocType>[] = await query.toArray();\n                return changedDocuments.map(d => fromDexieToStorage(d));\n            })\n        );\n        let changedDocs = changedDocsNormal.concat(changedDocsDeleted);\n\n        changedDocs = sortDocumentsByLastWriteTime(this.primaryPath as any, changedDocs);\n        changedDocs = changedDocs.slice(0, limit);\n\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieDeletedTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieDeletedTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                const toRemove = await state.dexieDeletedTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = toRemove.map(doc => doc[this.primaryPath]);\n                await state.dexieDeletedTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        ensureNotClosed(this);\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    close(): Promise<void> {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\n\nexport function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DEXIE,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDexie<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDexie is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"AAAA,SACIA,OAAO,QAEJ,MAAM;AACb,SACIC,GAAG,EACHC,oBAAoB,EACpBC,mBAAmB,EACnBC,4BAA4B,EAC5BC,WAAW,EACXC,cAAc,QACX,YAAY;AAwBnB,SACIC,YAAY,EACZC,kBAAkB,EAClBC,kBAAkB,EAClBC,oBAAoB,EACpBC,WAAW,EACXC,qBAAqB,QAClB,gBAAgB;AACvB,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,2BAA2B,QAAQ,wBAAwB;AACpE,SAASC,uBAAuB,EAAEC,yBAAyB,QAAQ,yBAAyB;AAC5F,SAASC,gCAAgC,QAAQ,gCAAgC;AACjF,SAASC,UAAU,QAAQ,gBAAgB;AAE3C,IAAIC,UAAU,GAAGlB,GAAG,EAAE;AAEtB,WAAamB,sBAAsB;EAW/B,gCACoBC,OAAuB,EACvBC,YAAoB,EACpBC,cAAsB,EACtBC,MAAyD,EACzDC,SAAgC,EAChCC,OAAgC,EAChCC,QAAuB,EACzC;IAAA,KAZMC,QAAQ,GAAoG,IAAI5B,OAAO,EAAE;IAAA,KACjHmB,UAAU,GAAGA,UAAU,EAAE;IAAA,KAClCU,MAAM,GAAG,KAAK;IAAA,KAGDR,OAAuB,GAAvBA,OAAuB;IAAA,KACvBC,YAAoB,GAApBA,YAAoB;IAAA,KACpBC,cAAsB,GAAtBA,cAAsB;IAAA,KACtBC,MAAyD,GAAzDA,MAAyD;IAAA,KACzDC,SAAgC,GAAhCA,SAAgC;IAAA,KAChCC,OAAgC,GAAhCA,OAAgC;IAAA,KAChCC,QAAuB,GAAvBA,QAAuB;IAEvC,IAAI,CAACG,WAAW,GAAGhB,2BAA2B,CAAC,IAAI,CAACU,MAAM,CAACO,UAAU,CAAC;EAC1E;EAAC;EAAA,OAEKC,SAAS,sBACXC,cAAyC,EACzCC,OAAe;IAAA,IAC+B;MAAA,aAC9B,IAAI;MAApBC,eAAe,QAAM;MAAC,uBACF,OAAKV,SAAS,iBAA5BW,KAAK;QACX,IAAMC,GAA0C,GAAG;UAC/CC,OAAO,EAAE,CAAC,CAAC;UACXC,KAAK,EAAE,CAAC;QACZ,CAAC;QAED,IAAMC,YAAsB,GAAGP,cAAc,CAACQ,GAAG,CAAC,UAAAC,QAAQ;UAAA,OAAIA,QAAQ,CAACC,QAAQ,CAAC,OAAKb,WAAW,CAAC;QAAA,CAAO,CAAC;QACzG,IAAIc,WAAiE,GAAG,IAAW;QAAC,uBAC9ER,KAAK,CAACS,OAAO,CAACC,WAAW,CAC3B,IAAI,EACJV,KAAK,CAACW,UAAU,EAChBX,KAAK,CAACY,iBAAiB;UAAA,IACX;YACR,IAAMC,WAAW,GAAG,IAAIC,GAAG,EAAqC;YAAC,uBAC7BvC,WAAW,CAAY,OAAKc,SAAS,EAAEe,YAAY,CAAC,iBAAlFW,qBAAqB;cAC3BA,qBAAqB,CAACC,OAAO,CAAC,UAAAC,qBAAqB,EAAI;gBACnD,IAAMC,GAAG,GAAGD,qBAAqB,GAAG7C,kBAAkB,CAAC6C,qBAAqB,CAAC,GAAGA,qBAAqB;gBACrG,IAAIC,GAAG,EAAE;kBACLL,WAAW,CAACM,GAAG,CAACD,GAAG,CAAC,OAAKxB,WAAW,CAAC,EAAEwB,GAAG,CAAC;gBAC/C;gBACA,OAAOA,GAAG;cACd,CAAC,CAAC;cAEFV,WAAW,GAAG7B,uBAAuB,SAEjC,OAAKe,WAAW,EAChBmB,WAAW,EACXhB,cAAc,EACdC,OAAO,CACV;cACDG,GAAG,CAACE,KAAK,GAAGK,WAAW,CAACY,MAAM;;cAE9B;AAChB;AACA;AACA;cACgB,IAAMC,WAAkB,GAAG,EAAE;cAC7B,IAAMC,cAAwB,GAAG,EAAE;cACnC,IAAMC,kBAAyB,GAAG,EAAE;cACpC,IAAMC,qBAA+B,GAAG,EAAE;cAE1ChB,WAAW,CAACiB,cAAc,CAACT,OAAO,CAAC,UAAAU,GAAG,EAAI;gBACtC,IAAMC,KAAa,GAAID,GAAG,CAACnB,QAAQ,CAAS,OAAKb,WAAW,CAAC;gBAC7DO,GAAG,CAACC,OAAO,CAACyB,KAAK,CAAC,GAAGD,GAAG,CAACnB,QAAQ;gBACjCc,WAAW,CAACO,IAAI,CAACF,GAAG,CAACnB,QAAQ,CAAC;cAClC,CAAC,CAAC;cACFC,WAAW,CAACqB,cAAc,CAACb,OAAO,CAAC,UAAAU,GAAG,EAAI;gBACtC,IAAMC,KAAa,GAAID,GAAG,CAACnB,QAAQ,CAAS,OAAKb,WAAW,CAAC;gBAC7DO,GAAG,CAACC,OAAO,CAACyB,KAAK,CAAC,GAAGD,GAAG,CAACnB,QAAQ;gBACjC,IACImB,GAAG,CAACnB,QAAQ,CAACuB,QAAQ,IACpBJ,GAAG,CAACK,QAAQ,IAAI,CAACL,GAAG,CAACK,QAAQ,CAACD,QAAS,EAC1C;kBACE;kBACAR,cAAc,CAACM,IAAI,CAACD,KAAK,CAAC;kBAC1BJ,kBAAkB,CAACK,IAAI,CAACF,GAAG,CAACnB,QAAQ,CAAC;gBACzC,CAAC,MAAM,IACHmB,GAAG,CAACnB,QAAQ,CAACuB,QAAQ,IACrBJ,GAAG,CAACK,QAAQ,IAAIL,GAAG,CAACK,QAAQ,CAACD,QAAQ,EACvC;kBACE;kBACAP,kBAAkB,CAACK,IAAI,CAACF,GAAG,CAACnB,QAAQ,CAAC;gBACzC,CAAC,MAAM,IAAI,CAACmB,GAAG,CAACnB,QAAQ,CAACuB,QAAQ,EAAE;kBAC/B;kBACAT,WAAW,CAACO,IAAI,CAACF,GAAG,CAACnB,QAAQ,CAAC;gBAClC,CAAC,MAAM;kBACH,MAAMzB,UAAU,CAAC,KAAK,EAAE;oBAAEkD,IAAI,EAAE;sBAAEN,GAAG,EAAHA;oBAAI;kBAAE,CAAC,CAAC;gBAC9C;cACJ,CAAC,CAAC;cAAC,uBAEGO,OAAO,CAACC,GAAG,CAAC,CACdb,WAAW,CAACc,MAAM,GAAG,CAAC,GAAGnC,KAAK,CAACW,UAAU,CAACyB,OAAO,CAACf,WAAW,CAAChB,GAAG,CAAC,UAAAgC,CAAC;gBAAA,OAAIhE,kBAAkB,CAACgE,CAAC,CAAC;cAAA,EAAC,CAAC,GAAGvE,oBAAoB,EACrHwD,cAAc,CAACa,MAAM,GAAG,CAAC,GAAGnC,KAAK,CAACW,UAAU,CAAC2B,UAAU,CAAChB,cAAc,CAAC,GAAGxD,oBAAoB,EAC9FyD,kBAAkB,CAACY,MAAM,GAAG,CAAC,GAAGnC,KAAK,CAACY,iBAAiB,CAACwB,OAAO,CAACb,kBAAkB,CAAClB,GAAG,CAAC,UAAAgC,CAAC;gBAAA,OAAIhE,kBAAkB,CAACgE,CAAC,CAAC;cAAA,EAAC,CAAC,GAAGvE,oBAAoB,EAC1I0D,qBAAqB,CAACW,MAAM,GAAG,CAAC,GAAGnC,KAAK,CAACY,iBAAiB,CAAC0B,UAAU,CAACd,qBAAqB,CAAC,GAAG1D,oBAAoB,CACtH,CAAC;YAAA;UACN,CAAC;YAAA;UAAA;QAAA,EAAC;UAEN,IAAII,cAAc,CAACsC,WAAW,CAAC,CAAC+B,SAAS,CAACC,MAAM,CAACL,MAAM,GAAG,CAAC,EAAE;YACzD,IAAMM,SAAS,GAAG7D,yBAAyB,CACvC,OAAKc,WAAW,EAChBgD,MAAM,CAACC,MAAM,CAAC1C,GAAG,CAACC,OAAO,CAAC,CAC7B;YACDhC,cAAc,CAACsC,WAAW,CAAC,CAAC+B,SAAS,CAACK,UAAU,GAAG;cAC/CC,EAAE,EAAEJ,SAAS,CAAC,OAAK/C,WAAW,CAAC;cAC/BoD,GAAG,EAAEL,SAAS,CAACM,KAAK,CAACD;YACzB,CAAC;YACD,IAAME,OAAO,GAAGnF,GAAG,EAAE;YACrBK,cAAc,CAACsC,WAAW,CAAC,CAAC+B,SAAS,CAACC,MAAM,CAACxB,OAAO,CAAC,UAAAiC,KAAK;cAAA,OAAKA,KAAK,CAASD,OAAO,GAAGA,OAAO;YAAA,EAAC;YAC/F,OAAKxD,QAAQ,CAAC0D,IAAI,CAAChF,cAAc,CAACsC,WAAW,CAAC,CAAC+B,SAAS,CAAC;UAC7D;UAEA,OAAOtC,GAAG;QAAC;MAAA;IACf,CAAC;MAAA;IAAA;EAAA;EAAA,OAEKkD,iBAAiB,8BACnBC,GAAa,EACbC,OAAgB;IAAA,IACsB;MAAA,aACtB,IAAI;MAApBtD,eAAe,QAAM;MAAC,uBACF,OAAKV,SAAS,iBAA5BW,KAAK;QACX,IAAMC,GAAkC,GAAG,CAAC,CAAC;QAAC,uBAExCD,KAAK,CAACS,OAAO,CAACC,WAAW,CAC3B,GAAG,EACHV,KAAK,CAACW,UAAU,EAChBX,KAAK,CAACY,iBAAiB;UAAA,IACX;YAAA;cAORwC,GAAG,CAACpC,OAAO,CAAC,UAAC6B,EAAE,EAAES,GAAG,EAAK;gBACrB,IAAMC,YAAY,GAAGC,QAAQ,CAACF,GAAG,CAAC;gBAClC,IACIC,YAAY,KACX,CAACA,YAAY,CAACzB,QAAQ,IAAIuB,OAAO,CAAC,EACrC;kBACEpD,GAAG,CAAC4C,EAAE,CAAC,GAAGzE,kBAAkB,CAACmF,YAAY,CAAC;gBAC9C;cACJ,CAAC,CAAC;YAAC;YAdH,IAAIC,QAAqC;YAAC;cAAA,IACtCH,OAAO;gBAAA,uBACU9E,WAAW,CAAY,OAAKc,SAAS,EAAE+D,GAAG,CAAC;kBAA5DI,QAAQ,eAAoD;gBAAC;cAAA;gBAAA,uBAE5CxD,KAAK,CAACW,UAAU,CAAC8C,OAAO,CAACL,GAAG,CAAC;kBAA9CI,QAAQ,wBAAsC;gBAAA;cAAA;YAAA;YAAA;UAWtD,CAAC;YAAA;UAAA;QAAA,EAAC;UACN,OAAOvD,GAAG;QAAC;MAAA;IACf,CAAC;MAAA;IAAA;EAAA;EAAA,OAEDyD,KAAK,GAAL,eAAMC,aAA4C,EAA4C;IAC1F5D,eAAe,CAAC,IAAI,CAAC;IACrB,OAAOtB,UAAU,CACb,IAAI,EACJkF,aAAa,CAChB;EACL,CAAC;EAAA,OAEKC,wBAAwB,qCAC1BC,KAAa,EACbjB,UAAuC;IAAA,IAIxC;MAAA,aACiB,IAAI;MAApB7C,eAAe,QAAM;MACrB,IAAM+D,QAAQ,GAAGlB,UAAU,GAAGA,UAAU,CAACE,GAAG,GAAG/E,mBAAmB;MAClE,IAAMgG,OAAO,GAAGnB,UAAU,GAAGA,UAAU,CAACC,EAAE,GAAG,EAAE;MAAC,uBAC5B,OAAKxD,SAAS,iBAA5BW,KAAK;QAAA,uBAG2CiC,OAAO,CAACC,GAAG,CAC7D,CACIlC,KAAK,CAACW,UAAU,EAChBX,KAAK,CAACY,iBAAiB,CAC1B,CAACP,GAAG,WAAQ2D,KAAK;UAAA,IAAK;YACnB,IAAMN,KAAK,GAAGM,KAAK,CACdC,KAAK,CAAC,aAAa,GAAG,OAAKvE,WAAW,GAAG,GAAG,CAAC,CAC7CwE,KAAK,CAAC,CAACJ,QAAQ,EAAEC,OAAO,CAAC,CAAC,CAC1BF,KAAK,CAACA,KAAK,CAAC;YAAC,uBAC0CH,KAAK,CAACS,OAAO,EAAE,iBAArEC,gBAA6C;cACnD,OAAOA,gBAAgB,CAAC/D,GAAG,CAAC,UAAAgC,CAAC;gBAAA,OAAIjE,kBAAkB,CAACiE,CAAC,CAAC;cAAA,EAAC;YAAC;UAC5D,CAAC;YAAA;UAAA;QAAA,EAAC,CACL;UAAA,IAZMgC,iBAAiB;YAAEC,kBAAkB;UAa5C,IAAIC,WAAW,GAAGF,iBAAiB,CAACG,MAAM,CAACF,kBAAkB,CAAC;UAE9DC,WAAW,GAAGvG,4BAA4B,CAAC,OAAK0B,WAAW,EAAS6E,WAAW,CAAC;UAChFA,WAAW,GAAGA,WAAW,CAACE,KAAK,CAAC,CAAC,EAAEZ,KAAK,CAAC;UAEzC,IAAMa,OAAO,GAAGzG,WAAW,CAACsG,WAAW,CAAC;UACxC,OAAO;YACHI,SAAS,EAAEJ,WAAW;YACtB3B,UAAU,EAAE8B,OAAO,GAAG;cAClB7B,EAAE,EAAE6B,OAAO,CAAC,OAAKhF,WAAW,CAAQ;cACpCoD,GAAG,EAAE4B,OAAO,CAAC3B,KAAK,CAACD;YACvB,CAAC,GAAGF,UAAU,GAAGA,UAAU,GAAG;cAC1BC,EAAE,EAAE,EAAE;cACNC,GAAG,EAAE;YACT;UACJ,CAAC;QAAC;MAAA;IACN,CAAC;MAAA;IAAA;EAAA;EAAA,OAEK8B,MAAM;IAAA,IAAkB;MAAA,aACV,IAAI;MAApB7E,eAAe,QAAM;MAAC,uBACF,OAAKV,SAAS,iBAA5BW,KAAK;QAAA,uBACLiC,OAAO,CAACC,GAAG,CAAC,CACdlC,KAAK,CAACY,iBAAiB,CAACiE,KAAK,EAAE,EAC/B7E,KAAK,CAACW,UAAU,CAACkE,KAAK,EAAE,CAC3B,CAAC;UACF,OAAO,OAAKC,KAAK,EAAE;QAAC;MAAA;IACxB,CAAC;MAAA;IAAA;EAAA;EAAA,OAEDC,YAAY,GAAZ,wBAAmH;IAC/GhF,eAAe,CAAC,IAAI,CAAC;IACrB,OAAO,IAAI,CAACP,QAAQ,CAACwF,YAAY,EAAE;EACvC,CAAC;EAAA,OAEKC,OAAO,oBAACC,kBAA0B;IAAA,IAAoB;MAAA,cACxC,IAAI;MAApBnF,eAAe,SAAM;MAAC,uBACF,QAAKV,SAAS,iBAA5BW,KAAK;QAAA,uBACLA,KAAK,CAACS,OAAO,CAACC,WAAW,CAC3B,IAAI,EACJV,KAAK,CAACY,iBAAiB;UAAA,IACX;YACR,IAAMuE,eAAe,GAAGtH,GAAG,EAAE,GAAGqH,kBAAkB;YAAC,uBAC5BlF,KAAK,CAACY,iBAAiB,CACzCqD,KAAK,CAAC,WAAW,CAAC,CAClBmB,KAAK,CAACD,eAAe,CAAC,CACtBhB,OAAO,EAAE,iBAHRkB,QAAQ;cAId,IAAMC,SAAmB,GAAGD,QAAQ,CAAChF,GAAG,CAAC,UAAAa,GAAG;gBAAA,OAAIA,GAAG,CAAC,QAAKxB,WAAW,CAAC;cAAA,EAAC;cAAC,uBACjEM,KAAK,CAACY,iBAAiB,CAAC0B,UAAU,CAACgD,SAAS,CAAC;YAAA;UACvD,CAAC;YAAA;UAAA;QAAA,EACJ;UAED;AACR;AACA;AACA;AACA;AACA;UACQ,OAAO,IAAI;QAAC;MAAA;IAChB,CAAC;MAAA;IAAA;EAAA;EAAA,OAEDC,iBAAiB,GAAjB,2BAAkBC,WAAmB,EAAEC,aAAqB,EAAmB;IAC3E1F,eAAe,CAAC,IAAI,CAAC;IACrB,MAAM,IAAI2F,KAAK,CAAC,8EAA8E,CAAC;EACnG,CAAC;EAAA,OAEDZ,KAAK,GAAL,iBAAuB;IACnB/E,eAAe,CAAC,IAAI,CAAC;IACrB,IAAI,CAACN,MAAM,GAAG,IAAI;IAClB,IAAI,CAACD,QAAQ,CAACmG,QAAQ,EAAE;IACxBxH,YAAY,CAAC,IAAI,CAACkB,SAAS,CAAC;IAC5B,OAAOvB,oBAAoB;EAC/B,CAAC;EAAA,OAED8H,sBAAsB,GAAtB,kCAAyE;IACrE,OAAO,IAAIhI,OAAO,EAAE;EACxB,CAAC;EAAA,OACKiI,4BAA4B,yCAACC,aAAyD,EAAiB;IAAA;EAAE,CAAC;EAAA;AAAA;AAKpH,OAAO,SAASC,0BAA0B,CACtC9G,OAAuB,EACvB+G,MAAiE,EACjEzG,QAAuB,EACmB;EAC1C,IAAMF,SAAS,GAAGf,oBAAoB,CAClC0H,MAAM,CAAC9G,YAAY,EACnB8G,MAAM,CAAC7G,cAAc,EACrBI,QAAQ,EACRyG,MAAM,CAAC5G,MAAM,CAChB;EAED,IAAM6G,QAAQ,GAAG,IAAIjH,sBAAsB,CACvCC,OAAO,EACP+G,MAAM,CAAC9G,YAAY,EACnB8G,MAAM,CAAC7G,cAAc,EACrB6G,MAAM,CAAC5G,MAAM,EACbC,SAAS,EACT2G,MAAM,CAAC1G,OAAO,EACdC,QAAQ,CACX;EAEDV,gCAAgC,CAC5BL,qBAAqB,EACrBwH,MAAM,EACNC,QAAQ,CACX;EAED,OAAOhE,OAAO,CAACiE,OAAO,CAACD,QAAQ,CAAC;AACpC;AAIA,SAASlG,eAAe,CACpBkG,QAAqC,EACvC;EACE,IAAIA,QAAQ,CAACxG,MAAM,EAAE;IACjB,MAAM,IAAIiG,KAAK,CAAC,mCAAmC,GAAGO,QAAQ,CAAC/G,YAAY,GAAG,GAAG,GAAG+G,QAAQ,CAAC9G,cAAc,CAAC;EAChH;AACJ"}