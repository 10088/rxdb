{"version":3,"sources":["../../../../src/plugins/dexie/rx-storage-instance-dexie.ts"],"names":["Subject","now","randomCouchString","PROMISE_RESOLVE_VOID","RX_META_LWT_MINIMUM","sortDocumentsByLastWriteTime","newRxError","closeDexieDb","fromDexieToStorage","fromStorageToDexie","getDexieDbWithTables","getDocsInDb","dexieQuery","getPrimaryFieldOfPrimaryKey","getUniqueDeterministicEventKey","createDexieStorageInstance","storage","params","settings","internals","databaseName","collectionName","schema","instance","RxStorageInstanceDexie","options","instanceId","changes$","closed","primaryPath","primaryKey","bulkWrite","documentWrites","state","ret","success","error","eventBulk","id","events","documentKeys","map","writeRow","document","dexieDb","transaction","dexieTable","dexieDeletedTable","docsInDb","d","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","changesIds","forEach","docIndex","startTime","documentInDb","insertedIsDeleted","_deleted","writeDoc","Object","assign","_attachments","push","eventId","documentId","change","doc","operation","previous","endTime","revInDb","_rev","err","isError","status","isDeleted","args","Promise","all","length","bulkPut","bulkDelete","event","next","findDocumentsById","ids","deleted","idx","bulkGet","query","preparedQuery","getChangedDocumentsSince","limit","checkpoint","sinceLwt","lwt","sinceId","table","where","above","toArray","changedDocuments","changedDocsNormal","changedDocsDeleted","changedDocs","concat","slice","docData","_meta","remove","clear","close","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","below","toRemove","removeIds","getAttachmentData","_documentId","_attachmentId","Error","database","collection","complete"],"mappings":"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","sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    randomCouchString,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    PreparedQuery,\n    DexieChangesCheckpoint\n} from '../../types';\nimport { DexieSettings, DexieStorageInternals } from '../../types/plugins/dexie';\nimport { RxStorageDexie } from './rx-storage-dexie';\nimport {\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb\n} from './dexie-helper';\nimport { dexieQuery } from './query/dexie-query';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { getUniqueDeterministicEventKey } from '../../rx-storage-helper';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings\n> {\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey) as any;\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDb = docsInDb.map(d => d ? fromDexieToStorage(d) : d);\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n                const changesIds: string[] = [];\n\n                documentWrites.forEach((writeRow, docIndex) => {\n                    const id: string = writeRow.document[this.primaryPath] as any;\n                    const startTime = now();\n                    const documentInDb = docsInDb[docIndex];\n                    if (!documentInDb) {\n                        /**\n                         * It is possible to insert already deleted documents,\n                         * this can happen on replication.\n                         */\n                        const insertedIsDeleted = writeRow.document._deleted ? true : false;\n                        const writeDoc = Object.assign(\n                            {},\n                            writeRow.document,\n                            {\n                                _deleted: insertedIsDeleted,\n                                // TODO attachments are currently not working with dexie.js\n                                _attachments: {} as any\n                            }\n                        );\n                        changesIds.push(id);\n                        if (insertedIsDeleted) {\n                            bulkPutDeletedDocs.push(writeDoc);\n                        } else {\n                            bulkPutDocs.push(writeDoc);\n                            eventBulk.events.push({\n                                eventId: getUniqueDeterministicEventKey(this, this.primaryPath as any, writeRow),\n                                documentId: id,\n                                change: {\n                                    doc: writeDoc,\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null\n                                },\n                                startTime,\n                                // will be filled up before the event is pushed into the changestream\n                                endTime: startTime\n                            });\n                        }\n\n                        ret.success[id] = writeDoc;\n                    } else {\n                        // update existing document\n                        const revInDb: string = documentInDb._rev;\n\n                        // inserting a deleted document is possible\n                        // without sending the previous data.\n                        if (!writeRow.previous && documentInDb._deleted) {\n                            writeRow.previous = documentInDb;\n                        }\n\n                        if (\n                            (\n                                !writeRow.previous &&\n                                !documentInDb._deleted\n                            ) ||\n                            (\n                                !!writeRow.previous &&\n                                revInDb !== writeRow.previous._rev\n                            )\n                        ) {\n                            // conflict error\n                            const err: RxStorageBulkWriteError<RxDocType> = {\n                                isError: true,\n                                status: 409,\n                                documentId: id,\n                                writeRow: writeRow,\n                                documentInDb\n                            };\n                            ret.error[id] = err;\n                        } else {\n                            const isDeleted = !!writeRow.document._deleted;\n                            const writeDoc: any = Object.assign(\n                                {},\n                                writeRow.document,\n                                {\n                                    _deleted: isDeleted,\n                                    // TODO attachments are currently not working with lokijs\n                                    _attachments: {}\n                                }\n                            );\n                            changesIds.push(id);\n                            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Insert document that was deleted before.\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                bulkRemoveDeletedDocs.push(id);\n                                change = {\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Update existing non-deleted document\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                change = {\n                                    id,\n                                    operation: 'UPDATE',\n                                    previous: writeRow.previous,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                                /**\n                                 * Set non-deleted document to deleted.\n                                 */\n                                bulkPutDeletedDocs.push(writeDoc);\n                                bulkRemoveDocs.push(id);\n\n                                change = {\n                                    id,\n                                    operation: 'DELETE',\n                                    previous: writeRow.previous,\n                                    doc: null\n                                };\n                            } else if (\n                                writeRow.previous && writeRow.previous._deleted &&\n                                writeRow.document._deleted\n                            ) {\n                                // deleted doc was overwritten with other deleted doc\n                                bulkPutDeletedDocs.push(writeDoc);\n                            }\n                            if (!change) {\n                                if (\n                                    writeRow.previous && writeRow.previous._deleted &&\n                                    writeRow.document._deleted\n                                ) {\n                                    // deleted doc got overwritten with other deleted doc -> do not send an event\n                                } else {\n                                    throw newRxError('SNH', { args: { writeRow } });\n                                }\n                            } else {\n                                eventBulk.events.push({\n                                    eventId: getUniqueDeterministicEventKey(this, this.primaryPath as any, writeRow),\n                                    documentId: id,\n                                    change,\n                                    startTime,\n                                    // will be filled up before the event is pushed into the changestream\n                                    endTime: startTime\n                                });\n                            }\n                            ret.success[id] = writeDoc;\n                        }\n                    }\n                });\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        const endTime = now();\n        eventBulk.events.forEach(event => event.endTime = endTime);\n        this.changes$.next(eventBulk);\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        const state = await this.internals;\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids)\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret[id] = fromDexieToStorage(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: PreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: DexieChangesCheckpoint\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: DexieChangesCheckpoint;\n    }[]> {\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n        const state = await this.internals;\n\n\n        const [changedDocsNormal, changedDocsDeleted] = await Promise.all(\n            [\n                state.dexieTable,\n                state.dexieDeletedTable\n            ].map(async (table) => {\n                const query = table\n                    .where('[_meta.lwt+' + this.primaryPath + ']')\n                    .above([sinceLwt, sinceId])\n                    .limit(limit);\n                const changedDocuments: RxDocumentData<RxDocType>[] = await query.toArray();\n                return changedDocuments.map(d => fromDexieToStorage(d));\n            })\n        );\n        let changedDocs = changedDocsNormal.concat(changedDocsDeleted);\n\n        changedDocs = sortDocumentsByLastWriteTime(this.primaryPath as any, changedDocs);\n        changedDocs = changedDocs.slice(0, limit);\n        return changedDocs.map(docData => ({\n            document: docData,\n            checkpoint: {\n                id: docData[this.primaryPath] as any,\n                lwt: docData._meta.lwt\n            }\n        }));\n    }\n\n    async remove(): Promise<void> {\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieDeletedTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieDeletedTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                const toRemove = await state.dexieDeletedTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = toRemove.map(doc => doc[this.primaryPath]);\n                await state.dexieDeletedTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            throw newRxError('SNH', {\n                database: this.databaseName,\n                collection: this.collectionName\n            });\n        }\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n    }\n}\n\n\nexport async function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    return instance;\n}\n"],"file":"rx-storage-instance-dexie.js"}