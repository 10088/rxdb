{"version":3,"sources":["../../../../src/plugins/dexie/rx-storage-dexie.ts"],"names":["Query","MingoQuery","binaryMd5","getDexieSortComparator","firstPropertyNameOfObject","flatClone","createDexieStorageInstance","getPrimaryFieldOfPrimaryKey","createDexieKeyObjectStorageInstance","getPouchQueryPlan","RxStorageDexieStatics","hash","data","Promise","res","digest","hashKey","prepareQuery","schema","mutateableQuery","primaryKey","sort","isPrimaryInSort","find","p","push","pouchQueryPlan","getSortComparator","query","getQueryMatcher","_schema","mingoQuery","selector","fun","doc","cursor","next","RxStorageDexie","settings","name","statics","createStorageInstance","params","createKeyObjectStorageInstance","useParams","collectionName","getRxStorageDexie","storage"],"mappings":"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","sourcesContent":["import type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport type {\n    MangoQuery,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageStatics\n} from '../../types';\nimport {\n    Query as MingoQuery\n} from 'mingo';\nimport { binaryMd5 } from 'pouchdb-md5';\nimport { getDexieSortComparator } from './dexie-helper';\nimport { firstPropertyNameOfObject, flatClone } from '../../util';\nimport {\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport {\n    createDexieStorageInstance,\n    RxStorageInstanceDexie\n} from './rx-storage-instance-dexie';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport {\n    createDexieKeyObjectStorageInstance,\n    RxStorageKeyObjectInstanceDexie\n} from './rx-storage-key-object-instance-dexie';\nimport { getPouchQueryPlan } from './query/dexie-query';\n\n\nexport const RxStorageDexieStatics: RxStorageStatics = {\n    hash(data: Buffer | Blob | string): Promise<string> {\n        return new Promise(res => {\n            binaryMd5(data, (digest: string) => {\n                res(digest);\n            });\n        });\n    },\n    hashKey: 'md5',\n\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        mutateableQuery: MangoQuery<RxDocType>\n    ) {\n        const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        /**\n         * To ensure a deterministic sorting,\n         * we have to ensure the primary key is always part\n         * of the sort query.\n         * TODO this should be done by RxDB instead so we\n         * can ensure it in all storage implementations.\n         */\n        if (!mutateableQuery.sort) {\n            mutateableQuery.sort = [{ [primaryKey]: 'asc' }] as any;\n        } else {\n            const isPrimaryInSort = mutateableQuery.sort\n                .find(p => firstPropertyNameOfObject(p) === primaryKey);\n            if (!isPrimaryInSort) {\n                mutateableQuery.sort.push({ [primaryKey]: 'asc' } as any);\n            }\n        }\n\n\n        /**\n         * Store the query plan together with the\n         * prepared query to save performance.\n         */\n        (mutateableQuery as any).pouchQueryPlan = getPouchQueryPlan(\n            schema,\n            mutateableQuery\n        );\n\n        return mutateableQuery;\n    },\n\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        return getDexieSortComparator(schema, query);\n    },\n\n    getQueryMatcher<RxDocType>(\n        _schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const mingoQuery = new MingoQuery(query.selector);\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            const cursor = mingoQuery.find([doc]);\n            const next = cursor.next();\n            if (next) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return fun;\n    }\n\n}\n\n\nexport class RxStorageDexie implements RxStorage<DexieStorageInternals, DexieSettings> {\n    public name = 'dexie';\n    public statics = RxStorageDexieStatics;\n\n    constructor(\n        public settings: DexieSettings\n    ) { }\n\n    public createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>\n    ): Promise<RxStorageInstanceDexie<RxDocType>> {\n        return createDexieStorageInstance(this, params, this.settings);\n    }\n\n    public createKeyObjectStorageInstance(\n        params: RxKeyObjectStorageInstanceCreationParams<DexieSettings>\n    ): Promise<RxStorageKeyObjectInstanceDexie> {\n        // ensure we never mix up key-object data with normal storage documents.\n        const useParams = flatClone(params);\n        useParams.collectionName = params.collectionName + '-key-object';\n\n        return createDexieKeyObjectStorageInstance(\n            this,\n            params,\n            this.settings\n        );\n    }\n}\n\n\nexport function getRxStorageDexie(\n    settings: DexieSettings = {}\n): RxStorageDexie {\n    const storage = new RxStorageDexie(settings);\n    return storage;\n}\n"],"file":"rx-storage-dexie.js"}