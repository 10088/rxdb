{"version":3,"file":"rx-storage-dexie.js","names":["Query","MingoQuery","getDexieSortComparator","RX_STORAGE_NAME_DEXIE","createDexieStorageInstance","newRxError","getQueryPlan","ensureRxStorageInstanceParamsAreCorrect","DEFAULT_CHECKPOINT_SCHEMA","RxStorageDexieStatics","prepareQuery","schema","mutateableQuery","sort","query","queryPlan","getSortComparator","preparedQuery","getQueryMatcher","_schema","mingoQuery","selector","fun","doc","_deleted","cursor","find","next","checkpointSchema","RxStorageDexie","settings","name","statics","createStorageInstance","params","getRxStorageDexie","storage"],"sources":["../../../../src/plugins/dexie/rx-storage-dexie.ts"],"sourcesContent":["import type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport type {\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageStatics,\n    DexiePreparedQuery,\n    FilledMangoQuery\n} from '../../types';\nimport {\n    Query as MingoQuery\n} from 'mingo';\nimport {\n    getDexieSortComparator,\n    RX_STORAGE_NAME_DEXIE\n} from './dexie-helper';\nimport type {\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport {\n    createDexieStorageInstance,\n    RxStorageInstanceDexie\n} from './rx-storage-instance-dexie';\nimport { newRxError } from '../../rx-error';\nimport { getQueryPlan } from '../../query-planner';\nimport { ensureRxStorageInstanceParamsAreCorrect } from '../../rx-storage-helper';\nimport { DEFAULT_CHECKPOINT_SCHEMA } from '../../rx-schema-helper';\n\n\nexport const RxStorageDexieStatics: RxStorageStatics = {\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        mutateableQuery: FilledMangoQuery<RxDocType>\n    ): DexiePreparedQuery<RxDocType> {\n\n        if (!mutateableQuery.sort) {\n            throw newRxError('SNH', {\n                query: mutateableQuery\n            });\n        }\n\n        /**\n         * Store the query plan together with the\n         * prepared query to save performance.\n         */\n        const queryPlan = getQueryPlan(\n            schema,\n            mutateableQuery\n        );\n\n        return {\n            query: mutateableQuery,\n            queryPlan\n        };\n    },\n\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        preparedQuery: DexiePreparedQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        return getDexieSortComparator(schema, preparedQuery.query);\n    },\n\n    getQueryMatcher<RxDocType>(\n        _schema: RxJsonSchema<RxDocType>,\n        preparedQuery: DexiePreparedQuery<RxDocType>\n    ): QueryMatcher<RxDocumentData<RxDocType>> {\n        const query = preparedQuery.query;\n        const mingoQuery = new MingoQuery(query.selector);\n        const fun: QueryMatcher<RxDocumentData<RxDocType>> = (doc: RxDocumentData<RxDocType>) => {\n            if (doc._deleted) {\n                return false;\n            }\n            const cursor = mingoQuery.find([doc]);\n            const next = cursor.next();\n            if (next) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n        return fun;\n    },\n\n    checkpointSchema: DEFAULT_CHECKPOINT_SCHEMA\n\n};\n\n\nexport class RxStorageDexie implements RxStorage<DexieStorageInternals, DexieSettings> {\n    public name = RX_STORAGE_NAME_DEXIE;\n    public statics = RxStorageDexieStatics;\n\n    constructor(\n        public settings: DexieSettings\n    ) { }\n\n    public createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>\n    ): Promise<RxStorageInstanceDexie<RxDocType>> {\n        ensureRxStorageInstanceParamsAreCorrect(params);\n        return createDexieStorageInstance(this, params, this.settings);\n    }\n}\n\n\nexport function getRxStorageDexie(\n    settings: DexieSettings = {}\n): RxStorageDexie {\n    const storage = new RxStorageDexie(settings);\n    return storage;\n}\n"],"mappings":"AAaA,SACIA,KAAK,IAAIC,UAAU,QAChB,OAAO;AACd,SACIC,sBAAsB,EACtBC,qBAAqB,QAClB,gBAAgB;AAKvB,SACIC,0BAA0B,QAEvB,6BAA6B;AACpC,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,uCAAuC,QAAQ,yBAAyB;AACjF,SAASC,yBAAyB,QAAQ,wBAAwB;AAGlE,OAAO,IAAMC,qBAAuC,GAAG;EACnDC,YAAY,wBACRC,MAA+C,EAC/CC,eAA4C,EACf;IAE7B,IAAI,CAACA,eAAe,CAACC,IAAI,EAAE;MACvB,MAAMR,UAAU,CAAC,KAAK,EAAE;QACpBS,KAAK,EAAEF;MACX,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;IACQ,IAAMG,SAAS,GAAGT,YAAY,CAC1BK,MAAM,EACNC,eAAe,CAClB;IAED,OAAO;MACHE,KAAK,EAAEF,eAAe;MACtBG,SAAS,EAATA;IACJ,CAAC;EACL,CAAC;EAEDC,iBAAiB,6BACbL,MAA+C,EAC/CM,aAA4C,EACN;IACtC,OAAOf,sBAAsB,CAACS,MAAM,EAAEM,aAAa,CAACH,KAAK,CAAC;EAC9D,CAAC;EAEDI,eAAe,2BACXC,OAAgC,EAChCF,aAA4C,EACL;IACvC,IAAMH,KAAK,GAAGG,aAAa,CAACH,KAAK;IACjC,IAAMM,UAAU,GAAG,IAAInB,UAAU,CAACa,KAAK,CAACO,QAAQ,CAAC;IACjD,IAAMC,GAA4C,GAAG,SAA/CA,GAA4C,CAAIC,GAA8B,EAAK;MACrF,IAAIA,GAAG,CAACC,QAAQ,EAAE;QACd,OAAO,KAAK;MAChB;MACA,IAAMC,MAAM,GAAGL,UAAU,CAACM,IAAI,CAAC,CAACH,GAAG,CAAC,CAAC;MACrC,IAAMI,IAAI,GAAGF,MAAM,CAACE,IAAI,EAAE;MAC1B,IAAIA,IAAI,EAAE;QACN,OAAO,IAAI;MACf,CAAC,MAAM;QACH,OAAO,KAAK;MAChB;IACJ,CAAC;IACD,OAAOL,GAAG;EACd,CAAC;EAEDM,gBAAgB,EAAEpB;AAEtB,CAAC;AAGD,WAAaqB,cAAc;EAIvB,wBACWC,QAAuB,EAChC;IAAA,KALKC,IAAI,GAAG5B,qBAAqB;IAAA,KAC5B6B,OAAO,GAAGvB,qBAAqB;IAAA,KAG3BqB,QAAuB,GAAvBA,QAAuB;EAC9B;EAAC;EAAA,OAEEG,qBAAqB,GAA5B,+BACIC,MAAiE,EACvB;IAC1C3B,uCAAuC,CAAC2B,MAAM,CAAC;IAC/C,OAAO9B,0BAA0B,CAAC,IAAI,EAAE8B,MAAM,EAAE,IAAI,CAACJ,QAAQ,CAAC;EAClE,CAAC;EAAA;AAAA;AAIL,OAAO,SAASK,iBAAiB,GAEf;EAAA,IADdL,QAAuB,uEAAG,CAAC,CAAC;EAE5B,IAAMM,OAAO,GAAG,IAAIP,cAAc,CAACC,QAAQ,CAAC;EAC5C,OAAOM,OAAO;AAClB"}