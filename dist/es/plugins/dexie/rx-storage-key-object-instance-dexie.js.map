{"version":3,"sources":["../../../../src/plugins/dexie/rx-storage-key-object-instance-dexie.ts"],"names":["Subject","createRevision","flatClone","now","parseRevision","randomCouchString","closeDexieDb","getDexieDbWithTables","getDexieEventKey","stripDexieKey","createDexieKeyObjectStorageInstance","storage","params","settings","internals","databaseName","collectionName","version","primaryKey","type","properties","instance","RxStorageKeyObjectInstanceDexie","options","instanceId","changes$","closed","bulkWrite","documentWrites","state","ret","success","error","eventBulk","id","events","documentKeys","map","writeRow","document","_id","bulkPutData","dexieDb","transaction","dexieTable","startTime","bulkGet","docsInDb","successDocs","forEach","writeRowIdx","writeDoc","docInDb","previous","newRevHeight","_rev","height","newRevision","err","isError","status","documentId","saveMe","$lastWriteAt","push","insertData","bulkPut","endTime","sucessRow","event","operation","doc","_deleted","previousDoc","eventId","storageChangeEvent","change","next","findLocalDocumentsById","ids","idx","documentInDb","changeStream","asObservable","close","complete","remove","Promise","all","dexieChangesTable","clear"],"mappings":"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","sourcesContent":["import type { ChangeEvent } from 'event-reduce-js';\nimport { Observable, Subject } from 'rxjs';\nimport type {\n    BulkWriteLocalRow,\n    DexieSettings,\n    DexieStorageInternals,\n    EventBulk,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxStorageBulkWriteLocalError,\n    RxStorageChangeEvent,\n    RxStorageKeyObjectInstance\n} from '../../types';\nimport {\n    createRevision,\n    flatClone,\n    now,\n    parseRevision,\n    randomCouchString\n} from '../../util';\nimport {\n    closeDexieDb,\n    getDexieDbWithTables,\n    getDexieEventKey,\n    stripDexieKey\n} from './dexie-helper';\nimport { RxStorageDexie } from './rx-storage-dexie';\n\nlet instanceId = 1;\nexport class RxStorageKeyObjectInstanceDexie implements RxStorageKeyObjectInstance<DexieStorageInternals, DexieSettings> {\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxLocalDocumentData>>> = new Subject();\n\n    public instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n\n    }\n\n    async bulkWrite<RxDocType>(\n        documentWrites: BulkWriteLocalRow<RxDocType>[]\n    ): Promise<RxLocalStorageBulkWriteResponse<RxDocType>> {\n        const state = await this.internals;\n        const ret: RxLocalStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxLocalDocumentData>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document._id);\n        const bulkPutData: any[] = [];\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            async () => {\n                const startTime = now();\n                const docsInDb = await state.dexieTable.bulkGet(documentKeys);\n\n                const successDocs: {\n                    writeRow: BulkWriteLocalRow<RxDocType>;\n                    previous: any;\n                    newRevision: string;\n                }[] = [];\n                documentWrites.forEach((writeRow, writeRowIdx) => {\n                    const writeDoc = flatClone(writeRow.document);\n                    const id = writeDoc._id;\n                    const docInDb = docsInDb[writeRowIdx];\n                    const previous = writeRow.previous ? writeRow.previous : docInDb;\n                    const newRevHeight = previous ? parseRevision(previous._rev).height + 1 : 1;\n                    const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n                    writeDoc._rev = newRevision;\n\n                    if (docInDb) {\n                        if (\n                            !writeRow.previous ||\n                            docInDb._rev !== writeRow.previous._rev\n                        ) {\n                            // conflict error\n                            const err: RxStorageBulkWriteLocalError<RxDocType> = {\n                                isError: true,\n                                status: 409,\n                                documentId: id,\n                                writeRow: writeRow\n                            };\n                            ret.error[id] = err;\n                            return;\n                        } else {\n                            const saveMe: any = flatClone(writeDoc);\n                            saveMe.$lastWriteAt = startTime;\n                            bulkPutData.push(saveMe);\n                        }\n                    } else {\n                        const insertData: any = flatClone(writeDoc);\n                        insertData.$lastWriteAt = startTime;\n                        bulkPutData.push(insertData);\n                    }\n\n                    ret.success[id] = stripDexieKey(writeDoc);\n                    successDocs.push({\n                        writeRow,\n                        previous,\n                        newRevision\n                    });\n                });\n\n                await state.dexieTable.bulkPut(bulkPutData);\n                const endTime = now();\n\n                successDocs.forEach(sucessRow => {\n                    const writeRow = sucessRow.writeRow;\n                    const writeDoc = writeRow.document;\n                    const id = writeDoc._id;\n\n                    let event: ChangeEvent<RxLocalDocumentData<RxDocType>>;\n                    if (!writeRow.previous) {\n                        // was insert\n                        event = {\n                            operation: 'INSERT',\n                            doc: writeDoc,\n                            id: id,\n                            previous: null\n                        };\n                    } else if (writeRow.document._deleted) {\n                        // was delete\n\n                        // we need to add the new revision to the previous doc\n                        // so that the eventkey is calculated correctly.\n                        // Is this a hack? idk.\n                        const previousDoc = flatClone(writeRow.previous);\n                        previousDoc._rev = sucessRow.newRevision;\n\n                        event = {\n                            operation: 'DELETE',\n                            doc: null,\n                            id,\n                            previous: previousDoc\n                        };\n                    } else {\n                        // was update\n                        event = {\n                            operation: 'UPDATE',\n                            doc: writeDoc,\n                            id: id,\n                            previous: writeRow.previous\n                        };\n                    }\n\n                    if (\n                        writeRow.document._deleted &&\n                        (\n                            !writeRow.previous ||\n                            writeRow.previous._deleted\n                        )\n                    ) {\n                        /**\n                         * An already deleted document was added to the storage engine,\n                         * do not emit an event because it does not affect anything.\n                         */\n                    } else {\n                        const doc: RxLocalDocumentData<RxDocType> = event.operation === 'DELETE' ? event.previous as any : event.doc as any;\n                        const eventId = getDexieEventKey(true, doc._id, doc._rev ? doc._rev : '');\n                        const storageChangeEvent: RxStorageChangeEvent<RxLocalDocumentData<RxDocType>> = {\n                            eventId,\n                            documentId: id,\n                            change: event,\n                            startTime,\n                            endTime\n                        };\n                        eventBulk.events.push(storageChangeEvent);\n                    }\n                });\n            }\n        );\n        this.changes$.next(eventBulk);\n        return ret;\n    }\n\n    async findLocalDocumentsById<RxDocType = any>(\n        ids: string[]\n    ): Promise<{ [documentId: string]: RxLocalDocumentData<RxDocType> }> {\n        const state = await this.internals;\n        const ret: { [documentId: string]: RxLocalDocumentData<RxDocType> } = {};\n        const docsInDb = await state.dexieTable.bulkGet(ids);\n        ids.forEach((id, idx) => {\n            const documentInDb = docsInDb[idx];\n            if (\n                documentInDb &&\n                !documentInDb._deleted\n            ) {\n                ret[id] = stripDexieKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxLocalDocumentData<{ [key: string]: any; }>>>> {\n        return this.changes$.asObservable();\n    }\n\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n    }\n\n    async remove(): Promise<void> {\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieChangesTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n}\n\n\nexport async function createDexieKeyObjectStorageInstance(\n    storage: RxStorageDexie,\n    params: RxKeyObjectStorageInstanceCreationParams<DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageKeyObjectInstanceDexie> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        {\n            version: 0,\n            primaryKey: '_id',\n            type: 'object',\n            properties: {}\n        }\n    );\n\n    const instance = new RxStorageKeyObjectInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        internals,\n        params.options,\n        settings\n    );\n\n    return instance;\n}\n"],"file":"rx-storage-key-object-instance-dexie.js"}