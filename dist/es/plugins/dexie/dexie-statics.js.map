{"version":3,"file":"dexie-statics.js","names":["getDexieSortComparator","newRxError","getQueryPlan","DEFAULT_CHECKPOINT_SCHEMA","getMingoQuery","RxStorageDexieStatics","prepareQuery","schema","mutateableQuery","sort","query","queryPlan","getSortComparator","preparedQuery","getQueryMatcher","_schema","mingoQuery","selector","fun","doc","_deleted","cursor","find","next","checkpointSchema"],"sources":["../../../../src/plugins/dexie/dexie-statics.ts"],"sourcesContent":["import type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport type {\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageStatics,\n    DexiePreparedQuery,\n    FilledMangoQuery\n} from '../../types';\nimport {\n    getDexieSortComparator\n} from './dexie-helper';\nimport { newRxError } from '../../rx-error';\nimport { getQueryPlan } from '../../query-planner';\nimport { DEFAULT_CHECKPOINT_SCHEMA } from '../../rx-schema-helper';\nimport { getMingoQuery } from '../../rx-query-mingo';\n\nexport const RxStorageDexieStatics: RxStorageStatics = {\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        mutateableQuery: FilledMangoQuery<RxDocType>\n    ): DexiePreparedQuery<RxDocType> {\n\n        if (!mutateableQuery.sort) {\n            throw newRxError('SNH', {\n                query: mutateableQuery\n            });\n        }\n\n        /**\n         * Store the query plan together with the\n         * prepared query to save performance.\n         */\n        const queryPlan = getQueryPlan(\n            schema,\n            mutateableQuery\n        );\n\n        return {\n            query: mutateableQuery,\n            queryPlan\n        };\n    },\n\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n        preparedQuery: DexiePreparedQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        return getDexieSortComparator(schema, preparedQuery.query);\n    },\n\n    getQueryMatcher<RxDocType>(\n        _schema: RxJsonSchema<RxDocType>,\n        preparedQuery: DexiePreparedQuery<RxDocType>\n    ): QueryMatcher<RxDocumentData<RxDocType>> {\n        const query = preparedQuery.query;\n        const mingoQuery = getMingoQuery(query.selector);\n        const fun: QueryMatcher<RxDocumentData<RxDocType>> = (doc: RxDocumentData<RxDocType>) => {\n            if (doc._deleted) {\n                return false;\n            }\n            const cursor = mingoQuery.find([doc]);\n            const next = cursor.next();\n            if (next) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n        return fun;\n    },\n\n    checkpointSchema: DEFAULT_CHECKPOINT_SCHEMA\n\n};\n"],"mappings":"AAWA,SACIA,sBAAsB,QACnB,gBAAgB;AACvB,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,yBAAyB,QAAQ,wBAAwB;AAClE,SAASC,aAAa,QAAQ,sBAAsB;AAEpD,OAAO,IAAMC,qBAAuC,GAAG;EACnDC,YAAY,wBACRC,MAA+C,EAC/CC,eAA4C,EACf;IAE7B,IAAI,CAACA,eAAe,CAACC,IAAI,EAAE;MACvB,MAAMR,UAAU,CAAC,KAAK,EAAE;QACpBS,KAAK,EAAEF;MACX,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;IACQ,IAAMG,SAAS,GAAGT,YAAY,CAC1BK,MAAM,EACNC,eAAe,CAClB;IAED,OAAO;MACHE,KAAK,EAAEF,eAAe;MACtBG,SAAS,EAATA;IACJ,CAAC;EACL,CAAC;EAEDC,iBAAiB,6BACbL,MAA+C,EAC/CM,aAA4C,EACN;IACtC,OAAOb,sBAAsB,CAACO,MAAM,EAAEM,aAAa,CAACH,KAAK,CAAC;EAC9D,CAAC;EAEDI,eAAe,2BACXC,OAAgC,EAChCF,aAA4C,EACL;IACvC,IAAMH,KAAK,GAAGG,aAAa,CAACH,KAAK;IACjC,IAAMM,UAAU,GAAGZ,aAAa,CAACM,KAAK,CAACO,QAAQ,CAAC;IAChD,IAAMC,GAA4C,GAAG,SAA/CA,GAA4C,CAAIC,GAA8B,EAAK;MACrF,IAAIA,GAAG,CAACC,QAAQ,EAAE;QACd,OAAO,KAAK;MAChB;MACA,IAAMC,MAAM,GAAGL,UAAU,CAACM,IAAI,CAAC,CAACH,GAAG,CAAC,CAAC;MACrC,IAAMI,IAAI,GAAGF,MAAM,CAACE,IAAI,EAAE;MAC1B,IAAIA,IAAI,EAAE;QACN,OAAO,IAAI;MACf,CAAC,MAAM;QACH,OAAO,KAAK;MAChB;IACJ,CAAC;IACD,OAAOL,GAAG;EACd,CAAC;EAEDM,gBAAgB,EAAErB;AAEtB,CAAC"}