{"version":3,"sources":["../../../../src/plugins/backup/file-util.ts"],"names":["fs","path","now","ensureFolderExists","folderPath","existsSync","mkdirSync","recursive","clearFolder","deleteFolder","rmdirSync","prepareFolders","database","options","directory","metaLoc","metaFileLocation","currentTime","metaData","createdAt","updatedAt","collectionStates","writeFileSync","JSON","stringify","Object","keys","collections","forEach","collectionName","join","writeToFile","location","data","Promise","res","rej","writeFile","err","writeJsonToFile","getMeta","loc","readFile","metaContent","parse","setMeta","meta","documentFolder","docId"],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport {\n    BackupMetaFileContent,\n    BackupOptions,\n    RxDatabase\n} from '../../types';\nimport { now } from '../../util';\n\n/**\n * ensure that the given folder exists\n */\nexport function ensureFolderExists(folderPath: string): void {\n    if (!fs.existsSync(folderPath)) {\n        fs.mkdirSync(folderPath, { recursive: true });\n    }\n}\n\n/**\n * deletes and recreates the folder\n */\nexport function clearFolder(folderPath: string): void {\n    deleteFolder(folderPath);\n    ensureFolderExists(folderPath);\n}\n\nexport function deleteFolder(folderPath: string): void {\n    // only remove if exists to not raise warning\n    if (fs.existsSync(folderPath)) {\n        fs.rmdirSync(folderPath, { recursive: true });\n    }\n}\n\nexport function prepareFolders(\n    database: RxDatabase,\n    options: BackupOptions\n) {\n    ensureFolderExists(options.directory);\n\n    const metaLoc = metaFileLocation(options);\n\n    if (!fs.existsSync(metaLoc)) {\n        const currentTime = now();\n        const metaData: BackupMetaFileContent = {\n            createdAt: currentTime,\n            updatedAt: currentTime,\n            collectionStates: {}\n        };\n        fs.writeFileSync(metaLoc, JSON.stringify(metaData), 'utf-8');\n    }\n\n    Object.keys(database.collections).forEach(collectionName => {\n        ensureFolderExists(\n            path.join(\n                options.directory,\n                collectionName\n            )\n        );\n    });\n}\n\nexport async function writeToFile(\n    location: string,\n    data: string | Buffer\n): Promise<void> {\n    return new Promise(function (res, rej) {\n        fs.writeFile(\n            location,\n            data,\n            'utf-8',\n            (err) => {\n                if (err) {\n                    rej(err);\n                } else {\n                    res();\n                }\n            }\n        );\n    });\n}\n\nexport async function writeJsonToFile(\n    location: string,\n    data: any\n): Promise<void> {\n    return writeToFile(\n        location,\n        JSON.stringify(data)\n    );\n}\n\nexport function metaFileLocation(options: BackupOptions): string {\n    return path.join(\n        options.directory,\n        'backup_meta.json'\n    );\n}\n\nexport async function getMeta(options: BackupOptions): Promise<BackupMetaFileContent> {\n    const loc = metaFileLocation(options);\n    return new Promise((res, rej) => {\n        fs.readFile(loc, 'utf-8', (err, data) => {\n            if (err) {\n                rej(err);\n            } else {\n                const metaContent = JSON.parse(data);\n                res(metaContent);\n            }\n        });\n    });\n}\n\nexport async function setMeta(\n    options: BackupOptions,\n    meta: BackupMetaFileContent\n): Promise<void> {\n    const loc = metaFileLocation(options);\n    return writeJsonToFile(loc, meta);\n}\n\nexport function documentFolder(\n    options: BackupOptions,\n    docId: string\n): string {\n    return path.join(\n        options.directory,\n        docId\n    );\n}\n"],"file":"file-util.js"}