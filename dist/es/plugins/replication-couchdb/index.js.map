{"version":3,"file":"index.js","names":["ensureNotFalsy","errorToPlainJson","flatClone","getFromMapOrThrow","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","newRxError","Subject","couchDBDocToRxDocData","COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX","mergeUrlQueryParams","couchSwapPrimaryToId","getDefaultFetch","RxCouchDBReplicationState","url","fetch","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","replicateCouchDB","options","conflictHandler","primaryPath","schema","endsWith","args","name","waitForLeadership","pullStream$","replicationPrimitivesPull","handler","lastPulledCheckpoint","batchSize","style","feed","include_docs","since","sequence","heartbeat","limit","seq_interval","response","replicationState","jsonResponse","json","results","documents","map","row","doc","checkpoint","last_seq","modifier","stream$","asObservable","replicationPrimitivesPush","rows","conflicts","pushRowsById","Map","forEach","id","newDocumentState","set","docsByIdResponse","method","headers","body","JSON","stringify","keys","deleted","docsByIdRows","nonConflictRows","remoteRevById","Promise","all","key","realMasterState","pushRow","conflictHandlerResult","assumedMasterState","isEqual","_rev","docs","docId","sendDoc","has","responseJson","conflictAgainIds","writeResultRow","isConflict","error","ok","length","getConflictDocsUrl","conflictResponse","conflictResponseJson","conflictAgainRow","database","hashFunction","startBefore","start","bind","isStopped","err","promiseWait","next"],"sources":["../../../../src/plugins/replication-couchdb/index.ts"],"sourcesContent":["/**\n * This plugin can be used to sync collections with a remote CouchDB endpoint.\n */\nimport {\n    ensureNotFalsy,\n    errorToPlainJson,\n    flatClone,\n    getFromMapOrThrow\n} from '../../plugins/utils';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem,\n    CouchdbChangesResult,\n    CouchBulkDocResultRow,\n    CouchAllDocsResponse,\n    RxConflictHandler\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    newRxError,\n    WithDeleted\n} from '../../index';\n\nimport { Subject } from 'rxjs';\nimport type {\n    CouchDBCheckpointType,\n    FetchMethodType,\n    SyncOptionsCouchDB\n} from './couchdb-types';\nimport {\n    couchDBDocToRxDocData,\n    COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX,\n    mergeUrlQueryParams,\n    couchSwapPrimaryToId,\n    getDefaultFetch\n} from './couchdb-helper';\n\nexport * from './couchdb-helper';\nexport * from './couchdb-types';\n\nexport class RxCouchDBReplicationState<RxDocType> extends RxReplicationState<RxDocType, CouchDBCheckpointType> {\n    constructor(\n        public readonly url: string,\n        public fetch: FetchMethodType,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CouchDBCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function replicateCouchDB<RxDocType>(\n    options: SyncOptionsCouchDB<RxDocType>\n) {\n    const collection = options.collection;\n    const conflictHandler: RxConflictHandler<any> = collection.conflictHandler;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    const primaryPath = options.collection.schema.primaryPath;\n\n    if (!options.url.endsWith('/')) {\n        throw newRxError('RC_COUCHDB_1', {\n            args: {\n                collection: options.collection.name,\n                url: options.url\n            }\n        });\n    }\n\n    options = flatClone(options);\n    if (!options.url.endsWith('/')) {\n        options.url = options.url + '/';\n    }\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CouchDBCheckpointType>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CouchDBCheckpointType> | undefined;\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CouchDBCheckpointType | undefined,\n                batchSize: number\n            ) {\n                /**\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/changes.html\n                 */\n                const url = options.url + '_changes?' + mergeUrlQueryParams({\n                    style: 'all_docs',\n                    feed: 'normal',\n                    include_docs: true,\n                    since: lastPulledCheckpoint ? lastPulledCheckpoint.sequence : 0,\n                    heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\n                    limit: batchSize,\n                    seq_interval: batchSize\n                });\n\n                const response = await replicationState.fetch(url);\n                const jsonResponse: CouchdbChangesResult = await response.json();\n                if (!jsonResponse.results) {\n                    throw newRxError('RC_COUCHDB_2', {\n                        args: { jsonResponse }\n                    });\n                }\n                const documents: WithDeleted<RxDocType>[] = jsonResponse.results\n                    .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\n                return {\n                    documents,\n                    checkpoint: {\n                        sequence: jsonResponse.last_seq\n                    }\n                };\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const conflicts: WithDeleted<RxDocType>[] = [];\n                const pushRowsById = new Map<string, RxReplicationWriteToMasterRow<RxDocType>>();\n                rows.forEach(row => {\n                    const id = (row.newDocumentState as any)[primaryPath];\n                    pushRowsById.set(id, row);\n                });\n\n                /**\n                 * First get the current master state from the remote\n                 * to check for conflicts\n                 */\n                const docsByIdResponse = await replicationState.fetch(\n                    options.url + '_all_docs?' + mergeUrlQueryParams({}),\n                    {\n                        method: 'POST',\n                        headers: {\n                            'content-type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            keys: rows.map(row => (row.newDocumentState as any)[primaryPath]),\n                            include_docs: true,\n                            deleted: 'ok'\n                        })\n                    }\n                );\n                const docsByIdRows: CouchAllDocsResponse = await docsByIdResponse.json();\n                const nonConflictRows: typeof rows = [];\n                const remoteRevById = new Map<string, string>();\n                await Promise.all(\n                    docsByIdRows.rows.map(async (row) => {\n                        if (!row.doc) {\n                            nonConflictRows.push(getFromMapOrThrow(pushRowsById, row.key));\n                            return;\n                        }\n                        const realMasterState: WithDeleted<RxDocType> = couchDBDocToRxDocData(primaryPath, row.doc);\n                        const pushRow = getFromMapOrThrow(pushRowsById, row.id);\n                        const conflictHandlerResult = await conflictHandler({\n                            realMasterState,\n                            newDocumentState: pushRow.assumedMasterState\n                        }, 'couchdb-push-1');\n                        if (conflictHandlerResult.isEqual) {\n                            remoteRevById.set(row.id, row.doc._rev);\n                            nonConflictRows.push(pushRow);\n                        } else {\n                            conflicts.push(realMasterState);\n                        }\n                    })\n                );\n\n                /**\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/bulk-api.html#db-bulk-docs\n                 */\n                const url = options.url + '_bulk_docs?' + mergeUrlQueryParams({});\n                const body = {\n                    docs: nonConflictRows.map(row => {\n                        const docId = (row.newDocumentState as any)[primaryPath];\n                        const sendDoc = flatClone(row.newDocumentState);\n                        if (remoteRevById.has(docId)) {\n                            (sendDoc as any)._rev = getFromMapOrThrow(remoteRevById, docId);\n                        }\n                        return couchSwapPrimaryToId(collection.schema.primaryPath, sendDoc);\n                    })\n                };\n\n                const response = await replicationState.fetch(\n                    url,\n                    {\n                        method: 'POST',\n                        headers: {\n                            'content-type': 'application/json'\n                        },\n                        body: JSON.stringify(body)\n                    }\n                );\n                const responseJson: CouchBulkDocResultRow[] = await response.json();\n\n                // get conflicting writes\n                const conflictAgainIds: string[] = [];\n                responseJson.forEach(writeResultRow => {\n                    const isConflict = writeResultRow.error === 'conflict';\n                    if (!writeResultRow.ok && !isConflict) {\n                        throw newRxError('SNH', { args: { writeResultRow } });\n                    }\n                    if (isConflict) {\n                        conflictAgainIds.push(writeResultRow.id);\n                    }\n                });\n\n                if (conflictAgainIds.length === 0) {\n                    return conflicts;\n                }\n\n                const getConflictDocsUrl = options.url + '_all_docs?' + mergeUrlQueryParams({\n                    include_docs: true,\n                    keys: JSON.stringify(conflictAgainIds)\n                });\n                const conflictResponse = await replicationState.fetch(getConflictDocsUrl);\n                const conflictResponseJson: CouchAllDocsResponse = await conflictResponse.json();\n                conflictResponseJson.rows.forEach(conflictAgainRow => {\n                    conflicts.push(couchDBDocToRxDocData(collection.schema.primaryPath, conflictAgainRow.doc));\n                });\n\n                return conflicts;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier\n        };\n    }\n\n    const replicationState = new RxCouchDBReplicationState<RxDocType>(\n        options.url,\n        options.fetch ? options.fetch : getDefaultFetch(),\n        COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX + options.collection.database.hashFunction(options.url),\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Use long polling to get live changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        replicationState.start = () => {\n            let since: string | number = 'now';\n            const batchSize = options.pull && options.pull.batchSize ? options.pull.batchSize : 20;\n\n            (async () => {\n                while (!replicationState.isStopped()) {\n                    const url = options.url + '_changes?' + mergeUrlQueryParams({\n                        style: 'all_docs',\n                        feed: 'longpoll',\n                        since,\n                        include_docs: true,\n                        heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\n                        limit: batchSize,\n                        seq_interval: batchSize\n                    });\n\n                    let jsonResponse: CouchdbChangesResult;\n                    try {\n                        jsonResponse = await (await replicationState.fetch(url)).json();\n                    } catch (err: any) {\n                        pullStream$.error(newRxError('RC_STREAM', {\n                            args: { url },\n                            error: errorToPlainJson(err)\n                        }));\n                        // await next tick here otherwise we could go in to a 100% CPU blocking cycle.\n                        await collection.promiseWait(0);\n                        continue;\n                    }\n                    const documents: WithDeleted<RxDocType>[] = jsonResponse.results\n                        .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\n                    since = jsonResponse.last_seq;\n\n                    pullStream$.next({\n                        documents,\n                        checkpoint: {\n                            sequence: jsonResponse.last_seq\n                        }\n                    });\n                }\n            })();\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n\n    return replicationState;\n}\n"],"mappings":"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"}