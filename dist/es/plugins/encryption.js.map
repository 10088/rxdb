{"version":3,"file":"encryption.js","names":["AES","cryptoEnc","newRxTypeError","newRxError","objectPath","clone","createRevision","ensureNotFalsy","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","hash","PROMISE_RESOLVE_FALSE","writeSingle","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_ENCRYPTION","body","recover","result","e","then","storePasswordHashIntoDatabase","rxDatabase","pwHash","pwHashDoc","data","destroy","passwordHash","password","existingPasswordHash","pwHashDocumentKey","pwHashDocumentId","docData","id","key","context","_deleted","_attachments","_meta","_rev","internalStore","document","err","isError","status","documentInDb","MINIMUM_PASSWORD_LENGTH","encryptString","value","encrypted","encrypt","toString","decryptString","cipherText","args","decrypted","decrypt","ret","cloneWithoutAttachments","attachments","RxDBEncryptionPlugin","name","rxdb","prototypes","overwritable","validatePassword","length","minPassLength","hooks","createRxDatabase","after","database","preWriteToStorageInstance","before","schema","doc","forEach","path","get","stringValue","JSON","stringify","set","postReadFromInstance","decryptedParsed","parse","preWriteAttachment","dataString","attachmentData","postReadAttachment","plainData"],"sources":["../../../src/plugins/encryption.ts"],"sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\n\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\n\nimport {\n    newRxTypeError,\n    newRxError\n} from '../rx-error';\n\nimport objectPath from 'object-path';\nimport type {\n    RxPlugin,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageBulkWriteError,\n    InternalStoreDocType\n} from '../types';\nimport {\n    clone,\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    hash,\n    PROMISE_RESOLVE_FALSE\n} from '../util';\nimport { writeSingle } from '../rx-storage-helper';\nimport {\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_ENCRYPTION\n} from '../rx-database-internal-store';\n\nexport const MINIMUM_PASSWORD_LENGTH: 8 = 8;\n\n\nexport function encryptString(value: string, password: string): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decryptString(cipherText: string, password: any): string {\n    /**\n     * Trying to decrypt non-strings\n     * will cause no errors and will be hard to debug.\n     * So instead we do this check here.\n     */\n    if (typeof cipherText !== 'string') {\n        throw newRxError('SNH', {\n            args: {\n                cipherText\n            }\n        });\n    }\n\n    const decrypted = AES.decrypt(cipherText, password);\n    const ret = decrypted.toString(cryptoEnc);\n    return ret;\n}\n\n\nexport type InternalStorePasswordDocType = InternalStoreDocType<{\n    hash: string;\n}>;\n\n/**\n * validates and inserts the password hash into the internal collection\n * to ensure there is/was no other instance with a different password\n * which would cause strange side effects when both instances save into the same db\n */\nexport async function storePasswordHashIntoDatabase(\n    rxDatabase: RxDatabase\n): Promise<boolean> {\n    if (!rxDatabase.password) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    const pwHash = hash(rxDatabase.password);\n    const pwHashDocumentKey = 'pwHash';\n    const pwHashDocumentId = getPrimaryKeyOfInternalDocument(\n        pwHashDocumentKey,\n        INTERNAL_CONTEXT_ENCRYPTION\n    );\n\n    const docData: RxDocumentWriteData<InternalStorePasswordDocType> = {\n        id: pwHashDocumentId,\n        key: pwHashDocumentKey,\n        context: INTERNAL_CONTEXT_ENCRYPTION,\n        data: {\n            hash: pwHash\n        },\n        _deleted: false,\n        _attachments: {},\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision()\n    };\n    docData._rev = createRevision(docData);\n\n    let pwHashDoc;\n    try {\n        pwHashDoc = await writeSingle(\n            rxDatabase.internalStore,\n            {\n                document: docData\n            }\n        );\n    } catch (err) {\n        if (\n            (err as any).isError &&\n            (err as RxStorageBulkWriteError<InternalStorePasswordDocType>).status === 409\n        ) {\n            pwHashDoc = ensureNotFalsy((err as RxStorageBulkWriteError<InternalStorePasswordDocType>).documentInDb);\n        } else {\n            throw err;\n        }\n    }\n\n    if (pwHash !== pwHashDoc.data.hash) {\n        // different hash was already set by other instance\n        await rxDatabase.destroy();\n        throw newRxError('DB1', {\n            passwordHash: hash(rxDatabase.password),\n            existingPasswordHash: pwHashDoc.data.hash\n        });\n    } else {\n        return true;\n    }\n}\n\n\nfunction cloneWithoutAttachments<T>(data: RxDocumentData<T>): RxDocumentData<T> {\n    const attachments = data._attachments;\n    data = flatClone(data);\n    delete (data as any)._attachments;\n    data = clone(data);\n    data._attachments = attachments;\n    return data;\n}\n\nexport const RxDBEncryptionPlugin: RxPlugin = {\n    name: 'encryption',\n    rxdb: true,\n    prototypes: {},\n    overwritable: {\n        validatePassword: function (password: any) {\n            if (password && typeof password !== 'string') {\n                throw newRxTypeError('EN1', {\n                    password\n                });\n            }\n            if (password && password.length < MINIMUM_PASSWORD_LENGTH) {\n                throw newRxError('EN2', {\n                    minPassLength: MINIMUM_PASSWORD_LENGTH,\n                    password\n                });\n            }\n        }\n    },\n    hooks: {\n        createRxDatabase: {\n            after: args => {\n                return storePasswordHashIntoDatabase(args.database);\n            }\n        },\n        preWriteToStorageInstance: {\n            before: (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    !password ||\n                    !schema.encrypted ||\n                    schema.encrypted.length === 0\n                ) {\n                    return;\n                }\n\n                const docData = cloneWithoutAttachments(args.doc);\n                schema.encrypted\n                    .forEach(path => {\n                        const value = objectPath.get(docData, path);\n                        if (typeof value === 'undefined') {\n                            return;\n                        }\n\n                        const stringValue = JSON.stringify(value);\n                        const encrypted = encryptString(stringValue, password);\n                        objectPath.set(docData, path, encrypted);\n                    });\n                args.doc = docData;\n            }\n        },\n        postReadFromInstance: {\n            after: (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    !password ||\n                    !schema.encrypted ||\n                    schema.encrypted.length === 0\n                ) {\n                    return;\n                }\n                const docData = cloneWithoutAttachments(args.doc);\n                schema.encrypted\n                    .forEach(path => {\n                        const value = objectPath.get(docData, path);\n                        if (typeof value === 'undefined') {\n                            return;\n                        }\n                        const decrypted = decryptString(value, password);\n                        const decryptedParsed = JSON.parse(decrypted);\n                        objectPath.set(docData, path, decryptedParsed);\n                    });\n                args.doc = docData;\n            }\n        },\n        preWriteAttachment: {\n            after: async (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    password &&\n                    schema.attachments &&\n                    schema.attachments.encrypted\n                ) {\n                    const dataString = args.attachmentData.data;\n                    const encrypted = encryptString(dataString, password);\n                    args.attachmentData.data = encrypted;\n                }\n            }\n        },\n        postReadAttachment: {\n            after: async (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    password &&\n                    schema.attachments &&\n                    schema.attachments.encrypted\n                ) {\n                    const dataString = args.plainData;\n                    const decrypted = decryptString(dataString, password);\n                    args.plainData = decrypted;\n                }\n            }\n        }\n    }\n};\n"],"mappings":"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"}