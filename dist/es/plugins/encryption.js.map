{"version":3,"sources":["../../../src/plugins/encryption.ts"],"names":["AES","cryptoEnc","newRxTypeError","newRxError","objectPath","blobBufferUtil","clone","flatClone","getDefaultRxDocumentMeta","hash","PROMISE_RESOLVE_FALSE","getSingleDocument","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_ENCRYPTION","storePasswordHashIntoDatabase","rxDatabase","password","pwHash","pwHashDocumentKey","pwHashDocumentId","internalStore","pwHashDoc","docData","id","key","context","data","_attachments","_meta","_deleted","bulkWrite","document","destroy","passwordHash","existingPasswordHash","MINIMUM_PASSWORD_LENGTH","encryptString","value","encrypted","encrypt","toString","decryptString","cipherText","args","decrypted","decrypt","ret","cloneWithoutAttachments","attachments","RxDBEncryptionPlugin","name","rxdb","prototypes","overwritable","validatePassword","length","minPassLength","hooks","createRxDatabase","after","database","preWriteToStorageInstance","before","schema","doc","forEach","path","get","stringValue","JSON","stringify","set","postReadFromInstance","decryptedParsed","parse","preWriteAttachment","attachmentData","dataString","postReadAttachment","plainData"],"mappings":"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","sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\n\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\n\nimport {\n    newRxTypeError,\n    newRxError\n} from '../rx-error';\n\nimport objectPath from 'object-path';\nimport type {\n    RxPlugin,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData\n} from '../types';\nimport {\n    blobBufferUtil,\n    clone,\n    flatClone,\n    getDefaultRxDocumentMeta,\n    hash,\n    PROMISE_RESOLVE_FALSE\n} from '../util';\nimport { getSingleDocument } from '../rx-storage-helper';\nimport {\n    getPrimaryKeyOfInternalDocument,\n    InternalStoreDocType,\n    INTERNAL_CONTEXT_ENCRYPTION\n} from '../rx-database-internal-store';\n\nexport const MINIMUM_PASSWORD_LENGTH: 8 = 8;\n\n\nexport function encryptString(value: string, password: string): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decryptString(cipherText: string, password: any): string {\n    /**\n     * Trying to decrypt non-strings\n     * will cause no errors and will be hard to debug.\n     * So instead we do this check here.\n     */\n    if (typeof cipherText !== 'string') {\n        throw newRxError('SNH', {\n            args: {\n                cipherText\n            }\n        });\n    }\n\n    const decrypted = AES.decrypt(cipherText, password);\n    const ret = decrypted.toString(cryptoEnc);\n    return ret;\n}\n\n\nexport type InternalStorePasswordDocType = InternalStoreDocType<{\n    hash: string;\n}>;\n\n/**\n * validates and inserts the password hash into the internal collection\n * to ensure there is/was no other instance with a different password\n * which would cause strange side effects when both instances save into the same db\n */\nexport async function storePasswordHashIntoDatabase(\n    rxDatabase: RxDatabase\n): Promise<boolean> {\n    if (!rxDatabase.password) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    const pwHash = hash(rxDatabase.password);\n    const pwHashDocumentKey = 'pwHash';\n    const pwHashDocumentId = getPrimaryKeyOfInternalDocument(\n        pwHashDocumentKey,\n        INTERNAL_CONTEXT_ENCRYPTION\n    );\n\n    const pwHashDoc = await getSingleDocument<InternalStorePasswordDocType>(\n        rxDatabase.internalStore,\n        pwHashDocumentId\n    );\n    if (!pwHashDoc) {\n        const docData: RxDocumentWriteData<InternalStorePasswordDocType> = {\n            id: pwHashDocumentId,\n            key: pwHashDocumentKey,\n            context: INTERNAL_CONTEXT_ENCRYPTION,\n            data: {\n                hash: pwHash\n            },\n            _attachments: {},\n            _meta: getDefaultRxDocumentMeta(),\n            _deleted: false\n        };\n        await rxDatabase.internalStore.bulkWrite([{\n            document: docData\n        }]);\n        return true;\n    } else if (pwHash !== pwHashDoc.data.hash) {\n        // different hash was already set by other instance\n        await rxDatabase.destroy();\n        throw newRxError('DB1', {\n            passwordHash: hash(rxDatabase.password),\n            existingPasswordHash: pwHashDoc.data.hash\n        });\n    } else {\n        return true;\n    }\n}\n\n\nfunction cloneWithoutAttachments<T>(data: RxDocumentData<T>): RxDocumentData<T> {\n    const attachments = data._attachments;\n    data = flatClone(data);\n    delete (data as any)._attachments;\n    data = clone(data);\n    data._attachments = attachments;\n    return data;\n}\n\nexport const RxDBEncryptionPlugin: RxPlugin = {\n    name: 'encryption',\n    rxdb: true,\n    prototypes: {},\n    overwritable: {\n        validatePassword: function (password: any) {\n            if (password && typeof password !== 'string') {\n                throw newRxTypeError('EN1', {\n                    password\n                });\n            }\n            if (password && password.length < MINIMUM_PASSWORD_LENGTH) {\n                throw newRxError('EN2', {\n                    minPassLength: MINIMUM_PASSWORD_LENGTH,\n                    password\n                });\n            }\n        }\n    },\n    hooks: {\n        createRxDatabase: {\n            after: args => {\n                return storePasswordHashIntoDatabase(args.database);\n            }\n        },\n        preWriteToStorageInstance: {\n            before: (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    !password ||\n                    !schema.encrypted ||\n                    schema.encrypted.length === 0\n                ) {\n                    return;\n                }\n\n                const docData = cloneWithoutAttachments(args.doc);\n                schema.encrypted\n                    .forEach(path => {\n                        const value = objectPath.get(docData, path);\n                        if (typeof value === 'undefined') {\n                            return;\n                        }\n\n                        const stringValue = JSON.stringify(value);\n                        const encrypted = encryptString(stringValue, password);\n                        objectPath.set(docData, path, encrypted);\n                    });\n                args.doc = docData;\n            }\n        },\n        postReadFromInstance: {\n            after: (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    !password ||\n                    !schema.encrypted ||\n                    schema.encrypted.length === 0\n                ) {\n                    return;\n                }\n                const docData = cloneWithoutAttachments(args.doc);\n                schema.encrypted\n                    .forEach(path => {\n                        const value = objectPath.get(docData, path);\n                        if (typeof value === 'undefined') {\n                            return;\n                        }\n                        const decrypted = decryptString(value, password);\n                        const decryptedParsed = JSON.parse(decrypted);\n                        objectPath.set(docData, path, decryptedParsed);\n                    });\n                args.doc = docData;\n            }\n        },\n        preWriteAttachment: {\n            after: async (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    password &&\n                    schema.attachments &&\n                    schema.attachments.encrypted\n                ) {\n                    const dataString = await blobBufferUtil.toString(args.attachmentData.data);\n                    const encrypted = encryptString(dataString, password);\n                    args.attachmentData.data = encrypted;\n                }\n            }\n        },\n        postReadAttachment: {\n            after: async (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    password &&\n                    schema.attachments &&\n                    schema.attachments.encrypted\n                ) {\n                    const dataString = await blobBufferUtil.toString(args.plainData);\n                    const decrypted = decryptString(dataString, password);\n                    args.plainData = decrypted;\n                }\n            }\n        }\n    }\n};\n"],"file":"encryption.js"}