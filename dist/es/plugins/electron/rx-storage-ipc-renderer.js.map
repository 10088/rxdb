{"version":3,"file":"rx-storage-ipc-renderer.js","names":["filter","firstValueFrom","Subject","PROMISE_RESOLVE_VOID","randomCouchString","IPC_RENDERER_KEY_PREFIX","IPC_RENDERER_TO_MAIN","RxStorageIpcRenderer","settings","statics","name","invoke","eventName","args","ipcRenderer","key","join","result","error","Error","value","postMessage","messageChannel","MessageChannel","port2","port1","createStorageInstance","params","messages$","instanceIdPromise","channelId","port","Object","assign","onmessage","msg","next","data","instanceIdResult","toString","instanceId","RxStorageInstanceIpcRenderer","databaseName","collectionName","schema","rxStorage","options","storage","internals","changes$","conflicts$","subs","closed","lastRequestId","requestIdSeed","push","subscribe","method","requestMain","methodName","requestIdNr","requestId","responsePromise","pipe","answerTo","message","send","response","bulkWrite","documentWrites","context","findDocumentsById","ids","deleted","query","preparedQuery","count","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","changeStream","asObservable","cleanup","minDeletedTime","close","forEach","sub","unsubscribe","complete","remove","conflictResultionTasks","resolveConflictResultionTask","taskSolution","getRxStorageIpcRenderer"],"sources":["../../../../src/plugins/electron/rx-storage-ipc-renderer.ts"],"sourcesContent":["import { filter, firstValueFrom, Observable, Subject, Subscription } from 'rxjs';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageStatics\n} from '../../types';\nimport { PROMISE_RESOLVE_VOID, randomCouchString } from '../../util';\nimport {\n    IpcMessageFromMain,\n    IpcMessageFromRenderer,\n    IPC_RENDERER_KEY_PREFIX,\n    IPC_RENDERER_TO_MAIN\n} from './electron-helper';\n\n\nexport type RxStorageIpcRendererInternals = {\n    channelId: string;\n    rxStorage: RxStorageIpcRenderer;\n    port: MessagePort;\n    messages$: Subject<IpcMessageFromMain>;\n    instanceId: string;\n    ipcRenderer: any;\n};\n\ndeclare type RxStorageIpcRendererSettings = {\n    key: string;\n    statics: RxStorageStatics;\n    ipcRenderer: any;\n};\n\n\nexport class RxStorageIpcRenderer implements RxStorage<RxStorageIpcRendererInternals, any> {\n    public name = 'ipc-renderer';\n\n    constructor(\n        public readonly settings: RxStorageIpcRendererSettings,\n        public readonly statics: RxStorageStatics\n    ) { }\n\n    public async invoke<T>(eventName: string, args?: any): Promise<T> {\n        const result = await this.settings.ipcRenderer.invoke(\n            [\n                IPC_RENDERER_KEY_PREFIX,\n                'invoke',\n                this.settings.key,\n                eventName\n            ].join('|'),\n            args\n        );\n        if (result.error) {\n            throw new Error(result.error);\n        } else {\n            return result.value;\n        }\n    }\n\n    public postMessage(eventName: string, args?: any): MessagePort {\n        const messageChannel = new MessageChannel();\n        this.settings.ipcRenderer.postMessage(\n            [\n                IPC_RENDERER_KEY_PREFIX,\n                'postMessage',\n                this.settings.key,\n                eventName\n            ].join('|'),\n            args,\n            [messageChannel.port2]\n        );\n        return messageChannel.port1;\n    }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceIpcRenderer<RxDocType>> {\n        const messages$ = new Subject<IpcMessageFromMain>();\n        const instanceIdPromise = firstValueFrom(messages$);\n        const channelId = randomCouchString(10);\n        const port = this.postMessage(\n            'createStorageInstance',\n            Object.assign({}, params, { channelId }));\n        port.onmessage = msg => {\n            messages$.next(msg.data);\n        };\n        const instanceIdResult = await instanceIdPromise;\n        if (instanceIdResult.error) {\n            throw new Error('could not create instance ' + instanceIdResult.error.toString());\n        }\n        const instanceId: string = instanceIdResult.return;\n        return new RxStorageInstanceIpcRenderer(\n            this,\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                channelId,\n                instanceId,\n                port,\n                messages$,\n                rxStorage: this,\n                ipcRenderer: this.settings.ipcRenderer\n            },\n            params.options\n        );\n    }\n}\n\n\nexport class RxStorageInstanceIpcRenderer<RxDocType> implements RxStorageInstance<RxDocType, RxStorageIpcRendererInternals, any, any> {\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> = new Subject();\n    private conflicts$: Subject<RxConflictResultionTask<RxDocType>> = new Subject();\n    private subs: Subscription[] = [];\n\n    private closed: boolean = false;\n    public readonly instanceId: string;\n    private lastRequestId: number = 0;\n    private requestIdSeed: string = randomCouchString(19);\n\n    constructor(\n        public readonly storage: RxStorageIpcRenderer,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: RxStorageIpcRendererInternals,\n        public readonly options: Readonly<any>\n    ) {\n\n        this.instanceId = internals.instanceId;\n\n        this.subs.push(\n            internals.messages$.subscribe(msg => {\n                if (msg.method === 'changeStream') {\n                    this.changes$.next(msg.return);\n                }\n                if (msg.method === 'conflictResultionTasks') {\n                    this.conflicts$.next(msg.return);\n                }\n            })\n        );\n    }\n\n    public async requestMain(\n        methodName: keyof RxStorageInstance<any, any, any>,\n        params: any\n    ) {\n        const requestIdNr = this.lastRequestId++;\n        const requestId = this.requestIdSeed + '|' + requestIdNr;\n        const responsePromise = firstValueFrom(\n            this.internals.messages$.pipe(\n                filter(msg => msg.answerTo === requestId)\n            )\n        );\n        const message: IpcMessageFromRenderer = {\n            channelId: this.internals.channelId,\n            requestId,\n            method: methodName,\n            params\n        };\n        this.internals.ipcRenderer.send(IPC_RENDERER_TO_MAIN, message);\n        const response = await responsePromise;\n\n        if (response.error) {\n            throw new Error(response.error);\n        } else {\n            return response.return;\n        }\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.requestMain('bulkWrite', [documentWrites, context]);\n    }\n\n\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        return this.requestMain('findDocumentsById', [ids, deleted]);\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.requestMain('query', [preparedQuery]);\n    }\n    count(preparedQuery: any): Promise<RxStorageCountResult> {\n        return this.requestMain('count', [preparedQuery]);\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        return this.requestMain('getAttachmentData', [documentId, attachmentId]);\n    }\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<\n        {\n            documents: RxDocumentData<RxDocType>[];\n            checkpoint: any;\n        }> {\n        return this.requestMain('getChangedDocumentsSince', [limit, checkpoint]);\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number): Promise<boolean> {\n        return this.requestMain('cleanup', [minDeletedTime]);\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return PROMISE_RESOLVE_VOID;\n        }\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.changes$.complete();\n        await this.requestMain('close', []);\n        this.internals.port.close();\n    }\n    async remove(): Promise<void> {\n        await this.requestMain('remove', []);\n        return this.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.conflicts$;\n    }\n    async resolveConflictResultionTask(taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        await this.requestMain('resolveConflictResultionTask', [taskSolution]);\n    }\n}\nexport function getRxStorageIpcRenderer(\n    settings: RxStorageIpcRendererSettings\n): RxStorageIpcRenderer {\n    const storage = new RxStorageIpcRenderer(settings, settings.statics);\n    return storage;\n}\n"],"mappings":"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"}