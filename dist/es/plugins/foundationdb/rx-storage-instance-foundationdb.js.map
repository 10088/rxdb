{"version":3,"file":"rx-storage-instance-foundationdb.js","names":["Subject","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","getNewestOfDocumentStates","CLEANUP_INDEX","getFoundationDBIndexName","newRxError","getIndexableStringMonad","getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","ensureNotFalsy","lastOfArray","now","PROMISE_RESOLVE_VOID","queryFoundationDB","INDEX_MAX","attachmentMapKey","RxStorageInstanceFoundationDB","storage","databaseName","collectionName","schema","internals","options","settings","closed","changes$","primaryPath","primaryKey","bulkWrite","documentWrites","context","dbsPromise","dbs","categorized","root","doTransaction","tx","ret","success","error","ids","map","row","document","mainTx","at","main","subspace","attachmentTx","attachments","docsInDB","Map","Promise","all","id","get","doc","set","errors","bulkInsertDocs","forEach","writeRow","docId","Object","values","indexes","indexMeta","indexString","getIndexableString","indexTx","db","bulkUpdateDocs","oldIndexString","previous","newIndexString","attachmentsAdd","attachment","documentId","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","result","eventBulk","events","length","lastState","checkpoint","lwt","_meta","next","findDocumentsById","withDeleted","docInDb","_deleted","query","preparedQuery","getAttachmentData","data","getChangedDocumentsSince","limit","require","keySelector","StreamingMode","index","indexName","lowerBoundString","checkpointPartialDoc","innerResult","getRangeAll","firstGreaterThan","streamingMode","Exact","range","docIds","docsData","concat","lastDoc","documents","changeStream","asObservable","remove","clearRange","close","cleanup","minimumDeletedTime","maxDeletionTime","upperBoundString","noMoreUndeleted","batchSize","pop","subIndexDB","docData","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","reject","database","collection","complete","createFoundationDBStorageInstance","params","open","directory","encoders","connection","clusterFile","createOrOpen","dir","version","withKeyEncoding","string","withValueEncoding","json","indexDBs","useIndexes","slice","push","useIndexesFinal","indexAr","Array","isArray","unshift","indexDB","instance","resolve"],"sources":["../../../../src/plugins/foundationdb/rx-storage-instance-foundationdb.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentWriteData,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport type {\n    FoundationDBDatabase,\n    FoundationDBIndexMeta,\n    FoundationDBStorageInternals,\n    RxStorageFoundationDB,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageFoundationDBSettings\n} from './foundationdb-types';\n// import {\n//     open as foundationDBOpen,\n//     directory as foundationDBDirectory,\n//     encoders as foundationDBEncoders,\n//     keySelector as foundationDBKeySelector,\n//     StreamingMode as foundationDBStreamingMode\n// } from 'foundationdb';\nimport {\n    categorizeBulkWriteRows,\n    getNewestOfDocumentStates\n} from '../../rx-storage-helper';\nimport {\n\n    CLEANUP_INDEX,\n    getFoundationDBIndexName\n} from './foundationdb-helpers';\nimport { newRxError } from '../../rx-error';\nimport {\n    getIndexableStringMonad,\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport {\n    ensureNotFalsy, lastOfArray, now\n    , PROMISE_RESOLVE_VOID\n} from '../../util';\nimport { queryFoundationDB } from './foundationdb-query';\nimport { INDEX_MAX } from '../../query-planner';\nimport { attachmentMapKey } from '../memory';\n\nexport class RxStorageInstanceFoundationDB<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    FoundationDBStorageInternals<RxDocType>,\n    RxStorageFoundationDBInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n    public closed = false;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n\n    constructor(\n        public readonly storage: RxStorageFoundationDB,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: FoundationDBStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageFoundationDBInstanceCreationOptions>,\n        public readonly settings: RxStorageFoundationDBSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined = null as any;\n        const result = await dbs.root.doTransaction(async (tx: any) => {\n            const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                success: {},\n                error: {}\n            };\n\n            const ids = documentWrites.map(row => (row.document as any)[this.primaryPath]);\n            const mainTx = tx.at(dbs.main.subspace);\n            const attachmentTx = tx.at(dbs.attachments.subspace);\n            const docsInDB = new Map<string, RxDocumentData<RxDocType>>();\n            /**\n             * TODO this might be faster if fdb\n             * any time adds a bulk-fetch-by-key method.\n             */\n            await Promise.all(\n                ids.map(async (id) => {\n                    const doc = await mainTx.get(id);\n                    docsInDB.set(id, doc);\n                })\n            );\n\n\n            categorized = categorizeBulkWriteRows<RxDocType>(\n                this,\n                this.primaryPath as any,\n                docsInDB,\n                documentWrites,\n                context\n            );\n\n            ret.error = categorized.errors;\n\n            // INSERTS\n            categorized.bulkInsertDocs.forEach(writeRow => {\n                const docId: string = writeRow.document[this.primaryPath] as any;\n                ret.success[docId] = writeRow.document;\n\n                // insert document data\n                mainTx.set(docId, writeRow.document);\n\n                // insert secondary indexes\n                Object.values(dbs.indexes).forEach(indexMeta => {\n                    const indexString = indexMeta.getIndexableString(writeRow.document);\n                    const indexTx = tx.at(indexMeta.db.subspace);\n                    indexTx.set(indexString, docId);\n                });\n            });\n            // UPDATES\n            categorized.bulkUpdateDocs.forEach((writeRow: BulkWriteRow<RxDocType>) => {\n                const docId: string = writeRow.document[this.primaryPath] as any;\n\n                // overwrite document data\n                mainTx.set(docId, writeRow.document);\n\n                // update secondary indexes\n                Object.values(dbs.indexes).forEach(indexMeta => {\n                    const oldIndexString = indexMeta.getIndexableString(ensureNotFalsy(writeRow.previous));\n                    const newIndexString = indexMeta.getIndexableString(writeRow.document);\n                    if (oldIndexString !== newIndexString) {\n                        const indexTx = tx.at(indexMeta.db.subspace);\n                        indexTx.delete(oldIndexString);\n                        indexTx.set(newIndexString, docId);\n                    }\n                });\n                ret.success[docId] = writeRow.document;\n            });\n\n            // attachments\n            categorized.attachmentsAdd.forEach(attachment => {\n                attachmentTx.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    attachment.attachmentData\n                );\n            });\n            categorized.attachmentsUpdate.forEach(attachment => {\n                attachmentTx.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    attachment.attachmentData\n                );\n            });\n            categorized.attachmentsRemove.forEach(attachment => {\n                attachmentTx.delete(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId)\n                );\n            });\n\n            return ret;\n        });\n        /**\n         * The events must be emitted AFTER the transaction\n         * has finished.\n         * Otherwise an observable changestream might cause a read\n         * to a document that does not already exist outside of the transaction.\n         */\n        if (ensureNotFalsy(categorized).eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates<any>(\n                this.primaryPath as any,\n                Object.values(result.success)\n            );\n            ensureNotFalsy(categorized).eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(ensureNotFalsy(categorized).eventBulk);\n        }\n        return result;\n    }\n\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const dbs = await this.internals.dbsPromise;\n        return dbs.main.doTransaction(async (tx: any) => {\n            const ret: RxDocumentDataById<RxDocType> = {};\n            await Promise.all(\n                ids.map(async (docId) => {\n                    const docInDb = await tx.get(docId);\n                    if (\n                        docInDb &&\n                        (\n                            !docInDb._deleted ||\n                            withDeleted\n                        )\n                    ) {\n                        ret[docId] = docInDb;\n                    }\n                })\n            );\n            return ret;\n        });\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return queryFoundationDB(this, preparedQuery);\n    }\n    async getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        const dbs = await this.internals.dbsPromise;\n        const attachment = await dbs.attachments.get(attachmentMapKey(documentId, attachmentId));\n        return attachment.data;\n    }\n    async getChangedDocumentsSince(limit: number, checkpoint?: RxStorageDefaultCheckpoint): Promise<{ documents: RxDocumentData<RxDocType>[]; checkpoint: RxStorageDefaultCheckpoint; }> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const dbs = await this.internals.dbsPromise;\n        const index = [\n            '_meta.lwt',\n            this.primaryPath as any\n        ];\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        let lowerBoundString = '';\n        if (checkpoint) {\n            const checkpointPartialDoc: any = {\n                [this.primaryPath]: checkpoint.id,\n                _meta: {\n                    lwt: checkpoint.lwt\n                }\n            };\n            lowerBoundString = indexMeta.getIndexableString(checkpointPartialDoc);\n        }\n        const result: RxDocumentData<RxDocType>[] = await dbs.root.doTransaction(async (tx: any) => {\n            let innerResult: RxDocumentData<RxDocType>[] = [];\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                INDEX_MAX,\n                {\n                    limit,\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(\n                docIds.map((docId: string) => mainTx.get(docId))\n            );\n            innerResult = innerResult.concat(docsData);\n            return innerResult;\n        });\n        const lastDoc = lastOfArray(result);\n        return {\n            documents: result,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocType>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        const dbs = await this.internals.dbsPromise;\n        await dbs.root.doTransaction((tx: any) => {\n            tx.clearRange('', INDEX_MAX);\n            return PROMISE_RESOLVE_VOID;\n        });\n        return this.close();\n    }\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const {\n            keySelector,\n            StreamingMode\n        } = require('foundationdb');\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const dbs = await this.internals.dbsPromise;\n        const index = CLEANUP_INDEX;\n        const indexName = getFoundationDBIndexName(index);\n        const indexMeta = dbs.indexes[indexName];\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                /**\n                 * Do not use 0 here,\n                 * because 1 is the minimum value for _meta.lwt\n                 */\n                1\n            ]\n        );\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            [\n                true,\n                maxDeletionTime\n            ]\n        );\n        let noMoreUndeleted: boolean = true;\n        await dbs.root.doTransaction(async (tx: any) => {\n            const batchSize = ensureNotFalsy(this.settings.batchSize);\n            const indexTx = tx.at(indexMeta.db.subspace);\n            const mainTx = tx.at(dbs.main.subspace);\n            const range = await indexTx.getRangeAll(\n                keySelector.firstGreaterThan(lowerBoundString),\n                upperBoundString,\n                {\n                    limit: batchSize + 1, // get one more extra to detect what to return from cleanup()\n                    streamingMode: StreamingMode.Exact\n                }\n            );\n            if (range.length > batchSize) {\n                noMoreUndeleted = false;\n                range.pop();\n            }\n            const docIds = range.map((row: string[]) => row[1]);\n            const docsData: RxDocumentData<RxDocType>[] = await Promise.all(docIds.map((docId: string) => mainTx.get(docId)));\n\n            Object\n                .values(dbs.indexes)\n                .forEach(indexMeta => {\n                    const subIndexDB = tx.at(indexMeta.db.subspace);\n                    docsData.forEach(docData => {\n                        const indexString = indexMeta.getIndexableString(docData);\n                        subIndexDB.delete(indexString);\n                    });\n                });\n            docIds.forEach((id: string) => mainTx.delete(id));\n        });\n\n        return noMoreUndeleted;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject<any>().asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async close() {\n        if (this.closed) {\n            return Promise.reject(newRxError('SNH', {\n                database: this.databaseName,\n                collection: this.collectionName\n            }));\n        }\n        this.closed = true;\n        this.changes$.complete();\n\n        const dbs = await this.internals.dbsPromise;\n        dbs.root.close();\n\n        // TODO shouldnt we close the index databases?\n        // Object.values(dbs.indexes).forEach(db => db.close());\n    }\n}\n\n\nexport function createFoundationDBStorageInstance<RxDocType>(\n    storage: RxStorageFoundationDB,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageFoundationDBInstanceCreationOptions>,\n    settings: RxStorageFoundationDBSettings\n): Promise<RxStorageInstanceFoundationDB<RxDocType>> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const {\n        open,\n        directory,\n        encoders\n    } = require('foundationdb');\n\n    const connection = open(settings.clusterFile);\n    const dbsPromise = (async () => {\n        const dir = await directory.createOrOpen(connection, 'rxdb');\n\n        const root = connection\n            .at(dir)\n            .at(params.databaseName + '.')\n            .at(params.collectionName + '.')\n            .at(params.schema.version + '.');\n        const main: FoundationDBDatabase<RxDocType> = root\n            .at('main.')\n            .withKeyEncoding(encoders.string) // automatically encode & decode keys using tuples\n            .withValueEncoding(encoders.json) as any; // and values using JSON\n\n\n        const events: FoundationDBDatabase<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = root\n            .at('events.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n        const attachments: FoundationDBDatabase<RxAttachmentWriteData> = root\n            .at('attachments.')\n            .withKeyEncoding(encoders.string)\n            .withValueEncoding(encoders.json) as any;\n\n\n        const indexDBs: { [indexName: string]: FoundationDBIndexMeta<RxDocType> } = {};\n        const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n        useIndexes.push([primaryPath]);\n        const useIndexesFinal = useIndexes.map(index => {\n            const indexAr = Array.isArray(index) ? index.slice(0) : [index];\n            indexAr.unshift('_deleted');\n            return indexAr;\n        })\n        // used for `getChangedDocumentsSince()`\n        useIndexesFinal.push([\n            '_meta.lwt',\n            primaryPath\n        ]);\n        useIndexesFinal.push(CLEANUP_INDEX);\n        useIndexesFinal.forEach(indexAr => {\n            const indexName = getFoundationDBIndexName(indexAr);\n            const indexDB = root.at(indexName + '.')\n                .withKeyEncoding(encoders.string)\n                .withValueEncoding(encoders.string);\n            indexDBs[indexName] = {\n                indexName,\n                db: indexDB,\n                getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n                index: indexAr\n            };\n        });\n\n        return {\n            root,\n            main,\n            events,\n            attachments,\n            indexes: indexDBs\n        };\n    })();\n\n\n    const internals: FoundationDBStorageInternals<RxDocType> = {\n        connection,\n        dbsPromise: dbsPromise\n    };\n\n    const instance = new RxStorageInstanceFoundationDB(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}