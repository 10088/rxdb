{"version":3,"sources":["../../../../src/plugins/local-documents/rx-local-document.ts"],"names":["objectPath","distinctUntilChanged","map","overwritable","basePrototype","createRxDocumentConstructor","newRxError","newRxTypeError","writeSingle","flatClone","getDefaultRxDocumentMeta","getFromObjectOrThrow","getLocalDocStateByParent","RxDocumentParent","RxLocalDocumentClass","id","jsonData","parent","state","RxLocalDocumentPrototype","isLocal","_handleChangeEvent","changeEvent","documentId","primary","operation","newData","documentData","_dataSync$","next","docCache","_isDeleted$","allAttachments$","document","primaryPath","$","asObservable","$emit","get","objPath","_data","undefined","valueObj","deepFreezeWhenDevMode","get$","includes","pipe","data","atomicPatch","patch","atomicUpdate","docData","Object","entries","forEach","k","v","_saveData","oldData","getValue","storageInstance","bulkWrite","previous","then","res","docResult","success","error","_rev","remove","writeData","_deleted","_meta","_attachments","INIT_DONE","_init","docBaseProto","props","getOwnPropertyNames","key","exists","getOwnPropertyDescriptor","desc","defineProperty","getThrowingFun","functionName","createRxLocalDocument","newDoc","__proto__","set"],"mappings":"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","sourcesContent":["import objectPath from 'object-path';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { overwritable } from '../../overwritable';\nimport { basePrototype, createRxDocumentConstructor } from '../../rx-document';\nimport { newRxError, newRxTypeError } from '../../rx-error';\nimport { writeSingle } from '../../rx-storage-helper';\nimport type {\n    LocalDocumentState,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocument,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxLocalDocument,\n    RxLocalDocumentData\n} from '../../types';\nimport { flatClone, getDefaultRxDocumentMeta, getFromObjectOrThrow } from '../../util';\nimport { getLocalDocStateByParent } from './local-documents-helper';\n\nconst RxDocumentParent = createRxDocumentConstructor() as any;\n\nclass RxLocalDocumentClass<DocData = any> extends RxDocumentParent {\n    constructor(\n        public readonly id: string,\n        jsonData: DocData,\n        public readonly parent: RxCollection | RxDatabase,\n        public readonly state: LocalDocumentState\n    ) {\n        super(null, jsonData);\n    }\n}\n\n\n\nconst RxLocalDocumentPrototype: any = {\n    get isLocal() {\n        return true;\n    },\n\n    //\n    // overwrites\n    //\n\n    _handleChangeEvent(\n        this: any,\n        changeEvent: RxChangeEvent<RxLocalDocumentData>\n    ) {\n        if (changeEvent.documentId !== this.primary) {\n            return;\n        }\n        switch (changeEvent.operation) {\n            case 'UPDATE':\n                const newData = changeEvent.documentData;\n                this._dataSync$.next(newData);\n                break;\n            case 'DELETE':\n                // remove from docCache to assure new upserted RxDocuments will be a new instance\n                const docCache = this.state.docCache;\n                docCache.delete(this.primary);\n                this._isDeleted$.next(true);\n                break;\n        }\n    },\n\n    get allAttachments$() {\n        // this is overwritten here because we cannot re-set getters on the prototype\n        throw newRxError('LD1', {\n            document: this\n        });\n    },\n    get primaryPath() {\n        return 'id';\n    },\n    get primary() {\n        return this.id;\n    },\n    get $() {\n        return (this as RxDocument)._dataSync$.asObservable();\n    },\n    $emit(this: any, changeEvent: RxChangeEvent<RxLocalDocumentData>) {\n        return this.parent.$emit(changeEvent);\n    },\n    get(this: RxDocument, objPath: string) {\n        objPath = 'data.' + objPath;\n\n        if (!this._data) {\n            return undefined;\n        }\n        if (typeof objPath !== 'string') {\n            throw newRxTypeError('LD2', {\n                objPath\n            });\n        }\n\n        let valueObj = objectPath.get(this._data, objPath);\n        valueObj = overwritable.deepFreezeWhenDevMode(valueObj);\n        return valueObj;\n    },\n    get$(this: RxDocument, objPath: string) {\n        objPath = 'data.' + objPath;\n\n        if (objPath.includes('.item.')) {\n            throw newRxError('LD3', {\n                objPath\n            });\n        }\n        if (objPath === this.primaryPath) {\n            throw newRxError('LD4');\n        }\n\n        return this._dataSync$\n            .pipe(\n                map(data => objectPath.get(data, objPath)),\n                distinctUntilChanged()\n            );\n    },\n    atomicPatch(patch: Partial<any>) {\n        return this.atomicUpdate((docData: any) => {\n            Object\n                .entries(patch)\n                .forEach(([k, v]) => {\n                    (docData as any).data[k] = v;\n                });\n            return docData;\n        });\n    },\n    async _saveData(this: RxLocalDocument<any>, newData: RxDocumentData<RxLocalDocumentData>) {\n        const state = await getLocalDocStateByParent(this.parent);\n        const oldData: RxDocumentData<RxLocalDocumentData> = this._dataSync$.getValue() as any;\n        newData.id = (this as any).id;\n        return state.storageInstance.bulkWrite([{\n            previous: oldData,\n            document: newData\n        }])\n            .then((res) => {\n                const docResult = res.success[newData.id];\n                if (!docResult) {\n                    throw getFromObjectOrThrow(res.error, newData.id);\n                }\n                newData = flatClone(newData);\n                newData._rev = docResult._rev;\n            });\n    },\n\n    async remove(this: any): Promise<void> {\n        const state = await getLocalDocStateByParent(this.parent);\n        const writeData: RxDocumentWriteData<RxLocalDocumentData> = {\n            id: this.id,\n            data: {},\n            _deleted: true,\n            _meta: getDefaultRxDocumentMeta(),\n            _attachments: {}\n        };\n        return writeSingle(state.storageInstance, {\n            previous: this._data,\n            document: writeData\n        })\n            .then(() => {\n                this.state.docCache.delete(this.id);\n            });\n    }\n};\n\n\n\nlet INIT_DONE = false;\nconst _init = () => {\n    if (INIT_DONE) return;\n    else INIT_DONE = true;\n\n    // add functions of RxDocument\n    const docBaseProto = basePrototype;\n    const props = Object.getOwnPropertyNames(docBaseProto);\n    props.forEach(key => {\n        const exists = Object.getOwnPropertyDescriptor(RxLocalDocumentPrototype, key);\n        if (exists) return;\n        const desc: any = Object.getOwnPropertyDescriptor(docBaseProto, key);\n        Object.defineProperty(RxLocalDocumentPrototype, key, desc);\n    });\n\n\n    /**\n     * Overwrite things that do not work on local documents\n     * with a throwing function.\n     */\n    const getThrowingFun = (k: string) => () => {\n        throw newRxError('LD6', {\n            functionName: k\n        });\n    };\n    [\n        'populate',\n        'update',\n        'putAttachment',\n        'getAttachment',\n        'allAttachments'\n    ].forEach((k: string) => RxLocalDocumentPrototype[k] = getThrowingFun(k));\n};\n\n\n\nexport function createRxLocalDocument<DocData>(\n    id: string,\n    data: RxDocumentData<RxLocalDocumentData<DocData>>,\n    parent: any,\n    state: LocalDocumentState\n): RxLocalDocument<DocData> {\n    _init();\n    const newDoc = new RxLocalDocumentClass(id, data, parent, state);\n    newDoc.__proto__ = RxLocalDocumentPrototype;\n    state.docCache.set(id, newDoc as any);\n    return newDoc as any;\n}\n"],"file":"rx-local-document.js"}