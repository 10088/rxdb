{"version":3,"sources":["../../../../src/plugins/local-documents/local-documents.ts"],"names":["flatClone","getDefaultRevision","getDefaultRxDocumentMeta","filter","map","startWith","mergeMap","createRxLocalDocument","getLocalDocStateByParent","getSingleDocument","writeSingle","getLocal","id","state","docCache","found","get","Promise","resolve","storageInstance","then","docData","doc","insertLocal","data","_deleted","_meta","_rev","_attachments","document","res","newDoc","upsertLocal","existing","docPromise","newData","_data","atomicUpdate","getLocal$","$","pipe","cE","changeEvent","changeEventOrDoc","isLocal","documentId","use","filterFlagged"],"mappings":"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","sourcesContent":["import {\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta\n} from '../../util';\n\nimport type {\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocument,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxLocalDocument,\n    RxLocalDocumentData\n} from '../../types';\n\nimport {\n    filter,\n    map,\n    startWith,\n    mergeMap\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { createRxLocalDocument } from './rx-local-document';\nimport { getLocalDocStateByParent } from './local-documents-helper';\nimport { getSingleDocument, writeSingle } from '../../rx-storage-helper';\n\n\n\n/**\n * save the local-document-data\n * throws if already exists\n */\nexport async function insertLocal<DocData = any>(\n    this: RxDatabase | RxCollection,\n    id: string,\n    data: DocData\n): Promise<RxLocalDocument<DocData>> {\n    const state = await getLocalDocStateByParent(this);\n\n    // create new one\n    let docData: RxDocumentWriteData<RxLocalDocumentData<DocData>> = {\n        id: id,\n        data,\n        _deleted: false,\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n    };\n\n    return writeSingle(\n        state.storageInstance,\n        {\n            document: docData\n        }\n    ).then(res => {\n        docData = flatClone(docData);\n        docData._rev = res._rev;\n        const newDoc = createRxLocalDocument(id, docData as any, this, state);\n        return newDoc as any;\n    });\n}\n\n/**\n * save the local-document-data\n * overwrites existing if exists\n */\nexport function upsertLocal<DocData = any>(\n    this: any,\n    id: string,\n    data: DocData\n): Promise<RxLocalDocument<DocData>> {\n    return this.getLocal(id)\n        .then((existing: RxDocument) => {\n            if (!existing) {\n                // create new one\n                const docPromise = this.insertLocal(id, data);\n                return docPromise;\n            } else {\n                // update existing\n                const newData: RxDocumentData<RxLocalDocumentData<DocData>> = {\n                    id,\n                    data,\n                    _rev: existing._data._rev,\n                    _deleted: false,\n                    _attachments: {},\n                    _meta: getDefaultRxDocumentMeta()\n                };\n\n                return existing.atomicUpdate(() => {\n                    newData._rev = existing._data._rev;\n                    return newData;\n                }).then(() => existing);\n            }\n        });\n}\n\nexport async function getLocal<DocData = any>(this: any, id: string): Promise<RxLocalDocument<DocData> | null> {\n    const state = await getLocalDocStateByParent(this);\n    const docCache = state.docCache;\n\n    // check in doc-cache\n    const found = docCache.get(id);\n    if (found) {\n        return Promise.resolve(found as any);\n    }\n\n    // if not found, check in storage instance\n    return getSingleDocument(state.storageInstance, id)\n        .then((docData) => {\n            if (!docData) {\n                return null;\n            }\n            const doc = createRxLocalDocument(id, docData, this, state);\n            return doc as any;\n        })\n        .catch(() => null);\n}\n\nexport function getLocal$<DocData = any>(this: RxCollection, id: string): Observable<RxLocalDocument<DocData> | null> {\n    return this.$.pipe(\n        startWith(null),\n        mergeMap(async (cE: RxChangeEvent<RxLocalDocumentData> | null) => {\n            if (cE) {\n                return {\n                    changeEvent: cE\n                };\n            } else {\n                const doc = await this.getLocal(id);\n                return {\n                    doc: doc\n                };\n            }\n        }),\n        mergeMap(async (changeEventOrDoc) => {\n            if (changeEventOrDoc.changeEvent) {\n                const cE = changeEventOrDoc.changeEvent;\n                if (!cE.isLocal || cE.documentId !== id) {\n                    return {\n                        use: false\n                    };\n                } else {\n                    const doc = await this.getLocal(id);\n                    return {\n                        use: true,\n                        doc: doc\n                    };\n                }\n            } else {\n                return {\n                    use: true,\n                    doc: changeEventOrDoc.doc\n                };\n            }\n        }),\n        filter(filterFlagged => filterFlagged.use),\n        map(filterFlagged => {\n            return filterFlagged.doc as any;\n        })\n    );\n}\n"],"file":"local-documents.js"}