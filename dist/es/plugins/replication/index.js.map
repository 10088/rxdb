{"version":3,"file":"index.js","names":["BehaviorSubject","mergeMap","Subject","ensureNotFalsy","fastUnsecureHash","flatClone","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_TRUE","awaitRxStorageReplicationFirstInSync","awaitRxStorageReplicationInSync","replicateRxStorageInstance","RX_REPLICATION_META_INSTANCE_SCHEMA","newRxError","DEFAULT_MODIFIER","swapDefaultDeletedTodeletedField","swapdeletedFieldToDefaultDeleted","addConnectedStorageToCollection","body","recover","result","e","then","pact","state","value","s","v","o","bind","observer","prototype","onFulfilled","onRejected","callback","_this","thenable","test","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","REPLICATION_STATE_BY_COLLECTION","WeakMap","RxReplicationState","replicationIdentifierHash","collection","deletedField","pull","push","live","retryTime","autoStart","subs","subjects","received","send","error","canceled","active","initialReplicationComplete","received$","asObservable","send$","error$","canceled$","active$","callOnStart","undefined","remoteEvents$","replicationStates","get","set","onDestroy","cancel","Object","keys","forEach","key","defineProperty","startPromise","Promise","res","start","isStopped","pullModifier","modifier","pushModifier","database","metaInstanceCollectionName","name","all","storage","createStorageInstance","databaseName","collectionName","databaseInstanceToken","token","multiInstance","options","schema","metaInstance","internalReplicationState","pushBatchSize","batchSize","pullBatchSize","forkInstance","storageInstance","hashFunction","identifier","conflictHandler","replicationHandler","masterChangeStream$","pipe","ev","useEv","documents","map","doc","d","masterChangesSince","checkpoint","useResult","done","handler","err","emitError","errors","Array","isArray","direction","next","promiseWait","masterWrite","rows","row","newDocumentState","assumedMasterState","useRows","conflicts","pushRows","events","subscribe","processed","down","document","up","writeToMasterRow","stream$","getValue","awaitInitialReplication","awaitInSync","reSync","emitEvent","promises","checkpointQueue","close","sub","unsubscribe","complete","replicateRxCollection","replicationIdentifier","waitForLeadership","join","replicationState","startReplicationOnLeaderShip","mustWaitForLeadership","waitTillRun"],"sources":["../../../../src/plugins/replication/index.ts"],"sourcesContent":["/**\n * This plugin contains the primitives to create\n * a RxDB client-server replication.\n * It is used in the other replication plugins\n * but also can be used as standalone with a custom replication handler.\n */\n\nimport {\n    BehaviorSubject,\n    mergeMap,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport type {\n    ReplicationOptions,\n    ReplicationPullHandlerResult,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxCollection,\n    RxDocumentData,\n    RxError,\n    RxReplicationPullStreamItem,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    RxTypeError,\n    WithDeleted\n} from '../../types';\nimport {\n    ensureNotFalsy,\n    fastUnsecureHash,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_TRUE\n} from '../../util';\nimport {\n    awaitRxStorageReplicationFirstInSync,\n    awaitRxStorageReplicationInSync,\n    replicateRxStorageInstance,\n    RX_REPLICATION_META_INSTANCE_SCHEMA\n} from '../../replication-protocol';\nimport { newRxError } from '../../rx-error';\nimport {\n    DEFAULT_MODIFIER,\n    swapDefaultDeletedTodeletedField,\n    swapdeletedFieldToDefaultDeleted\n} from './replication-helper';\nimport { addConnectedStorageToCollection } from '../../rx-database-internal-store';\n\n\nexport const REPLICATION_STATE_BY_COLLECTION: WeakMap<RxCollection, RxReplicationState<any, any>[]> = new WeakMap();\n\nexport class RxReplicationState<RxDocType, CheckpointType> {\n    public readonly subs: Subscription[] = [];\n    public readonly subjects = {\n        received: new Subject<RxDocumentData<RxDocType>>(), // all documents that are received from the endpoint\n        send: new Subject<WithDeleted<RxDocType>>(), // all documents that are send to the endpoint\n        error: new Subject<RxError | RxTypeError>(), // all errors that are received from the endpoint, emits new Error() objects\n        canceled: new BehaviorSubject<boolean>(false), // true when the replication was canceled\n        active: new BehaviorSubject<boolean>(false), // true when something is running, false when not\n        initialReplicationComplete: new BehaviorSubject<boolean>(false) // true the initial replication-cycle is over\n    };\n\n\n    readonly received$: Observable<RxDocumentData<RxDocType>> = this.subjects.received.asObservable();\n    readonly send$: Observable<WithDeleted<RxDocType>> = this.subjects.send.asObservable();\n    readonly error$: Observable<RxError | RxTypeError> = this.subjects.error.asObservable();\n    readonly canceled$: Observable<any> = this.subjects.canceled.asObservable();\n    readonly active$: Observable<boolean> = this.subjects.active.asObservable();\n\n    private startPromise: Promise<void>;\n    constructor(\n        /**\n         * hash of the identifier, used to flag revisions\n         * and to identify which documents state came from the remote.\n         */\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean,\n    ) {\n        let replicationStates = REPLICATION_STATE_BY_COLLECTION.get(collection);\n        if (!replicationStates) {\n            replicationStates = [];\n            REPLICATION_STATE_BY_COLLECTION.set(collection, replicationStates);\n        }\n        replicationStates.push(this);\n\n\n        // stop the replication when the collection gets destroyed\n        this.collection.onDestroy.push(() => this.cancel());\n\n        // create getters for the observables\n        Object.keys(this.subjects).forEach(key => {\n            Object.defineProperty(this, key + '$', {\n                get: function () {\n                    return this.subjects[key].asObservable();\n                }\n            });\n        });\n\n        const startPromise = new Promise<void>(res => {\n            this.callOnStart = res;\n        });\n        this.startPromise = startPromise;\n    }\n\n    private callOnStart: () => void = undefined as any;\n\n    public internalReplicationState?: RxStorageInstanceReplicationState<RxDocType>;\n    public metaInstance?: RxStorageInstance<RxStorageReplicationMeta, any, {}, any>;\n    public remoteEvents$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    public async start(): Promise<void> {\n        if (this.isStopped()) {\n            return;\n        }\n\n        // fill in defaults for pull & push\n        const pullModifier = this.pull && this.pull.modifier ? this.pull.modifier : DEFAULT_MODIFIER;\n        const pushModifier = this.push && this.push.modifier ? this.push.modifier : DEFAULT_MODIFIER;\n\n        const database = this.collection.database;\n\n        const metaInstanceCollectionName = this.collection.name + '-rx-replication-' + this.replicationIdentifierHash;\n\n        const [metaInstance] = await Promise.all([\n            this.collection.database.storage.createStorageInstance({\n                databaseName: database.name,\n                collectionName: metaInstanceCollectionName,\n                databaseInstanceToken: database.token,\n                multiInstance: database.multiInstance, // TODO is this always false?\n                options: {},\n                schema: RX_REPLICATION_META_INSTANCE_SCHEMA\n            }),\n            addConnectedStorageToCollection(\n                this.collection,\n                metaInstanceCollectionName,\n                RX_REPLICATION_META_INSTANCE_SCHEMA\n            )\n        ]);\n        this.metaInstance = metaInstance;\n\n\n        this.internalReplicationState = replicateRxStorageInstance({\n            pushBatchSize: this.push && this.push.batchSize ? this.push.batchSize : 100,\n            pullBatchSize: this.pull && this.pull.batchSize ? this.pull.batchSize : 100,\n            forkInstance: this.collection.storageInstance,\n            metaInstance: this.metaInstance,\n            hashFunction: database.hashFunction,\n            identifier: 'rx-replication-' + this.replicationIdentifierHash,\n            conflictHandler: this.collection.conflictHandler,\n            replicationHandler: {\n                masterChangeStream$: this.remoteEvents$.asObservable().pipe(\n                    mergeMap(async (ev) => {\n                        if (ev === 'RESYNC') {\n                            return ev;\n                        }\n                        const useEv = flatClone(ev);\n                        if (this.deletedField !== '_deleted') {\n                            useEv.documents = useEv.documents.map(doc => swapdeletedFieldToDefaultDeleted(this.deletedField, doc))\n                        }\n                        useEv.documents = await Promise.all(\n                            useEv.documents.map(d => pullModifier(d))\n                        );\n                        return useEv;\n                    })\n                ),\n                masterChangesSince: async (\n                    checkpoint: CheckpointType,\n                    batchSize: number\n                ) => {\n                    if (!this.pull) {\n                        return {\n                            checkpoint: null,\n                            documents: []\n                        };\n                    }\n\n                    /**\n                     * Retries must be done here in the replication primitives plugin,\n                     * because the replication protocol itself has no\n                     * error handling.\n                     */\n                    let done = false;\n                    let result: ReplicationPullHandlerResult<RxDocType, CheckpointType> = {} as any;\n                    while (!done) {\n                        try {\n                            result = await this.pull.handler(\n                                checkpoint,\n                                batchSize\n                            );\n                            done = true;\n                        } catch (err: any | Error | Error[]) {\n                            const emitError = newRxError('RC_PULL', {\n                                checkpoint,\n                                errors: Array.isArray(err) ? err : [err],\n                                direction: 'pull'\n                            });\n                            this.subjects.error.next(emitError);\n                            await this.collection.promiseWait(ensureNotFalsy(this.retryTime));\n                        }\n                    }\n\n                    const useResult = flatClone(result);\n                    if (this.deletedField !== '_deleted') {\n                        useResult.documents = useResult.documents.map(doc => swapdeletedFieldToDefaultDeleted(this.deletedField, doc))\n                    }\n                    useResult.documents = await Promise.all(\n                        useResult.documents.map(d => pullModifier(d))\n                    );\n\n                    return useResult;\n                },\n                masterWrite: async (\n                    rows: RxReplicationWriteToMasterRow<RxDocType>[]\n                ) => {\n                    if (!this.push) {\n                        return [];\n                    }\n                    let done = false;\n                    const useRows = await Promise.all(\n                        rows.map(async (row) => {\n                            row.newDocumentState = await pushModifier(row.newDocumentState);\n                            if (row.assumedMasterState) {\n                                row.assumedMasterState = await pushModifier(row.assumedMasterState);\n                            }\n\n                            if (this.deletedField !== '_deleted') {\n                                row.newDocumentState = swapDefaultDeletedTodeletedField(this.deletedField, row.newDocumentState) as any;\n                                if (row.assumedMasterState) {\n                                    row.assumedMasterState = swapDefaultDeletedTodeletedField(this.deletedField, row.assumedMasterState) as any;\n                                }\n                            }\n\n                            return row;\n                        })\n                    );\n\n                    let result: WithDeleted<RxDocType>[] = {} as any;\n                    while (!done) {\n                        try {\n                            result = await this.push.handler(useRows);\n                            done = true;\n                        } catch (err: any | Error | Error[]) {\n                            const emitError = newRxError('RC_PUSH', {\n                                pushRows: rows,\n                                errors: Array.isArray(err) ? err : [err],\n                                direction: 'push'\n                            });\n                            this.subjects.error.next(emitError);\n                            await this.collection.promiseWait(ensureNotFalsy(this.retryTime));\n                        }\n                    }\n\n\n                    const conflicts = ensureNotFalsy(result).map(doc => swapdeletedFieldToDefaultDeleted(this.deletedField, doc));\n                    return conflicts;\n                }\n            }\n        });\n        this.subs.push(\n            this.internalReplicationState.events.error.subscribe(err => {\n                this.subjects.error.next(err);\n            })\n        );\n        this.subs.push(\n            this.internalReplicationState.events.processed.down\n                .subscribe(row => this.subjects.received.next(row.document))\n        );\n        this.subs.push(\n            this.internalReplicationState.events.processed.up\n                .subscribe(writeToMasterRow => {\n                    this.subjects.send.next(writeToMasterRow.newDocumentState);\n                })\n        );\n        if (\n            this.pull &&\n            this.pull.stream$ &&\n            this.live\n        ) {\n            this.subs.push(\n                this.pull.stream$.subscribe({\n                    next: ev => {\n                        this.remoteEvents$.next(ev);\n                    },\n                    error: err => {\n                        this.subjects.error.next(err);\n                    }\n                })\n            );\n        }\n\n        if (!this.live) {\n            await awaitRxStorageReplicationFirstInSync(this.internalReplicationState);\n            await this.cancel();\n        }\n        this.callOnStart();\n    }\n\n    isStopped(): boolean {\n        if (this.subjects.canceled.getValue()) {\n            return true;\n        }\n        return false;\n    }\n\n    async awaitInitialReplication(): Promise<void> {\n        await this.startPromise;\n        return awaitRxStorageReplicationFirstInSync(\n            ensureNotFalsy(this.internalReplicationState)\n        );\n    }\n\n    /**\n     * Returns a promise that resolves when:\n     * - All local data is replicated with the remote\n     * - No replication cycle is running or in retry-state\n     *\n     * WARNING: USing this function directly in a multi-tab browser application\n     * is dangerous because only the leading instance will ever be replicated,\n     * so this promise will not resolve in the other tabs.\n     * For multi-tab support you should set and observe a flag in a local document.\n     */\n    async awaitInSync(): Promise<true> {\n        await this.startPromise;\n        await awaitRxStorageReplicationFirstInSync(ensureNotFalsy(this.internalReplicationState));\n        await awaitRxStorageReplicationInSync(ensureNotFalsy(this.internalReplicationState));\n        return true;\n    }\n\n    reSync() {\n        this.remoteEvents$.next('RESYNC');\n    }\n    emitEvent(ev: RxReplicationPullStreamItem<RxDocType, CheckpointType>) {\n        this.remoteEvents$.next(ev);\n    }\n\n    cancel(): Promise<any> {\n        if (this.isStopped()) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        const promises: Promise<any>[] = [];\n\n        if (this.internalReplicationState) {\n            this.internalReplicationState.events.canceled.next(true);\n        }\n        if (this.metaInstance) {\n            promises.push(\n                ensureNotFalsy(this.internalReplicationState).checkpointQueue\n                    .then(() => ensureNotFalsy(this.metaInstance).close())\n            );\n        }\n\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.subjects.canceled.next(true);\n\n        this.subjects.active.complete();\n        this.subjects.canceled.complete();\n        this.subjects.error.complete();\n        this.subjects.received.complete();\n        this.subjects.send.complete();\n\n        return Promise.all(promises);\n    }\n}\n\n\nexport function replicateRxCollection<RxDocType, CheckpointType>(\n    {\n        replicationIdentifier,\n        collection,\n        deletedField = '_deleted',\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5,\n        waitForLeadership = true,\n        autoStart = true,\n    }: ReplicationOptions<RxDocType, CheckpointType>\n): RxReplicationState<RxDocType, CheckpointType> {\n    const replicationIdentifierHash = fastUnsecureHash(\n        [\n            collection.database.name,\n            collection.name,\n            replicationIdentifier\n        ].join('|')\n    );\n    const replicationState = new RxReplicationState<RxDocType, CheckpointType>(\n        replicationIdentifierHash,\n        collection,\n        deletedField,\n        pull,\n        push,\n        live,\n        retryTime,\n        autoStart\n    );\n\n\n    startReplicationOnLeaderShip(waitForLeadership, replicationState);\n    return replicationState as any;\n}\n\n\nexport function startReplicationOnLeaderShip(\n    waitForLeadership: boolean,\n    replicationState: RxReplicationState<any, any>\n) {\n    /**\n     * Always await this Promise to ensure that the current instance\n     * is leader when waitForLeadership=true\n     */\n    const mustWaitForLeadership = waitForLeadership && replicationState.collection.database.multiInstance;\n    const waitTillRun: Promise<any> = mustWaitForLeadership ? replicationState.collection.database.waitForLeadership() : PROMISE_RESOLVE_TRUE;\n    return waitTillRun.then(() => {\n        if (replicationState.isStopped()) {\n            return;\n        }\n        if (replicationState.autoStart) {\n            replicationState.start();\n        }\n    });\n}\n"],"mappings":"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"}