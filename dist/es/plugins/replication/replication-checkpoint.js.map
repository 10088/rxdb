{"version":3,"sources":["../../../../src/plugins/replication/replication-checkpoint.ts"],"names":["findLocalDocument","writeSingleLocal","flatClone","getDefaultRxDocumentMeta","newRxError","wasLastWriteFromPullReplication","runPluginHooks","pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","setLastPullDocument","collection","replicationIdentifier","doc","_id","pullLastDocumentId","localDocumentsStore","localDoc","document","_meta","_deleted","_attachments","newDoc","previous","getLastPullDocument","getChangesSinceLastPushSequence","replicationIdentifierHash","isStopped","batchSize","getLastPushSequence","lastPushSequence","changedDocIds","changedDocs","lastSequence","hasChangesSinceLastSequence","retry","Map","Set","storageInstance","getChangedDocuments","sinceSequence","limit","direction","changesResults","changedDocuments","length","docIds","map","row","id","findDocumentsById","docs","forEach","has","changedDoc","args","hookParams","add","set","sequence","size","setLastPushSequence","pushSequenceId","res"],"mappings":"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","sourcesContent":["import type {\n    RxCollection,\n    RxLocalDocumentData,\n    RxDocumentData,\n    ReplicationCheckpointDocument\n} from '../../types';\nimport {\n    findLocalDocument,\n    writeSingleLocal\n} from '../../rx-storage-helper';\nimport { flatClone, getDefaultRxDocumentMeta } from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { wasLastWriteFromPullReplication } from './revision-flag';\nimport { runPluginHooks } from '../../hooks';\n\n//\n// things for the push-checkpoint\n//\n\nconst pushSequenceId = (replicationIdentifier: string) => 'replication-checkpoint-push-' + replicationIdentifier;\nconst pullLastDocumentId = (replicationIdentifier: string) => 'replication-checkpoint-pull-' + replicationIdentifier;\n\n\n/**\n * Get the last push checkpoint\n */\nexport async function getLastPushSequence(\n    collection: RxCollection,\n    replicationIdentifier: string\n): Promise<number> {\n    const doc = await findLocalDocument<ReplicationCheckpointDocument>(\n        collection.localDocumentsStore,\n        pushSequenceId(replicationIdentifier),\n        false\n    );\n    if (!doc) {\n        return 0;\n    } else {\n        return doc.value;\n    }\n}\n\nexport async function setLastPushSequence(\n    collection: RxCollection,\n    replicationIdentifier: string,\n    sequence: number\n): Promise<ReplicationCheckpointDocument> {\n    const _id = pushSequenceId(replicationIdentifier);\n\n    const doc = await findLocalDocument<ReplicationCheckpointDocument>(\n        collection.localDocumentsStore,\n        _id,\n        false\n    );\n    if (!doc) {\n        const res = await writeSingleLocal<ReplicationCheckpointDocument>(\n            collection.localDocumentsStore,\n            {\n                document: {\n                    _id,\n                    value: sequence,\n                    _deleted: false,\n                    _meta: getDefaultRxDocumentMeta(),\n                    _attachments: {}\n                }\n            }\n        );\n        return res as any;\n    } else {\n        const newDoc = flatClone(doc);\n        newDoc.value = sequence;\n        const res = await writeSingleLocal<ReplicationCheckpointDocument>(\n            collection.localDocumentsStore,\n            {\n                previous: doc,\n                document: {\n                    _id,\n                    value: sequence,\n                    _meta: getDefaultRxDocumentMeta(),\n                    _deleted: false,\n                    _attachments: {}\n                }\n            }\n        );\n        return res as any;\n    }\n}\n\n\n\nexport async function getChangesSinceLastPushSequence<RxDocType>(\n    collection: RxCollection<RxDocType, any>,\n    replicationIdentifier: string,\n    replicationIdentifierHash: string,\n    /**\n     * A function that returns true\n     * when the underlaying RxReplication is stopped.\n     * So that we do not run requests against a close RxStorageInstance.\n     */\n    isStopped: () => boolean,\n    batchSize = 10\n): Promise<{\n    // for better performance we also store the ids of the changed docs.\n    changedDocIds: Set<string>,\n    changedDocs: Map<string, {\n        id: string;\n        doc: RxDocumentData<RxDocType>;\n        sequence: number;\n    }>;\n    lastSequence: number;\n    hasChangesSinceLastSequence: boolean;\n}> {\n    let lastPushSequence = await getLastPushSequence(\n        collection,\n        replicationIdentifier\n    );\n\n    let retry = true;\n    let lastSequence: number = lastPushSequence;\n    const changedDocs: Map<string, {\n        id: string;\n        doc: RxDocumentData<RxDocType>;\n        sequence: number;\n    }> = new Map();\n    const changedDocIds: Set<string> = new Set();\n\n    /**\n     * it can happen that all docs in the batch\n     * do not have to be replicated.\n     * Then we have to continue grapping the feed\n     * until we reach the end of it\n     */\n    while (retry && !isStopped()) {\n        const changesResults = await collection.storageInstance.getChangedDocuments({\n            sinceSequence: lastPushSequence,\n            limit: batchSize,\n            direction: 'after'\n        });\n\n        lastSequence = changesResults.lastSequence;\n\n        // optimisation shortcut, do not proceed if there are no changed documents\n        if (changesResults.changedDocuments.length === 0) {\n            retry = false;\n            continue;\n        }\n\n        const docIds = changesResults.changedDocuments.map(row => row.id);\n\n        if (isStopped()) {\n            break;\n        }\n\n\n        const docs = await collection.storageInstance.findDocumentsById(\n            docIds,\n            true\n        );\n\n        changesResults.changedDocuments.forEach((row) => {\n            const id = row.id;\n            if (changedDocs.has(id)) {\n                return;\n            }\n            let changedDoc = docs[id];\n            if (!changedDoc) {\n                throw newRxError('SNH', { args: { docs, docIds } });\n            }\n\n            /**\n             * filter out changes with revisions resulting from the pull-stream\n             * so that they will not be upstreamed again\n             */\n            if (\n                wasLastWriteFromPullReplication(\n                    replicationIdentifierHash,\n                    changedDoc\n                )\n            ) {\n                return false;\n            }\n\n            const hookParams = {\n                collection,\n                doc: changedDoc\n            };\n            runPluginHooks('postReadFromInstance', hookParams);\n            changedDoc = hookParams.doc;\n\n            changedDocIds.add(id);\n            changedDocs.set(id, {\n                id,\n                doc: changedDoc,\n                sequence: row.sequence\n            });\n        });\n\n        if (changedDocs.size < batchSize && changesResults.changedDocuments.length === batchSize) {\n            // no pushable docs found but also not reached the end -> re-run\n            lastPushSequence = lastSequence;\n            retry = true;\n        } else {\n            retry = false;\n        }\n    }\n\n    return {\n        changedDocIds,\n        changedDocs,\n        lastSequence,\n        hasChangesSinceLastSequence: lastPushSequence !== lastSequence,\n    };\n}\n\n\n\n//\n// things for pull-checkpoint\n//\n\nexport async function getLastPullDocument<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    replicationIdentifier: string,\n): Promise<RxDocumentData<RxDocType> | null> {\n    const localDoc = await findLocalDocument<any>(\n        collection.localDocumentsStore,\n        pullLastDocumentId(replicationIdentifier),\n        false\n    );\n    if (!localDoc) {\n        return null;\n    } else {\n        return localDoc.doc;\n    }\n}\n\nexport async function setLastPullDocument(\n    collection: RxCollection,\n    replicationIdentifier: string,\n    doc: any\n): Promise<{ _id: string }> {\n    const _id = pullLastDocumentId(replicationIdentifier);\n\n    const localDoc: RxLocalDocumentData = await findLocalDocument<any>(\n        collection.localDocumentsStore,\n        _id,\n        false\n    );\n\n    if (!localDoc) {\n        return writeSingleLocal(\n            collection.localDocumentsStore,\n            {\n                document: {\n                    _id,\n                    doc,\n                    _meta: getDefaultRxDocumentMeta(),\n                    _deleted: false,\n                    _attachments: {}\n                }\n            }\n        );\n    } else {\n        const newDoc = flatClone(localDoc);\n        newDoc.doc = doc;\n        return writeSingleLocal(\n            collection.localDocumentsStore,\n            {\n                previous: localDoc,\n                document: newDoc\n            }\n        );\n    }\n}\n"],"file":"replication-checkpoint.js"}