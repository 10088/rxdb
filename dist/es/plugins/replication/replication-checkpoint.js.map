{"version":3,"file":"replication-checkpoint.js","names":["getSingleDocument","writeSingle","createRevision","flatClone","getDefaultRevision","lastOfArray","now","wasLastWriteFromPullReplication","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_REPLICATION_PRIMITIVES","pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","setLastPullDocument","collection","replicationIdentifierHash","lastPulledDoc","pullCheckpointId","pullLastDocumentKey","database","internalStore","lastPullCheckpointDoc","insertData","id","key","context","data","_meta","lwt","_rev","_deleted","_attachments","document","newDoc","Object","assign","previous","getChangesSinceLastPushCheckpoint","isStopped","batchSize","primaryPath","schema","getLastPushCheckpoint","lastPushCheckpoint","changedDocIds","changedDocs","checkpoint","lastCheckpoint","retry","Map","Set","storageInstance","getChangedDocumentsSince","changesResults","length","forEach","row","docData","docId","has","add","set","doc","size","setLastPushCheckpoint","pushSequenceDocumentKey","undefined","getLastPullDocument","lastPullCheckpoint"],"sources":["../../../../src/plugins/replication/replication-checkpoint.ts"],"sourcesContent":["import type {\n    RxCollection,\n    RxDocumentData,\n    InternalStoreReplicationPullDocType,\n    InternalStoreReplicationPushDocType,\n    DeepReadonlyObject\n} from '../../types';\nimport {\n    getSingleDocument,\n    writeSingle\n} from '../../rx-storage-helper';\nimport {\n    createRevision,\n    flatClone,\n    getDefaultRevision,\n    lastOfArray,\n    now\n} from '../../util';\nimport { wasLastWriteFromPullReplication } from './revision-flag';\nimport {\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_REPLICATION_PRIMITIVES\n} from '../../rx-database-internal-store';\n\n//\n// things for the push-checkpoint\n//\n\nconst pushSequenceDocumentKey = (replicationIdentifierHash: string) => 'replication-checkpoint-push-' + replicationIdentifierHash;\nconst pullLastDocumentKey = (replicationIdentifierHash: string) => 'replication-checkpoint-pull-' + replicationIdentifierHash;\n\n/**\n * Get the last push checkpoint\n */\nexport function getLastPushCheckpoint(\n    collection: RxCollection,\n    replicationIdentifierHash: string\n): Promise<any | undefined> {\n    return getSingleDocument<InternalStoreReplicationPushDocType>(\n        collection.database.internalStore,\n        getPrimaryKeyOfInternalDocument(\n            pushSequenceDocumentKey(replicationIdentifierHash),\n            INTERNAL_CONTEXT_REPLICATION_PRIMITIVES\n        )\n    ).then(doc => {\n        if (!doc) {\n            return undefined;\n        } else {\n            return doc.data.checkpoint;\n        }\n    });\n}\n\nexport async function setLastPushCheckpoint(\n    collection: RxCollection,\n    replicationIdentifierHash: string,\n    checkpoint: any\n): Promise<RxDocumentData<InternalStoreReplicationPushDocType>> {\n    const docId = getPrimaryKeyOfInternalDocument(\n        pushSequenceDocumentKey(replicationIdentifierHash),\n        INTERNAL_CONTEXT_REPLICATION_PRIMITIVES\n    );\n\n    const doc = await getSingleDocument<InternalStoreReplicationPushDocType>(\n        collection.database.internalStore,\n        docId\n    );\n    if (!doc) {\n        const insertData = {\n            id: docId,\n            key: pushSequenceDocumentKey(replicationIdentifierHash),\n            context: INTERNAL_CONTEXT_REPLICATION_PRIMITIVES,\n            data: {\n                checkpoint\n            },\n            _deleted: false,\n            _meta: {\n                lwt: now()\n            },\n            _rev: getDefaultRevision(),\n            _attachments: {}\n        };\n        insertData._rev = createRevision(insertData);\n        const res = await writeSingle(\n            collection.database.internalStore,\n            {\n                document: insertData\n            }\n        );\n        return res;\n    } else {\n        const docData = {\n            id: docId,\n            key: pushSequenceDocumentKey(replicationIdentifierHash),\n            context: INTERNAL_CONTEXT_REPLICATION_PRIMITIVES,\n            data: {\n                checkpoint\n            },\n            _meta: Object.assign(\n                {},\n                doc._meta,\n                {\n                    lwt: now()\n                }\n            ),\n            _rev: getDefaultRevision(),\n            _deleted: false,\n            _attachments: {}\n        };\n        docData._rev = createRevision(docData, doc);\n        const res = await writeSingle<InternalStoreReplicationPushDocType>(\n            collection.database.internalStore,\n            {\n                previous: doc,\n                document: docData\n            }\n        );\n        return res;\n    }\n}\n\nexport async function getChangesSinceLastPushCheckpoint<RxDocType>(\n    collection: RxCollection<RxDocType, any>,\n    replicationIdentifierHash: string,\n    /**\n     * A function that returns true\n     * when the underlaying RxReplication is stopped.\n     * So that we do not run requests against a close RxStorageInstance.\n     */\n    isStopped: () => boolean,\n    batchSize = 10\n): Promise<{\n    // for better performance we also store the ids of the changed docs.\n    changedDocIds: Set<string>,\n    changedDocs: Map<string, {\n        id: string;\n        doc: RxDocumentData<RxDocType>;\n    }>;\n    checkpoint: any;\n}> {\n    const primaryPath = collection.schema.primaryPath;\n    let lastPushCheckpoint = await getLastPushCheckpoint(\n        collection,\n        replicationIdentifierHash\n    );\n    let retry = true;\n    let lastCheckpoint: any = lastPushCheckpoint;\n    const changedDocs: Map<string, {\n        id: string;\n        doc: RxDocumentData<RxDocType>;\n    }> = new Map();\n    const changedDocIds: Set<string> = new Set();\n\n    /**\n     * it can happen that all docs in the batch\n     * do not have to be replicated.\n     * Then we have to continue grapping the feed\n     * until we reach the end of it\n     */\n    while (retry && !isStopped()) {\n        const changesResults = await collection.storageInstance.getChangedDocumentsSince(\n            batchSize,\n            lastPushCheckpoint\n        );\n\n        if (changesResults.length > 0) {\n            lastCheckpoint = lastOfArray(changesResults).checkpoint;\n        }\n\n        // optimisation shortcut, do not proceed if there are no changed documents\n        if (changesResults.length === 0) {\n            retry = false;\n            continue;\n        }\n\n\n        if (isStopped()) {\n            break;\n        }\n\n\n        changesResults.forEach(row => {\n            const docData = row.document;\n            const docId: string = docData[primaryPath] as any;\n            if (changedDocs.has(docId)) {\n                return;\n            }\n\n            /**\n             * filter out changes with revisions resulting from the pull-stream\n             * so that they will not be upstreamed again\n             */\n            if (\n                wasLastWriteFromPullReplication(\n                    replicationIdentifierHash,\n                    docData\n                )\n            ) {\n                return false;\n            }\n            changedDocIds.add(docId);\n            changedDocs.set(docId, {\n                id: docId,\n                doc: docData\n            });\n        });\n\n        if (\n            changedDocs.size < batchSize &&\n            changesResults.length === batchSize\n        ) {\n            // no pushable docs found but also not reached the end -> re-run\n            lastPushCheckpoint = lastCheckpoint;\n            retry = true;\n        } else {\n            retry = false;\n        }\n    }\n    return {\n        changedDocIds,\n        changedDocs,\n        checkpoint: lastCheckpoint\n    };\n}\n\n\n\n//\n// things for pull-checkpoint\n//\n\nexport function getLastPullDocument<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    replicationIdentifierHash: string,\n): Promise<RxDocumentData<RxDocType> | null> {\n\n    return getSingleDocument<InternalStoreReplicationPullDocType<RxDocType>>(\n        collection.database.internalStore,\n        getPrimaryKeyOfInternalDocument(\n            pullLastDocumentKey(replicationIdentifierHash),\n            INTERNAL_CONTEXT_REPLICATION_PRIMITIVES\n        )\n    ).then(lastPullCheckpoint => {\n        if (!lastPullCheckpoint) {\n            return null;\n        } else {\n            return lastPullCheckpoint.data.lastPulledDoc;\n        }\n    });\n}\n\nexport async function setLastPullDocument<RxDocType>(\n    collection: RxCollection,\n    replicationIdentifierHash: string,\n    lastPulledDoc: RxDocumentData<RxDocType> | DeepReadonlyObject<RxDocumentData<RxDocType>>\n): Promise<RxDocumentData<InternalStoreReplicationPullDocType<RxDocType>>> {\n    const pullCheckpointId = getPrimaryKeyOfInternalDocument(\n        pullLastDocumentKey(replicationIdentifierHash),\n        INTERNAL_CONTEXT_REPLICATION_PRIMITIVES\n    );\n\n    const lastPullCheckpointDoc = await getSingleDocument<InternalStoreReplicationPullDocType<RxDocType>>(\n        collection.database.internalStore,\n        pullCheckpointId\n    );\n\n    if (!lastPullCheckpointDoc) {\n        const insertData = {\n            id: pullCheckpointId,\n            key: pullLastDocumentKey(replicationIdentifierHash),\n            context: INTERNAL_CONTEXT_REPLICATION_PRIMITIVES,\n            data: {\n                lastPulledDoc: lastPulledDoc as any\n            },\n            _meta: {\n                lwt: now()\n            },\n            _rev: getDefaultRevision(),\n            _deleted: false,\n            _attachments: {}\n        };\n        insertData._rev = createRevision(insertData);\n        return writeSingle<InternalStoreReplicationPullDocType<RxDocType>>(\n            collection.database.internalStore,\n            {\n                document: insertData\n            }\n        );\n    } else {\n        const newDoc = flatClone(lastPullCheckpointDoc);\n        newDoc.data = { lastPulledDoc: lastPulledDoc as any };\n        newDoc._rev = createRevision(newDoc, lastPullCheckpointDoc);\n        newDoc._meta = Object.assign(\n            {},\n            lastPullCheckpointDoc._meta,\n            { lwt: now() }\n        );\n        return writeSingle<InternalStoreReplicationPullDocType<RxDocType>>(\n            collection.database.internalStore,\n            {\n                previous: lastPullCheckpointDoc,\n                document: newDoc\n            }\n        );\n    }\n}\n"],"mappings":"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"}