{"version":3,"file":"non-worker.js","names":["Subject","spawn","Worker","Thread","getFromMapOrThrow","removeWorkerRef","instance","workerState","WORKER_BY_INSTANCE","storage","refs","size","workerPromise","then","worker","terminate","Map","RxStorageWorker","settings","statics","name","createStorageInstance","params","get","workerInput","Set","set","instanceId","RxStorageInstanceWorker","databaseName","collectionName","schema","rxStorage","options","add","internals","changes$","subs","closed","push","changeStream","subscribe","ev","next","bulkWrite","documentWrites","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","asObservable","cleanup","minDeletedTime","close","forEach","sub","unsubscribe","remove","getRxStorageWorker"],"sources":["../../../../src/plugins/worker/non-worker.ts"],"sourcesContent":["import { Observable, Subject, Subscription } from 'rxjs';\nimport {\n    spawn,\n    Worker,\n    Thread\n} from 'threads';\nimport type {\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxDocumentData,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageQueryResult,\n    EventBulk,\n    RxStorageStatics,\n    RxDocumentDataById\n} from '../../types';\nimport { getFromMapOrThrow } from '../../util';\nimport { InWorkerStorage } from './in-worker';\n\ndeclare type WorkerStorageInternals = {\n    rxStorage: RxStorageWorker;\n    instanceId: number;\n    worker: InWorkerStorage;\n}\ndeclare type RxStorageWorkerSettings = {\n    statics: RxStorageStatics;\n    workerInput: any;\n}\n\n\n/**\n * We have no way to detect if a worker is no longer needed.\n * So we create the worker process on the first RxStorageInstance\n * and have to close it again of no more RxStorageInstances are non-closed.\n */\nconst WORKER_BY_INSTANCE: Map<RxStorageWorker, {\n    workerPromise: Promise<InWorkerStorage>;\n    refs: Set<RxStorageInstanceWorker<any>>;\n}> = new Map();\nexport class RxStorageWorker implements RxStorage<WorkerStorageInternals, any> {\n    public name = 'worker';\n\n    constructor(\n        public readonly settings: RxStorageWorkerSettings,\n        public readonly statics: RxStorageStatics\n    ) { }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceWorker<RxDocType>> {\n\n\n        let workerState = WORKER_BY_INSTANCE.get(this);\n        if (!workerState) {\n            workerState = {\n                workerPromise: spawn<InWorkerStorage>(new Worker(this.settings.workerInput)) as any,\n                refs: new Set()\n            };\n            WORKER_BY_INSTANCE.set(this, workerState);\n        }\n\n\n        const worker = await workerState.workerPromise;\n        const instanceId = await worker.createStorageInstance(params);\n        const instance = new RxStorageInstanceWorker(\n            this,\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                rxStorage: this,\n                instanceId,\n                worker\n            },\n            params.options\n        );\n        workerState.refs.add(instance);\n\n        return instance;\n    }\n}\n\n\nexport class RxStorageInstanceWorker<RxDocType> implements RxStorageInstance<RxDocType, WorkerStorageInternals, any> {\n\n    /**\n     * threads.js uses observable-fns instead of rxjs\n     * so we have to transform it.\n     */\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private subs: Subscription[] = [];\n\n    private closed: boolean = false;\n\n    constructor(\n        public readonly storage: RxStorageWorker,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: WorkerStorageInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.subs.push(\n            this.internals.worker.changeStream(\n                this.internals.instanceId\n            ).subscribe(ev => this.changes$.next(ev as any))\n        );\n\n    }\n\n    bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.internals.worker.bulkWrite(\n            this.internals.instanceId,\n            documentWrites\n        );\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        return this.internals.worker.findDocumentsById(\n            this.internals.instanceId,\n            ids,\n            deleted\n        );\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.internals.worker.query(\n            this.internals.instanceId,\n            preparedQuery\n        );\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        return this.internals.worker.getAttachmentData(\n            this.internals.instanceId,\n            documentId,\n            attachmentId\n        );\n    }\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: any;\n    }[]> {\n        return this.internals.worker.getChangedDocumentsSince(\n            this.internals.instanceId,\n            limit,\n            checkpoint\n        );\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number) {\n        return this.internals.worker.cleanup(\n            this.internals.instanceId,\n            minDeletedTime\n        );\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        await this.internals.worker.close(\n            this.internals.instanceId\n        );\n        await removeWorkerRef(this);\n    }\n    async remove(): Promise<void> {\n        await this.internals.worker.remove(\n            this.internals.instanceId\n        );\n        this.closed = true;\n        await removeWorkerRef(this);\n    }\n}\n\nexport function getRxStorageWorker(\n    settings: RxStorageWorkerSettings\n): RxStorageWorker {\n    const storage = new RxStorageWorker(settings, settings.statics);\n    return storage;\n}\n\n\nexport async function removeWorkerRef(\n    instance: RxStorageInstanceWorker<any>\n) {\n    const workerState = getFromMapOrThrow(WORKER_BY_INSTANCE, instance.storage);\n    workerState.refs.delete(instance);\n    if (workerState.refs.size === 0) {\n        WORKER_BY_INSTANCE.delete(instance.storage);\n        await workerState.workerPromise\n            .then(worker => Thread.terminate(worker as any));\n    }\n}\n"],"mappings":"AAAA,SAAqBA,OAArB,QAAkD,MAAlD;AACA,SACIC,KADJ,EAEIC,MAFJ,EAGIC,MAHJ,QAIO,SAJP;AAmBA,SAASC,iBAAT,QAAkC,YAAlC;AA0KA,WAAsBC,eAAtB,YAAsBA,eAAtB,CACIC,QADJ;EAAA,IAEE;IACE,IAAMC,WAAW,GAAGH,iBAAiB,CAACI,kBAAD,EAAqBF,QAAQ,CAACG,OAA9B,CAArC;IACAF,WAAW,CAACG,IAAZ,WAAwBJ,QAAxB;;IAFF;MAAA,IAGMC,WAAW,CAACG,IAAZ,CAAiBC,IAAjB,KAA0B,CAHhC;QAIMH,kBAAkB,UAAlB,CAA0BF,QAAQ,CAACG,OAAnC;QAJN,uBAKYF,WAAW,CAACK,aAAZ,CACDC,IADC,CACI,UAAAC,MAAM;UAAA,OAAIX,MAAM,CAACY,SAAP,CAAiBD,MAAjB,CAAJ;QAAA,CADV,CALZ;MAAA;IAAA;;IAAA;EAQD,CAVD;IAAA;EAAA;AAAA;;AA5JA;AACA;AACA;AACA;AACA;AACA,IAAMN,kBAGJ,GAAG,IAAIQ,GAAJ,EAHL;AAIA,WAAaC,eAAb;EAGI,yBACoBC,QADpB,EAEoBC,OAFpB,EAGE;IAAA,KALKC,IAKL,GALY,QAKZ;IAAA,KAFkBF,QAElB,GAFkBA,QAElB;IAAA,KADkBC,OAClB,GADkBA,OAClB;EAAG;;EANT;;EAAA,OAQUE,qBARV,kCASQC,MATR;IAAA,IAUmD;MAAA,aAGF,IAHE;;MAG3C,IAAIf,WAAW,GAAGC,kBAAkB,CAACe,GAAnB,QAAlB;;MACA,IAAI,CAAChB,WAAL,EAAkB;QACdA,WAAW,GAAG;UACVK,aAAa,EAAEX,KAAK,CAAkB,IAAIC,MAAJ,CAAW,OAAKgB,QAAL,CAAcM,WAAzB,CAAlB,CADV;UAEVd,IAAI,EAAE,IAAIe,GAAJ;QAFI,CAAd;QAIAjB,kBAAkB,CAACkB,GAAnB,SAA6BnB,WAA7B;MACH;;MAV0C,uBAatBA,WAAW,CAACK,aAbU,iBAarCE,MAbqC;QAAA,uBAclBA,MAAM,CAACO,qBAAP,CAA6BC,MAA7B,CAdkB,iBAcrCK,UAdqC;UAe3C,IAAMrB,QAAQ,GAAG,IAAIsB,uBAAJ,SAEbN,MAAM,CAACO,YAFM,EAGbP,MAAM,CAACQ,cAHM,EAIbR,MAAM,CAACS,MAJM,EAKb;YACIC,SAAS,QADb;YAEIL,UAAU,EAAVA,UAFJ;YAGIb,MAAM,EAANA;UAHJ,CALa,EAUbQ,MAAM,CAACW,OAVM,CAAjB;UAYA1B,WAAW,CAACG,IAAZ,CAAiBwB,GAAjB,CAAqB5B,QAArB;UAEA,OAAOA,QAAP;QA7B2C;MAAA;IA8B9C,CAxCL;MAAA;IAAA;EAAA;;EAAA;AAAA;AA4CA,WAAasB,uBAAb;EAEI;AACJ;AACA;AACA;EAMI,iCACoBnB,OADpB,EAEoBoB,YAFpB,EAGoBC,cAHpB,EAIoBC,MAJpB,EAKoBI,SALpB,EAMoBF,OANpB,EAOE;IAAA;;IAAA,KAZMG,QAYN,GAZsF,IAAIpC,OAAJ,EAYtF;IAAA,KAXMqC,IAWN,GAX6B,EAW7B;IAAA,KATMC,MASN,GATwB,KASxB;IAAA,KANkB7B,OAMlB,GANkBA,OAMlB;IAAA,KALkBoB,YAKlB,GALkBA,YAKlB;IAAA,KAJkBC,cAIlB,GAJkBA,cAIlB;IAAA,KAHkBC,MAGlB,GAHkBA,MAGlB;IAAA,KAFkBI,SAElB,GAFkBA,SAElB;IAAA,KADkBF,OAClB,GADkBA,OAClB;IACE,KAAKI,IAAL,CAAUE,IAAV,CACI,KAAKJ,SAAL,CAAerB,MAAf,CAAsB0B,YAAtB,CACI,KAAKL,SAAL,CAAeR,UADnB,EAEEc,SAFF,CAEY,UAAAC,EAAE;MAAA,OAAI,MAAI,CAACN,QAAL,CAAcO,IAAd,CAAmBD,EAAnB,CAAJ;IAAA,CAFd,CADJ;EAMH;;EAzBL;;EAAA,QA2BIE,SA3BJ,GA2BI,mBAAUC,cAAV,EAAqG;IACjG,OAAO,KAAKV,SAAL,CAAerB,MAAf,CAAsB8B,SAAtB,CACH,KAAKT,SAAL,CAAeR,UADZ,EAEHkB,cAFG,CAAP;EAIH,CAhCL;;EAAA,QAiCIC,iBAjCJ,GAiCI,2BAAkBC,GAAlB,EAAiCC,OAAjC,EAA2F;IACvF,OAAO,KAAKb,SAAL,CAAerB,MAAf,CAAsBgC,iBAAtB,CACH,KAAKX,SAAL,CAAeR,UADZ,EAEHoB,GAFG,EAGHC,OAHG,CAAP;EAKH,CAvCL;;EAAA,QAwCIC,KAxCJ,GAwCI,eAAMC,aAAN,EAAoE;IAChE,OAAO,KAAKf,SAAL,CAAerB,MAAf,CAAsBmC,KAAtB,CACH,KAAKd,SAAL,CAAeR,UADZ,EAEHuB,aAFG,CAAP;EAIH,CA7CL;;EAAA,QA8CIC,iBA9CJ,GA8CI,2BAAkBC,UAAlB,EAAsCC,YAAtC,EAA6E;IACzE,OAAO,KAAKlB,SAAL,CAAerB,MAAf,CAAsBqC,iBAAtB,CACH,KAAKhB,SAAL,CAAeR,UADZ,EAEHyB,UAFG,EAGHC,YAHG,CAAP;EAKH,CApDL;;EAAA,QAqDUC,wBArDV,qCAsDQC,KAtDR,EAuDQC,UAvDR;IAAA,IA2DS;MAAA,aACM,IADN;;MACD,uBAAO,OAAKrB,SAAL,CAAerB,MAAf,CAAsBwC,wBAAtB,CACH,OAAKnB,SAAL,CAAeR,UADZ,EAEH4B,KAFG,EAGHC,UAHG,CAAP;IAKH,CAjEL;MAAA;IAAA;EAAA;;EAAA,QAkEIhB,YAlEJ,GAkEI,wBAAuF;IACnF,OAAO,KAAKJ,QAAL,CAAcqB,YAAd,EAAP;EACH,CApEL;;EAAA,QAqEIC,OArEJ,GAqEI,iBAAQC,cAAR,EAAgC;IAC5B,OAAO,KAAKxB,SAAL,CAAerB,MAAf,CAAsB4C,OAAtB,CACH,KAAKvB,SAAL,CAAeR,UADZ,EAEHgC,cAFG,CAAP;EAIH,CA1EL;;EAAA,QA2EUC,KA3EV;IAAA,IA2EiC;MAAA,aACrB,IADqB;;MACzB,IAAI,OAAKtB,MAAT,EAAiB;QACb;MACH;;MACD,OAAKA,MAAL,GAAc,IAAd;;MACA,OAAKD,IAAL,CAAUwB,OAAV,CAAkB,UAAAC,GAAG;QAAA,OAAIA,GAAG,CAACC,WAAJ,EAAJ;MAAA,CAArB;;MALyB,uBAMnB,OAAK5B,SAAL,CAAerB,MAAf,CAAsB8C,KAAtB,CACF,OAAKzB,SAAL,CAAeR,UADb,CANmB;QAAA,uBASnBtB,eAAe,QATI;MAAA;IAU5B,CArFL;MAAA;IAAA;EAAA;;EAAA,QAsFU2D,MAtFV;IAAA,IAsFkC;MAAA,aACpB,IADoB;;MAAA,uBACpB,OAAK7B,SAAL,CAAerB,MAAf,CAAsBkD,MAAtB,CACF,OAAK7B,SAAL,CAAeR,UADb,CADoB;QAI1B,OAAKW,MAAL,GAAc,IAAd;QAJ0B,uBAKpBjC,eAAe,QALK;MAAA;IAM7B,CA5FL;MAAA;IAAA;EAAA;;EAAA;AAAA;AA+FA,OAAO,SAAS4D,kBAAT,CACH/C,QADG,EAEY;EACf,IAAMT,OAAO,GAAG,IAAIQ,eAAJ,CAAoBC,QAApB,EAA8BA,QAAQ,CAACC,OAAvC,CAAhB;EACA,OAAOV,OAAP;AACH"}