{"version":3,"file":"non-worker.js","names":["Subject","spawn","Worker","WORKER_BY_INPUT","Map","RxStorageWorker","settings","statics","name","workerInput","workerPromise","get","set","createStorageInstance","params","worker","instanceId","RxStorageInstanceWorker","databaseName","collectionName","schema","rxStorage","options","storage","internals","changes$","subs","push","changeStream","subscribe","ev","next","bulkWrite","documentWrites","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","asObservable","cleanup","minDeletedTime","close","forEach","sub","unsubscribe","remove","getRxStorageWorker"],"sources":["../../../../src/plugins/worker/non-worker.ts"],"sourcesContent":["import { Observable, Subject, Subscription } from 'rxjs';\nimport { spawn, Worker } from 'threads';\nimport type {\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxDocumentData,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageQueryResult,\n    EventBulk,\n    RxStorageStatics\n} from '../../types';\nimport { InWorkerStorage } from './in-worker';\n\ndeclare type WorkerStorageInternals = {\n    rxStorage: RxStorageWorker;\n    instanceId: number;\n    worker: InWorkerStorage;\n}\ndeclare type RxStorageWorkerSettings = {\n    statics: RxStorageStatics;\n    workerInput: any;\n}\n\n/**\n * We have no way to detect if a worker is no longer needed.\n * Instead we reuse open workers so that creating many databases,\n * does not flood the OS by opening many threads.\n */\nconst WORKER_BY_INPUT: Map<any, Promise<InWorkerStorage>> = new Map();\n\nexport class RxStorageWorker implements RxStorage<WorkerStorageInternals, any> {\n    public name = 'worker';\n\n    public readonly workerPromise: Promise<InWorkerStorage>;\n    constructor(\n        public readonly settings: RxStorageWorkerSettings,\n        public readonly statics: RxStorageStatics\n    ) {\n        const workerInput = this.settings.workerInput;\n        let workerPromise = WORKER_BY_INPUT.get(workerInput);\n        if (!workerPromise) {\n            workerPromise = spawn<InWorkerStorage>(new Worker(this.settings.workerInput)) as any;\n            WORKER_BY_INPUT.set(workerInput, workerPromise as any);\n        }\n        this.workerPromise = workerPromise as any;\n    }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceWorker<RxDocType>> {\n        const worker = await this.workerPromise;\n        const instanceId = await worker.createStorageInstance(params);\n        return new RxStorageInstanceWorker(\n            this,\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                rxStorage: this,\n                instanceId,\n                worker\n            },\n            params.options\n        );\n    }\n}\n\n\nexport class RxStorageInstanceWorker<RxDocType> implements RxStorageInstance<RxDocType, WorkerStorageInternals, any> {\n\n    /**\n     * threads.js uses observable-fns instead of rxjs\n     * so we have to transform it.\n     */\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private subs: Subscription[] = [];\n\n    constructor(\n        public readonly storage: RxStorage<WorkerStorageInternals, any>,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: WorkerStorageInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.subs.push(\n            this.internals.worker.changeStream(\n                this.internals.instanceId\n            ).subscribe(ev => this.changes$.next(ev as any))\n        );\n\n    }\n\n    bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.internals.worker.bulkWrite(\n            this.internals.instanceId,\n            documentWrites\n        );\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        return this.internals.worker.findDocumentsById(\n            this.internals.instanceId,\n            ids,\n            deleted\n        );\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.internals.worker.query(\n            this.internals.instanceId,\n            preparedQuery\n        );\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        return this.internals.worker.getAttachmentData(\n            this.internals.instanceId,\n            documentId,\n            attachmentId\n        );\n    }\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: any;\n    }[]> {\n        return this.internals.worker.getChangedDocumentsSince(\n            this.internals.instanceId,\n            limit,\n            checkpoint\n        );\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number) {\n        return this.internals.worker.cleanup(\n            this.internals.instanceId,\n            minDeletedTime\n        );\n    }\n    close(): Promise<void> {\n        this.subs.forEach(sub => sub.unsubscribe());\n        return this.internals.worker.close(\n            this.internals.instanceId\n        );\n    }\n    remove(): Promise<void> {\n        return this.internals.worker.remove(\n            this.internals.instanceId\n        );\n    }\n}\n\nexport function getRxStorageWorker(\n    settings: RxStorageWorkerSettings\n): RxStorageWorker {\n    const storage = new RxStorageWorker(settings, settings.statics);\n    return storage;\n}\n"],"mappings":"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"}