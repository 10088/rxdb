{"version":3,"sources":["../../../../src/plugins/worker/in-worker.ts"],"names":["expose","getFromMapOrThrow","wrappedRxStorage","rxStorage","nextId","instanceById","Map","exposeMe","createStorageInstance","params","instanceId","instance","set","bulkWrite","documentWrites","bulkAddRevisions","documents","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocuments","options","changeStream","close","remove","createKeyObjectStorageInstance","bulkWriteLocal","findLocalDocumentsById"],"mappings":"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","sourcesContent":["/**\n * This file contains everything\n * that is supposed to run inside of the worker.\n */\nimport type {\n    BlobBuffer,\n    BulkWriteLocalRow,\n    BulkWriteRow,\n    ChangeStreamOnceOptions,\n    EventBulk,\n    RxDocumentData,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangedDocumentMeta,\n    RxStorageChangeEvent,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult\n} from '../../types';\nimport { expose } from 'threads/worker';\nimport { getFromMapOrThrow } from '../../util';\nimport { Observable } from 'rxjs';\n\n\nexport type InWorkerStorage = {\n    createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<number>;\n    bulkWrite<DocumentData>(\n        instanceId: number,\n        documentWrites: BulkWriteRow<DocumentData>[]\n    ): Promise<RxStorageBulkWriteResponse<DocumentData>>;\n    bulkAddRevisions<DocumentData>(\n        instanceId: number,\n        documents: RxDocumentData<DocumentData>[]\n    ): Promise<void>;\n    findDocumentsById<DocumentData>(\n        instanceId: number,\n        ids: string[], deleted: boolean\n    ): Promise<{ [documentId: string]: RxDocumentData<DocumentData> }>;\n    query<DocumentData>(\n        instanceId: number,\n        preparedQuery: any\n    ): Promise<RxStorageQueryResult<DocumentData>>;\n    getAttachmentData(\n        instanceId: number,\n        documentId: string,\n        attachmentId: string\n    ): Promise<BlobBuffer>;\n    getChangedDocuments(\n        instanceId: number,\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }>;\n    changeStream<DocumentData>(\n        instanceById: number\n    ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>>>;\n    close(instanceId: number): Promise<void>;\n    remove(instanceId: number): Promise<void>;\n\n    createKeyObjectStorageInstance(\n        params: RxKeyObjectStorageInstanceCreationParams<any>\n    ): Promise<number>;\n    bulkWriteLocal<DocumentData>(\n        instanceId: number,\n        documentWrites: BulkWriteLocalRow<DocumentData>[]): Promise<RxLocalStorageBulkWriteResponse<DocumentData>>;\n    findLocalDocumentsById<DocumentData>(\n        instanceId: number,\n        ids: string[]\n    ): Promise<{ [documentId: string]: RxLocalDocumentData<DocumentData> }>;\n}\n\nexport function wrappedRxStorage<T, D>(\n    rxStorage: RxStorage<T, D>\n) {\n    let nextId = 0;\n    const instanceById: Map<number, any> = new Map();\n\n    const exposeMe: InWorkerStorage = {\n        /**\n         * RxStorageInstance\n         */\n        async createStorageInstance(params) {\n            const instanceId = nextId++;\n            const instance = await rxStorage.createStorageInstance(params);\n            instanceById.set(instanceId, instance);\n            return instanceId;\n        },\n        bulkWrite<DocumentData>(\n            instanceId: number,\n            documentWrites: BulkWriteRow<DocumentData>[]\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.bulkWrite(documentWrites);\n        },\n        bulkAddRevisions<DocumentData>(\n            instanceId: number,\n            documents: RxDocumentData<DocumentData>[]\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.bulkAddRevisions(documents);\n        },\n        findDocumentsById<DocumentData>(\n            instanceId: number,\n            ids: string[],\n            deleted: boolean\n        ): Promise<{ [documentId: string]: RxDocumentData<DocumentData> }> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.findDocumentsById(ids, deleted);\n        },\n        query<DocumentData>(\n            instanceId: number,\n            preparedQuery: any\n        ): Promise<RxStorageQueryResult<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.query(preparedQuery);\n        },\n        getAttachmentData(\n            instanceId: number,\n            documentId: string,\n            attachmentId: string\n        ): Promise<BlobBuffer> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getAttachmentData(\n                documentId,\n                attachmentId\n            );\n        },\n        getChangedDocuments(\n            instanceId: number,\n            options: ChangeStreamOnceOptions\n        ): Promise<{\n            changedDocuments: RxStorageChangedDocumentMeta[];\n            lastSequence: number;\n        }> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getChangedDocuments(\n                options\n            );\n        },\n        changeStream<DocumentData>(\n            instanceId: number\n        ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.changeStream();\n        },\n        close(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.close();\n        },\n        remove(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.remove();\n        },\n\n        /**\n         * RxKeyObjectStorageInstance\n         */\n        async createKeyObjectStorageInstance(params) {\n            const instanceId = nextId++;\n            const instance = await rxStorage.createKeyObjectStorageInstance(params);\n            instanceById.set(instanceId, instance);\n            return instanceId;\n        },\n        bulkWriteLocal<DocumentData>(\n            instanceId: number,\n            documentWrites: BulkWriteLocalRow<DocumentData>[]\n        ): Promise<RxLocalStorageBulkWriteResponse<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.bulkWrite(documentWrites);\n        },\n        findLocalDocumentsById<DocumentData>(\n            instanceId: number,\n            ids: string[]\n        ): Promise<{ [documentId: string]: RxLocalDocumentData<DocumentData> }> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.findLocalDocumentsById(ids);\n        }\n    }\n    expose(exposeMe);\n}\n"],"file":"in-worker.js"}