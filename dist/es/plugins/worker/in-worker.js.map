{"version":3,"sources":["../../../../src/plugins/worker/in-worker.ts"],"names":["expose","getFromMapOrThrow","wrappedRxStorage","args","nextId","instanceById","Map","exposeMe","createStorageInstance","params","instanceId","storage","instance","set","bulkWrite","documentWrites","bulkAddRevisions","documents","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocuments","options","changeStream","close","remove"],"mappings":"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","sourcesContent":["/**\n * This file contains everything\n * that is supposed to run inside of the worker.\n */\nimport type {\n    BulkWriteRow,\n    ChangeStreamOnceOptions,\n    EventBulk,\n    RxDocumentData,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangedDocumentMeta,\n    RxStorageChangeEvent,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult\n} from '../../types';\nimport { expose } from 'threads/worker';\nimport { getFromMapOrThrow } from '../../util';\nimport { Observable } from 'rxjs';\n\n\nexport type InWorkerStorage = {\n    createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<number>;\n    bulkWrite<DocumentData>(\n        instanceId: number,\n        documentWrites: BulkWriteRow<DocumentData>[]\n    ): Promise<RxStorageBulkWriteResponse<DocumentData>>;\n    bulkAddRevisions<DocumentData>(\n        instanceId: number,\n        documents: RxDocumentData<DocumentData>[]\n    ): Promise<void>;\n    findDocumentsById<DocumentData>(\n        instanceId: number,\n        ids: string[], deleted: boolean\n    ): Promise<{ [documentId: string]: RxDocumentData<DocumentData> }>;\n    query<DocumentData>(\n        instanceId: number,\n        preparedQuery: any\n    ): Promise<RxStorageQueryResult<DocumentData>>;\n    getAttachmentData(\n        instanceId: number,\n        documentId: string,\n        attachmentId: string\n    ): Promise<string>;\n    getChangedDocuments(\n        instanceId: number,\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }>;\n    changeStream<DocumentData>(\n        instanceById: number\n    ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>>>;\n    close(instanceId: number): Promise<void>;\n    remove(instanceId: number): Promise<void>;\n}\n\nexport function wrappedRxStorage<T, D>(\n    args: {\n        storage: RxStorage<T, D>\n    }\n) {\n    let nextId = 0;\n    const instanceById: Map<number, any> = new Map();\n\n    const exposeMe: InWorkerStorage = {\n        /**\n         * RxStorageInstance\n         */\n        async createStorageInstance(params) {\n            const instanceId = nextId++;\n            const instance = await args.storage.createStorageInstance(params);\n            instanceById.set(instanceId, instance);\n            return instanceId;\n        },\n        bulkWrite<DocumentData>(\n            instanceId: number,\n            documentWrites: BulkWriteRow<DocumentData>[]\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.bulkWrite(documentWrites);\n        },\n        bulkAddRevisions<DocumentData>(\n            instanceId: number,\n            documents: RxDocumentData<DocumentData>[]\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.bulkAddRevisions(documents);\n        },\n        findDocumentsById<DocumentData>(\n            instanceId: number,\n            ids: string[],\n            deleted: boolean\n        ): Promise<{ [documentId: string]: RxDocumentData<DocumentData> }> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.findDocumentsById(ids, deleted);\n        },\n        query<DocumentData>(\n            instanceId: number,\n            preparedQuery: any\n        ): Promise<RxStorageQueryResult<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.query(preparedQuery);\n        },\n        getAttachmentData(\n            instanceId: number,\n            documentId: string,\n            attachmentId: string\n        ): Promise<string> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getAttachmentData(\n                documentId,\n                attachmentId\n            );\n        },\n        getChangedDocuments(\n            instanceId: number,\n            options: ChangeStreamOnceOptions\n        ): Promise<{\n            changedDocuments: RxStorageChangedDocumentMeta[];\n            lastSequence: number;\n        }> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getChangedDocuments(\n                options\n            );\n        },\n        changeStream<DocumentData>(\n            instanceId: number\n        ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.changeStream();\n        },\n        close(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.close();\n        },\n        remove(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.remove();\n        }\n    }\n    expose(exposeMe);\n}\n"],"file":"in-worker.js"}