{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-lokijs.ts"],"names":["flatClone","hash","createLokiStorageInstance","createLokiKeyObjectStorageInstance","RxStorageLoki","databaseSettings","name","data","Promise","resolve","createStorageInstance","params","createKeyObjectStorageInstance","useParams","collectionName","getRxStorageLoki","storage"],"mappings":";;AAQA,SAASA,SAAT,EAAoBC,IAAI,IAAJA,KAApB,QAAgC,YAAhC;AACA,SACIC,yBADJ,QAGO,4BAHP;AAIA,SACIC,kCADJ,QAGO,uCAHP;AAKA,WAAaC,aAAb;AAGI,yBACWC,gBADX,EAEE;AAAA,SAJKC,IAIL,GAJY,QAIZ;AAAA,SADSD,gBACT,GADSA,gBACT;AAAG;;AALT;;AAAA,SAOIJ,IAPJ,GAOI,cAAKM,IAAL,EAAoD;AAChD,WAAOC,OAAO,CAACC,OAAR,CAAgBR,KAAI,CAACM,IAAD,CAApB,CAAP;AACH,GATL;;AAAA,SAWUG,qBAXV;AAAA,0FAWI,iBACIC,MADJ;AAAA;AAAA;AAAA;AAAA;AAAA,+CAGWT,yBAAyB,CAACS,MAAD,EAAS,KAAKN,gBAAd,CAHpC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAiBiBO,8BAjBjB;AAAA,mGAiBI,kBACID,MADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAII;AACME,cAAAA,SALV,GAKsBb,SAAS,CAACW,MAAD,CAL/B;AAMIE,cAAAA,SAAS,CAACC,cAAV,GAA2BH,MAAM,CAACG,cAAP,GAAwB,aAAnD;AANJ,gDAQWX,kCAAkC,CAACQ,MAAD,EAAS,KAAKN,gBAAd,CAR7C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjBJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AA6BA,OAAO,SAASU,gBAAT,GAEU;AAAA,MADbV,gBACa,uEAD4B,EAC5B;AACb,MAAMW,OAAO,GAAG,IAAIZ,aAAJ,CAAkBC,gBAAlB,CAAhB;AACA,SAAOW,OAAP;AACH","sourcesContent":["import type {\n    LokiDatabaseSettings,\n    LokiSettings,\n    LokiStorageInternals,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport { flatClone, hash } from '../../util';\nimport {\n    createLokiStorageInstance,\n    RxStorageInstanceLoki\n} from './rx-storage-instance-loki';\nimport {\n    createLokiKeyObjectStorageInstance,\n    RxStorageKeyObjectInstanceLoki\n} from './rx-storage-key-object-instance-loki';\n\nexport class RxStorageLoki implements RxStorage<LokiStorageInternals, LokiSettings> {\n    public name = 'lokijs';\n\n    constructor(\n        public databaseSettings: LokiDatabaseSettings\n    ) { }\n\n    hash(data: Buffer | Blob | string): Promise<string> {\n        return Promise.resolve(hash(data));\n    }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>\n    ): Promise<RxStorageInstanceLoki<RxDocType>> {\n        return createLokiStorageInstance(params, this.databaseSettings);\n    }\n\n    public async createKeyObjectStorageInstance(\n        params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>\n    ): Promise<RxStorageKeyObjectInstanceLoki> {\n\n        // ensure we never mix up key-object data with normal storage documents.\n        const useParams = flatClone(params);\n        useParams.collectionName = params.collectionName + '-key-object';\n\n        return createLokiKeyObjectStorageInstance(params, this.databaseSettings);\n    }\n}\n\nexport function getRxStorageLoki(\n    databaseSettings: LokiDatabaseSettings = {}\n): RxStorageLoki {\n    const storage = new RxStorageLoki(databaseSettings);\n    return storage;\n}\n"],"file":"rx-storage-lokijs.js"}