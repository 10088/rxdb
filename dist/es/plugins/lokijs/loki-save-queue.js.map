{"version":3,"sources":["../../../../src/plugins/lokijs/loki-save-queue.ts"],"names":["promiseWait","PROMISE_RESOLVE_VOID","requestIdlePromise","LokiSaveQueue","lokiDatabase","databaseSettings","writesSinceLastRun","saveQueue","saveQueueC","addWrite","run","adapter","then","Promise","all","writeAmount","res","rej","saveDatabase","err","autosaveCallback"],"mappings":";;AACA,SACIA,WADJ,EAEIC,oBAFJ,EAGIC,kBAHJ,QAIO,YAJP;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAaC,aAAb;AAGI;AACJ;AACA;AACA;AAEI;AAGA,yBACoBC,YADpB,EAEoBC,gBAFpB,EAGE;AAAA,SAbKC,kBAaL,GAbkC,CAalC;AAAA,SAPKC,SAOL,GAPgCN,oBAOhC;AAAA,SALKO,UAKL,GALkB,CAKlB;AAAA,SAFkBJ,YAElB,GAFkBA,YAElB;AAAA,SADkBC,gBAClB,GADkBA,gBAClB;AAED;;AAhBL;;AAAA,SAkBWI,QAlBX,GAkBI,oBAAkB;AACd,SAAKH,kBAAL,GAA0B,KAAKA,kBAAL,GAA0B,CAApD;AACA,SAAKI,GAAL;AACH,GArBL;;AAAA,SAuBiBA,GAvBjB;AAAA,wEAuBI;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEQ;AACA,eAAC,KAAKL,gBAAL,CAAsBM,OAAvB,IACA;AACA,mBAAKH,UAAL,GAAkB,CAL1B;AAAA;AAAA;AAAA;;AAAA,gDAQe,KAAKD,SARpB;;AAAA;AAWI,mBAAKC,UAAL,GAAkB,KAAKA,UAAL,GAAkB,CAApC;AACA,mBAAKD,SAAL,GAAiB,KAAKA,SAAL,CACZK,IADY,wEACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAQIC,OAAO,CAACC,GAAR,CAAY,CACdZ,kBAAkB,EADJ,EAEdF,WAAW,CAAC,GAAD,CAFG,CAAZ,CARJ;;AAAA;AAAA,8BAcE,KAAI,CAACM,kBAAL,KAA4B,CAd9B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAyBIO,OAAO,CAACC,GAAR,CAAY,CACdZ,kBAAkB,EADJ,EAEdF,WAAW,CAAC,GAAD,CAFG,CAAZ,CAzBJ;;AAAA;AAAA;AAAA,+BA6BIE,kBAAkB,EA7BtB;;AAAA;AAAA,8BA+BE,KAAI,CAACI,kBAAL,KAA4B,CA/B9B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAmCIS,wBAAAA,WAnCJ,GAmCkB,KAAI,CAACT,kBAnCvB;AAoCF,wBAAA,KAAI,CAACA,kBAAL,GAA0B,CAA1B;AApCE,yDAqCK,IAAIO,OAAJ,CAAkB,UAACG,GAAD,EAAMC,GAAN,EAAc;AACnC,0BAAA,KAAI,CAACb,YAAL,CAAkBc,YAAlB,CAA+B,UAAAC,GAAG,EAAI;AAClC,gCAAIA,GAAJ,EAAS;AACL,8BAAA,KAAI,CAACb,kBAAL,GAA0B,KAAI,CAACA,kBAAL,GAA0BS,WAApD;AACAE,8BAAAA,GAAG,CAACE,GAAD,CAAH;AACH,6BAHD,MAGO;AACH,kCAAI,KAAI,CAACd,gBAAL,CAAsBe,gBAA1B,EAA4C;AACxC,gCAAA,KAAI,CAACf,gBAAL,CAAsBe,gBAAtB;AACH;;AACDJ,8BAAAA,GAAG;AACN;AACJ,2BAVD;AAWH,yBAZM,CArCL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADO,aAqDN,YAAM,CAAG,CArDH,EAsDZJ,IAtDY,CAsDP,YAAM;AACR,gBAAA,KAAI,CAACJ,UAAL,GAAkB,KAAI,CAACA,UAAL,GAAkB,CAApC;AACH,eAxDY,CAAjB;AAZJ,gDAqEW,KAAKD,SArEhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvBJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["import { LokiDatabaseSettings } from '../../types';\nimport {\n    promiseWait,\n    PROMISE_RESOLVE_VOID,\n    requestIdlePromise\n} from '../../util';\n\n/**\n * The autosave feature of lokijs has strange behaviors\n * and often runs a save in critical moments when other\n * more important tasks are running.\n * So instead we use a custom save queue that ensures we\n * only run loki.saveDatabase() when nothing else is running.\n */\nexport class LokiSaveQueue {\n    public writesSinceLastRun: number = 0;\n\n    /**\n     * Ensures that we do not run multiple saves\n     * in parallel\n     */\n    public saveQueue: Promise<void> = PROMISE_RESOLVE_VOID;\n    // track amount of non-finished save calls in the queue.\n    public saveQueueC = 0;\n\n    constructor(\n        public readonly lokiDatabase: Loki,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n\n    }\n\n    public addWrite() {\n        this.writesSinceLastRun = this.writesSinceLastRun + 1;\n        this.run();\n    }\n\n    public async run() {\n        if (\n            // no persistence adapter given, so we do not need to save\n            !this.databaseSettings.adapter ||\n            // do not add more then two pending calls to the queue.\n            this.saveQueueC > 2\n\n        ) {\n            return this.saveQueue;\n        }\n\n        this.saveQueueC = this.saveQueueC + 1;\n        this.saveQueue = this.saveQueue\n            .then(async () => {\n\n                /**\n                 * Always wait at least 100ms\n                 * and until the JavaScript process is idle.\n                 * This ensures that CPU blocking writes are finished\n                 * before we proceed.\n                 */\n                await Promise.all([\n                    requestIdlePromise(),\n                    promiseWait(100)\n                ]);\n\n                // no write happened since the last save call\n                if (this.writesSinceLastRun === 0) {\n                    return;\n                }\n\n                /**\n                 * Because LokiJS is a in-memory database,\n                 * we can just wait until the JavaScript process is idle\n                 * via requestIdlePromise(). Then we know that nothing important\n                 * is running at the moment. Also we at least wait 100ms\n                 * to ensure it has enough time to free up stuff.\n                 */\n                await Promise.all([\n                    requestIdlePromise(),\n                    promiseWait(100)\n                ]);\n                await requestIdlePromise();\n\n                if (this.writesSinceLastRun === 0) {\n                    return;\n                }\n\n                const writeAmount = this.writesSinceLastRun;\n                this.writesSinceLastRun = 0;\n                return new Promise<void>((res, rej) => {\n                    this.lokiDatabase.saveDatabase(err => {\n                        if (err) {\n                            this.writesSinceLastRun = this.writesSinceLastRun + writeAmount;\n                            rej(err);\n                        } else {\n                            if (this.databaseSettings.autosaveCallback) {\n                                this.databaseSettings.autosaveCallback();\n                            }\n                            res();\n                        }\n                    });\n                });\n\n            })\n            .catch(() => { })\n            .then(() => {\n                this.saveQueueC = this.saveQueueC - 1;\n            });\n        return this.saveQueue;\n    }\n}\n"],"file":"loki-save-queue.js"}