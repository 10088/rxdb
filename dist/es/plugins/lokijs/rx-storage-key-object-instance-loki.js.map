{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-key-object-instance-loki.ts"],"names":["Subject","newRxError","createRevision","ensureNotFalsy","flatClone","now","parseRevision","promiseWait","randomCouchString","CHANGES_COLLECTION_SUFFIX","CHANGES_LOCAL_SUFFIX","closeLokiCollections","getLokiDatabase","getLokiEventKey","LOKIJS_COLLECTION_DEFAULT_OPTIONS","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","OPEN_LOKIJS_STORAGE_INSTANCES","getLeaderElectorByBroadcastChannel","instanceId","RxStorageKeyObjectInstanceLoki","databaseName","collectionName","internals","options","databaseSettings","broadcastChannel","changes$","add","leaderElector","awaitLeadership","then","addEventListener","msg","type","requestId","response","operation","params","isError","result","postMessage","getLocalState","ret","localState","mustUseLocalState","hasLeader","applyOnce","isLeader","createLokiKeyValueLocalState","requestRemoteInstance","responsePromise","Promise","res","rej","listener","removeEventListener","bulkWrite","documentWrites","length","args","collection","startTime","success","Map","error","writeRowById","forEach","writeRow","id","document","_id","set","writeDoc","docInDb","by","previous","newRevHeight","_rev","height","newRevision","err","status","documentId","toLoki","$loki","update","insert","endTime","event","doc","_deleted","previousDoc","eventId","storageChangeEvent","change","next","findLocalDocumentsById","ids","documentInDb","changeStream","asObservable","close","complete","changesCollection","remove","database","removeCollection","name","databaseState","collectionOptions","Object","assign","indices","unique","localCollectionName","addCollection","openCollections","changesCollectionName","changesCollectionOptions","createLokiKeyObjectStorageInstance","instance"],"mappings":";;AACA,SAAqBA,OAArB,QAAoC,MAApC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAiBA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,SAHJ,EAIIC,GAJJ,EAKIC,aALJ,EAMIC,WANJ,EAOIC,iBAPJ,QAQO,YARP;AASA,SACIC,yBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,iCANJ,EAOIC,8CAPJ,EAQIC,6BARJ,QASO,iBATP;AAaA,SAASC,kCAAT,QAAmD,oBAAnD;AAEA,IAAIC,UAAU,GAAG,CAAjB;AAEA,WAAaC,8BAAb;AAOI,0CACoBC,YADpB,EAEoBC,cAFpB,EAGoBC,SAHpB,EAIoBC,OAJpB,EAKoBC,gBALpB,EAMoBC,gBANpB,EAOE;AAAA;;AAAA,SAZMC,QAYN,GAZqE,IAAI1B,OAAJ,EAYrE;AAAA,SATKkB,UASL,GATkBA,UAAU,EAS5B;AAAA,SANkBE,YAMlB,GANkBA,YAMlB;AAAA,SALkBC,cAKlB,GALkBA,cAKlB;AAAA,SAJkBC,SAIlB,GAJkBA,SAIlB;AAAA,SAHkBC,OAGlB,GAHkBA,OAGlB;AAAA,SAFkBC,gBAElB,GAFkBA,gBAElB;AAAA,SADkBC,gBAClB,GADkBA,gBAClB;AACET,IAAAA,6BAA6B,CAACW,GAA9B,CAAkC,IAAlC;;AACA,QAAIF,gBAAJ,EAAsB;AAClB,WAAKG,aAAL,GAAqBX,kCAAkC,CAACQ,gBAAD,CAAvD;AACA,WAAKG,aAAL,CAAmBC,eAAnB,GAAqCC,IAArC,CAA0C,YAAM;AAC5C;AACA3B,QAAAA,cAAc,CAAC,KAAI,CAACsB,gBAAN,CAAd,CAAsCM,gBAAtC,CAAuD,SAAvD;AAAA,8EAAkE,iBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BAE1DA,GAAG,CAACC,IAAJ,KAAalB,8CAAb,IACAiB,GAAG,CAACE,SADJ,IAEAF,GAAG,CAACZ,YAAJ,KAAqB,KAAI,CAACA,YAF1B,IAGAY,GAAG,CAACX,cAAJ,KAAuB,KAAI,CAACA,cAH5B,IAIA,CAACW,GAAG,CAACG,QANqD;AAAA;AAAA;AAAA;;AAQpDC,oBAAAA,SARoD,GAQvCJ,GAAD,CAAaI,SAR2B;AASpDC,oBAAAA,MAToD,GAS1CL,GAAD,CAAaK,MAT8B;AAWtDC,oBAAAA,OAXsD,GAW5C,KAX4C;AAAA;AAAA;AAAA,2BAavC,SAAC,KAAD,EAAcF,SAAd,eAA4BC,MAA5B,CAbuC;;AAAA;AAatDE,oBAAAA,MAbsD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAetDD,oBAAAA,OAAO,GAAG,IAAV;AACAC,oBAAAA,MAAM,cAAN;;AAhBsD;AAkBpDJ,oBAAAA,QAlBoD,GAkBL;AACjDA,sBAAAA,QAAQ,EAAE,IADuC;AAEjDD,sBAAAA,SAAS,EAAEF,GAAG,CAACE,SAFkC;AAGjDd,sBAAAA,YAAY,EAAE,KAAI,CAACA,YAH8B;AAIjDC,sBAAAA,cAAc,EAAE,KAAI,CAACA,cAJ4B;AAKjDkB,sBAAAA,MAAM,EAANA,MALiD;AAMjDD,sBAAAA,OAAO,EAAPA,OANiD;AAOjDL,sBAAAA,IAAI,EAAED,GAAG,CAACC;AAPuC,qBAlBK;AA2B1D9B,oBAAAA,cAAc,CAAC,KAAI,CAACsB,gBAAN,CAAd,CAAsCe,WAAtC,CAAkDL,QAAlD;;AA3B0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAlE;;AAAA;AAAA;AAAA;AAAA;AA8BH,OAhCD;AAiCH;AACJ;;AApDL;;AAAA,SAsDYM,aAtDZ,GAsDI,yBAAwB;AACpB,QAAMC,GAAG,GAAGvC,cAAc,CAAC,KAAKmB,SAAL,CAAeqB,UAAhB,CAA1B;AACA,WAAOD,GAAP;AACH;AAED;AACJ;AACA;AACA;AA9DA;;AAAA,SA+DkBE,iBA/DlB;AAAA;AAAA;AAAA,sFA+DI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACQ,KAAKtB,SAAL,CAAeqB,UADvB;AAAA;AAAA;AAAA;;AAAA,gDAEe,KAAKrB,SAAL,CAAeqB,UAF9B;;AAAA;AAIUf,cAAAA,aAJV,GAI0BzB,cAAc,CAAC,KAAKyB,aAAN,CAJxC;;AAAA;AAAA,kBAMSA,aAAa,CAACiB,SANvB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAQcjB,aAAa,CAACkB,SAAd,EARd;;AAAA;AAAA;AAAA,qBAiBcvC,WAAW,CAAC,CAAD,CAjBzB;;AAAA;AAAA;AAAA;;AAAA;AAAA,oBAqBQqB,aAAa,CAACmB,QAAd,IACA,CAAC,KAAKzB,SAAL,CAAeqB,UAtBxB;AAAA;AAAA;AAAA;;AAwBQ;AACA,mBAAKrB,SAAL,CAAeqB,UAAf,GAA4BK,4BAA4B,CAAC;AACrD5B,gBAAAA,YAAY,EAAE,KAAKA,YADkC;AAErDC,gBAAAA,cAAc,EAAE,KAAKA,cAFgC;AAGrDE,gBAAAA,OAAO,EAAE,KAAKA,OAHuC;AAIrDE,gBAAAA,gBAAgB,EAAE,KAAKA;AAJ8B,eAAD,EAKrD,KAAKD,gBALgD,CAAxD;AAzBR,gDA+Be,KAAKiB,aAAL,EA/Bf;;AAAA;AAAA,gDAkCe,KAlCf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/DJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAqGkBQ,qBArGlB;AAAA,0FAqGI,kBACIb,SADJ,EAEIC,MAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAIUZ,cAAAA,gBAJV,GAI6BtB,cAAc,CAAC,KAAKsB,gBAAN,CAJ3C;AAKUS,cAAAA,SALV,GAKsB1B,iBAAiB,CAAC,EAAD,CALvC;AAMU0C,cAAAA,eANV,GAM4B,IAAIC,OAAJ,CAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnD,oBAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACtB,GAAD,EAAc;AAC3B,sBACIA,GAAG,CAACC,IAAJ,KAAalB,8CAAb,IACAiB,GAAG,CAACG,QAAJ,KAAiB,IADjB,IAEAH,GAAG,CAACE,SAAJ,KAAkBA,SAHtB,EAIE;AACE,wBAAIF,GAAG,CAACM,OAAR,EAAiB;AACbb,sBAAAA,gBAAgB,CAAC8B,mBAAjB,CAAqC,SAArC,EAAgDD,QAAhD;AACAD,sBAAAA,GAAG,CAACrB,GAAG,CAACO,MAAL,CAAH;AACH,qBAHD,MAGO;AACHd,sBAAAA,gBAAgB,CAAC8B,mBAAjB,CAAqC,SAArC,EAAgDD,QAAhD;AACAF,sBAAAA,GAAG,CAACpB,GAAG,CAACO,MAAL,CAAH;AACH;AACJ;AACJ,iBAdD;;AAeAd,gBAAAA,gBAAgB,CAACM,gBAAjB,CAAkC,SAAlC,EAA6CuB,QAA7C;AACH,eAjBuB,CAN5B;AAwBI7B,cAAAA,gBAAgB,CAACe,WAAjB,CAA6B;AACzBL,gBAAAA,QAAQ,EAAE,KADe;AAEzBF,gBAAAA,IAAI,EAAElB,8CAFmB;AAGzBqB,gBAAAA,SAAS,EAATA,SAHyB;AAIzBC,gBAAAA,MAAM,EAANA,MAJyB;AAKzBH,gBAAAA,SAAS,EAATA,SALyB;AAMzBd,gBAAAA,YAAY,EAAE,KAAKA,YANM;AAOzBC,gBAAAA,cAAc,EAAE,KAAKA;AAPI,eAA7B;AAxBJ;AAAA,qBAiCyB6B,eAjCzB;;AAAA;AAiCUX,cAAAA,MAjCV;AAAA,gDAkCWA,MAlCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArGJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0IUiB,SA1IV;AAAA,8EA0II,kBAA2BC,cAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACQA,cAAc,CAACC,MAAf,KAA0B,CADlC;AAAA;AAAA;AAAA;;AAAA,oBAEczD,UAAU,CAAC,IAAD,EAAO;AACnB0D,gBAAAA,IAAI,EAAE;AACFF,kBAAAA,cAAc,EAAdA;AADE;AADa,eAAP,CAFxB;;AAAA;AAAA;AAAA,qBAS6B,KAAKb,iBAAL,EAT7B;;AAAA;AASUD,cAAAA,UATV;;AAAA,kBAUSA,UAVT;AAAA;AAAA;AAAA;;AAAA,gDAWe,KAAKM,qBAAL,CAA2B,WAA3B,EAAwC,CAACQ,cAAD,CAAxC,CAXf;;AAAA;AAcUG,cAAAA,UAdV,GAcuBjB,UAAU,CAACiB,UAdlC;AAeUC,cAAAA,SAfV,GAesBxD,GAAG,EAfzB;AAAA;AAAA,qBAgBUE,WAAW,CAAC,CAAD,CAhBrB;;AAAA;AAkBUmC,cAAAA,GAlBV,GAkB4D;AACpDoB,gBAAAA,OAAO,EAAE,IAAIC,GAAJ,EAD2C;AAEpDC,gBAAAA,KAAK,EAAE,IAAID,GAAJ;AAF6C,eAlB5D;AAsBUE,cAAAA,YAtBV,GAsBoE,IAAIF,GAAJ,EAtBpE;AAuBIN,cAAAA,cAAc,CAACS,OAAf,CAAuB,UAAAC,QAAQ,EAAI;AAC/B,oBAAMC,EAAE,GAAGD,QAAQ,CAACE,QAAT,CAAkBC,GAA7B;AACAL,gBAAAA,YAAY,CAACM,GAAb,CAAiBH,EAAjB,EAAqBD,QAArB;AACA,oBAAMK,QAAQ,GAAGpE,SAAS,CAAC+D,QAAQ,CAACE,QAAV,CAA1B;AACA,oBAAMI,OAAO,GAAGb,UAAU,CAACc,EAAX,CAAc,KAAd,EAAqBN,EAArB,CAAhB;AACA,oBAAMO,QAAQ,GAAGR,QAAQ,CAACQ,QAAT,GAAoBR,QAAQ,CAACQ,QAA7B,GAAwCf,UAAU,CAACc,EAAX,CAAc,KAAd,EAAqBN,EAArB,CAAzD;AACA,oBAAMQ,YAAY,GAAGD,QAAQ,GAAGrE,aAAa,CAACqE,QAAQ,CAACE,IAAV,CAAb,CAA6BC,MAA7B,GAAsC,CAAzC,GAA6C,CAA1E;AACA,oBAAMC,WAAW,GAAGH,YAAY,GAAG,GAAf,GAAqB1E,cAAc,CAACiE,QAAQ,CAACE,QAAV,EAAoB,IAApB,CAAvD;AACAG,gBAAAA,QAAQ,CAACK,IAAT,GAAgBE,WAAhB;;AACA,oBAAIN,OAAJ,EAAa;AACT,sBACI,CAACN,QAAQ,CAACQ,QAAV,IACAF,OAAO,CAACI,IAAR,KAAiBV,QAAQ,CAACQ,QAAT,CAAkBE,IAFvC,EAGE;AACE;AACA,wBAAMG,GAA4C,GAAG;AACjD1C,sBAAAA,OAAO,EAAE,IADwC;AAEjD2C,sBAAAA,MAAM,EAAE,GAFyC;AAGjDC,sBAAAA,UAAU,EAAEd,EAHqC;AAIjDD,sBAAAA,QAAQ,EAAEA;AAJuC,qBAArD;AAMAzB,oBAAAA,GAAG,CAACsB,KAAJ,CAAUO,GAAV,CAAcH,EAAd,EAAkBY,GAAlB;AACA;AACH,mBAbD,MAaO;AACH,wBAAMG,MAAW,GAAG/E,SAAS,CAACoE,QAAD,CAA7B;AACAW,oBAAAA,MAAM,CAACC,KAAP,GAAeX,OAAO,CAACW,KAAvB;AACAxB,oBAAAA,UAAU,CAACyB,MAAX,CAAkBF,MAAlB;AACH;AACJ,iBAnBD,MAmBO;AACHvB,kBAAAA,UAAU,CAAC0B,MAAX,CAAkBd,QAAlB;AACH;;AAED9B,gBAAAA,GAAG,CAACoB,OAAJ,CAAYS,GAAZ,CAAgBH,EAAhB,EAAoBI,QAApB;AAEA,oBAAMe,OAAO,GAAGlF,GAAG,EAAnB;AAEA,oBAAImF,KAAJ;;AACA,oBAAI,CAACrB,QAAQ,CAACQ,QAAd,EAAwB;AACpB;AACAa,kBAAAA,KAAK,GAAG;AACJpD,oBAAAA,SAAS,EAAE,QADP;AAEJqD,oBAAAA,GAAG,EAAEjB,QAFD;AAGJJ,oBAAAA,EAAE,EAAEA,EAHA;AAIJO,oBAAAA,QAAQ,EAAE;AAJN,mBAAR;AAMH,iBARD,MAQO,IAAIR,QAAQ,CAACE,QAAT,CAAkBqB,QAAtB,EAAgC;AACnC;AAEA;AACA;AACA;AACA,sBAAMC,WAAW,GAAGvF,SAAS,CAAC+D,QAAQ,CAACQ,QAAV,CAA7B;AACAgB,kBAAAA,WAAW,CAACd,IAAZ,GAAmBE,WAAnB;AAEAS,kBAAAA,KAAK,GAAG;AACJpD,oBAAAA,SAAS,EAAE,QADP;AAEJqD,oBAAAA,GAAG,EAAE,IAFD;AAGJrB,oBAAAA,EAAE,EAAFA,EAHI;AAIJO,oBAAAA,QAAQ,EAAEgB;AAJN,mBAAR;AAMH,iBAfM,MAeA;AACH;AACAH,kBAAAA,KAAK,GAAG;AACJpD,oBAAAA,SAAS,EAAE,QADP;AAEJqD,oBAAAA,GAAG,EAAEjB,QAFD;AAGJJ,oBAAAA,EAAE,EAAEA,EAHA;AAIJO,oBAAAA,QAAQ,EAAER,QAAQ,CAACQ;AAJf,mBAAR;AAMH;;AAED,oBACIR,QAAQ,CAACE,QAAT,CAAkBqB,QAAlB,KAEI,CAACvB,QAAQ,CAACQ,QAAV,IACAR,QAAQ,CAACQ,QAAT,CAAkBe,QAHtB,CADJ,EAME;AACE;AAChB;AACA;AACA;AACa,iBAXD,MAWO;AACH,sBAAMD,GAAmC,GAAGD,KAAK,CAACpD,SAAN,KAAoB,QAApB,GAA+BoD,KAAK,CAACb,QAArC,GAAuDa,KAAK,CAACC,GAAzG;AACA,sBAAMG,OAAO,GAAG/E,eAAe,CAAC,IAAD,EAAO4E,GAAG,CAACnB,GAAX,EAAgBmB,GAAG,CAACZ,IAAJ,GAAWY,GAAG,CAACZ,IAAf,GAAsB,EAAtC,CAA/B;AACA,sBAAMgB,kBAAwE,GAAG;AAC7ED,oBAAAA,OAAO,EAAPA,OAD6E;AAE7EV,oBAAAA,UAAU,EAAEd,EAFiE;AAG7E0B,oBAAAA,MAAM,EAAEN,KAHqE;AAI7E3B,oBAAAA,SAAS,EAATA,SAJ6E;AAK7E0B,oBAAAA,OAAO,EAAPA;AAL6E,mBAAjF;;AAOA,kBAAA,MAAI,CAAC7D,QAAL,CAAcqE,IAAd,CAAmBF,kBAAnB;AACH;AAEJ,eA9FD;AAvBJ,gDAwHWnD,GAxHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1IJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAoQUsD,sBApQV;AAAA,2FAoQI,kBAA8CC,GAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC6B,KAAKrD,iBAAL,EAD7B;;AAAA;AACUD,cAAAA,UADV;;AAAA,kBAESA,UAFT;AAAA;AAAA;AAAA;;AAAA,gDAGe,KAAKM,qBAAL,CAA2B,wBAA3B,EAAqD,CAACgD,GAAD,CAArD,CAHf;;AAAA;AAAA;AAAA,qBAMU1F,WAAW,CAAC,CAAD,CANrB;;AAAA;AAOUqD,cAAAA,UAPV,GAOuBjB,UAAU,CAACiB,UAPlC;AASUlB,cAAAA,GATV,GAS6D,IAAIqB,GAAJ,EAT7D;AAUIkC,cAAAA,GAAG,CAAC/B,OAAJ,CAAY,UAAAE,EAAE,EAAI;AACd,oBAAM8B,YAAY,GAAGtC,UAAU,CAACc,EAAX,CAAc,KAAd,EAAqBN,EAArB,CAArB;;AACA,oBACI8B,YAAY,IACZ,CAACA,YAAY,CAACR,QAFlB,EAGE;AACEhD,kBAAAA,GAAG,CAAC6B,GAAJ,CAAQH,EAAR,EAAY8B,YAAZ;AACH;AACJ,eARD;AAVJ,gDAmBWxD,GAnBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApQJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SAyRIyD,YAzRJ,GAyRI,wBAA+F;AAC3F,WAAO,KAAKzE,QAAL,CAAc0E,YAAd,EAAP;AACH,GA3RL;;AAAA,SA4RUC,KA5RV;AAAA,0EA4RI;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,mBAAK3E,QAAL,CAAc4E,QAAd;AACAtF,cAAAA,6BAA6B,UAA7B,CAAqC,IAArC;;AAFJ,mBAGQ,KAAKM,SAAL,CAAeqB,UAHvB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAIiC,KAAKF,aAAL,EAJjC;;AAAA;AAIcE,cAAAA,UAJd;AAAA;AAAA,qBAKchC,oBAAoB,CACtB,KAAKS,YADiB,EAEtB,CACIuB,UAAU,CAACiB,UADf,EAEIjB,UAAU,CAAC4D,iBAFf,CAFsB,CALlC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5RJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA,SA0SUC,MA1SV;AAAA,2EA0SI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC6B,KAAK5D,iBAAL,EAD7B;;AAAA;AACUD,cAAAA,UADV;;AAAA,kBAESA,UAFT;AAAA;AAAA;AAAA;;AAAA,gDAGe,KAAKM,qBAAL,CAA2B,QAA3B,EAAqC,EAArC,CAHf;;AAAA;AAKIN,cAAAA,UAAU,CAAC8D,QAAX,CAAoBC,gBAApB,CAAqC,KAAKrF,cAAL,GAAsBX,oBAA3D;AACAiC,cAAAA,UAAU,CAAC8D,QAAX,CAAoBC,gBAApB,CAAqC/D,UAAU,CAAC4D,iBAAX,CAA6BI,IAAlE;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1SJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAqTA,gBAAsB3D,4BAAtB;AAAA;AAAA;;;2FAAO,kBACHX,MADG,EAEHb,gBAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAIH,gBAAI,CAACa,MAAM,CAACd,OAAZ,EAAqB;AACjBc,cAAAA,MAAM,CAACd,OAAP,GAAiB,EAAjB;AACH;;AANE;AAAA,mBAOyBX,eAAe,CAACyB,MAAM,CAACjB,YAAR,EAAsBI,gBAAtB,CAPxC;;AAAA;AAOGoF,YAAAA,aAPH;AASGC,YAAAA,iBATH,GASwEC,MAAM,CAACC,MAAP,CACvE,EADuE,EAEvE1E,MAAM,CAACd,OAAP,CAAeqC,UAFwD,EAGvE;AACIoD,cAAAA,OAAO,EAAE,EADb;AAEIC,cAAAA,MAAM,EAAE,CAAC,KAAD;AAFZ,aAHuE,EAOvEnG,iCAPuE,CATxE;AAmBGoG,YAAAA,mBAnBH,GAmByB7E,MAAM,CAAChB,cAAP,GAAwBX,oBAnBjD;AAoBGkD,YAAAA,UApBH,GAoB4BgD,aAAa,CAACH,QAAd,CAAuBU,aAAvB,CAC3BD,mBAD2B,EAE3BL,iBAF2B,CApB5B;AAwBHD,YAAAA,aAAa,CAACQ,eAAd,CAA8BF,mBAA9B,IAAqDtD,UAArD;AAEMyD,YAAAA,qBA1BH,GA0B2BhF,MAAM,CAAChB,cAAP,GAAwBX,oBAAxB,GAA+CD,yBA1B1E;AA2BG6G,YAAAA,wBA3BH,GA2B8BR,MAAM,CAACC,MAAP,CAAc;AAC3CE,cAAAA,MAAM,EAAE,CAAC,SAAD,CADmC;AAE3CD,cAAAA,OAAO,EAAE,CAAC,UAAD;AAFkC,aAAd,EAG9BlG,iCAH8B,CA3B9B;AA+BGyF,YAAAA,iBA/BH,GA+BmCK,aAAa,CAACH,QAAd,CAAuBU,aAAvB,CAClCE,qBADkC,EAElCC,wBAFkC,CA/BnC;AAmCHV,YAAAA,aAAa,CAACQ,eAAd,CAA8BC,qBAA9B,IAAuDd,iBAAvD;AAnCG,8CAoCI;AACHE,cAAAA,QAAQ,EAAEG,aAAa,CAACH,QADrB;AAEH7C,cAAAA,UAAU,EAAVA,UAFG;AAGH2C,cAAAA,iBAAiB,EAAjBA;AAHG,aApCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA2CP,gBAAsBgB,kCAAtB;AAAA;AAAA;;;iGAAO,kBACHlF,MADG,EAEHb,gBAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAIGF,YAAAA,SAJH,GAIqC,EAJrC,EAKH;;AALG,gBAMEe,MAAM,CAACZ,gBANT;AAAA;AAAA;AAAA;;AAOCH,YAAAA,SAAS,CAACqB,UAAV,GAAuBK,4BAA4B,CAACX,MAAD,EAASb,gBAAT,CAAnD;AAPD;AAAA,mBAQOF,SAAS,CAACqB,UARjB;;AAAA;AAWG6E,YAAAA,QAXH,GAWc,IAAIrG,8BAAJ,CACbkB,MAAM,CAACjB,YADM,EAEbiB,MAAM,CAAChB,cAFM,EAGbC,SAHa,EAIbe,MAAM,CAACd,OAJM,EAKbC,gBALa,EAMba,MAAM,CAACZ,gBANM,CAXd;AAAA,8CAmBI+F,QAnBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import type { ChangeEvent } from 'event-reduce-js';\nimport { Observable, Subject } from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type { BroadcastChannel, LeaderElector } from 'broadcast-channel';\nimport type {\n    BulkWriteLocalRow,\n    LokiDatabaseSettings,\n    LokiLocalState,\n    LokiRemoteRequestBroadcastMessage,\n    LokiRemoteResponseBroadcastMessage,\n    LokiSettings,\n    LokiStorageInternals,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxStorageBulkWriteLocalError,\n    RxStorageChangeEvent,\n    RxStorageKeyObjectInstance\n} from '../../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    now,\n    parseRevision,\n    promiseWait,\n    randomCouchString\n} from '../../util';\nimport {\n    CHANGES_COLLECTION_SUFFIX,\n    CHANGES_LOCAL_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE,\n    OPEN_LOKIJS_STORAGE_INSTANCES\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election';\n\nlet instanceId = 1;\n\nexport class RxStorageKeyObjectInstanceLoki implements RxStorageKeyObjectInstance<LokiStorageInternals, LokiSettings> {\n\n    private changes$: Subject<RxStorageChangeEvent<RxLocalDocumentData>> = new Subject();\n    public readonly leaderElector?: LeaderElector;\n\n    public instanceId = instanceId++;\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings,\n        public readonly broadcastChannel?: BroadcastChannel<LokiRemoteRequestBroadcastMessage | LokiRemoteResponseBroadcastMessage>\n    ) {\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (broadcastChannel) {\n            this.leaderElector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n            this.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.broadcastChannel).addEventListener('message', async (msg) => {\n                    if (\n                        msg.type === LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                        msg.requestId &&\n                        msg.databaseName === this.databaseName &&\n                        msg.collectionName === this.collectionName &&\n                        !msg.response\n                    ) {\n                        const operation = (msg as any).operation;\n                        const params = (msg as any).params;\n                        let result: any;\n                        let isError = false;\n                        try {\n                            result = await (this as any)[operation](...params);\n                        } catch (err) {\n                            isError = true;\n                            result = err;\n                        }\n                        const response: LokiRemoteResponseBroadcastMessage = {\n                            response: true,\n                            requestId: msg.requestId,\n                            databaseName: this.databaseName,\n                            collectionName: this.collectionName,\n                            result,\n                            isError,\n                            type: msg.type\n                        };\n                        ensureNotFalsy(this.broadcastChannel).postMessage(response);\n                    }\n                });\n            });\n        }\n    }\n\n    private getLocalState() {\n        const ret = ensureNotFalsy(this.internals.localState);\n        return ret;\n    }\n\n    /**\n     * If the local state must be used, that one is returned.\n     * Returns false if a remote instance must be used.\n     */\n    private async mustUseLocalState(): Promise<LokiLocalState | false> {\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n        const leaderElector = ensureNotFalsy(this.leaderElector);\n        while (\n            !leaderElector.hasLeader\n        ) {\n            await leaderElector.applyOnce();\n\n            // TODO why do we need this line to pass the tests?\n            // otherwise we somehow do never get a leader.\n            /**\n             * TODO why do we need this line to pass the tests?\n             * Without it, we somehow do never get a leader.\n             * Does applyOnce() fully block the cpu?\n             */\n            await promiseWait(0); // TODO remove this line\n        }\n\n        if (\n            leaderElector.isLeader &&\n            !this.internals.localState\n        ) {\n            // own is leader, use local instance\n            this.internals.localState = createLokiKeyValueLocalState({\n                databaseName: this.databaseName,\n                collectionName: this.collectionName,\n                options: this.options,\n                broadcastChannel: this.broadcastChannel\n            }, this.databaseSettings);\n            return this.getLocalState();\n        } else {\n            // other is leader, send message to remote leading instance\n            return false;\n        }\n    }\n\n    private async requestRemoteInstance(\n        operation: string,\n        params: any[]\n    ): Promise<any | any[]> {\n        const broadcastChannel = ensureNotFalsy(this.broadcastChannel);\n        const requestId = randomCouchString(12);\n        const responsePromise = new Promise<any>((res, rej) => {\n            const listener = (msg: any) => {\n                if (\n                    msg.type === LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                    msg.response === true &&\n                    msg.requestId === requestId\n                ) {\n                    if (msg.isError) {\n                        broadcastChannel.removeEventListener('message', listener);\n                        rej(msg.result);\n                    } else {\n                        broadcastChannel.removeEventListener('message', listener);\n                        res(msg.result);\n                    }\n                }\n            };\n            broadcastChannel.addEventListener('message', listener);\n        });\n        broadcastChannel.postMessage({\n            response: false,\n            type: LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE,\n            operation,\n            params,\n            requestId,\n            databaseName: this.databaseName,\n            collectionName: this.collectionName\n        });\n        const result = await responsePromise;\n        return result;\n    }\n\n    async bulkWrite<RxDocType>(documentWrites: BulkWriteLocalRow<RxDocType>[]): Promise<RxLocalStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkWrite', [documentWrites]);\n        }\n\n        const collection = localState.collection;\n        const startTime = now();\n        await promiseWait(0);\n\n        const ret: RxLocalStorageBulkWriteResponse<RxDocType> = {\n            success: new Map(),\n            error: new Map()\n        };\n        const writeRowById: Map<string, BulkWriteLocalRow<RxDocType>> = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document._id;\n            writeRowById.set(id, writeRow);\n            const writeDoc = flatClone(writeRow.document);\n            const docInDb = collection.by('_id', id);\n            const previous = writeRow.previous ? writeRow.previous : collection.by('_id', id);\n            const newRevHeight = previous ? parseRevision(previous._rev).height + 1 : 1;\n            const newRevision = newRevHeight + '-' + createRevision(writeRow.document, true);\n            writeDoc._rev = newRevision;\n            if (docInDb) {\n                if (\n                    !writeRow.previous ||\n                    docInDb._rev !== writeRow.previous._rev\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteLocalError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error.set(id, err);\n                    return;\n                } else {\n                    const toLoki: any = flatClone(writeDoc);\n                    toLoki.$loki = docInDb.$loki;\n                    collection.update(toLoki);\n                }\n            } else {\n                collection.insert(writeDoc);\n            }\n\n            ret.success.set(id, writeDoc);\n\n            const endTime = now();\n\n            let event: ChangeEvent<RxLocalDocumentData<RxDocType>>;\n            if (!writeRow.previous) {\n                // was insert\n                event = {\n                    operation: 'INSERT',\n                    doc: writeDoc,\n                    id: id,\n                    previous: null\n                };\n            } else if (writeRow.document._deleted) {\n                // was delete\n\n                // we need to add the new revision to the previous doc\n                // so that the eventkey is calculated correctly.\n                // Is this a hack? idk.\n                const previousDoc = flatClone(writeRow.previous);\n                previousDoc._rev = newRevision;\n\n                event = {\n                    operation: 'DELETE',\n                    doc: null,\n                    id,\n                    previous: previousDoc\n                };\n            } else {\n                // was update\n                event = {\n                    operation: 'UPDATE',\n                    doc: writeDoc,\n                    id: id,\n                    previous: writeRow.previous\n                };\n            }\n\n            if (\n                writeRow.document._deleted &&\n                (\n                    !writeRow.previous ||\n                    writeRow.previous._deleted\n                )\n            ) {\n                /**\n                 * An already deleted document was added to the storage engine,\n                 * do not emit an event because it does not affect anything.\n                 */\n            } else {\n                const doc: RxLocalDocumentData<RxDocType> = event.operation === 'DELETE' ? event.previous as any : event.doc as any;\n                const eventId = getLokiEventKey(true, doc._id, doc._rev ? doc._rev : '');\n                const storageChangeEvent: RxStorageChangeEvent<RxLocalDocumentData<RxDocType>> = {\n                    eventId,\n                    documentId: id,\n                    change: event,\n                    startTime,\n                    endTime\n                };\n                this.changes$.next(storageChangeEvent);\n            }\n\n        });\n\n\n        return ret;\n    }\n    async findLocalDocumentsById<RxDocType = any>(ids: string[]): Promise<Map<string, RxLocalDocumentData<RxDocType>>> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('findLocalDocumentsById', [ids]);\n        }\n\n        await promiseWait(0);\n        const collection = localState.collection;\n\n        const ret: Map<string, RxLocalDocumentData<RxDocType>> = new Map();\n        ids.forEach(id => {\n            const documentInDb = collection.by('_id', id);\n            if (\n                documentInDb &&\n                !documentInDb._deleted\n            ) {\n                ret.set(id, documentInDb);\n            }\n        });\n        return ret;\n    }\n    changeStream(): Observable<RxStorageChangeEvent<RxLocalDocumentData<{ [key: string]: any; }>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n        if (this.internals.localState) {\n            const localState = await this.getLocalState();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection,\n                    localState.changesCollection\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('remove', []);\n        }\n        localState.database.removeCollection(this.collectionName + CHANGES_LOCAL_SUFFIX);\n        localState.database.removeCollection(localState.changesCollection.name);\n    }\n}\n\n\nexport async function createLokiKeyValueLocalState(\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalState> {\n    if (!params.options) {\n        params.options = {};\n    }\n    const databaseState = await getLokiDatabase(params.databaseName, databaseSettings);\n\n    const collectionOptions: Partial<CollectionOptions<RxLocalDocumentData>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: [],\n            unique: ['_id']\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const localCollectionName = params.collectionName + CHANGES_LOCAL_SUFFIX;\n    const collection: Collection = databaseState.database.addCollection(\n        localCollectionName,\n        collectionOptions\n    );\n    databaseState.openCollections[localCollectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_LOCAL_SUFFIX + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS);\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.openCollections[changesCollectionName] = changesCollection;\n    return {\n        database: databaseState.database,\n        collection,\n        changesCollection\n    }\n}\n\nexport async function createLokiKeyObjectStorageInstance(\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageKeyObjectInstanceLoki> {\n    const internals: LokiStorageInternals = {};\n    // optimisation shortcut, directly create db is non multi instance.\n    if (!params.broadcastChannel) {\n        internals.localState = createLokiKeyValueLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageKeyObjectInstanceLoki(\n        params.databaseName,\n        params.collectionName,\n        internals,\n        params.options,\n        databaseSettings,\n        params.broadcastChannel\n    );\n    return instance;\n}\n"],"file":"rx-storage-key-object-instance-loki.js"}