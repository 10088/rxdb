{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-key-object-instance-loki.ts"],"names":["Subject","newRxError","createRevision","ensureNotFalsy","flatClone","now","parseRevision","promiseWait","randomCouchString","CHANGES_COLLECTION_SUFFIX","closeLokiCollections","getLokiDatabase","getLokiEventKey","getLokiLeaderElector","LOKIJS_COLLECTION_DEFAULT_OPTIONS","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","OPEN_LOKIJS_STORAGE_INSTANCES","removeLokiLeaderElectorReference","stripLokiKey","instanceId","RxStorageKeyObjectInstanceLoki","storage","databaseName","collectionName","internals","options","databaseSettings","changes$","closed","add","leaderElector","awaitLeadership","then","broadcastChannel","addEventListener","msg","type","requestId","response","operation","params","isError","result","postMessage","getLocalState","ret","localState","mustUseLocalState","hasLeader","applyOnce","isLeader","createLokiKeyValueLocalState","multiInstance","requestRemoteInstance","responsePromise","Promise","res","rej","listener","removeEventListener","bulkWrite","documentWrites","length","args","startTime","success","error","writeRowById","Map","eventBulk","id","events","forEach","writeRow","document","_id","set","writeDoc","docInDb","collection","by","previous","newRevHeight","_rev","height","newRevision","err","status","documentId","toLoki","$loki","update","insert","endTime","event","doc","_deleted","previousDoc","eventId","storageChangeEvent","change","push","databaseState","saveQueue","addWrite","next","findLocalDocumentsById","ids","documentInDb","changeStream","asObservable","close","complete","changesCollection","remove","database","removeCollection","name","collectionOptions","Object","assign","indices","unique","addCollection","collections","changesCollectionName","changesCollectionOptions","createLokiKeyObjectStorageInstance","instance"],"mappings":"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","sourcesContent":["import type { ChangeEvent } from 'event-reduce-js';\nimport { Observable, Subject } from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type { BroadcastChannel, LeaderElector } from 'broadcast-channel';\nimport type {\n    BulkWriteLocalRow,\n    EventBulk,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    LokiRemoteRequestBroadcastMessage,\n    LokiRemoteResponseBroadcastMessage,\n    LokiSettings,\n    LokiStorageInternals,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxStorageBulkWriteLocalError,\n    RxStorageChangeEvent,\n    RxStorageKeyObjectInstance\n} from '../../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    now,\n    parseRevision,\n    promiseWait,\n    randomCouchString\n} from '../../util';\nimport {\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    getLokiLeaderElector,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    removeLokiLeaderElectorReference,\n    stripLokiKey\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election';\nimport { IdleQueue } from 'custom-idle-queue';\nimport { RxStorageLoki } from './rx-storage-lokijs';\n\nlet instanceId = 1;\n\nexport class RxStorageKeyObjectInstanceLoki implements RxStorageKeyObjectInstance<LokiStorageInternals, LokiSettings> {\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxLocalDocumentData>>> = new Subject();\n\n    public instanceId = instanceId++;\n    private closed = false;\n\n    constructor(\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel.addEventListener('message', async (msg) => {\n                    if (\n                        msg.type === LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                        msg.requestId &&\n                        msg.databaseName === this.databaseName &&\n                        msg.collectionName === this.collectionName &&\n                        !msg.response\n                    ) {\n                        const operation = (msg as any).operation;\n                        const params = (msg as any).params;\n                        let result: any;\n                        let isError = false;\n                        try {\n                            result = await (this as any)[operation](...params);\n                        } catch (err) {\n                            isError = true;\n                            result = err;\n                        }\n                        const response: LokiRemoteResponseBroadcastMessage = {\n                            response: true,\n                            requestId: msg.requestId,\n                            databaseName: this.databaseName,\n                            collectionName: this.collectionName,\n                            result,\n                            isError,\n                            type: msg.type\n                        };\n                        ensureNotFalsy(this.internals.leaderElector).broadcastChannel.postMessage(response);\n                    }\n                });\n            });\n        }\n    }\n\n    private getLocalState() {\n        const ret = ensureNotFalsy(this.internals.localState);\n        return ret;\n    }\n\n    /**\n     * If the local state must be used, that one is returned.\n     * Returns false if a remote instance must be used.\n     */\n    public async mustUseLocalState(): Promise<LokiLocalDatabaseState | false> {\n        if (this.closed) {\n            return false;\n        }\n\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n        const leaderElector = ensureNotFalsy(this.internals.leaderElector);\n\n        while (\n            !leaderElector.hasLeader\n        ) {\n            await leaderElector.applyOnce();\n\n            // TODO why do we need this line to pass the tests?\n            // otherwise we somehow do never get a leader.\n            /**\n             * TODO why do we need this line to pass the tests?\n             * Without it, we somehow do never get a leader.\n             * Does applyOnce() fully block the cpu?\n             */\n            await promiseWait(0); // TODO remove this line\n        }\n\n        /**\n         * It might already have a localState after the applying\n         * because another subtask also called mustUSeLocalState()\n         */\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n\n        if (\n            leaderElector.isLeader &&\n            !this.internals.localState\n        ) {\n            // own is leader, use local instance\n            this.internals.localState = createLokiKeyValueLocalState({\n                databaseName: this.databaseName,\n                collectionName: this.collectionName,\n                options: this.options,\n                multiInstance: this.internals.leaderElector ? true : false\n            }, this.databaseSettings);\n            return this.getLocalState();\n        } else {\n            // other is leader, send message to remote leading instance\n            return false;\n        }\n    }\n\n    private async requestRemoteInstance(\n        operation: string,\n        params: any[]\n    ): Promise<any | any[]> {\n        const broadcastChannel = ensureNotFalsy(this.internals.leaderElector).broadcastChannel;\n        const requestId = randomCouchString(12);\n        const responsePromise = new Promise<any>((res, rej) => {\n            const listener = (msg: any) => {\n                if (\n                    msg.type === LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                    msg.response === true &&\n                    msg.requestId === requestId\n                ) {\n                    if (msg.isError) {\n                        broadcastChannel.removeEventListener('message', listener);\n                        rej(msg.result);\n                    } else {\n                        broadcastChannel.removeEventListener('message', listener);\n                        res(msg.result);\n                    }\n                }\n            };\n            broadcastChannel.addEventListener('message', listener);\n        });\n        broadcastChannel.postMessage({\n            response: false,\n            type: LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE,\n            operation,\n            params,\n            requestId,\n            databaseName: this.databaseName,\n            collectionName: this.collectionName\n        });\n        const result = await responsePromise;\n        return result;\n    }\n\n    async bulkWrite<RxDocType>(documentWrites: BulkWriteLocalRow<RxDocType>[]): Promise<RxLocalStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkWrite', [documentWrites]);\n        }\n\n        const startTime = now();\n        await promiseWait(0);\n\n        const ret: RxLocalStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const writeRowById: Map<string, BulkWriteLocalRow<RxDocType>> = new Map();\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxLocalDocumentData>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document._id;\n            writeRowById.set(id, writeRow);\n            const writeDoc = flatClone(writeRow.document);\n            const docInDb = localState.collection.by('_id', id);\n            const previous = writeRow.previous ? writeRow.previous : localState.collection.by('_id', id);\n            const newRevHeight = previous ? parseRevision(previous._rev).height + 1 : 1;\n            const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n            writeDoc._rev = newRevision;\n            if (docInDb) {\n                if (\n                    !writeRow.previous ||\n                    docInDb._rev !== writeRow.previous._rev\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteLocalError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error[id] = err;\n                    return;\n                } else {\n                    const toLoki: any = flatClone(writeDoc);\n                    toLoki.$loki = docInDb.$loki;\n                    localState.collection.update(toLoki);\n                }\n            } else {\n                localState.collection.insert(flatClone(writeDoc));\n            }\n\n            ret.success[id] = stripLokiKey(writeDoc);\n\n            const endTime = now();\n\n            let event: ChangeEvent<RxLocalDocumentData<RxDocType>>;\n            if (!writeRow.previous) {\n                // was insert\n                event = {\n                    operation: 'INSERT',\n                    doc: writeDoc,\n                    id: id,\n                    previous: null\n                };\n            } else if (writeRow.document._deleted) {\n                // was delete\n\n                // we need to add the new revision to the previous doc\n                // so that the eventkey is calculated correctly.\n                // Is this a hack? idk.\n                const previousDoc = flatClone(writeRow.previous);\n                previousDoc._rev = newRevision;\n\n                event = {\n                    operation: 'DELETE',\n                    doc: null,\n                    id,\n                    previous: previousDoc\n                };\n            } else {\n                // was update\n                event = {\n                    operation: 'UPDATE',\n                    doc: writeDoc,\n                    id: id,\n                    previous: writeRow.previous\n                };\n            }\n\n            if (\n                writeRow.document._deleted &&\n                (\n                    !writeRow.previous ||\n                    writeRow.previous._deleted\n                )\n            ) {\n                /**\n                 * An already deleted document was added to the storage engine,\n                 * do not emit an event because it does not affect anything.\n                 */\n            } else {\n                const doc: RxLocalDocumentData<RxDocType> = event.operation === 'DELETE' ? event.previous as any : event.doc as any;\n                const eventId = getLokiEventKey(true, doc._id, doc._rev ? doc._rev : '');\n                const storageChangeEvent: RxStorageChangeEvent<RxLocalDocumentData<RxDocType>> = {\n                    eventId,\n                    documentId: id,\n                    change: event,\n                    startTime,\n                    endTime\n                };\n                eventBulk.events.push(storageChangeEvent);\n            }\n        });\n\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(eventBulk);\n        return ret;\n    }\n    async findLocalDocumentsById<RxDocType = any>(ids: string[]): Promise<{ [documentId: string]: RxLocalDocumentData<RxDocType> }> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('findLocalDocumentsById', [ids]);\n        }\n\n        await promiseWait(0);\n        const ret: { [documentId: string]: RxLocalDocumentData<RxDocType> } = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by('_id', id);\n            if (\n                documentInDb &&\n                !documentInDb._deleted\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxLocalDocumentData<{ [key: string]: any; }>>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n        if (this.internals.localState) {\n            const localState = await this.getLocalState();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    ensureNotFalsy(localState.collection),\n                    ensureNotFalsy(localState.changesCollection)\n                ]\n            );\n        }\n        removeLokiLeaderElectorReference(this.storage, this.databaseName);\n    }\n    async remove(): Promise<void> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        localState.databaseState.database.removeCollection(localState.changesCollection.name);\n        this.close();\n    }\n}\n\n\nexport async function createLokiKeyValueLocalState(\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    const collectionOptions: Partial<CollectionOptions<RxLocalDocumentData>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: [],\n            unique: ['_id']\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions\n    );\n    databaseState.collections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS);\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.collections[changesCollectionName] = collection;\n\n    return {\n        changesCollection,\n        collection,\n        databaseState\n    }\n}\n\nexport async function createLokiKeyObjectStorageInstance(\n    storage: RxStorageLoki,\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageKeyObjectInstanceLoki> {\n    const internals: LokiStorageInternals = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(storage, params.databaseName);\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiKeyValueLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageKeyObjectInstanceLoki(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    /**\n     * Directly create the localState if the db becomes leader.\n     */\n    if (params.multiInstance) {\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => instance.mustUseLocalState());\n    }\n\n\n    return instance;\n}\n"],"file":"rx-storage-key-object-instance-loki.js"}