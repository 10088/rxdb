{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"names":["Subject","lastOfArray","flatClone","now","ensureNotFalsy","isMaybeReadonlyArray","getFromMapOrThrow","newRxError","CHANGES_COLLECTION_SUFFIX","closeLokiCollections","getLokiDatabase","OPEN_LOKIJS_STORAGE_INSTANCES","LOKIJS_COLLECTION_DEFAULT_OPTIONS","stripLokiKey","getLokiSortComparator","getLokiLeaderElector","removeLokiLeaderElectorReference","requestRemoteInstance","mustUseLocalState","handleRemoteRequest","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","createLokiStorageInstance","storage","params","databaseSettings","instance","RxStorageInstanceLoki","databaseName","collectionName","schema","internals","options","multiInstance","leaderElector","awaitLeadership","then","closed","localState","createLokiLocalState","databaseState","indices","indexes","forEach","idx","push","primaryKey","collectionOptions","Object","assign","collection","unique","database","addCollection","collections","changesCollectionName","changesCollectionOptions","changesCollection","ret","instanceId","changes$","lastChangefeedSequence","primaryPath","add","broadcastChannel","addEventListener","msg","addChangeDocumentMeta","id","lastDoc","chain","simplesort","limit","data","sequence","nextFeedSequence","insert","bulkWrite","documentWrites","length","args","success","error","docsInDb","Map","docsInDbWithLokiKey","writeRow","document","documentInDb","by","set","categorized","bulkInsertDocs","docId","bulkUpdateDocs","documentInDbWithLokiKey","writeDoc","$loki","update","errors","err","documentId","changedDocumentIds","saveQueue","addWrite","next","eventBulk","findDocumentsById","ids","deleted","_deleted","query","preparedQuery","find","selector","sort","skip","offset","foundDocuments","map","lokiDoc","documents","getAttachmentData","_documentId","_attachmentId","Error","getChangedDocuments","desc","direction","operator","sinceSequence","changedDocuments","result","useForLastSequence","lastSequence","changeStream","asObservable","cleanup","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","remove","close","complete","dbState","run","removeCollection","name"],"mappings":"AAAA,SACIA,OADJ,QAGO,MAHP;AAIA,SACIC,WADJ,EAEIC,SAFJ,EAGIC,GAHJ,EAIIC,cAJJ,EAKIC,oBALJ,EAMIC,iBANJ,QAOO,YAPP;AAQA,SAASC,UAAT,QAA2B,gBAA3B;AAmBA,SACIC,yBADJ,EAEIC,oBAFJ,EAGIC,eAHJ,EAIIC,6BAJJ,EAKIC,iCALJ,EAMIC,YANJ,EAOIC,qBAPJ,EAQIC,oBARJ,EASIC,gCATJ,EAUIC,qBAVJ,EAWIC,iBAXJ,EAYIC,mBAZJ,QAaO,iBAbP;AAkBA,SAASC,2BAAT,QAA4C,wBAA5C;AACA,SAASC,uBAAT,QAAwC,yBAAxC;AAyWA,WAAsBC,yBAAtB,YAAsBA,yBAAtB,CACIC,OADJ,EAEIC,MAFJ,EAGIC,gBAHJ;AAAA,MAI6C;AAAA;AAYzC,UAAMC,QAAQ,GAAG,IAAIC,qBAAJ,CACbJ,OADa,EAEbC,MAAM,CAACI,YAFM,EAGbJ,MAAM,CAACK,cAHM,EAIbL,MAAM,CAACM,MAJM,EAKbC,UALa,EAMbP,MAAM,CAACQ,OANM,EAObP,gBAPa,CAAjB;AAUA;AACJ;AACA;;AACI,UAAID,MAAM,CAACS,aAAX,EAA0B;AACtB7B,QAAAA,cAAc,CAAC2B,UAAS,CAACG,aAAX,CAAd,CACKC,eADL,GAEKC,IAFL,CAEU,YAAM;AACR,cAAI,CAACV,QAAQ,CAACW,MAAd,EAAsB;AAClBnB,YAAAA,iBAAiB,CAACQ,QAAD,CAAjB;AACH;AACJ,SANL;AAOH;;AAGD,aAAOA,QAAP;AApCyC;;AACzC,QAAMK,UAA+B,GAAG,EAAxC;;AADyC;AAAA,UAGrCP,MAAM,CAACS,aAH8B;AAIrC,YAAMC,aAAa,GAAGnB,oBAAoB,CAACQ,OAAD,EAAUC,MAAM,CAACI,YAAjB,CAA1C;AACAG,QAAAA,UAAS,CAACG,aAAV,GAA0BA,aAA1B;AALqC;AAOrC;AACAH,QAAAA,UAAS,CAACO,UAAV,GAAuBC,oBAAoB,CAACf,MAAD,EAASC,gBAAT,CAA3C;AARqC,+BAS/BM,UAAS,CAACO,UATqB;AAAA;AAAA;;AAAA;AAqC5C,GAzCD;AAAA;AAAA;AAAA;AArEA,WAAsBC,oBAAtB,YAAsBA,oBAAtB,CACIf,MADJ,EAEIC,gBAFJ;AAAA,MAGmC;AAC/B,QAAI,CAACD,MAAM,CAACQ,OAAZ,EAAqB;AACjBR,MAAAA,MAAM,CAACQ,OAAP,GAAiB,EAAjB;AACH;;AAH8B,2BAKHtB,eAAe,CACvCc,MAAM,CAACI,YADgC,EAEvCH,gBAFuC,CALZ,iBAKzBe,aALyB;AAU/B;AACJ;AACA;AACA;AACI,UAAMC,OAAiB,GAAG,EAA1B;;AACA,UAAIjB,MAAM,CAACM,MAAP,CAAcY,OAAlB,EAA2B;AACvBlB,QAAAA,MAAM,CAACM,MAAP,CAAcY,OAAd,CAAsBC,OAAtB,CAA8B,UAAAC,GAAG,EAAI;AACjC,cAAI,CAACvC,oBAAoB,CAACuC,GAAD,CAAzB,EAAgC;AAC5BH,YAAAA,OAAO,CAACI,IAAR,CAAaD,GAAb;AACH;AACJ,SAJD;AAKH;AACD;AACJ;AACA;AACA;;;AACI,UAAME,UAAU,GAAG1B,2BAA2B,CAACI,MAAM,CAACM,MAAP,CAAcgB,UAAf,CAA9C;AACAL,MAAAA,OAAO,CAACI,IAAR,CAAaC,UAAb;AAEA,UAAMC,iBAAwE,GAAGC,MAAM,CAACC,MAAP,CAC7E,EAD6E,EAE7EzB,MAAM,CAACQ,OAAP,CAAekB,UAF8D,EAG7E;AACIT,QAAAA,OAAO,EAAEA,OADb;AAEIU,QAAAA,MAAM,EAAE,CAACL,UAAD;AAFZ,OAH6E,EAO7ElC,iCAP6E,CAAjF;AAUA,UAAMsC,UAAsB,GAAGV,aAAa,CAACY,QAAd,CAAuBC,aAAvB,CAC3B7B,MAAM,CAACK,cADoB,EAE3BkB,iBAF2B,CAA/B;AAIAP,MAAAA,aAAa,CAACc,WAAd,CAA0B9B,MAAM,CAACK,cAAjC,IAAmDqB,UAAnD;AAEA,UAAMK,qBAAqB,GAAG/B,MAAM,CAACK,cAAP,GAAwBrB,yBAAtD;AACA,UAAMgD,wBAAwB,GAAGR,MAAM,CAACC,MAAP,CAAc;AAC3CE,QAAAA,MAAM,EAAE,CAAC,SAAD,CADmC;AAE3CV,QAAAA,OAAO,EAAE,CAAC,UAAD;AAFkC,OAAd,EAG9B7B,iCAH8B,CAAjC;AAIA,UAAM6C,iBAA6B,GAAGjB,aAAa,CAACY,QAAd,CAAuBC,aAAvB,CAClCE,qBADkC,EAElCC,wBAFkC,CAAtC;AAIAhB,MAAAA,aAAa,CAACc,WAAd,CAA0B9B,MAAM,CAACK,cAAjC,IAAmD4B,iBAAnD;AAEA,UAAMC,GAA2B,GAAG;AAChClB,QAAAA,aAAa,EAAbA,aADgC;AAEhCU,QAAAA,UAAU,EAAVA,UAFgC;AAGhCO,QAAAA,iBAAiB,EAAjBA;AAHgC,OAApC;AAMA,aAAOC,GAAP;AA9D+B;AA+DlC,GAlED;AAAA;AAAA;AAAA;AAlSA,IAAIC,UAAU,GAAGxD,GAAG,EAApB;AAEA,WAAawB,qBAAb;AAaI,iCACoBJ,OADpB,EAEoBK,YAFpB,EAGoBC,cAHpB,EAIoBC,MAJpB,EAKoBC,SALpB,EAMoBC,OANpB,EAOoBP,gBAPpB,EAQE;AAAA;;AAAA,SAdMmC,QAcN,GAdsF,IAAI5D,OAAJ,EActF;AAAA,SAbM6D,sBAaN,GAbuC,CAavC;AAAA,SAZcF,UAYd,GAZ2BA,UAAU,EAYrC;AAAA,SAVKtB,MAUL,GAVc,KAUd;AAAA,SAPkBd,OAOlB,GAPkBA,OAOlB;AAAA,SANkBK,YAMlB,GANkBA,YAMlB;AAAA,SALkBC,cAKlB,GALkBA,cAKlB;AAAA,SAJkBC,MAIlB,GAJkBA,MAIlB;AAAA,SAHkBC,SAGlB,GAHkBA,SAGlB;AAAA,SAFkBC,OAElB,GAFkBA,OAElB;AAAA,SADkBP,gBAClB,GADkBA,gBAClB;AACE,SAAKqC,WAAL,GAAmB1C,2BAA2B,CAAC,KAAKU,MAAL,CAAYgB,UAAb,CAA9C;AACAnC,IAAAA,6BAA6B,CAACoD,GAA9B,CAAkC,IAAlC;;AACA,QAAI,KAAKhC,SAAL,CAAeG,aAAnB,EAAkC;AAC9B,WAAKH,SAAL,CAAeG,aAAf,CAA6BC,eAA7B,GAA+CC,IAA/C,CAAoD,YAAM;AACtD;AACAhC,QAAAA,cAAc,CAAC,KAAI,CAAC2B,SAAL,CAAeG,aAAhB,CAAd,CAA6C8B,gBAA7C,CACKC,gBADL,CACsB,SADtB,YACwCC,GADxC;AAAA;AAAA,mCACgD/C,mBAAmB,CAAC,KAAD,EAAO+C,GAAP,CADnE;AAAA;AAAA;AAAA;AAAA;AAEH,OAJD;AAKH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AArCA;;AAAA,SAsCkBC,qBAtClB,kCAsCwCC,EAtCxC;AAAA,QAsCoD;AAAA,mBACJ,IADI;;AAAA,6BACnBhE,cAAc,CAAC,OAAK2B,SAAL,CAAeO,UAAhB,CADK,iBACtCA,UADsC;AAE5C,YAAI,CAAC,OAAKuB,sBAAV,EAAkC;AAC9B,cAAMQ,OAAO,GAAG/B,UAAU,CAACmB,iBAAX,CACXa,KADW,GAEXC,UAFW,CAEA,UAFA,EAEY,IAFZ,EAGXC,KAHW,CAGL,CAHK,EAIXC,IAJW,GAIJ,CAJI,CAAhB;;AAKA,cAAIJ,OAAJ,EAAa;AACT,mBAAKR,sBAAL,GAA8BQ,OAAO,CAACK,QAAtC;AACH;AACJ;;AAED,YAAMC,gBAAgB,GAAG,OAAKd,sBAAL,GAA8B,CAAvD;AACAvB,QAAAA,UAAU,CAACmB,iBAAX,CAA6BmB,MAA7B,CAAoC;AAChCR,UAAAA,EAAE,EAAFA,EADgC;AAEhCM,UAAAA,QAAQ,EAAEC;AAFsB,SAApC;AAIA,eAAKd,sBAAL,GAA8Bc,gBAA9B;AAlB4C;AAmB/C,KAzDL;AAAA;AAAA;AAAA;;AAAA,SA2DUE,SA3DV,sBA2DoBC,cA3DpB;AAAA,QA2D+G;AAAA,mBAQ5D,IAR4D;;AACvG,UAAIA,cAAc,CAACC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,cAAMxE,UAAU,CAAC,IAAD,EAAO;AACnByE,UAAAA,IAAI,EAAE;AACFF,YAAAA,cAAc,EAAdA;AADE;AADa,SAAP,CAAhB;AAKH;;AAPsG,6BAQ9E5D,iBAAiB,QAR6D,iBAQjGoB,UARiG;AASvG,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,SAAO,WAAP,EAAoB,CAAC6D,cAAD,CAApB,CAA5B;AACH;;AAED,YAAMpB,GAA0C,GAAG;AAC/CuB,UAAAA,OAAO,EAAE,EADsC;AAE/CC,UAAAA,KAAK,EAAE;AAFwC,SAAnD;AAKA,YAAMC,QAAoF,GAAG,IAAIC,GAAJ,EAA7F;AACA,YAAMC,mBAGL,GAAG,IAAID,GAAJ,EAHJ;AAIAN,QAAAA,cAAc,CAACnC,OAAf,CAAuB,UAAA2C,QAAQ,EAAI;AAC/B,cAAMlB,EAAE,GAAGkB,QAAQ,CAACC,QAAT,CAAkB,OAAKzB,WAAvB,CAAX;AACA,cAAM0B,YAAY,GAAGlD,UAAU,CAACY,UAAX,CAAsBuC,EAAtB,CAAyB,OAAK3B,WAA9B,EAA2CM,EAA3C,CAArB;;AACA,cAAIoB,YAAJ,EAAkB;AACdH,YAAAA,mBAAmB,CAACK,GAApB,CAAwBtB,EAAxB,EAA4BoB,YAA5B;AACAL,YAAAA,QAAQ,CAACO,GAAT,CAAatB,EAAb,EAAiBvD,YAAY,CAAC2E,YAAD,CAA7B;AACH;AACJ,SAPD;AASA,YAAMG,WAAW,GAAGtE,uBAAuB,SAEvC,OAAKyC,WAFkC,EAGvCqB,QAHuC,EAIvCL,cAJuC,CAA3C;AAOAa,QAAAA,WAAW,CAACC,cAAZ,CAA2BjD,OAA3B,CAAmC,UAAA2C,QAAQ,EAAI;AAC3C,cAAMO,KAAK,GAAGP,QAAQ,CAACC,QAAT,CAAkB,OAAKzB,WAAvB,CAAd;AACAxB,UAAAA,UAAU,CAACY,UAAX,CAAsB0B,MAAtB,CAA6B1E,SAAS,CAACoF,QAAQ,CAACC,QAAV,CAAtC;AACA7B,UAAAA,GAAG,CAACuB,OAAJ,CAAYY,KAAZ,IAA4BP,QAAQ,CAACC,QAArC;AACH,SAJD;AAKAI,QAAAA,WAAW,CAACG,cAAZ,CAA2BnD,OAA3B,CAAmC,UAAA2C,QAAQ,EAAI;AAC3C,cAAMO,KAAK,GAAGP,QAAQ,CAACC,QAAT,CAAkB,OAAKzB,WAAvB,CAAd;AACA,cAAMiC,uBAAuB,GAAGzF,iBAAiB,CAAC+E,mBAAD,EAAsBQ,KAAtB,CAAjD;AACA,cAAMG,QAAa,GAAGhD,MAAM,CAACC,MAAP,CAClB,EADkB,EAElBqC,QAAQ,CAACC,QAFS,EAGlB;AACIU,YAAAA,KAAK,EAAEF,uBAAuB,CAACE;AADnC,WAHkB,CAAtB;AAOA3D,UAAAA,UAAU,CAACY,UAAX,CAAsBgD,MAAtB,CAA6BF,QAA7B;AACAtC,UAAAA,GAAG,CAACuB,OAAJ,CAAYY,KAAZ,IAA4BP,QAAQ,CAACC,QAArC;AACH,SAZD;AAaAI,QAAAA,WAAW,CAACQ,MAAZ,CAAmBxD,OAAnB,CAA2B,UAAAyD,GAAG,EAAI;AAC9B1C,UAAAA,GAAG,CAACwB,KAAJ,CAAUkB,GAAG,CAACC,UAAd,IAA4BD,GAA5B;AACH,SAFD;AAGAT,QAAAA,WAAW,CAACW,kBAAZ,CAA+B3D,OAA/B,CAAuC,UAAAkD,KAAK,EAAI;AAC5C,iBAAK1B,qBAAL,CAA2B0B,KAA3B;AACH,SAFD;AAGAvD,QAAAA,UAAU,CAACE,aAAX,CAAyB+D,SAAzB,CAAmCC,QAAnC;;AACA,eAAK5C,QAAL,CAAc6C,IAAd,CAAmBd,WAAW,CAACe,SAA/B;;AAEA,eAAOhD,GAAP;AAlEuG;AAmE1G,KA9HL;AAAA;AAAA;AAAA;;AAAA,SA+HUiD,iBA/HV,8BA+H4BC,GA/H5B,EA+H2CC,OA/H3C;AAAA,QA+H2H;AAAA,mBACxE,IADwE;;AAAA,6BAC1F3F,iBAAiB,QADyE,iBAC7GoB,UAD6G;AAEnH,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,SAAO,mBAAP,EAA4B,CAAC2F,GAAD,EAAMC,OAAN,CAA5B,CAA5B;AACH;;AAED,YAAMnD,GAAwD,GAAG,EAAjE;AACAkD,QAAAA,GAAG,CAACjE,OAAJ,CAAY,UAAAyB,EAAE,EAAI;AACd,cAAMoB,YAAY,GAAGlD,UAAU,CAACY,UAAX,CAAsBuC,EAAtB,CAAyB,OAAK3B,WAA9B,EAA2CM,EAA3C,CAArB;;AACA,cACIoB,YAAY,KACX,CAACA,YAAY,CAACsB,QAAd,IAA0BD,OADf,CADhB,EAGE;AACEnD,YAAAA,GAAG,CAACU,EAAD,CAAH,GAAUvD,YAAY,CAAC2E,YAAD,CAAtB;AACH;AACJ,SARD;AASA,eAAO9B,GAAP;AAhBmH;AAiBtH,KAhJL;AAAA;AAAA;AAAA;;AAAA,SAiJUqD,KAjJV,kBAiJgBC,aAjJhB;AAAA,QAiJgG;AAAA,mBAC7C,IAD6C;;AAAA,6BAC/D9F,iBAAiB,QAD8C,iBAClFoB,UADkF;AAExF,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,SAAO,OAAP,EAAgB,CAAC+F,aAAD,CAAhB,CAA5B;AACH;;AAED,YAAID,KAAK,GAAGzE,UAAU,CAACY,UAAX,CACPoB,KADO,GAEP2C,IAFO,CAEFD,aAAa,CAACE,QAFZ,CAAZ;;AAIA,YAAIF,aAAa,CAACG,IAAlB,EAAwB;AACpBJ,UAAAA,KAAK,GAAGA,KAAK,CAACI,IAAN,CAAWrG,qBAAqB,CAAC,OAAKgB,MAAN,EAAckF,aAAd,CAAhC,CAAR;AACH;AAED;AACR;AACA;AACA;;;AACQ,YAAIA,aAAa,CAACI,IAAlB,EAAwB;AACpBL,UAAAA,KAAK,GAAGA,KAAK,CAACM,MAAN,CAAaL,aAAa,CAACI,IAA3B,CAAR;AACH;;AAED,YAAIJ,aAAa,CAACxC,KAAlB,EAAyB;AACrBuC,UAAAA,KAAK,GAAGA,KAAK,CAACvC,KAAN,CAAYwC,aAAa,CAACxC,KAA1B,CAAR;AACH;;AAED,YAAM8C,cAAc,GAAGP,KAAK,CAACtC,IAAN,GAAa8C,GAAb,CAAiB,UAAAC,OAAO;AAAA,iBAAI3G,YAAY,CAAC2G,OAAD,CAAhB;AAAA,SAAxB,CAAvB;AACA,eAAO;AACHC,UAAAA,SAAS,EAAEH;AADR,SAAP;AA3BwF;AA8B3F,KA/KL;AAAA;AAAA;AAAA;;AAAA,SAgLII,iBAhLJ,GAgLI,2BAAkBC,WAAlB,EAAuCC,aAAvC,EAA+E;AAC3E,UAAM,IAAIC,KAAJ,CAAU,+EAAV,CAAN;AACH,GAlLL;;AAAA,SAmLUC,mBAnLV,gCAoLQ9F,OApLR;AAAA,QAwLO;AAAA,oBAC4C,IAD5C;;AAAA,6BAC0Bd,iBAAiB,SAD3C,iBACOoB,UADP;AAAA;;AAEC,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,UAAO,qBAAP,EAA8B,CAACe,OAAD,CAA9B,CAA5B;AACH;;AAED,YAAM+F,IAAI,GAAG/F,OAAO,CAACgG,SAAR,KAAsB,QAAnC;AACA,YAAMC,QAAQ,GAAGjG,OAAO,CAACgG,SAAR,KAAsB,OAAtB,GAAgC,KAAhC,GAAwC,KAAzD;AAEA,YAAIjB,KAAK,GAAGzE,UAAU,CAACmB,iBAAX,CACPa,KADO,GAEP2C,IAFO,CAEF;AACFvC,UAAAA,QAAQ,6BACHuD,QADG,IACQjG,OAAO,CAACkG,aADhB;AADN,SAFE,EAOP3D,UAPO,CAQJ,UARI,EASJwD,IATI,CAAZ;;AAWA,YAAI/F,OAAO,CAACwC,KAAZ,EAAmB;AACfuC,UAAAA,KAAK,GAAGA,KAAK,CAACvC,KAAN,CAAYxC,OAAO,CAACwC,KAApB,CAAR;AACH;;AACD,YAAM2D,gBAAgD,GAAGpB,KAAK,CACzDtC,IADoD,GAEpD8C,GAFoD,CAEhD,UAAAa,MAAM;AAAA,iBAAK;AACZhE,YAAAA,EAAE,EAAEgE,MAAM,CAAChE,EADC;AAEZM,YAAAA,QAAQ,EAAE0D,MAAM,CAAC1D;AAFL,WAAL;AAAA,SAF0C,CAAzD;AAOA,YAAM2D,kBAAkB,GAAG,CAACN,IAAD,GAAQ9H,WAAW,CAACkI,gBAAD,CAAnB,GAAwCA,gBAAgB,CAAC,CAAD,CAAnF;AAEA,YAAMzE,GAGL,GAAG;AACAyE,UAAAA,gBAAgB,EAAhBA,gBADA;AAEAG,UAAAA,YAAY,EAAED,kBAAkB,GAAGA,kBAAkB,CAAC3D,QAAtB,GAAiC1C,OAAO,CAACkG;AAFzE,SAHJ;AAQA,eAAOxE,GAAP;AAxCD;AAyCF,KAjOL;AAAA;AAAA;AAAA;;AAAA,SAkOI6E,YAlOJ,GAkOI,wBAAuF;AACnF,WAAO,KAAK3E,QAAL,CAAc4E,YAAd,EAAP;AACH,GApOL;;AAAA,SAsOUC,OAtOV,oBAsOkBC,kBAtOlB;AAAA,QAsOgE;AAAA,oBACb,IADa;;AAAA,6BAC/BxH,iBAAiB,SADc,iBAClDoB,UADkD;AAExD,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,UAAO,SAAP,EAAkB,CAACyH,kBAAD,CAAlB,CAA5B;AACH;;AAED,YAAMC,kBAAkB,GAAG,EAA3B;AACA,YAAMC,eAAe,GAAGzI,GAAG,KAAKuI,kBAAhC;AACA,YAAM3B,KAAK,GAAGzE,UAAU,CAACY,UAAX,CACToB,KADS,GAET2C,IAFS,CAEJ;AACFH,UAAAA,QAAQ,EAAE,IADR;AAEF,uBAAa;AACT+B,YAAAA,GAAG,EAAED;AADI;AAFX,SAFI,EAOPpE,KAPO,CAODmE,kBAPC,CAAd;AAQA,YAAMrB,cAAc,GAAGP,KAAK,CAACtC,IAAN,EAAvB;;AACA,YAAI6C,cAAc,CAACvC,MAAf,GAAwB,CAA5B,EAA+B;AAC3BzC,UAAAA,UAAU,CAACY,UAAX,CAAsB4F,MAAtB,CAA6BxB,cAA7B;AACAhF,UAAAA,UAAU,CAACE,aAAX,CAAyB+D,SAAzB,CAAmCC,QAAnC;AACH;;AAED,eAAOc,cAAc,CAACvC,MAAf,KAA0B4D,kBAAjC;AAtBwD;AAuB3D,KA7PL;AAAA;AAAA;AAAA;;AAAA,SA+PUI,KA/PV;AAAA,QA+PiC;AAAA;AAoBzB/H,QAAAA,gCAAgC,CAAC,QAAKO,OAAN,EAAe,QAAKK,YAApB,CAAhC;AApByB;;AAAA,oBACzB,IADyB;;AACzB,cAAKS,MAAL,GAAc,IAAd;;AACA,cAAKuB,QAAL,CAAcoF,QAAd;;AACArI,MAAAA,6BAA6B,UAA7B;;AAHyB;AAAA,YAKrB,QAAKoB,SAAL,CAAeO,UALM;AAAA,iCAMI,QAAKP,SAAL,CAAeO,UANnB,iBAMfA,UANe;AAAA,mCAOC5B,eAAe,CACjC,QAAKkB,YAD4B,EAEjC,QAAKH,gBAF4B,CAPhB,iBAOfwH,OAPe;AAAA,qCAWfA,OAAO,CAAC1C,SAAR,CAAkB2C,GAAlB,EAXe;AAAA,uCAYfzI,oBAAoB,CACtB,QAAKmB,YADiB,EAEtB,CACIU,UAAU,CAACY,UADf,EAEIZ,UAAU,CAACmB,iBAFf,CAFsB,CAZL;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAqB5B,KApRL;AAAA;AAAA;AAAA;;AAAA,SAqRUqF,MArRV;AAAA,QAqRkC;AAAA,oBACiB,IADjB;;AAAA,6BACD5H,iBAAiB,SADhB,iBACpBoB,UADoB;AAE1B,YAAI,CAACA,UAAL,EAAiB;AACb,iBAAOrB,qBAAqB,UAAO,QAAP,EAAiB,EAAjB,CAA5B;AACH;;AACDqB,QAAAA,UAAU,CAACE,aAAX,CAAyBY,QAAzB,CAAkC+F,gBAAlC,CAAmD,QAAKtH,cAAxD;AACAS,QAAAA,UAAU,CAACE,aAAX,CAAyBY,QAAzB,CAAkC+F,gBAAlC,CAAmD7G,UAAU,CAACmB,iBAAX,CAA6B2F,IAAhF;AACA,eAAO,QAAKL,KAAL,EAAP;AAP0B;AAQ7B,KA7RL;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    lastOfArray,\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    ChangeStreamOnceOptions,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageChangedDocumentMeta,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk\n} from '../../types';\nimport {\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    removeLokiLeaderElectorReference,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings\n> {\n\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private lastChangefeedSequence: number = 0;\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', async (msg) => handleRemoteRequest(this, msg));\n            });\n        }\n    }\n\n    /**\n     * Adds an entry to the changes feed\n     * that can be queried to check which documents have been\n     * changed since sequence X.\n     */\n    private async addChangeDocumentMeta(id: string) {\n        const localState = await ensureNotFalsy(this.internals.localState);\n        if (!this.lastChangefeedSequence) {\n            const lastDoc = localState.changesCollection\n                .chain()\n                .simplesort('sequence', true)\n                .limit(1)\n                .data()[0];\n            if (lastDoc) {\n                this.lastChangefeedSequence = lastDoc.sequence;\n            }\n        }\n\n        const nextFeedSequence = this.lastChangefeedSequence + 1;\n        localState.changesCollection.insert({\n            id,\n            sequence: nextFeedSequence\n        });\n        this.lastChangefeedSequence = nextFeedSequence;\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[keyof RxDocType], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[keyof RxDocType],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id, documentInDb);\n                docsInDb.set(id, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath,\n            docsInDb,\n            documentWrites\n        );\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.errors.forEach(err => {\n            ret.error[err.documentId] = err;\n        });\n        categorized.changedDocumentIds.forEach(docId => {\n            this.addChangeDocumentMeta(docId as any);\n        });\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(categorized.eventBulk);\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocuments', [options]);\n        }\n\n        const desc = options.direction === 'before';\n        const operator = options.direction === 'after' ? '$gt' : '$lt';\n\n        let query = localState.changesCollection\n            .chain()\n            .find({\n                sequence: {\n                    [operator]: options.sinceSequence\n                }\n            })\n            .simplesort(\n                'sequence',\n                desc\n            );\n        if (options.limit) {\n            query = query.limit(options.limit);\n        }\n        const changedDocuments: RxStorageChangedDocumentMeta[] = query\n            .data()\n            .map(result => ({\n                id: result.id,\n                sequence: result.sequence\n            }));\n\n        const useForLastSequence = !desc ? lastOfArray(changedDocuments) : changedDocuments[0];\n\n        const ret: {\n            changedDocuments: RxStorageChangedDocumentMeta[];\n            lastSequence: number;\n        } = {\n            changedDocuments,\n            lastSequence: useForLastSequence ? useForLastSequence.sequence : options.sinceSequence\n        }\n\n        return ret;\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection,\n                    localState.changesCollection\n                ]\n            );\n        }\n        removeLokiLeaderElectorReference(this.storage, this.databaseName);\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(this.collectionName);\n        localState.databaseState.database.removeCollection(localState.changesCollection.name);\n        return this.close();\n    }\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS)\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.collections[params.collectionName] = changesCollection;\n\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection,\n        changesCollection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(storage, params.databaseName);\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    /**\n     * Directly create the localState if the db becomes leader.\n     */\n    if (params.multiInstance) {\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance)\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"file":"rx-storage-instance-loki.js"}