{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"names":["lokijs","Subject","promiseWait","createRevision","getHeightOfRevision","parseRevision","lastOfArray","flatClone","now","ensureNotFalsy","randomCouchString","firstPropertyNameOfObject","newRxError","getPrimaryFieldOfPrimaryKey","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","CHANGES_COLLECTION_SUFFIX","closeLokiCollections","getLokiDatabase","getLokiEventKey","OPEN_LOKIJS_STORAGE_INSTANCES","LOKIJS_COLLECTION_DEFAULT_OPTIONS","stripLokiKey","getLeaderElectorByBroadcastChannel","instanceId","RxStorageInstanceLoki","databaseName","collectionName","schema","internals","options","databaseSettings","broadcastChannel","changes$","lastChangefeedSequence","primaryPath","primaryKey","add","leaderElector","awaitLeadership","then","addEventListener","msg","type","requestId","response","operation","params","isError","result","postMessage","getLocalState","ret","localState","mustUseLocalState","hasLeader","applyOnce","isLeader","createLokiLocalState","requestRemoteInstance","responsePromise","Promise","res","rej","listener","removeEventListener","addChangeDocumentMeta","id","lastDoc","changesCollection","chain","simplesort","limit","data","sequence","nextFeedSequence","insert","prepareQuery","mutateableQuery","Object","keys","selector","length","$and","_deleted","sort","isPrimaryInSort","find","p","push","getSortComparator","query","sortOptions","fun","a","b","compareResult","sortPart","fieldName","direction","values","directionMultiplier","valueA","valueB","args","getQueryMatcher","doc","docWithResetDeleted","fakeCollection","binaryIndices","setPrototypeOf","Collection","prototype","fakeResultSet","collection","Resultset","filteredrows","bulkWrite","documentWrites","success","Map","error","forEach","writeRow","startTime","document","documentInDb","by","newRevision","insertedIsDeleted","writeDoc","assign","_rev","_attachments","next","eventId","documentId","change","previous","endTime","set","revInDb","err","status","newRevHeight","isDeleted","$loki","update","bulkAddRevisions","documents","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","storeAtLoki","findDocumentsById","ids","deleted","preparedQuery","skip","offset","foundDocuments","map","lokiDoc","getAttachmentData","_documentId","_attachmentId","Error","getChangedDocuments","desc","operator","sinceSequence","changedDocuments","useForLastSequence","lastSequence","changeStream","asObservable","close","complete","database","saveDatabase","remove","removeCollection","name","databaseState","indices","indexes","idx","Array","isArray","collectionOptions","unique","addCollection","openCollections","changesCollectionName","changesCollectionOptions","createLokiStorageInstance","instance"],"mappings":"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","sourcesContent":["import type {\n    DeterministicSortComparator,\n    QueryMatcher,\n    ChangeEvent\n} from 'event-reduce-js';\nimport lokijs from 'lokijs';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    promiseWait,\n    createRevision,\n    getHeightOfRevision,\n    parseRevision,\n    lastOfArray,\n    flatClone,\n    now,\n    ensureNotFalsy,\n    randomCouchString,\n    firstPropertyNameOfObject\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    BlobBuffer,\n    ChangeStreamOnceOptions,\n    RxJsonSchema,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySortDirection,\n    LokiStorageInternals,\n    RxStorageChangedDocumentMeta,\n    RxStorageInstanceCreationParams,\n    LokiRemoteRequestBroadcastMessage,\n    LokiRemoteResponseBroadcastMessage,\n    LokiLocalState,\n    LokiDatabaseSettings,\n    RxDocumentWriteData\n} from '../../types';\nimport type {\n    CompareFunction\n} from 'array-push-at-sort-position';\nimport {\n    LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE,\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type {\n    BroadcastChannel,\n    LeaderElector\n} from 'broadcast-channel';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election';\n\nlet instanceId = 1;\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings\n> {\n\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = new Subject();\n    private lastChangefeedSequence: number = 0;\n    public readonly instanceId = instanceId++;\n\n    public readonly leaderElector?: LeaderElector;\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings,\n        public readonly broadcastChannel?: BroadcastChannel<LokiRemoteRequestBroadcastMessage | LokiRemoteResponseBroadcastMessage>\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (broadcastChannel) {\n            this.leaderElector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n            this.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.broadcastChannel).addEventListener('message', async (msg) => {\n                    if (\n                        msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                        msg.requestId &&\n                        msg.databaseName === this.databaseName &&\n                        msg.collectionName === this.collectionName &&\n                        !msg.response\n                    ) {\n\n                        const operation = (msg as any).operation;\n                        const params = (msg as any).params;\n                        let result: any;\n                        let isError = false;\n                        try {\n                            result = await (this as any)[operation](...params);\n                        } catch (err) {\n                            result = err;\n                            isError = true;\n                        }\n                        const response: LokiRemoteResponseBroadcastMessage = {\n                            response: true,\n                            requestId: msg.requestId,\n                            databaseName: this.databaseName,\n                            collectionName: this.collectionName,\n                            result,\n                            isError,\n                            type: msg.type\n                        };\n                        ensureNotFalsy(this.broadcastChannel).postMessage(response);\n                    }\n                });\n            });\n        }\n    }\n\n    private getLocalState() {\n        const ret = ensureNotFalsy(this.internals.localState);\n        return ret;\n    }\n\n    /**\n     * If the local state must be used, that one is returned.\n     * Returns false if a remote instance must be used.\n     */\n    private async mustUseLocalState(): Promise<LokiLocalState | false> {\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n        const leaderElector = ensureNotFalsy(this.leaderElector);\n        while (\n            !leaderElector.hasLeader\n        ) {\n            await leaderElector.applyOnce();\n\n            // TODO why do we need this line to pass the tests?\n            // otherwise we somehow do never get a leader.\n            /**\n             * TODO why do we need this line to pass the tests?\n             * Without it, we somehow do never get a leader.\n             * Does applyOnce() fully block the cpu?\n             */\n            await promiseWait(0); // TODO remove this line\n        }\n        if (\n            leaderElector.isLeader &&\n            !this.internals.localState\n        ) {\n            // own is leader, use local instance\n            this.internals.localState = createLokiLocalState({\n                databaseName: this.databaseName,\n                collectionName: this.collectionName,\n                options: this.options,\n                schema: this.schema,\n                broadcastChannel: this.broadcastChannel\n            }, this.databaseSettings);\n            return this.getLocalState();\n        } else {\n            // other is leader, send message to remote leading instance\n            return false;\n        }\n    }\n\n    private async requestRemoteInstance(\n        operation: string,\n        params: any[]\n    ): Promise<any | any[]> {\n        const broadcastChannel = ensureNotFalsy(this.broadcastChannel);\n        const requestId = randomCouchString(12);\n        const responsePromise = new Promise<any>((res, rej) => {\n            const listener = (msg: any) => {\n                if (\n                    msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                    msg.response === true &&\n                    msg.requestId === requestId\n                ) {\n                    if (msg.isError) {\n                        broadcastChannel.removeEventListener('message', listener);\n                        rej(msg.result);\n                    } else {\n                        broadcastChannel.removeEventListener('message', listener);\n                        res(msg.result);\n                    }\n                }\n            };\n            broadcastChannel.addEventListener('message', listener);\n        });\n\n        broadcastChannel.postMessage({\n            response: false,\n            type: LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE,\n            operation,\n            params,\n            requestId,\n            databaseName: this.databaseName,\n            collectionName: this.collectionName\n        });\n        const result = await responsePromise;\n        return result;\n    }\n\n    /**\n     * Adds an entry to the changes feed\n     * that can be queried to check which documents have been\n     * changed since sequence X.\n     */\n    private async addChangeDocumentMeta(id: string) {\n        const localState = await this.getLocalState();\n        if (!this.lastChangefeedSequence) {\n            const lastDoc = localState.changesCollection\n                .chain()\n                .simplesort('sequence', true)\n                .limit(1)\n                .data()[0];\n            if (lastDoc) {\n                this.lastChangefeedSequence = lastDoc.sequence;\n            }\n        }\n\n        const nextFeedSequence = this.lastChangefeedSequence + 1;\n        localState.changesCollection.insert({\n            id,\n            sequence: nextFeedSequence\n        });\n        this.lastChangefeedSequence = nextFeedSequence;\n    }\n\n    prepareQuery(mutateableQuery: MangoQuery<RxDocType>) {\n        if (Object.keys(mutateableQuery.selector).length > 0) {\n            mutateableQuery.selector = {\n                $and: [\n                    {\n                        _deleted: false\n                    },\n                    mutateableQuery.selector\n                ]\n            };\n        } else {\n            mutateableQuery.selector = {\n                _deleted: false\n            };\n        }\n\n        /**\n         * To ensure a deterministic sorting,\n         * we have to ensure the primary key is always part\n         * of the sort query.\n         */\n        if (!mutateableQuery.sort) {\n            mutateableQuery.sort = [{ [this.primaryPath]: 'asc' }] as any;\n        } else {\n            const isPrimaryInSort = mutateableQuery.sort\n                .find(p => firstPropertyNameOfObject(p) === this.primaryPath);\n            if (!isPrimaryInSort) {\n                mutateableQuery.sort.push({ [this.primaryPath]: 'asc' } as any);\n            }\n        }\n\n        return mutateableQuery;\n    }\n\n    getSortComparator(query: MangoQuery<RxDocType>): DeterministicSortComparator<RxDocType> {\n        // TODO if no sort is given, use sort by primary.\n        // This should be done inside of RxDB and not in the storage implementations.\n        const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort ? (query.sort as any) : [{\n            [this.primaryPath]: 'asc'\n        }];\n        const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            let compareResult: number = 0; // 1 | -1\n            sortOptions.find(sortPart => {\n                const fieldName: string = Object.keys(sortPart)[0];\n                const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\n                const directionMultiplier = direction === 'asc' ? 1 : -1;\n                const valueA: any = (a as any)[fieldName];\n                const valueB: any = (b as any)[fieldName];\n                if (valueA === valueB) {\n                    return false;\n                } else {\n                    if (valueA > valueB) {\n                        compareResult = 1 * directionMultiplier;\n                        return true;\n                    } else {\n                        compareResult = -1 * directionMultiplier;\n                        return true;\n                    }\n                }\n            });\n\n            /**\n             * Two different objects should never have the same sort position.\n             * We ensure this by having the unique primaryKey in the sort params\n             * at this.prepareQuery()\n             */\n            if (!compareResult) {\n                throw newRxError('SNH', { args: { query, a, b } });\n            }\n\n            return compareResult as any;\n        }\n        return fun;\n    }\n\n    /**\n     * Returns a function that determines if a document matches a query selector.\n     * It is important to have the exact same logix as lokijs uses, to be sure\n     * that the event-reduce algorithm works correct.\n     * But LokisJS does not export such a function, the query logic is deep inside of\n     * the Resultset prototype.\n     * Because I am lazy, I do not copy paste and maintain that code.\n     * Instead we create a fake Resultset and apply the prototype method Resultset.prototype.find(),\n     * same with Collection.\n     */\n    getQueryMatcher(query: MangoQuery<RxDocType>): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            const docWithResetDeleted = flatClone(doc);\n            docWithResetDeleted._deleted = !!docWithResetDeleted._deleted;\n\n            const fakeCollection = {\n                data: [docWithResetDeleted],\n                binaryIndices: {}\n            };\n            Object.setPrototypeOf(fakeCollection, (lokijs as any).Collection.prototype);\n            const fakeResultSet: any = {\n                collection: fakeCollection\n            };\n            Object.setPrototypeOf(fakeResultSet, (lokijs as any).Resultset.prototype);\n            fakeResultSet.find(query.selector, true);\n\n            const ret = fakeResultSet.filteredrows.length > 0;\n            return ret;\n        }\n        return fun;\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkWrite', [documentWrites]);\n        }\n\n        /**\n         * lokijs is in memory and non-async, so we emulate async behavior\n         * to ensure all RxStorage implementations behave equal.\n         */\n        await promiseWait(0);\n\n        const collection = localState.collection;\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: new Map(),\n            error: new Map()\n        };\n\n        documentWrites.forEach(writeRow => {\n            const startTime = now();\n            const id: string = writeRow.document[this.primaryPath] as any;\n            const documentInDb = collection.by(this.primaryPath, id);\n\n            if (!documentInDb) {\n                // insert new document\n                const newRevision = '1-' + createRevision(writeRow.document);\n\n                /**\n                 * It is possible to insert already deleted documents,\n                 * this can happen on replication.\n                 */\n                const insertedIsDeleted = writeRow.document._deleted ? true : false;\n\n                const writeDoc = Object.assign(\n                    {},\n                    writeRow.document,\n                    {\n                        _rev: newRevision,\n                        _deleted: insertedIsDeleted,\n                        // TODO attachments are currently not working with lokijs\n                        _attachments: {} as any\n                    }\n                );\n                collection.insert(flatClone(writeDoc));\n                if (!insertedIsDeleted) {\n                    this.addChangeDocumentMeta(id);\n                    this.changes$.next({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change: {\n                            doc: writeDoc,\n                            id,\n                            operation: 'INSERT',\n                            previous: null\n                        },\n                        startTime,\n                        endTime: now()\n                    });\n                }\n                ret.success.set(id, writeDoc as any);\n            } else {\n                // update existing document\n                const revInDb: string = documentInDb._rev;\n\n                // inserting a deleted document is possible\n                // without sending the previous data.\n                if (!writeRow.previous && documentInDb._deleted) {\n                    writeRow.previous = documentInDb;\n                }\n\n                if (\n                    (\n                        !writeRow.previous &&\n                        !documentInDb._deleted\n                    ) ||\n                    (\n                        !!writeRow.previous &&\n                        revInDb !== writeRow.previous._rev\n                    )\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error.set(id, err);\n                } else {\n                    const newRevHeight = getHeightOfRevision(revInDb) + 1;\n                    const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n                    const isDeleted = !!writeRow.document._deleted;\n                    const writeDoc: any = Object.assign(\n                        {},\n                        writeRow.document,\n                        {\n                            $loki: documentInDb.$loki,\n                            _rev: newRevision,\n                            _deleted: isDeleted,\n                            // TODO attachments are currently not working with lokijs\n                            _attachments: {}\n                        }\n                    );\n                    collection.update(writeDoc);\n                    this.addChangeDocumentMeta(id);\n\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: stripLokiKey(writeDoc)\n                        };\n                    } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: writeRow.previous,\n                            doc: stripLokiKey(writeDoc)\n                        };\n                    } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                        /**\n                         * On delete, we send the 'new' rev in the previous property,\n                         * to have the equal behavior as pouchdb.\n                         */\n                        const previous = flatClone(writeRow.previous);\n                        previous._rev = newRevision;\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous,\n                            doc: null\n                        };\n                    }\n                    if (!change) {\n                        throw newRxError('SNH', { args: { writeRow } });\n                    }\n                    this.changes$.next({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change,\n                        startTime,\n                        endTime: now()\n                    });\n                    ret.success.set(id, stripLokiKey(writeDoc));\n                }\n            }\n        });\n        return ret;\n    }\n\n    async bulkAddRevisions(documents: RxDocumentData<RxDocType>[]): Promise<void> {\n        if (documents.length === 0) {\n            throw newRxError('P3', {\n                args: {\n                    documents\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkAddRevisions', [documents]);\n        }\n\n        /**\n         * lokijs is in memory and non-async, so we emulate async behavior\n         * to ensure all RxStorage implementations behave equal.\n         */\n        await promiseWait(0);\n        const collection = localState.collection;\n\n        documents.forEach(docData => {\n            const startTime = now();\n            const id: string = docData[this.primaryPath] as any;\n            const documentInDb = collection.by(this.primaryPath, id);\n            if (!documentInDb) {\n                // document not here, so we can directly insert\n                collection.insert(flatClone(docData));\n                this.changes$.next({\n                    documentId: id,\n                    eventId: getLokiEventKey(false, id, docData._rev),\n                    change: {\n                        doc: docData,\n                        id,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n                this.addChangeDocumentMeta(id);\n            } else {\n                const newWriteRevision = parseRevision(docData._rev);\n                const oldRevision = parseRevision(documentInDb._rev);\n\n                let mustUpdate: boolean = false;\n                if (newWriteRevision.height !== oldRevision.height) {\n                    // height not equal, compare base on height\n                    if (newWriteRevision.height > oldRevision.height) {\n                        mustUpdate = true;\n                    }\n                } else if (newWriteRevision.hash > oldRevision.hash) {\n                    // equal height but new write has the 'winning' hash\n                    mustUpdate = true;\n                }\n                if (mustUpdate) {\n                    const storeAtLoki = flatClone(docData) as any;\n                    storeAtLoki.$loki = documentInDb.$loki;\n                    collection.update(storeAtLoki);\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: stripLokiKey(documentInDb),\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous: stripLokiKey(documentInDb),\n                            doc: null\n                        };\n                    } else if (documentInDb._deleted && docData._deleted) {\n                        change = null;\n                    }\n                    if (change) {\n                        this.changes$.next({\n                            documentId: id,\n                            eventId: getLokiEventKey(false, id, docData._rev),\n                            change,\n                            startTime,\n                            endTime: now()\n                        });\n                        this.addChangeDocumentMeta(id);\n                    }\n                }\n            }\n        });\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<Map<string, RxDocumentData<RxDocType>>> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('findDocumentsById', [ids, deleted]);\n        }\n\n        const collection = localState.collection;\n\n        const ret: Map<string, RxDocumentData<RxDocType>> = new Map();\n        ids.forEach(id => {\n            const documentInDb = collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret.set(id, stripLokiKey(documentInDb));\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(this.getSortComparator(preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<BlobBuffer> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('getChangedDocuments', [options]);\n        }\n\n        const desc = options.direction === 'before';\n        const operator = options.direction === 'after' ? '$gt' : '$lt';\n\n        let query = localState.changesCollection\n            .chain()\n            .find({\n                sequence: {\n                    [operator]: options.sinceSequence\n                }\n            })\n            .simplesort(\n                'sequence',\n                desc\n            );\n        if (options.limit) {\n            query = query.limit(options.limit);\n        }\n        const changedDocuments: RxStorageChangedDocumentMeta[] = query\n            .data()\n            .map(result => ({\n                id: result.id,\n                sequence: result.sequence\n            }));\n\n        const useForLastSequence = !desc ? lastOfArray(changedDocuments) : changedDocuments[0];\n\n        const ret: {\n            changedDocuments: RxStorageChangedDocumentMeta[];\n            lastSequence: number;\n        } = {\n            changedDocuments,\n            lastSequence: useForLastSequence ? useForLastSequence.sequence : options.sinceSequence\n        }\n\n        return ret;\n    }\n    changeStream(): Observable<RxStorageChangeEvent<RxDocumentData<RxDocType>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n        if (this.internals.localState) {\n            const localState = await this.getLocalState();\n            localState.database.saveDatabase();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection,\n                    localState.changesCollection\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('remove', []);\n        }\n        localState.database.removeCollection(this.collectionName);\n        localState.database.removeCollection(localState.changesCollection.name);\n    }\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(params.databaseName, databaseSettings);\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!Array.isArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    /**\n     * TODO disable stuff we do not need from CollectionOptions\n     */\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions as any\n    );\n    databaseState.openCollections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS)\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.openCollections[changesCollectionName] = changesCollection;\n\n    return {\n        database: databaseState.database,\n        collection,\n        changesCollection\n    }\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n    // optimisation shortcut, directly create db is non multi instance.\n    if (!params.broadcastChannel) {\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings,\n        params.broadcastChannel\n    );\n\n    return instance;\n}\n"],"file":"rx-storage-instance-loki.js"}