{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"names":["lokijs","Subject","promiseWait","createRevision","getHeightOfRevision","parseRevision","lastOfArray","flatClone","now","ensureNotFalsy","randomCouchString","newRxError","getPrimaryFieldOfPrimaryKey","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","CHANGES_COLLECTION_SUFFIX","closeLokiCollections","getLokiDatabase","getLokiEventKey","OPEN_LOKIJS_STORAGE_INSTANCES","LOKIJS_COLLECTION_DEFAULT_OPTIONS","getLeaderElectorByBroadcastChannel","instanceId","RxStorageInstanceLoki","databaseName","collectionName","schema","internals","options","databaseSettings","broadcastChannel","changes$","lastChangefeedSequence","primaryPath","primaryKey","add","leaderElector","awaitLeadership","then","addEventListener","msg","type","requestId","response","operation","params","isError","result","postMessage","getLocalState","ret","localState","mustUseLocalState","hasLeader","applyOnce","isLeader","createLokiLocalState","requestRemoteInstance","responsePromise","Promise","res","rej","listener","removeEventListener","addChangeDocumentMeta","id","lastDoc","changesCollection","chain","simplesort","limit","data","sequence","nextFeedSequence","insert","prepareQuery","mutateableQuery","selector","$and","_deleted","getSortComparator","query","sortOptions","sort","fun","a","b","compareResult","find","sortPart","fieldName","Object","keys","direction","values","directionMultiplier","valueA","valueB","Error","getQueryMatcher","doc","fakeCollection","binaryIndices","setPrototypeOf","Collection","prototype","fakeResultSet","collection","Resultset","filteredrows","length","bulkWrite","documentWrites","args","success","Map","error","startTime","forEach","writeRow","document","documentInDb","by","newRevision","insertedIsDeleted","writeDoc","assign","_rev","_attachments","next","eventId","documentId","change","previous","endTime","set","revInDb","err","status","newRevHeight","update","bulkAddRevisions","documents","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","storeAtLoki","$loki","findDocumentsById","ids","deleted","preparedQuery","skip","offset","foundDocuments","getAttachmentData","_documentId","_attachmentId","getChangedDocuments","desc","operator","sinceSequence","changedDocuments","map","useForLastSequence","lastSequence","changeStream","asObservable","close","complete","database","saveDatabase","remove","removeCollection","name","databaseState","indices","indexes","idx","Array","isArray","push","collectionOptions","unique","addCollection","openCollections","changesCollectionName","changesCollectionOptions","createLokiStorageInstance","instance"],"mappings":"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","sourcesContent":["import type {\n    SortComparator,\n    QueryMatcher,\n    ChangeEvent\n} from 'event-reduce-js';\nimport lokijs from 'lokijs';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    promiseWait,\n    createRevision,\n    getHeightOfRevision,\n    parseRevision,\n    lastOfArray,\n    flatClone,\n    now,\n    ensureNotFalsy,\n    randomCouchString\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    BlobBuffer,\n    ChangeStreamOnceOptions,\n    RxJsonSchema,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySortDirection,\n    LokiStorageInternals,\n    RxStorageChangedDocumentMeta,\n    RxStorageInstanceCreationParams,\n    LokiRemoteRequestBroadcastMessage,\n    LokiRemoteResponseBroadcastMessage,\n    LokiLocalState,\n    LokiDatabaseSettings\n} from '../../types';\nimport type {\n    CompareFunction\n} from 'array-push-at-sort-position';\nimport {\n    LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE,\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type {\n    BroadcastChannel,\n    LeaderElector\n} from 'broadcast-channel';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election';\n\nlet instanceId = 1;\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings\n> {\n\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = new Subject();\n    private lastChangefeedSequence: number = 0;\n    public readonly instanceId = instanceId++;\n\n    public readonly leaderElector?: LeaderElector;\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings,\n        public readonly broadcastChannel?: BroadcastChannel<LokiRemoteRequestBroadcastMessage | LokiRemoteResponseBroadcastMessage>\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (broadcastChannel) {\n            this.leaderElector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n            this.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.broadcastChannel).addEventListener('message', async (msg) => {\n                    if (\n                        msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                        msg.requestId &&\n                        msg.databaseName === this.databaseName &&\n                        msg.collectionName === this.collectionName &&\n                        !msg.response\n                    ) {\n\n                        const operation = (msg as any).operation;\n                        const params = (msg as any).params;\n                        let result: any;\n                        let isError = false;\n                        try {\n                            result = await (this as any)[operation](...params);\n                        } catch (err) {\n                            result = err;\n                            isError = true;\n                        }\n                        const response: LokiRemoteResponseBroadcastMessage = {\n                            response: true,\n                            requestId: msg.requestId,\n                            databaseName: this.databaseName,\n                            collectionName: this.collectionName,\n                            result,\n                            isError,\n                            type: msg.type\n                        };\n                        ensureNotFalsy(this.broadcastChannel).postMessage(response);\n                    }\n                });\n            });\n        }\n    }\n\n    private getLocalState() {\n        const ret = ensureNotFalsy(this.internals.localState);\n        return ret;\n    }\n\n    /**\n     * If the local state must be used, that one is returned.\n     * Returns false if a remote instance must be used.\n     */\n    private async mustUseLocalState(): Promise<LokiLocalState | false> {\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n        const leaderElector = ensureNotFalsy(this.leaderElector);\n        while (\n            !leaderElector.hasLeader\n        ) {\n            await leaderElector.applyOnce();\n\n            // TODO why do we need this line to pass the tests?\n            // otherwise we somehow do never get a leader.\n            /**\n             * TODO why do we need this line to pass the tests?\n             * Without it, we somehow do never get a leader.\n             * Does applyOnce() fully block the cpu?\n             */\n            await promiseWait(0); // TODO remove this line\n        }\n        if (\n            leaderElector.isLeader &&\n            !this.internals.localState\n        ) {\n            // own is leader, use local instance\n            this.internals.localState = createLokiLocalState({\n                databaseName: this.databaseName,\n                collectionName: this.collectionName,\n                options: this.options,\n                schema: this.schema,\n                broadcastChannel: this.broadcastChannel\n            }, this.databaseSettings);\n            return this.getLocalState();\n        } else {\n            // other is leader, send message to remote leading instance\n            return false;\n        }\n    }\n\n    private async requestRemoteInstance(\n        operation: string,\n        params: any[]\n    ): Promise<any | any[]> {\n        const broadcastChannel = ensureNotFalsy(this.broadcastChannel);\n        const requestId = randomCouchString(12);\n        const responsePromise = new Promise<any>((res, rej) => {\n            const listener = (msg: any) => {\n                if (\n                    msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                    msg.response === true &&\n                    msg.requestId === requestId\n                ) {\n                    if (msg.isError) {\n                        broadcastChannel.removeEventListener('message', listener);\n                        rej(msg.result);\n                    } else {\n                        broadcastChannel.removeEventListener('message', listener);\n                        res(msg.result);\n                    }\n                }\n            };\n            broadcastChannel.addEventListener('message', listener);\n        });\n\n        broadcastChannel.postMessage({\n            response: false,\n            type: LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE,\n            operation,\n            params,\n            requestId,\n            databaseName: this.databaseName,\n            collectionName: this.collectionName\n        });\n        const result = await responsePromise;\n        return result;\n    }\n\n    /**\n     * Adds an entry to the changes feed\n     * that can be queried to check which documents have been\n     * changed since sequence X.\n     */\n    private async addChangeDocumentMeta(id: string) {\n        const localState = await this.getLocalState();\n        if (!this.lastChangefeedSequence) {\n            const lastDoc = localState.changesCollection\n                .chain()\n                .simplesort('sequence', true)\n                .limit(1)\n                .data()[0];\n            if (lastDoc) {\n                this.lastChangefeedSequence = lastDoc.sequence;\n            }\n        }\n\n        const nextFeedSequence = this.lastChangefeedSequence + 1;\n        localState.changesCollection.insert({\n            id,\n            sequence: nextFeedSequence\n        });\n        this.lastChangefeedSequence = nextFeedSequence;\n    }\n\n    prepareQuery(mutateableQuery: MangoQuery<RxDocType>) {\n        mutateableQuery.selector = {\n            $and: [\n                {\n                    _deleted: false\n                },\n                mutateableQuery.selector\n            ]\n        };\n        return mutateableQuery;\n    }\n\n    getSortComparator(query: MangoQuery<RxDocType>): SortComparator<RxDocType> {\n        // TODO if no sort is given, use sort by primary.\n        // This should be done inside of RxDB and not in the storage implementations.\n        const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort ? (query.sort as any) : [{\n            [this.primaryPath]: 'asc'\n        }];\n        const fun: CompareFunction<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            let compareResult: number = 0; // 1 | -1\n            sortOptions.find(sortPart => {\n                const fieldName: string = Object.keys(sortPart)[0];\n                const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\n                const directionMultiplier = direction === 'asc' ? 1 : -1;\n                const valueA: any = (a as any)[fieldName];\n                const valueB: any = (b as any)[fieldName];\n                if (valueA === valueB) {\n                    return false;\n                } else {\n                    if (valueA > valueB) {\n                        compareResult = 1 * directionMultiplier;\n                        return true;\n                    } else {\n                        compareResult = -1 * directionMultiplier;\n                        return true;\n                    }\n                }\n            });\n            if (!compareResult) {\n                throw new Error('no compareResult');\n            }\n            return compareResult as any;\n        }\n        return fun;\n    }\n\n    /**\n     * Returns a function that determines if a document matches a query selector.\n     * It is important to have the exact same logix as lokijs uses, to be sure\n     * that the event-reduce algorithm works correct.\n     * But LokisJS does not export such a function, the query logic is deep inside of\n     * the Resultset prototype.\n     * Because I am lazy, I do not copy paste and maintain that code.\n     * Instead we create a fake Resultset and apply the prototype method Resultset.prototype.find(),\n     * same with Collection.\n     */\n    getQueryMatcher(query: MangoQuery<RxDocType>): QueryMatcher<RxDocType> {\n        const fun: QueryMatcher<RxDocType> = (doc: RxDocType) => {\n            const fakeCollection = {\n                data: [doc],\n                binaryIndices: {}\n            };\n            Object.setPrototypeOf(fakeCollection, (lokijs as any).Collection.prototype);\n            const fakeResultSet: any = {\n                collection: fakeCollection\n            };\n            Object.setPrototypeOf(fakeResultSet, (lokijs as any).Resultset.prototype);\n            fakeResultSet.find(query.selector, true);\n            const ret = fakeResultSet.filteredrows.length > 0;\n            return ret;\n        }\n        return fun;\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkWrite', [documentWrites]);\n        }\n\n        /**\n         * lokijs is in memory and non-async, so we emulate async behavior\n         * to ensure all RxStorage implementations behave equal.\n         */\n        await promiseWait(0);\n\n        const collection = localState.collection;\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: new Map(),\n            error: new Map()\n        };\n\n        const startTime = now();\n        documentWrites.forEach(writeRow => {\n            const id: string = writeRow.document[this.primaryPath] as any;\n            const documentInDb = collection.by(this.primaryPath, id);\n\n            if (!documentInDb) {\n                // insert new document\n                const newRevision = '1-' + createRevision(writeRow.document, true);\n\n                /**\n                 * It is possible to insert already deleted documents,\n                 * this can happen on replication.\n                 */\n                const insertedIsDeleted = writeRow.document._deleted ? true : false;\n\n                const writeDoc = Object.assign(\n                    {},\n                    writeRow.document,\n                    {\n                        _rev: newRevision,\n                        _deleted: insertedIsDeleted,\n                        // TODO attachments are currently not working with lokijs\n                        _attachments: {} as any\n                    }\n                );\n                collection.insert(writeDoc);\n                if (!insertedIsDeleted) {\n                    this.addChangeDocumentMeta(id);\n                    this.changes$.next({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change: {\n                            doc: writeDoc,\n                            id,\n                            operation: 'INSERT',\n                            previous: null\n                        },\n                        startTime,\n                        endTime: now()\n                    });\n                }\n                ret.success.set(id, writeDoc as any);\n            } else {\n                // update existing document\n                const revInDb: string = documentInDb._rev;\n                if (\n                    !writeRow.previous ||\n                    revInDb !== writeRow.previous._rev\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error.set(id, err);\n                } else {\n                    const newRevHeight = getHeightOfRevision(revInDb) + 1;\n                    const newRevision = newRevHeight + '-' + createRevision(writeRow.document, true);\n                    const writeDoc = Object.assign(\n                        {},\n                        documentInDb,\n                        writeRow.document,\n                        {\n                            _rev: newRevision,\n                            // TODO attachments are currently not working with lokijs\n                            _attachments: {}\n                        }\n                    );\n                    collection.update(writeDoc);\n                    this.addChangeDocumentMeta(id);\n\n\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: writeDoc\n                        };\n                    } else if (!writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: writeRow.previous,\n                            doc: writeDoc\n                        };\n                    } else if (!writeRow.previous._deleted && writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous: writeRow.previous,\n                            doc: null\n                        };\n                    }\n                    if (!change) {\n                        throw newRxError('SNH', { args: { writeRow } });\n                    }\n                    this.changes$.next({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change,\n                        startTime,\n                        endTime: now()\n                    });\n                    ret.success.set(id, writeDoc as any);\n                }\n            }\n        });\n        return ret;\n    }\n\n    async bulkAddRevisions(documents: RxDocumentData<RxDocType>[]): Promise<void> {\n        if (documents.length === 0) {\n            throw newRxError('P3', {\n                args: {\n                    documents\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkAddRevisions', [documents]);\n        }\n\n        /**\n         * lokijs is in memory and non-async, so we emulate async behavior\n         * to ensure all RxStorage implementations behave equal.\n         */\n        await promiseWait(0);\n        const startTime = now();\n        const collection = localState.collection;\n\n        documents.forEach(docData => {\n            const id: string = docData[this.primaryPath] as any;\n            const documentInDb = collection.by(this.primaryPath, id);\n            if (!documentInDb) {\n                // document not here, so we can directly insert\n                collection.insert(docData);\n                this.changes$.next({\n                    documentId: id,\n                    eventId: getLokiEventKey(false, id, docData._rev),\n                    change: {\n                        doc: docData,\n                        id,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n                this.addChangeDocumentMeta(id);\n            } else {\n                const newWriteRevision = parseRevision(docData._rev);\n                const oldRevision = parseRevision(documentInDb._rev);\n\n                let mustUpdate: boolean = false;\n                if (newWriteRevision.height !== oldRevision.height) {\n                    // height not equal, compare base on height\n                    if (newWriteRevision.height > oldRevision.height) {\n                        mustUpdate = true;\n                    }\n                } else if (newWriteRevision.hash > oldRevision.hash) {\n                    // equal height but new write has the 'winning' hash\n                    mustUpdate = true;\n                }\n                if (mustUpdate) {\n                    const storeAtLoki = flatClone(docData) as any;\n                    storeAtLoki.$loki = documentInDb.$loki;\n                    collection.update(storeAtLoki);\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: documentInDb,\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous: documentInDb,\n                            doc: null\n                        };\n                    } else if (documentInDb._deleted && docData._deleted) {\n                        change = null;\n                    }\n                    if (change) {\n                        this.changes$.next({\n                            documentId: id,\n                            eventId: getLokiEventKey(false, id, docData._rev),\n                            change,\n                            startTime,\n                            endTime: now()\n                        });\n                        this.addChangeDocumentMeta(id);\n                    }\n                }\n            }\n        });\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<Map<string, RxDocumentData<RxDocType>>> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('findDocumentsById', [ids, deleted]);\n        }\n\n        const collection = localState.collection;\n\n        const ret: Map<string, RxDocumentData<RxDocType>> = new Map();\n        ids.forEach(id => {\n            const documentInDb = collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret.set(id, documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('query', [preparedQuery]);\n        }\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(this.getSortComparator(preparedQuery));\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n        const foundDocuments = query.data();\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<BlobBuffer> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('getChangedDocuments', [options]);\n        }\n\n        const desc = options.direction === 'before';\n        const operator = options.direction === 'after' ? '$gt' : '$lt';\n\n        let query = localState.changesCollection\n            .chain()\n            .find({\n                sequence: {\n                    [operator]: options.sinceSequence\n                }\n            })\n            .simplesort(\n                'sequence',\n                !desc\n            );\n        if (options.limit) {\n            query = query.limit(options.limit);\n        }\n        const changedDocuments: RxStorageChangedDocumentMeta[] = query\n            .data()\n            .map(result => ({\n                id: result.id,\n                sequence: result.sequence\n            }));\n\n        const useForLastSequence = desc ? lastOfArray(changedDocuments) : changedDocuments[0];\n\n        const ret: {\n            changedDocuments: RxStorageChangedDocumentMeta[];\n            lastSequence: number;\n        } = {\n            changedDocuments,\n            lastSequence: useForLastSequence ? useForLastSequence.sequence : options.sinceSequence\n        }\n\n        return ret;\n    }\n    changeStream(): Observable<RxStorageChangeEvent<RxDocumentData<RxDocType>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n        if (this.internals.localState) {\n            const localState = await this.getLocalState();\n            localState.database.saveDatabase();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection,\n                    localState.changesCollection\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('remove', []);\n        }\n        localState.database.removeCollection(this.collectionName);\n        localState.database.removeCollection(localState.changesCollection.name);\n    }\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(params.databaseName, databaseSettings);\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!Array.isArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    /**\n     * TODO disable stuff we do not need from CollectionOptions\n     */\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions as any\n    );\n    databaseState.openCollections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS)\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.openCollections[changesCollectionName] = changesCollection;\n\n    return {\n        database: databaseState.database,\n        collection,\n        changesCollection\n    }\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n    // optimisation shortcut, directly create db is non multi instance.\n    if (!params.broadcastChannel) {\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings,\n        params.broadcastChannel\n    );\n\n    return instance;\n}\n"],"file":"rx-storage-instance-loki.js"}