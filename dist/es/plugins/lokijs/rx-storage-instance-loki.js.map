{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"names":["Subject","createRevision","getHeightOfRevision","parseRevision","lastOfArray","flatClone","now","ensureNotFalsy","randomCouchString","isMaybeReadonlyArray","newRxError","getPrimaryFieldOfPrimaryKey","CHANGES_COLLECTION_SUFFIX","closeLokiCollections","getLokiDatabase","getLokiEventKey","OPEN_LOKIJS_STORAGE_INSTANCES","LOKIJS_COLLECTION_DEFAULT_OPTIONS","stripLokiKey","getLokiSortComparator","getLokiLeaderElector","removeLokiLeaderElectorReference","requestRemoteInstance","mustUseLocalState","handleRemoteRequest","createLokiStorageInstance","storage","params","databaseSettings","instance","RxStorageInstanceLoki","databaseName","collectionName","schema","internals","options","multiInstance","leaderElector","awaitLeadership","then","localState","createLokiLocalState","databaseState","indices","indexes","forEach","idx","push","primaryKey","collectionOptions","Object","assign","collection","unique","database","addCollection","collections","changesCollectionName","changesCollectionOptions","changesCollection","ret","instanceId","changes$","lastChangefeedSequence","closed","primaryPath","add","broadcastChannel","addEventListener","msg","addChangeDocumentMeta","id","lastDoc","chain","simplesort","limit","data","sequence","nextFeedSequence","insert","bulkWrite","documentWrites","length","args","success","error","eventBulk","events","writeRow","startTime","document","documentInDb","by","newRevision","insertedIsDeleted","_deleted","writeDoc","_rev","_attachments","insertData","$lastWriteAt","eventId","documentId","change","doc","operation","previous","endTime","revInDb","err","isError","status","newRevHeight","isDeleted","$loki","update","saveQueue","addWrite","next","bulkAddRevisions","documents","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","storeAtLoki","findDocumentsById","ids","deleted","query","preparedQuery","find","selector","sort","skip","offset","foundDocuments","map","lokiDoc","getAttachmentData","_documentId","_attachmentId","Error","getChangedDocuments","desc","direction","operator","sinceSequence","changedDocuments","result","useForLastSequence","lastSequence","changeStream","asObservable","close","complete","dbState","run","remove","removeCollection","name"],"mappings":"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","sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    createRevision,\n    getHeightOfRevision,\n    parseRevision,\n    lastOfArray,\n    flatClone,\n    now,\n    ensureNotFalsy,\n    randomCouchString, isMaybeReadonlyArray\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    BlobBuffer,\n    ChangeStreamOnceOptions,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageChangedDocumentMeta,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk\n} from '../../types';\nimport {\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    removeLokiLeaderElectorReference,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings\n> {\n\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private lastChangefeedSequence: number = 0;\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', async (msg) => handleRemoteRequest(this, msg));\n            });\n        }\n    }\n\n    /**\n     * Adds an entry to the changes feed\n     * that can be queried to check which documents have been\n     * changed since sequence X.\n     */\n    private async addChangeDocumentMeta(id: string) {\n        const localState = await ensureNotFalsy(this.internals.localState);\n        if (!this.lastChangefeedSequence) {\n            const lastDoc = localState.changesCollection\n                .chain()\n                .simplesort('sequence', true)\n                .limit(1)\n                .data()[0];\n            if (lastDoc) {\n                this.lastChangefeedSequence = lastDoc.sequence;\n            }\n        }\n\n        const nextFeedSequence = this.lastChangefeedSequence + 1;\n        localState.changesCollection.insert({\n            id,\n            sequence: nextFeedSequence\n        });\n        this.lastChangefeedSequence = nextFeedSequence;\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        documentWrites.forEach(writeRow => {\n            const startTime = now();\n            const id: string = writeRow.document[this.primaryPath] as any;\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n\n            if (!documentInDb) {\n                // insert new document\n                const newRevision = '1-' + createRevision(writeRow.document);\n\n                /**\n                 * It is possible to insert already deleted documents,\n                 * this can happen on replication.\n                 */\n                const insertedIsDeleted = writeRow.document._deleted ? true : false;\n\n                const writeDoc = Object.assign(\n                    {},\n                    writeRow.document,\n                    {\n                        _rev: newRevision,\n                        _deleted: insertedIsDeleted,\n                        // TODO attachments are currently not working with lokijs\n                        _attachments: {} as any\n                    }\n                );\n                const insertData: any = flatClone(writeDoc);\n                insertData.$lastWriteAt = startTime;\n                localState.collection.insert(insertData);\n                if (!insertedIsDeleted) {\n                    this.addChangeDocumentMeta(id);\n                    eventBulk.events.push({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change: {\n                            doc: writeDoc,\n                            id,\n                            operation: 'INSERT',\n                            previous: null\n                        },\n                        startTime,\n                        endTime: now()\n                    });\n                }\n                ret.success[id] = writeDoc;\n            } else {\n                // update existing document\n                const revInDb: string = documentInDb._rev;\n\n                // inserting a deleted document is possible\n                // without sending the previous data.\n                if (!writeRow.previous && documentInDb._deleted) {\n                    writeRow.previous = documentInDb;\n                }\n\n                if (\n                    (\n                        !writeRow.previous &&\n                        !documentInDb._deleted\n                    ) ||\n                    (\n                        !!writeRow.previous &&\n                        revInDb !== writeRow.previous._rev\n                    )\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error[id] = err;\n                } else {\n                    const newRevHeight = getHeightOfRevision(revInDb) + 1;\n                    const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n                    const isDeleted = !!writeRow.document._deleted;\n                    const writeDoc: any = Object.assign(\n                        {},\n                        writeRow.document,\n                        {\n                            $loki: documentInDb.$loki,\n                            $lastWriteAt: startTime,\n                            _rev: newRevision,\n                            _deleted: isDeleted,\n                            // TODO attachments are currently not working with lokijs\n                            _attachments: {}\n                        }\n                    );\n                    localState.collection.update(writeDoc);\n                    this.addChangeDocumentMeta(id);\n\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: stripLokiKey(writeDoc)\n                        };\n                    } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: writeRow.previous,\n                            doc: stripLokiKey(writeDoc)\n                        };\n                    } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                        /**\n                         * On delete, we send the 'new' rev in the previous property,\n                         * to have the equal behavior as pouchdb.\n                         */\n                        const previous = flatClone(writeRow.previous);\n                        previous._rev = newRevision;\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous,\n                            doc: null\n                        };\n                    }\n                    if (!change) {\n                        throw newRxError('SNH', { args: { writeRow } });\n                    }\n                    eventBulk.events.push({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change,\n                        startTime,\n                        endTime: now()\n                    });\n                    ret.success[id] = stripLokiKey(writeDoc);\n                }\n            }\n        });\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(eventBulk);\n\n        return ret;\n    }\n\n    async bulkAddRevisions(documents: RxDocumentData<RxDocType>[]): Promise<void> {\n        if (documents.length === 0) {\n            throw newRxError('P3', {\n                args: {\n                    documents\n                }\n            });\n        }\n\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkAddRevisions', [documents]);\n        }\n\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        documents.forEach(docData => {\n            const startTime = now();\n            const id: string = docData[this.primaryPath] as any;\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (!documentInDb) {\n                // document not here, so we can directly insert\n                const insertData: any = flatClone(docData);\n                insertData.$lastWriteAt = startTime;\n                localState.collection.insert(insertData);\n                eventBulk.events.push({\n                    documentId: id,\n                    eventId: getLokiEventKey(false, id, docData._rev),\n                    change: {\n                        doc: docData,\n                        id,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n                this.addChangeDocumentMeta(id);\n            } else {\n                const newWriteRevision = parseRevision(docData._rev);\n                const oldRevision = parseRevision(documentInDb._rev);\n\n                let mustUpdate: boolean = false;\n                if (newWriteRevision.height !== oldRevision.height) {\n                    // height not equal, compare base on height\n                    if (newWriteRevision.height > oldRevision.height) {\n                        mustUpdate = true;\n                    }\n                } else if (newWriteRevision.hash > oldRevision.hash) {\n                    // equal height but new write has the 'winning' hash\n                    mustUpdate = true;\n                }\n                if (mustUpdate) {\n                    const storeAtLoki = flatClone(docData) as any;\n                    storeAtLoki.$loki = documentInDb.$loki;\n                    storeAtLoki.$lastWriteAt = startTime;\n                    localState.collection.update(storeAtLoki);\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: stripLokiKey(documentInDb),\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous: stripLokiKey(documentInDb),\n                            doc: null\n                        };\n                    } else if (documentInDb._deleted && docData._deleted) {\n                        change = null;\n                    }\n                    if (change) {\n                        eventBulk.events.push({\n                            documentId: id,\n                            eventId: getLokiEventKey(false, id, docData._rev),\n                            change,\n                            startTime,\n                            endTime: now()\n                        });\n                        this.addChangeDocumentMeta(id);\n                    }\n                }\n            }\n        });\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(eventBulk);\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<BlobBuffer> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocuments', [options]);\n        }\n\n        const desc = options.direction === 'before';\n        const operator = options.direction === 'after' ? '$gt' : '$lt';\n\n        let query = localState.changesCollection\n            .chain()\n            .find({\n                sequence: {\n                    [operator]: options.sinceSequence\n                }\n            })\n            .simplesort(\n                'sequence',\n                desc\n            );\n        if (options.limit) {\n            query = query.limit(options.limit);\n        }\n        const changedDocuments: RxStorageChangedDocumentMeta[] = query\n            .data()\n            .map(result => ({\n                id: result.id,\n                sequence: result.sequence\n            }));\n\n        const useForLastSequence = !desc ? lastOfArray(changedDocuments) : changedDocuments[0];\n\n        const ret: {\n            changedDocuments: RxStorageChangedDocumentMeta[];\n            lastSequence: number;\n        } = {\n            changedDocuments,\n            lastSequence: useForLastSequence ? useForLastSequence.sequence : options.sinceSequence\n        }\n\n        return ret;\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection,\n                    localState.changesCollection\n                ]\n            );\n        }\n        removeLokiLeaderElectorReference(this.storage, this.databaseName);\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(this.collectionName);\n        localState.databaseState.database.removeCollection(localState.changesCollection.name);\n        return this.close();\n    }\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    /**\n     * TODO disable stuff we do not need from CollectionOptions\n     */\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS)\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.collections[params.collectionName] = changesCollection;\n\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection,\n        changesCollection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(storage, params.databaseName);\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    /**\n     * Directly create the localState if the db becomes leader.\n     */\n    if (params.multiInstance) {\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => mustUseLocalState(instance));\n    }\n\n\n    return instance;\n}\n"],"file":"rx-storage-instance-loki.js"}