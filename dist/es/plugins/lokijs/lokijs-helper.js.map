{"version":3,"sources":["../../../../src/plugins/lokijs/lokijs-helper.ts"],"names":["lokijs","add","unloadAdd","flatClone","CHANGES_COLLECTION_SUFFIX","CHANGES_LOCAL_SUFFIX","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","stripLokiKey","docData","$loki","cloned","getLokiEventKey","isLocal","primary","revision","prefix","eventKey","OPEN_LOKIJS_STORAGE_INSTANCES","Set","LOKIJS_COLLECTION_DEFAULT_OPTIONS","disableChangesApi","disableMeta","disableDeltaChangesApi","disableFreeze","cloneMethod","clone","transactional","autoupdate","LOKI_DATABASE_STATE_BY_NAME","Map","getLokiDatabase","databaseName","databaseSettings","databaseState","get","hasPersistence","adapter","persistenceMethod","useSettings","Object","assign","autoload","autosave","autosaveInterval","undefined","verbose","throttledSaves","autosaveCallback","console","log","database","Promise","res","rej","loadDatabase","err","saveDatabase","state","openCollections","set","closeLokiCollections","collections","forEach","collection","collectionName","name","keys","length","close"],"mappings":"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","sourcesContent":["import type { RxStorageInstanceLoki } from './rx-storage-instance-loki';\nimport type { RxStorageKeyObjectInstanceLoki } from './rx-storage-key-object-instance-loki';\nimport lokijs, { Collection } from 'lokijs';\nimport type {\n    LokiDatabaseSettings,\n    LokiDatabaseState\n} from '../../types';\nimport {\n    add as unloadAdd\n} from 'unload';\nimport { flatClone } from '../../util';\n\nexport const CHANGES_COLLECTION_SUFFIX = '-rxdb-changes';\nexport const CHANGES_LOCAL_SUFFIX = '-rxdb-local';\nexport const LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request';\nexport const LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request-key-object';\n\n\n/**\n * Loki attaches a $loki property to all data\n * which must be removed before returning the data back to RxDB.\n */\nexport function stripLokiKey<T>(docData: T & { $loki?: number }): T {\n    if (!docData.$loki) {\n        return docData;\n    }\n    const cloned = flatClone(docData);\n    delete cloned.$loki;\n    return cloned;\n}\n\nexport function getLokiEventKey(\n    isLocal: boolean,\n    primary: string,\n    revision: string\n): string {\n    const prefix = isLocal ? 'local' : 'non-local';\n    const eventKey = prefix + '|' + primary + '|' + revision;\n    return eventKey;\n}\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_LOKIJS_STORAGE_INSTANCES: Set<RxStorageKeyObjectInstanceLoki | RxStorageInstanceLoki<any>> = new Set();\n\n\nexport const LOKIJS_COLLECTION_DEFAULT_OPTIONS: Partial<CollectionOptions<any>> = {\n    disableChangesApi: true,\n    disableMeta: true,\n    disableDeltaChangesApi: true,\n    disableFreeze: true,\n    // TODO use 'immutable' like WatermelonDB does it\n    cloneMethod: 'shallow-assign',\n    clone: false,\n    transactional: false,\n    autoupdate: false\n}\n\nconst LOKI_DATABASE_STATE_BY_NAME: Map<string, Promise<LokiDatabaseState>> = new Map();\nexport function getLokiDatabase(\n    databaseName: string,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiDatabaseState> {\n    let databaseState: Promise<LokiDatabaseState> | undefined = LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        /**\n         * We assume that as soon as an adapter is passed,\n         * the database has to be persistend.\n         */\n        const hasPersistence: boolean = !!databaseSettings.adapter;\n        databaseState = (async () => {\n\n            let persistenceMethod = hasPersistence ? 'adapter' : 'memory';\n            if (databaseSettings.persistenceMethod) {\n                persistenceMethod = databaseSettings.persistenceMethod;\n            }\n            const useSettings = Object.assign(\n                // defaults\n                {\n                    autoload: hasPersistence,\n                    autosave: hasPersistence,\n                    persistenceMethod,\n                    autosaveInterval: hasPersistence ? 500 : undefined,\n                    verbose: true,\n                    throttledSaves: false,\n                    // TODO remove this log\n                    autosaveCallback: hasPersistence ? () => console.log('LokiJS autosave done!') : undefined\n                },\n                databaseSettings\n            );\n            const database = new lokijs(\n                databaseName + '.db',\n                useSettings\n            );\n\n            // Wait until all data is load from persistence adapter.\n            if (hasPersistence) {\n                await new Promise<void>((res, rej) => {\n                    database.loadDatabase({}, (err) => {\n                        err ? rej(err) : res();\n                    });\n                });\n            }\n\n            /**\n             * Autosave database on process end\n             */\n            if (hasPersistence) {\n                unloadAdd(() => database.saveDatabase());\n            }\n\n\n\n            const state: LokiDatabaseState = {\n                database,\n                openCollections: {}\n            };\n\n            return state;\n        })();\n        LOKI_DATABASE_STATE_BY_NAME.set(databaseName, databaseState);\n    }\n    return databaseState;\n}\n\nexport async function closeLokiCollections(\n    databaseName: string,\n    collections: Collection[]\n) {\n    const databaseState = await LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        // already closed\n        return;\n    }\n    collections.forEach(collection => {\n        const collectionName = collection.name;\n        delete databaseState.openCollections[collectionName];\n    });\n    if (Object.keys(databaseState.openCollections).length === 0) {\n        // all collections closed -> also close database\n        LOKI_DATABASE_STATE_BY_NAME.delete(databaseName);\n        await new Promise<void>((res, rej) => {\n            databaseState.database.close(err => {\n                err ? rej(err) : res();\n            });\n        });\n    }\n}\n"],"file":"lokijs-helper.js"}