{"version":3,"file":"index.js","names":["BehaviorSubject","filter","firstValueFrom","map","Subject","addRxPlugin","rxStorageInstanceToReplicationHandler","ensureNotFalsy","getFromMapOrThrow","randomCouchString","RxDBLeaderElectionPlugin","replicateRxCollection","isMasterInP2PReplication","sendMessageAndAwaitAnswer","syncP2P","options","requestCounter","getRequestId","count","collection","database","token","requestFlag","storageToken","pool","RxP2PReplicationPool","connectionHandlerCreator","subs","push","connectionHandler","error$","subscribe","err","next","disconnect$","peer","removePeer","message$","pipe","data","message","method","send","id","result","connectSub","connect$","canceled","params","tokenResponse","peerToken","isMaster","hashFunction","replicationState","masterHandler","masterReplicationHandler","masterChangeStreamSub","masterChangeStream$","ev","streamResponse","p","unsubscribe","messageSub","msgPeer","bind","response","replicationIdentifier","name","topic","join","autoStart","deletedField","live","retryTime","waitForLeadership","pull","Object","assign","handler","lastPulledCheckpoint","batchSize","answer","stream$","response$","m","undefined","docs","addPeer","multiInstance","peerStates$","Map","onDestroy","cancel","storageInstance","conflictHandler","peerState","getValue","set","forEach","sub","awaitFirstPeer","peerStates","size","Array","from","keys","destroy","RxDBReplicationP2PPlugin","init","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-p2p/index.ts"],"sourcesContent":["import { BehaviorSubject, filter, firstValueFrom, map, Subject, Subscription } from 'rxjs';\nimport { addRxPlugin } from '../../plugin';\nimport { rxStorageInstanceToReplicationHandler } from '../../replication-protocol';\nimport type {\n    RxCollection,\n    RxError,\n    RxPlugin,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxTypeError\n} from '../../types';\nimport { ensureNotFalsy, getFromMapOrThrow, randomCouchString } from '../../util';\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport { replicateRxCollection } from '../replication';\nimport { isMasterInP2PReplication, sendMessageAndAwaitAnswer } from './p2p-helper';\nimport type {\n    P2PConnectionHandler,\n    P2PPeer,\n    P2PPeerState,\n    P2PReplicationCheckpoint,\n    P2PResponse,\n    RxP2PReplicationState,\n    SyncOptionsP2P\n} from './p2p-types';\n\n\nexport async function syncP2P<RxDocType>(\n    this: RxCollection<RxDocType>,\n    options: SyncOptionsP2P<RxDocType>\n): Promise<RxP2PReplicationPool<RxDocType>> {\n\n    // fill defaults\n    if (options.pull) {\n        if (!options.pull.batchSize) {\n            options.pull.batchSize = 20;\n        }\n    }\n    if (options.push) {\n        if (!options.push.batchSize) {\n            options.push.batchSize = 20;\n        }\n    }\n\n    const collection = this;\n    if (this.database.multiInstance) {\n        await this.database.waitForLeadership();\n    }\n\n    // used to easier debug stuff\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return collection.database.token + '|' + requestFlag + '|' + count;\n    }\n\n    const storageToken = await this.database.storageToken;\n    const pool = new RxP2PReplicationPool(\n        this,\n        options,\n        options.connectionHandlerCreator(options)\n    );\n\n\n    pool.subs.push(\n        pool.connectionHandler.error$.subscribe(err => pool.error$.next(err)),\n        pool.connectionHandler.disconnect$.subscribe(peer => pool.removePeer(peer))\n    );\n\n    /**\n     * Answer if someone requests our storage token\n     */\n    pool.subs.push(\n        pool.connectionHandler.message$.pipe(\n            filter(data => data.message.method === 'token')\n        ).subscribe(data => {\n            pool.connectionHandler.send(data.peer, {\n                id: data.message.id,\n                result: storageToken\n            });\n        })\n    );\n\n    const connectSub = pool.connectionHandler.connect$\n        .pipe(\n            filter(() => !pool.canceled)\n        )\n        .subscribe(async (peer) => {\n            /**\n             * TODO ensure both know the correct secret\n             */\n            const tokenResponse = await sendMessageAndAwaitAnswer(\n                pool.connectionHandler,\n                peer,\n                {\n                    id: getRequestId(),\n                    method: 'token',\n                    params: []\n                }\n            );\n            const peerToken: string = tokenResponse.result;\n            const isMaster = isMasterInP2PReplication(this.database.hashFunction, storageToken, peerToken);\n\n            let replicationState: RxP2PReplicationState<RxDocType> | undefined;\n            if (isMaster) {\n                const masterHandler = pool.masterReplicationHandler;\n                const masterChangeStreamSub = masterHandler.masterChangeStream$.subscribe(ev => {\n                    const streamResponse: P2PResponse = {\n                        id: 'masterChangeStream$',\n                        result: ev\n                    };\n                    pool.connectionHandler.send(peer, streamResponse);\n                });\n\n                // clean up the subscription\n                pool.subs.push(\n                    masterChangeStreamSub,\n                    pool.connectionHandler.disconnect$.pipe(\n                        filter(p => p.id === peer.id)\n                    ).subscribe(() => masterChangeStreamSub.unsubscribe())\n                );\n\n                const messageSub = pool.connectionHandler.message$\n                    .pipe(\n                        filter(data => data.peer.id === peer.id),\n                        filter(data => data.message.method !== 'token')\n                    )\n                    .subscribe(async (data) => {\n                        const { peer: msgPeer, message } = data;\n                        /**\n                         * If it is not a function,\n                         * it means that the client requested the masterChangeStream$\n                         */\n                        const method = (masterHandler as any)[message.method].bind(masterHandler);\n                        const result = await (method as any)(...message.params);\n                        const response: P2PResponse = {\n                            id: message.id,\n                            result\n                        };\n                        pool.connectionHandler.send(msgPeer, response);\n                    });\n                pool.subs.push(messageSub);\n            } else {\n                replicationState = replicateRxCollection({\n                    replicationIdentifier: [this.name, options.topic, peerToken].join('||'),\n                    collection: this,\n                    autoStart: true,\n                    deletedField: '_deleted',\n                    live: true,\n                    retryTime: options.retryTime,\n                    waitForLeadership: false,\n                    pull: options.pull ? Object.assign({}, options.pull, {\n                        async handler(lastPulledCheckpoint: P2PReplicationCheckpoint) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterChangesSince',\n                                    params: [\n                                        lastPulledCheckpoint,\n                                        ensureNotFalsy(options.pull).batchSize\n                                    ],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        },\n                        stream$: pool.connectionHandler.response$.pipe(\n                            filter(m => m.response.id === 'masterChangeStream$'),\n                            map(m => m.response.result)\n                        )\n\n                    }) : undefined,\n                    push: options.push ? Object.assign({}, options.push, {\n                        async handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterWrite',\n                                    params: [docs],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        }\n                    }) : undefined\n                });\n            }\n            pool.addPeer(peer, replicationState);\n        });\n    pool.subs.push(connectSub);\n    return pool;\n}\n\n\n/**\n * Because the P2P replication runs between many instances,\n * we use a Pool instead of returning a single replication state.\n */\nexport class RxP2PReplicationPool<RxDocType> {\n\n    peerStates$: BehaviorSubject<Map<P2PPeer, P2PPeerState<RxDocType>>> = new BehaviorSubject(new Map());\n    canceled: boolean = false;\n    masterReplicationHandler: RxReplicationHandler<RxDocType, P2PReplicationCheckpoint>;\n    subs: Subscription[] = [];\n\n    public error$ = new Subject<RxError | RxTypeError>();\n\n    constructor(\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly options: SyncOptionsP2P<RxDocType>,\n        public readonly connectionHandler: P2PConnectionHandler\n    ) {\n        this.collection.onDestroy.push(() => this.cancel());\n        this.masterReplicationHandler = rxStorageInstanceToReplicationHandler(\n            collection.storageInstance,\n            collection.conflictHandler,\n            collection.database.hashFunction\n        );\n    }\n\n    addPeer(\n        peer: P2PPeer,\n        replicationState?: RxP2PReplicationState<RxDocType>\n    ) {\n        const peerState: P2PPeerState<RxDocType> = {\n            peer,\n            replicationState,\n            subs: []\n        };\n        this.peerStates$.next(this.peerStates$.getValue().set(peer, peerState));\n        if (replicationState) {\n            peerState.subs.push(\n                replicationState.error$.subscribe(ev => this.error$.next(ev))\n            );\n        }\n    }\n    removePeer(peer: P2PPeer) {\n        const peerState = getFromMapOrThrow(this.peerStates$.getValue(), peer);\n        this.peerStates$.getValue().delete(peer);\n        this.peerStates$.next(this.peerStates$.getValue());\n        peerState.subs.forEach(sub => sub.unsubscribe());\n        if (peerState.replicationState) {\n            peerState.replicationState.cancel();\n        }\n    }\n\n    // often used in unit tests\n    awaitFirstPeer() {\n        return firstValueFrom(\n            this.peerStates$.pipe(\n                filter(peerStates => peerStates.size > 0)\n            )\n        );\n    }\n\n    public async cancel() {\n        if (this.canceled) {\n            return;\n        }\n        this.canceled = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        Array.from(this.peerStates$.getValue().keys()).forEach(peer => {\n            this.removePeer(peer);\n        });\n        await this.connectionHandler.destroy();\n    }\n}\n\n\nexport const RxDBReplicationP2PPlugin: RxPlugin = {\n    name: 'replication-p2p',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncP2P = syncP2P;\n        }\n    }\n};\n\n\nexport * from './p2p-helper';\nexport * from './p2p-types';\n// export * from './connection-handler-webtorrent';\n// export * from './connection-handler-p2pcf';\nexport * from './connection-handler-simple-peer';\n"],"mappings":"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"}