{"version":3,"file":"websocket-client.js","names":["replicateRxCollection","ReconnectingWebSocket","WebSocket","IsomorphicWebSocket","getFromMapOrThrow","randomCouchString","filter","map","Subject","firstValueFrom","replicateWithWebsocketServer","options","getWebSocket","url","socketState","wsClient","socket","messages$","onmessage","messageObj","message","JSON","parse","data","next","requestCounter","getRequestId","count","collection","database","token","requestFlag","streamRequest","id","name","method","params","send","stringify","replicationState","replicationIdentifier","pull","batchSize","stream$","pipe","msg","result","handler","lastPulledCheckpoint","requestId","request","push","docs","connect$","subscribe","reSync","has","WEBSOCKET_BY_URL","get","undefined","openPromise","Promise","res","onopen","refCount","set","Map","removeWebSocketRef","obj","complete","close"],"sources":["../../../../src/plugins/replication-websocket/websocket-client.ts"],"sourcesContent":["import { replicateRxCollection } from '../replication';\nimport {\n    WebsocketClientOptions,\n    WebsocketMessageResponseType,\n    WebsocketMessageType\n} from './websocket-types';\n\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport {\n    WebSocket as IsomorphicWebSocket\n} from 'isomorphic-ws';\nimport {\n    getFromMapOrThrow,\n    randomCouchString\n} from '../../util';\nimport {\n    filter,\n    map,\n    Subject,\n    firstValueFrom\n} from 'rxjs';\nimport { RxReplicationWriteToMasterRow } from '../../types';\n\nexport type WebsocketWithRefCount = {\n    url: string;\n    socket: ReconnectingWebSocket;\n    refCount: number;\n    openPromise: Promise<void>;\n    connect$: Subject<void>;\n};\n\n/**\n * Reuse the same socket even when multiple\n * collection replicate with the same server at once.\n */\nexport const WEBSOCKET_BY_URL: Map<string, WebsocketWithRefCount> = new Map();\nexport async function getWebSocket(\n    url: string\n): Promise<WebsocketWithRefCount> {\n    let has = WEBSOCKET_BY_URL.get(url);\n    if (!has) {\n        const wsClient = new ReconnectingWebSocket(\n            url,\n            undefined,\n            {\n                WebSocket: IsomorphicWebSocket\n            }\n        );\n\n\n        const connect$ = new Subject<void>();\n        const openPromise = new Promise<void>(res => {\n            wsClient.onopen = () => {\n                connect$.next();\n                res();\n            };\n        });\n\n        has = {\n            url,\n            socket: wsClient,\n            openPromise,\n            refCount: 1,\n            connect$\n        };\n        WEBSOCKET_BY_URL.set(url, has);\n    } else {\n        has.refCount = has.refCount + 1;\n    }\n\n\n    await has.openPromise;\n    return has;\n}\n\nexport function removeWebSocketRef(\n    url: string\n) {\n    const obj = getFromMapOrThrow(WEBSOCKET_BY_URL, url);\n    obj.refCount = obj.refCount - 1;\n    if (obj.refCount === 0) {\n        WEBSOCKET_BY_URL.delete(url);\n        obj.connect$.complete();\n        obj.socket.close();\n    }\n}\n\n\n\nexport async function replicateWithWebsocketServer<RxDocType, CheckpointType>(\n    options: WebsocketClientOptions<RxDocType>\n) {\n    const socketState = await getWebSocket(options.url);\n    const wsClient = socketState.socket;\n    const messages$ = new Subject<WebsocketMessageResponseType>();\n\n    wsClient.onmessage = (messageObj) => {\n        const message: WebsocketMessageResponseType = JSON.parse(messageObj.data);\n        messages$.next(message);\n    };\n\n\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return options.collection.database.token + '|' + requestFlag + '|' + count;\n    }\n\n    const streamRequest: WebsocketMessageType = {\n        id: 'stream',\n        collection: options.collection.name,\n        method: 'masterChangeStream$',\n        params: []\n    }\n    wsClient.send(JSON.stringify(streamRequest));\n\n    const replicationState = replicateRxCollection<RxDocType, CheckpointType>({\n        collection: options.collection,\n        replicationIdentifier: 'websocket-' + options.url,\n        pull: {\n            batchSize: options.batchSize,\n            stream$: messages$.pipe(\n                filter(msg => msg.id === 'stream' && msg.collection === options.collection.name),\n                map(msg => msg.result)\n            ),\n            async handler(lastPulledCheckpoint: CheckpointType, batchSize: number) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterChangesSince',\n                    params: [lastPulledCheckpoint, batchSize]\n                }\n                wsClient.send(JSON.stringify(request));\n                const result = await firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n                return result;\n            }\n        },\n        push: {\n            batchSize: options.batchSize,\n            handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterWrite',\n                    params: [docs]\n                }\n                wsClient.send(JSON.stringify(request));\n                return firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n            }\n        }\n    });\n\n    /**\n     * When the client goes offline and online again,\n     * we have to send a 'RESYNC' signal because the client\n     * might have missed out events while being offline.\n     */\n    socketState.connect$.subscribe(() => {\n        replicationState.reSync();\n    });\n\n\n    return replicationState;\n}\n"],"mappings":"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"}