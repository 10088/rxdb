{"version":3,"file":"websocket-client.js","names":["replicateRxCollection","ReconnectingWebSocket","WebSocket","IsomorphicWebSocket","getFromMapOrThrow","randomCouchString","filter","map","Subject","firstValueFrom","newRxError","replicateWithWebsocketServer","options","getWebSocket","url","collection","database","socketState","wsClient","socket","messages$","message$","requestCounter","getRequestId","count","token","requestFlag","streamRequest","id","name","method","params","send","JSON","stringify","replicationState","replicationIdentifier","pull","batchSize","stream$","pipe","msg","result","handler","lastPulledCheckpoint","requestId","request","push","docs","error$","subscribe","err","subjects","error","next","connect$","reSync","onDestroy","removeWebSocketRef","cacheKey","has","WEBSOCKET_BY_CACHE_KEY","get","undefined","openPromise","Promise","res","onopen","onmessage","messageObj","message","parse","data","onerror","emitError","errors","Array","isArray","direction","refCount","set","Map","obj","complete","close"],"sources":["../../../../src/plugins/replication-websocket/websocket-client.ts"],"sourcesContent":["import { replicateRxCollection, RxReplicationState } from '../replication';\nimport {\n    WebsocketClientOptions,\n    WebsocketMessageResponseType,\n    WebsocketMessageType\n} from './websocket-types';\n\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport {\n    WebSocket as IsomorphicWebSocket\n} from 'isomorphic-ws';\nimport {\n    getFromMapOrThrow,\n    randomCouchString\n} from '../../util';\nimport {\n    filter,\n    map,\n    Subject,\n    firstValueFrom\n} from 'rxjs';\nimport {\n    RxDatabase,\n    RxError,\n    RxReplicationWriteToMasterRow\n} from '../../types';\nimport { newRxError } from '../../rx-error';\n\nexport type WebsocketWithRefCount = {\n    url: string;\n    socket: ReconnectingWebSocket;\n    refCount: number;\n    openPromise: Promise<void>;\n    connect$: Subject<void>;\n    message$: Subject<WebsocketMessageResponseType>;\n    error$: Subject<RxError>\n};\n\n/**\n * Reuse the same socket even when multiple\n * collection replicate with the same server at once.\n */\nexport const WEBSOCKET_BY_CACHE_KEY: Map<string, WebsocketWithRefCount> = new Map();\nexport async function getWebSocket(\n    url: string,\n    database: RxDatabase<any, any, any>\n): Promise<WebsocketWithRefCount> {\n    /**\n     * Also use the database token as cache-key\n     * to make it easier to test and debug\n     * multi-instance setups.\n     */\n    const cacheKey = url + '|||' + database.token;\n\n    let has = WEBSOCKET_BY_CACHE_KEY.get(cacheKey);\n    if (!has) {\n        const wsClient = new ReconnectingWebSocket(\n            url,\n            undefined,\n            {\n                WebSocket: IsomorphicWebSocket\n            }\n        );\n\n        const connect$ = new Subject<void>();\n        const openPromise = new Promise<void>(res => {\n            wsClient.onopen = () => {\n                connect$.next();\n                res();\n            };\n        });\n\n        const message$ = new Subject<WebsocketMessageResponseType>();\n        wsClient.onmessage = (messageObj) => {\n            const message: WebsocketMessageResponseType = JSON.parse(messageObj.data);\n            message$.next(message);\n        };\n\n        const error$ = new Subject<any>();\n        wsClient.onerror = (err) => {\n            const emitError = newRxError('RC_STREAM', {\n                errors: Array.isArray(err) ? err as any : [err],\n                direction: 'pull'\n            });\n            error$.next(emitError);\n        }\n\n\n        has = {\n            url,\n            socket: wsClient,\n            openPromise,\n            refCount: 1,\n            connect$,\n            message$,\n            error$\n        };\n        WEBSOCKET_BY_CACHE_KEY.set(cacheKey, has);\n    } else {\n        has.refCount = has.refCount + 1;\n    }\n\n\n    await has.openPromise;\n    return has;\n}\n\nexport function removeWebSocketRef(\n    url: string,\n    database: RxDatabase\n) {\n    const cacheKey = url + '|||' + database.token;\n    const obj = getFromMapOrThrow(WEBSOCKET_BY_CACHE_KEY, cacheKey);\n    obj.refCount = obj.refCount - 1;\n    if (obj.refCount === 0) {\n        WEBSOCKET_BY_CACHE_KEY.delete(cacheKey);\n        obj.connect$.complete();\n        obj.socket.close();\n    }\n}\n\n\n\nexport async function replicateWithWebsocketServer<RxDocType, CheckpointType>(\n    options: WebsocketClientOptions<RxDocType>\n): Promise<RxReplicationState<RxDocType, CheckpointType>> {\n    const socketState = await getWebSocket(options.url, options.collection.database);\n    const wsClient = socketState.socket;\n\n    const messages$ = socketState.message$;\n\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return options.collection.database.token + '|' + requestFlag + '|' + count;\n    }\n\n    const streamRequest: WebsocketMessageType = {\n        id: 'stream',\n        collection: options.collection.name,\n        method: 'masterChangeStream$',\n        params: []\n    }\n    wsClient.send(JSON.stringify(streamRequest));\n\n    const replicationState = replicateRxCollection<RxDocType, CheckpointType>({\n        collection: options.collection,\n        replicationIdentifier: 'websocket-' + options.url,\n        pull: {\n            batchSize: options.batchSize,\n            stream$: messages$.pipe(\n                filter(msg => msg.id === 'stream' && msg.collection === options.collection.name),\n                map(msg => msg.result)\n            ),\n            async handler(lastPulledCheckpoint: CheckpointType, batchSize: number) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterChangesSince',\n                    params: [lastPulledCheckpoint, batchSize]\n                }\n                wsClient.send(JSON.stringify(request));\n                const result = await firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n                return result;\n            }\n        },\n        push: {\n            batchSize: options.batchSize,\n            handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterWrite',\n                    params: [docs]\n                }\n                wsClient.send(JSON.stringify(request));\n                return firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n            }\n        }\n    });\n\n    socketState.error$.subscribe(err => replicationState.subjects.error.next(err));\n\n    /**\n     * When the client goes offline and online again,\n     * we have to send a 'RESYNC' signal because the client\n     * might have missed out events while being offline.\n     */\n    socketState.connect$.subscribe(() => replicationState.reSync());\n\n    options.collection.onDestroy.push(() => removeWebSocketRef(options.url, options.collection.database));\n    return replicationState;\n}\n"],"mappings":"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"}