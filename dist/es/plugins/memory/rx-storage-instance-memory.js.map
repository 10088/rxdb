{"version":3,"file":"rx-storage-instance-memory.js","names":["Subject","getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","newRxError","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","getNewestOfDocumentStates","getFromMapOrThrow","now","PROMISE_RESOLVE_VOID","RX_META_LWT_MINIMUM","RxStorageDexieStatics","boundGE","boundGT","attachmentMapKey","compareDocsWithIndex","ensureNotRemoved","getMemoryCollectionKey","putWriteRowToState","removeDocFromState","addIndexesToInternalsState","getMemoryIndexName","createMemoryStorageInstance","storage","params","settings","collectionKey","databaseName","collectionName","internals","collectionStates","get","removed","refCount","documents","Map","attachments","schema","undefined","byIndex","conflictResultionTasks$","set","instance","RxStorageInstanceMemory","options","changes$","closed","primaryPath","primaryKey","bulkWrite","documentWrites","context","ret","success","error","categorized","errors","forEach","err","documentId","stateByIndex","Object","values","bulkInsertDocs","writeRow","docId","document","bulkUpdateDocs","attachmentsMap","attachmentsAdd","attachment","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","eventBulk","events","length","lastState","checkpoint","id","lwt","_meta","next","Promise","resolve","findDocumentsById","docIds","withDeleted","docInDb","_deleted","query","preparedQuery","queryPlan","skip","limit","Infinity","skipPlusLimit","queryMatcher","getQueryMatcher","sortComparator","getSortComparator","queryPlanFields","index","mustManuallyResort","sortFieldsSameAsIndexFields","concat","lowerBound","startKeys","lowerBoundString","upperBound","endKeys","upperBoundString","indexName","docsWithIndex","indexOfLower","indexString","rows","done","currentDoc","doc","push","sort","slice","getChangedDocumentsSince","sinceLwt","sinceId","map","docData","cleanup","minimumDeletedTime","maxDeletionTime","getAttachmentData","data","changeStream","asObservable","remove","close","database","collection","complete","conflictResultionTasks","resolveConflictResultionTask","_taskSolution"],"sources":["../../../../src/plugins/memory/rx-storage-instance-memory.ts"],"sourcesContent":["import {\n    Observable,\n    Subject\n} from 'rxjs';\nimport {\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows, getNewestOfDocumentStates } from '../../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport {\n    getFromMapOrThrow,\n    now,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM\n} from '../../util';\nimport { RxStorageDexieStatics } from '../dexie/rx-storage-dexie';\nimport {\n    boundGE,\n    boundGT\n} from './binary-search-bounds';\nimport {\n    attachmentMapKey,\n    compareDocsWithIndex,\n    ensureNotRemoved,\n    getMemoryCollectionKey,\n    putWriteRowToState,\n    removeDocFromState\n} from './memory-helper';\nimport {\n    addIndexesToInternalsState,\n    getMemoryIndexName\n} from './memory-indexes';\nimport type {\n    MemoryPreparedQuery,\n    MemoryStorageInternals,\n    RxStorageMemory,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageMemorySettings\n} from './memory-types';\n\nexport class RxStorageInstanceMemory<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MemoryStorageInternals<RxDocType>,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageMemory,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MemoryStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageMemoryInstanceCreationOptions>,\n        public readonly settings: RxStorageMemorySettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotRemoved(this);\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            this.internals.documents,\n            documentWrites,\n            context\n        );\n        categorized.errors.forEach(err => {\n            ret.error[err.documentId] = err;\n        });\n\n        /**\n         * Do inserts/updates\n         */\n        const stateByIndex = Object.values(this.internals.byIndex);\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            putWriteRowToState(\n                docId as any,\n                this.internals,\n                stateByIndex,\n                writeRow,\n                undefined\n            );\n            ret.success[docId as any] = writeRow.document;\n        });\n\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            putWriteRowToState(\n                docId as any,\n                this.internals,\n                stateByIndex,\n                writeRow,\n                this.internals.documents.get(docId as any)\n            );\n            ret.success[docId as any] = writeRow.document;\n        });\n\n        /**\n         * Handle attachments\n         */\n        const attachmentsMap = this.internals.attachments;\n        categorized.attachmentsAdd.forEach(attachment => {\n            attachmentsMap.set(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                attachment.attachmentData\n            );\n        });\n        categorized.attachmentsUpdate.forEach(attachment => {\n            attachmentsMap.set(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                attachment.attachmentData\n            );\n        });\n        categorized.attachmentsRemove.forEach(attachment => {\n            attachmentsMap.delete(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId)\n            );\n        });\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n        return Promise.resolve(ret);\n    }\n\n    async findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        const ret: RxDocumentDataById<RxDocType> = {};\n        docIds.forEach(docId => {\n            const docInDb = this.internals.documents.get(docId);\n            if (\n                docInDb &&\n                (\n                    !docInDb._deleted ||\n                    withDeleted\n                )\n            ) {\n                ret[docId] = docInDb;\n            }\n        });\n        return Promise.resolve(ret);\n    }\n\n    async query(preparedQuery: MemoryPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const queryPlan = preparedQuery.queryPlan;\n        const query = preparedQuery.query;\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        const queryMatcher = RxStorageDexieStatics.getQueryMatcher(\n            this.schema,\n            preparedQuery\n        );\n        const sortComparator = RxStorageDexieStatics.getSortComparator(this.schema, preparedQuery);\n\n        const queryPlanFields: string[] = queryPlan.index;\n        const mustManuallyResort = !queryPlan.sortFieldsSameAsIndexFields;\n        const index: string[] | undefined = ['_deleted'].concat(queryPlanFields);\n        let lowerBound: any[] = queryPlan.startKeys;\n        lowerBound = [false].concat(lowerBound);\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            lowerBound\n        );\n\n        let upperBound: any[] = queryPlan.endKeys;\n        upperBound = [false].concat(upperBound);\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            upperBound\n        );\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGE(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let rows: RxDocumentData<RxDocType>[] = [];\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n\n            if (\n                !currentDoc ||\n                currentDoc.indexString > upperBoundString\n            ) {\n                break;\n            }\n\n            if (queryMatcher(currentDoc.doc)) {\n                rows.push(currentDoc.doc);\n            }\n\n            if (\n                (rows.length >= skipPlusLimit && !mustManuallyResort) ||\n                indexOfLower >= docsWithIndex.length\n            ) {\n                done = true;\n            }\n\n            indexOfLower++;\n        }\n\n        if (mustManuallyResort) {\n            rows = rows.sort(sortComparator);\n        }\n\n        // apply skip and limit boundaries.\n        rows = rows.slice(skip, skipPlusLimit);\n\n        return {\n            documents: rows\n        };\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: RxStorageDefaultCheckpoint;\n    }[]> {\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n\n        const index = ['_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            ['_meta.lwt', this.primaryPath as any],\n            [\n                sinceLwt,\n                sinceId\n            ]\n        );\n\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        // TODO use array.slice() so we do not have to iterate here\n        const rows: RxDocumentData<RxDocType>[] = [];\n        while (rows.length < limit && indexOfLower < docsWithIndex.length) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            rows.push(currentDoc.doc);\n            indexOfLower++;\n        }\n\n        return rows.map(docData => ({\n            document: docData,\n            checkpoint: {\n                id: docData[this.primaryPath] as any,\n                lwt: docData._meta.lwt\n            }\n        }));\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const index = ['_deleted', '_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                0,\n                ''\n            ]\n        );\n\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            if (!currentDoc || currentDoc.doc._meta.lwt > maxDeletionTime) {\n                done = true;\n            } else {\n                removeDocFromState(\n                    this.primaryPath as any,\n                    this.schema,\n                    this.internals,\n                    currentDoc.doc\n                );\n                indexOfLower++;\n            }\n        }\n        return true;\n    }\n\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        ensureNotRemoved(this);\n        const data = getFromMapOrThrow(\n            this.internals.attachments,\n            attachmentMapKey(documentId, attachmentId)\n        );\n        return Promise.resolve(data.data);\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotRemoved(this);\n        return this.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        ensureNotRemoved(this);\n\n        this.internals.removed = true;\n        this.storage.collectionStates.delete(\n            getMemoryCollectionKey(this.databaseName, this.collectionName)\n        );\n        await this.close();\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            throw newRxError('SNH', {\n                database: this.databaseName,\n                collection: this.collectionName\n            });\n        }\n        this.closed = true;\n        this.changes$.complete();\n\n        this.internals.refCount = this.internals.refCount - 1;\n        if (this.internals.refCount === 0) {\n            this.storage.collectionStates.delete(\n                getMemoryCollectionKey(this.databaseName, this.collectionName)\n            );\n        }\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.internals.conflictResultionTasks$.asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\nexport async function createMemoryStorageInstance<RxDocType>(\n    storage: RxStorageMemory,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>,\n    settings: RxStorageMemorySettings\n): Promise<RxStorageInstanceMemory<RxDocType>> {\n    const collectionKey = getMemoryCollectionKey(params.databaseName, params.collectionName);\n\n    let internals = storage.collectionStates.get(collectionKey);\n    if (!internals) {\n        internals = {\n            removed: false,\n            refCount: 1,\n            documents: new Map(),\n            attachments: params.schema.attachments ? new Map() : undefined as any,\n            byIndex: {},\n            conflictResultionTasks$: new Subject()\n        };\n        addIndexesToInternalsState(internals, params.schema);\n        storage.collectionStates.set(collectionKey, internals);\n    } else {\n        internals.refCount = internals.refCount + 1;\n    }\n\n    const instance = new RxStorageInstanceMemory(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return instance;\n}\n"],"mappings":"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"}