{"version":3,"file":"rx-storage-instance-memory.js","names":["Subject","getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","newRxError","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","getNewestOfDocumentStates","getFromMapOrThrow","lastOfArray","now","PROMISE_RESOLVE_TRUE","PROMISE_RESOLVE_VOID","RX_META_LWT_MINIMUM","RxStorageDexieStatics","boundGE","boundGT","attachmentMapKey","compareDocsWithIndex","ensureNotRemoved","getMemoryCollectionKey","putWriteRowToState","removeDocFromState","addIndexesToInternalsState","getMemoryIndexName","RxStorageInstanceMemory","storage","databaseName","collectionName","schema","internals","options","settings","closed","changes$","primaryPath","primaryKey","bulkWrite","documentWrites","context","ret","success","error","categorized","documents","errors","stateByIndex","Object","values","byIndex","bulkInsertDocs","forEach","writeRow","docId","document","undefined","bulkUpdateDocs","get","attachmentsMap","attachments","attachmentsAdd","attachment","set","documentId","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","eventBulk","events","length","lastState","checkpoint","id","lwt","_meta","next","Promise","resolve","findDocumentsById","docIds","withDeleted","docInDb","_deleted","query","preparedQuery","queryPlan","skip","limit","Infinity","skipPlusLimit","queryMatcher","getQueryMatcher","sortComparator","getSortComparator","queryPlanFields","index","mustManuallyResort","sortFieldsSameAsIndexFields","concat","lowerBound","startKeys","lowerBoundString","upperBound","endKeys","upperBoundString","indexName","docsWithIndex","indexOfLower","indexString","rows","done","currentDoc","doc","push","sort","slice","getChangedDocumentsSince","sinceLwt","sinceId","lastDoc","cleanup","minimumDeletedTime","maxDeletionTime","getAttachmentData","data","changeStream","asObservable","remove","removed","collectionStates","close","reject","database","collection","complete","refCount","conflictResultionTasks","conflictResultionTasks$","resolveConflictResultionTask","_taskSolution","createMemoryStorageInstance","params","collectionKey","Map","instance"],"sources":["../../../../src/plugins/memory/rx-storage-instance-memory.ts"],"sourcesContent":["import {\n    Observable,\n    Subject\n} from 'rxjs';\nimport {\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport {\n    categorizeBulkWriteRows,\n    getNewestOfDocumentStates\n} from '../../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport {\n    getFromMapOrThrow,\n    lastOfArray,\n    now,\n    PROMISE_RESOLVE_TRUE,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM\n} from '../../util';\nimport { RxStorageDexieStatics } from '../dexie/rx-storage-dexie';\nimport {\n    boundGE,\n    boundGT\n} from './binary-search-bounds';\nimport {\n    attachmentMapKey,\n    compareDocsWithIndex,\n    ensureNotRemoved,\n    getMemoryCollectionKey,\n    putWriteRowToState,\n    removeDocFromState\n} from './memory-helper';\nimport {\n    addIndexesToInternalsState,\n    getMemoryIndexName\n} from './memory-indexes';\nimport type {\n    MemoryPreparedQuery,\n    MemoryStorageInternals,\n    RxStorageMemory,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageMemorySettings\n} from './memory-types';\n\nexport class RxStorageInstanceMemory<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MemoryStorageInternals<RxDocType>,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public closed = false;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n\n    constructor(\n        public readonly storage: RxStorageMemory,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MemoryStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageMemoryInstanceCreationOptions>,\n        public readonly settings: RxStorageMemorySettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotRemoved(this);\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            this.internals.documents,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        /**\n         * Do inserts/updates\n         */\n        const stateByIndex = Object.values(this.internals.byIndex);\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            putWriteRowToState(\n                docId as any,\n                this.internals,\n                stateByIndex,\n                writeRow,\n                undefined\n            );\n            ret.success[docId as any] = writeRow.document;\n        });\n\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            putWriteRowToState(\n                docId as any,\n                this.internals,\n                stateByIndex,\n                writeRow,\n                this.internals.documents.get(docId as any)\n            );\n            ret.success[docId as any] = writeRow.document;\n        });\n\n        /**\n         * Handle attachments\n         */\n        const attachmentsMap = this.internals.attachments;\n        categorized.attachmentsAdd.forEach(attachment => {\n            attachmentsMap.set(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                attachment.attachmentData\n            );\n        });\n        categorized.attachmentsUpdate.forEach(attachment => {\n            attachmentsMap.set(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                attachment.attachmentData\n            );\n        });\n        categorized.attachmentsRemove.forEach(attachment => {\n            attachmentsMap.delete(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId)\n            );\n        });\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n        return Promise.resolve(ret);\n    }\n\n    findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        const ret: RxDocumentDataById<RxDocType> = {};\n        docIds.forEach(docId => {\n            const docInDb = this.internals.documents.get(docId);\n            if (\n                docInDb &&\n                (\n                    !docInDb._deleted ||\n                    withDeleted\n                )\n            ) {\n                ret[docId] = docInDb;\n            }\n        });\n        return Promise.resolve(ret);\n    }\n\n    query(preparedQuery: MemoryPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const queryPlan = preparedQuery.queryPlan;\n        const query = preparedQuery.query;\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        const queryMatcher = RxStorageDexieStatics.getQueryMatcher(\n            this.schema,\n            preparedQuery\n        );\n        const sortComparator = RxStorageDexieStatics.getSortComparator(this.schema, preparedQuery);\n\n        const queryPlanFields: string[] = queryPlan.index;\n        const mustManuallyResort = !queryPlan.sortFieldsSameAsIndexFields;\n        const index: string[] | undefined = ['_deleted'].concat(queryPlanFields);\n        let lowerBound: any[] = queryPlan.startKeys;\n        lowerBound = [false].concat(lowerBound);\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            lowerBound\n        );\n\n        let upperBound: any[] = queryPlan.endKeys;\n        upperBound = [false].concat(upperBound);\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            upperBound\n        );\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGE(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let rows: RxDocumentData<RxDocType>[] = [];\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n\n            if (\n                !currentDoc ||\n                currentDoc.indexString > upperBoundString\n            ) {\n                break;\n            }\n\n            if (queryMatcher(currentDoc.doc)) {\n                rows.push(currentDoc.doc);\n            }\n\n            if (\n                (rows.length >= skipPlusLimit && !mustManuallyResort) ||\n                indexOfLower >= docsWithIndex.length\n            ) {\n                done = true;\n            }\n\n            indexOfLower++;\n        }\n\n        if (mustManuallyResort) {\n            rows = rows.sort(sortComparator);\n        }\n\n        // apply skip and limit boundaries.\n        rows = rows.slice(skip, skipPlusLimit);\n\n        return Promise.resolve({\n            documents: rows\n        });\n    }\n\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n\n        const index = ['_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            ['_meta.lwt', this.primaryPath as any],\n            [\n                sinceLwt,\n                sinceId\n            ]\n        );\n\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        // TODO use array.slice() so we do not have to iterate here\n        const rows: RxDocumentData<RxDocType>[] = [];\n        while (rows.length < limit && indexOfLower < docsWithIndex.length) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            rows.push(currentDoc.doc);\n            indexOfLower++;\n        }\n\n        const lastDoc = lastOfArray(rows);\n        return Promise.resolve({\n            documents: rows,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        });\n    }\n\n    cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const index = ['_deleted', '_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                0,\n                ''\n            ]\n        );\n\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            if (!currentDoc || currentDoc.doc._meta.lwt > maxDeletionTime) {\n                done = true;\n            } else {\n                removeDocFromState(\n                    this.primaryPath as any,\n                    this.schema,\n                    this.internals,\n                    currentDoc.doc\n                );\n                indexOfLower++;\n            }\n        }\n        return PROMISE_RESOLVE_TRUE;\n    }\n\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        ensureNotRemoved(this);\n        const data = getFromMapOrThrow(\n            this.internals.attachments,\n            attachmentMapKey(documentId, attachmentId)\n        );\n        return Promise.resolve(data.data);\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotRemoved(this);\n        return this.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        ensureNotRemoved(this);\n\n        this.internals.removed = true;\n        this.storage.collectionStates.delete(\n            getMemoryCollectionKey(this.databaseName, this.collectionName)\n        );\n        await this.close();\n    }\n\n    close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(newRxError('SNH', {\n                database: this.databaseName,\n                collection: this.collectionName\n            }));\n        }\n        this.closed = true;\n        this.changes$.complete();\n\n        this.internals.refCount = this.internals.refCount - 1;\n        if (this.internals.refCount === 0) {\n            this.storage.collectionStates.delete(\n                getMemoryCollectionKey(this.databaseName, this.collectionName)\n            );\n        }\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.internals.conflictResultionTasks$.asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\nexport function createMemoryStorageInstance<RxDocType>(\n    storage: RxStorageMemory,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>,\n    settings: RxStorageMemorySettings\n): Promise<RxStorageInstanceMemory<RxDocType>> {\n    const collectionKey = getMemoryCollectionKey(params.databaseName, params.collectionName);\n\n    let internals = storage.collectionStates.get(collectionKey);\n    if (!internals) {\n        internals = {\n            removed: false,\n            refCount: 1,\n            documents: new Map(),\n            attachments: params.schema.attachments ? new Map() : undefined as any,\n            byIndex: {},\n            conflictResultionTasks$: new Subject()\n        };\n        addIndexesToInternalsState(internals, params.schema);\n        storage.collectionStates.set(collectionKey, internals);\n    } else {\n        internals.refCount = internals.refCount + 1;\n    }\n\n    const instance = new RxStorageInstanceMemory(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}