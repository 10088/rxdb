{"version":3,"file":"rx-storage-instance-memory.js","names":["Subject","getStartIndexStringFromLowerBound","getStartIndexStringFromUpperBound","newRxError","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","getFromMapOrThrow","now","RX_META_LWT_MINIMUM","RxStorageDexieStatics","boundGE","boundGT","attachmentMapKey","compareDocsWithIndex","ensureNotRemoved","getMemoryCollectionKey","putWriteRowToState","removeDocFromState","addIndexesToInternalsState","getMemoryIndexName","createMemoryStorageInstance","storage","params","settings","collectionKey","databaseName","collectionName","internals","collectionStates","get","removed","refCount","documents","Map","attachments","schema","undefined","byIndex","set","instance","RxStorageInstanceMemory","options","changes$","closed","primaryPath","primaryKey","bulkWrite","documentWrites","ret","success","error","docsInDb","forEach","writeRow","docId","document","docInDb","categorized","errors","err","documentId","bulkInsertDocs","bulkUpdateDocs","attachmentsMap","attachmentsAdd","attachment","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","next","eventBulk","Promise","resolve","findDocumentsById","docIds","withDeleted","_deleted","query","preparedQuery","queryPlan","skip","limit","Infinity","skipPlusLimit","queryMatcher","getQueryMatcher","sortComparator","getSortComparator","queryPlanFields","index","mustManuallyResort","sortFieldsSameAsIndexFields","concat","lowerBound","startKeys","lowerBoundString","upperBound","endKeys","upperBoundString","indexName","docsWithIndex","indexOfLower","indexString","rows","done","currentDoc","doc","push","length","sort","slice","getChangedDocumentsSince","checkpoint","sinceLwt","lwt","sinceId","id","map","docData","_meta","cleanup","minimumDeletedTime","maxDeletionTime","getAttachmentData","data","changeStream","asObservable","remove","close","database","collection","complete"],"sources":["../../../../src/plugins/memory/rx-storage-instance-memory.ts"],"sourcesContent":["import {\n    Observable,\n    Subject\n} from 'rxjs';\nimport {\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport {\n    getFromMapOrThrow,\n    now,\n    RX_META_LWT_MINIMUM\n} from '../../util';\nimport { RxStorageDexieStatics } from '../dexie/rx-storage-dexie';\nimport {\n    boundGE,\n    boundGT\n} from './binary-search-bounds';\nimport {\n    attachmentMapKey,\n    compareDocsWithIndex,\n    ensureNotRemoved,\n    getMemoryCollectionKey,\n    putWriteRowToState,\n    removeDocFromState\n} from './memory-helper';\nimport {\n    addIndexesToInternalsState,\n    getMemoryIndexName\n} from './memory-indexes';\nimport type {\n    MemoryChangesCheckpoint,\n    MemoryPreparedQuery,\n    MemoryStorageInternals,\n    RxStorageMemory,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageMemorySettings\n} from './memory-types';\n\nexport class RxStorageInstanceMemory<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MemoryStorageInternals<RxDocType>,\n    RxStorageMemoryInstanceCreationOptions\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageMemory,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MemoryStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageMemoryInstanceCreationOptions>,\n        public readonly settings: RxStorageMemorySettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotRemoved(this);\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n        documentWrites.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const docInDb = this.internals.documents.get(docId as any);\n            if (docInDb) {\n                docsInDb.set(docId as any, docInDb);\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            docsInDb,\n            documentWrites\n        );\n        categorized.errors.forEach(err => {\n            ret.error[err.documentId] = err;\n        });\n\n        /**\n         * Do inserts/updates\n         */\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            putWriteRowToState(\n                this.primaryPath as any,\n                this.schema,\n                this.internals,\n                writeRow,\n                undefined\n            );\n            ret.success[docId as any] = writeRow.document;\n        });\n\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            putWriteRowToState(\n                this.primaryPath as any,\n                this.schema,\n                this.internals,\n                writeRow,\n                docsInDb.get(docId as any)\n            );\n            ret.success[docId as any] = writeRow.document;\n        });\n\n        /**\n         * Handle attachments\n         */\n        const attachmentsMap = this.internals.attachments;\n        categorized.attachmentsAdd.forEach(attachment => {\n            attachmentsMap.set(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                attachment.attachmentData\n            );\n        });\n        categorized.attachmentsUpdate.forEach(attachment => {\n            attachmentsMap.set(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                attachment.attachmentData\n            );\n        });\n        categorized.attachmentsRemove.forEach(attachment => {\n            attachmentsMap.delete(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId)\n            );\n        });\n\n        this.changes$.next(categorized.eventBulk);\n\n        return Promise.resolve(ret);\n    }\n\n    async findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean\n    ): Promise<{ [documentId: string]: RxDocumentData<RxDocType>; }> {\n        const ret: { [documentId: string]: RxDocumentData<RxDocType>; } = {};\n        docIds.forEach(docId => {\n            const docInDb = this.internals.documents.get(docId);\n            if (\n                docInDb &&\n                (\n                    !docInDb._deleted ||\n                    withDeleted\n                )\n            ) {\n                ret[docId] = docInDb;\n            }\n        });\n        return Promise.resolve(ret);\n    }\n\n    async query(preparedQuery: MemoryPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const queryPlan = preparedQuery.queryPlan;\n        const query = preparedQuery.query;\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        const queryMatcher = RxStorageDexieStatics.getQueryMatcher(\n            this.schema,\n            preparedQuery\n        );\n        const sortComparator = RxStorageDexieStatics.getSortComparator(this.schema, preparedQuery);\n\n        const queryPlanFields: string[] = queryPlan.index;\n\n        const mustManuallyResort = !queryPlan.sortFieldsSameAsIndexFields;\n\n\n        const index: string[] | undefined = ['_deleted'].concat(queryPlanFields);\n\n        let lowerBound: any[] = queryPlan.startKeys;\n        lowerBound = [false].concat(lowerBound);\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            lowerBound\n        );\n\n        let upperBound: any[] = queryPlan.endKeys;\n        upperBound = [false].concat(upperBound);\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            upperBound\n        );\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGE(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let rows: RxDocumentData<RxDocType>[] = [];\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n\n            if (\n                !currentDoc ||\n                currentDoc.indexString > upperBoundString\n            ) {\n                break;\n            }\n\n            if (queryMatcher(currentDoc.doc)) {\n                rows.push(currentDoc.doc);\n            }\n\n            if (\n                (rows.length >= skipPlusLimit && !mustManuallyResort) ||\n                indexOfLower >= docsWithIndex.length\n            ) {\n                done = true;\n            }\n\n            indexOfLower++;\n        }\n\n        if (mustManuallyResort) {\n            rows = rows.sort(sortComparator);\n        }\n\n        // apply skip and limit boundaries.\n        rows = rows.slice(skip, skipPlusLimit);\n\n\n        return {\n            documents: rows\n        };\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: MemoryChangesCheckpoint\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: MemoryChangesCheckpoint;\n    }[]> {\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n\n        const index = ['_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            ['_meta.lwt', this.primaryPath as any],\n            [\n                sinceLwt,\n                sinceId\n            ]\n        );\n\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n\n\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        // TODO use array.slice() so we do not have to iterate here\n        const rows: RxDocumentData<RxDocType>[] = [];\n        while (rows.length < limit && indexOfLower < docsWithIndex.length) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            rows.push(currentDoc.doc);\n            indexOfLower++;\n        }\n\n        return rows.map(docData => ({\n            document: docData,\n            checkpoint: {\n                id: docData[this.primaryPath] as any,\n                lwt: docData._meta.lwt\n            }\n        }));\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const index = ['_deleted', '_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                0,\n                ''\n            ]\n        );\n\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            if (!currentDoc || currentDoc.doc._meta.lwt > maxDeletionTime) {\n                done = true;\n            } else {\n                removeDocFromState(\n                    this.primaryPath as any,\n                    this.schema,\n                    this.internals,\n                    currentDoc.doc\n                );\n                indexOfLower++;\n            }\n        }\n\n        return true;\n    }\n\n\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        ensureNotRemoved(this);\n        const data = getFromMapOrThrow(\n            this.internals.attachments,\n            attachmentMapKey(documentId, attachmentId)\n        );\n        return Promise.resolve(data.data);\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        ensureNotRemoved(this);\n        return this.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        ensureNotRemoved(this);\n\n        this.internals.removed = true;\n        this.storage.collectionStates.delete(\n            getMemoryCollectionKey(this.databaseName, this.collectionName)\n        );\n        await this.close();\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            throw newRxError('SNH', {\n                database: this.databaseName,\n                collection: this.collectionName\n            });\n        }\n        this.closed = true;\n        this.changes$.complete();\n\n        this.internals.refCount = this.internals.refCount - 1;\n        if (this.internals.refCount === 0) {\n            this.storage.collectionStates.delete(\n                getMemoryCollectionKey(this.databaseName, this.collectionName)\n            );\n        }\n    }\n}\n\n\n\nexport async function createMemoryStorageInstance<RxDocType>(\n    storage: RxStorageMemory,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>,\n    settings: RxStorageMemorySettings\n): Promise<RxStorageInstanceMemory<RxDocType>> {\n\n    const collectionKey = getMemoryCollectionKey(params.databaseName, params.collectionName);\n\n\n    let internals = storage.collectionStates.get(collectionKey);\n    if (!internals) {\n        internals = {\n            removed: false,\n            refCount: 1,\n            documents: new Map(),\n            attachments: params.schema.attachments ? new Map() : undefined as any,\n            byIndex: {}\n        };\n        addIndexesToInternalsState(internals, params.schema);\n        storage.collectionStates.set(collectionKey, internals);\n    } else {\n        internals.refCount = internals.refCount + 1;\n    }\n\n    const instance = new RxStorageInstanceMemory(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return instance;\n}\n"],"mappings":"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"}