{"version":3,"sources":["../../src/plugin.ts"],"names":["RxSchema","Crypter","basePrototype","RxDocumentPrototype","RxQueryBase","RxCollectionBase","RxDatabaseBase","overwritable","HOOKS","runPluginHooks","newRxTypeError","PROTOTYPES","prototype","RxDocument","RxQuery","RxCollection","RxDatabase","ADDED_PLUGINS","Set","addRxPlugin","plugin","plugins","has","add","rxdb","init","prototypes","Object","entries","forEach","name","fun","assign","hooks","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SACIA,QADJ,QAEO,aAFP;AAGA,SACIC,OADJ,QAEO,WAFP;AAGA,SACIC,aAAa,IAAIC,mBADrB,QAEO,eAFP;AAGA,SACIC,WADJ,QAEO,YAFP;AAGA,SACIC,gBADJ,QAEO,iBAFP;AAGA,SACIC,cADJ,QAEO,eAFP;AAOA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SACIC,KADJ,EACWC,cADX,QAEO,SAFP;AAGA,SAASC,cAAT,QAA+B,YAA/B;AAEA;AACA;AACA;;AACA,IAAMC,UAAgC,GAAG;AACrCX,EAAAA,QAAQ,EAAEA,QAAQ,CAACY,SADkB;AAErCX,EAAAA,OAAO,EAAEA,OAAO,CAACW,SAFoB;AAGrCC,EAAAA,UAAU,EAAEV,mBAHyB;AAIrCW,EAAAA,OAAO,EAAEV,WAAW,CAACQ,SAJgB;AAKrCG,EAAAA,YAAY,EAAEV,gBAAgB,CAACO,SALM;AAMrCI,EAAAA,UAAU,EAAEV,cAAc,CAACM;AANU,CAAzC;AASA,IAAMK,aAAkC,GAAG,IAAIC,GAAJ,EAA3C;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAAuC;AAC1CX,EAAAA,cAAc,CAAC,gBAAD,EAAmB;AAAEW,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,OAAO,EAAEJ;AAAnB,GAAnB,CAAd,CAD0C,CAG1C;;AACA,MAAIA,aAAa,CAACK,GAAd,CAAkBF,MAAlB,CAAJ,EAA+B;AAC3B;AACH,GAFD,MAEO;AACHH,IAAAA,aAAa,CAACM,GAAd,CAAkBH,MAAlB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACI,MAAI,CAACA,MAAM,CAACI,IAAZ,EAAkB;AACd,UAAMd,cAAc,CAAC,KAAD,EAAQ;AACxBU,MAAAA,MAAM,EAANA;AADwB,KAAR,CAApB;AAGH;;AAED,MAAIA,MAAM,CAACK,IAAX,EAAiB;AACbL,IAAAA,MAAM,CAACK,IAAP;AACH,GAvByC,CAyB1C;;;AACA,MAAIL,MAAM,CAACM,UAAX,EAAuB;AACnBC,IAAAA,MAAM,CACDC,OADL,CACaR,MAAM,CAACM,UADpB,EAEKG,OAFL,CAEa,gBAAiB;AAAA,UAAfC,IAAe;AAAA,UAATC,GAAS;AACtB,aAAQA,GAAD,CAAapB,UAAU,CAACmB,IAAD,CAAvB,CAAP;AACH,KAJL;AAKH,GAhCyC,CAiC1C;;;AACA,MAAIV,MAAM,CAACb,YAAX,EAAyB;AACrBoB,IAAAA,MAAM,CAACK,MAAP,CACIzB,YADJ,EAEIa,MAAM,CAACb,YAFX;AAIH,GAvCyC,CAwC1C;;;AACA,MAAIa,MAAM,CAACa,KAAX,EAAkB;AACdN,IAAAA,MAAM,CACDC,OADL,CACaR,MAAM,CAACa,KADpB,EAEKJ,OAFL,CAEa;AAAA,UAAEC,IAAF;AAAA,UAAQC,GAAR;AAAA,aAAiBvB,KAAK,CAACsB,IAAD,CAAL,CAAYI,IAAZ,CAAiBH,GAAjB,CAAjB;AAAA,KAFb;AAGH;AACJ","sourcesContent":["/**\n * this handles how plugins are added to rxdb\n * basically it changes the internal prototypes\n * by passing them to the plugins-functions\n */\nimport {\n    RxSchema\n} from './rx-schema';\nimport {\n    Crypter\n} from './crypter';\nimport {\n    basePrototype as RxDocumentPrototype\n} from './rx-document';\nimport {\n    RxQueryBase\n} from './rx-query';\nimport {\n    RxCollectionBase\n} from './rx-collection';\nimport {\n    RxDatabaseBase\n} from './rx-database';\nimport type {\n    RxPlugin\n} from './types';\n\nimport { overwritable } from './overwritable';\nimport {\n    HOOKS, runPluginHooks\n} from './hooks';\nimport { newRxTypeError } from './rx-error';\n\n/**\n * prototypes that can be manipulated with a plugin\n */\nconst PROTOTYPES: { [k: string]: any } = {\n    RxSchema: RxSchema.prototype,\n    Crypter: Crypter.prototype,\n    RxDocument: RxDocumentPrototype,\n    RxQuery: RxQueryBase.prototype,\n    RxCollection: RxCollectionBase.prototype,\n    RxDatabase: RxDatabaseBase.prototype\n};\n\nconst ADDED_PLUGINS: Set<RxPlugin | any> = new Set();\n\n/**\n * Add a plugin to the RxDB library.\n * Plugins are added globally and cannot be removed.\n */\nexport function addRxPlugin(plugin: RxPlugin) {\n    runPluginHooks('preAddRxPlugin', { plugin, plugins: ADDED_PLUGINS });\n\n    // do nothing if added before\n    if (ADDED_PLUGINS.has(plugin)) {\n        return;\n    } else {\n        ADDED_PLUGINS.add(plugin);\n    }\n\n    /**\n     * Since version 10.0.0 we decoupled pouchdb from\n     * the rxdb core. Therefore pouchdb plugins must be added\n     * with the addPouchPlugin() method of the pouchdb plugin.\n     */\n    if (!plugin.rxdb) {\n        throw newRxTypeError('PL1', {\n            plugin\n        });\n    }\n\n    if (plugin.init) {\n        plugin.init();\n    }\n\n    // prototype-overwrites\n    if (plugin.prototypes) {\n        Object\n            .entries(plugin.prototypes)\n            .forEach(([name, fun]) => {\n                return (fun as any)(PROTOTYPES[name]);\n            });\n    }\n    // overwritable-overwrites\n    if (plugin.overwritable) {\n        Object.assign(\n            overwritable,\n            plugin.overwritable\n        );\n    }\n    // extend-hooks\n    if (plugin.hooks) {\n        Object\n            .entries(plugin.hooks)\n            .forEach(([name, fun]) => HOOKS[name].push(fun));\n    }\n}\n"],"file":"plugin.js"}