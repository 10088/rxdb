{"version":3,"file":"rx-collection-helper.js","names":["getDefaultRevision","getDefaultRxDocumentMeta","fillPrimaryKey","runAsyncPluginHooks","getAllCollectionDocuments","flatCloneDocWithMeta","removeCollectionStorages","storage","databaseInternalStorage","databaseInstanceToken","databaseName","collectionName","statics","allCollectionMetaDocs","relevantCollectionMetaDocs","filter","metaDoc","data","name","removeStorages","forEach","push","schema","isCollection","connectedStorages","row","alreadyAdded","Set","key","version","has","add","Promise","all","map","createStorageInstance","multiInstance","options","storageInstance","remove","writeRows","doc","writeDoc","_deleted","previous","document","bulkWrite","createRxCollectionStorageInstance","rxDatabase","storageInstanceCreationParams","fillObjectDataBeforeInsert","useJson","fillObjectWithDefaults","primaryPath","jsonSchema","_meta","hasOwnProperty","_attachments","_rev"],"sources":["../../src/rx-collection-helper.ts"],"sourcesContent":["import type {\n    InternalStoreDocType,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from './types';\nimport {\n    getDefaultRevision,\n    getDefaultRxDocumentMeta\n} from './util';\nimport {\n    fillPrimaryKey\n} from './rx-schema-helper';\nimport type { RxSchema } from './rx-schema';\nimport { runAsyncPluginHooks } from './hooks';\nimport { getAllCollectionDocuments } from './rx-database-internal-store';\nimport { flatCloneDocWithMeta } from './rx-storage-helper';\n\n/**\n * fills in the default data.\n * This also clones the data.\n */\nexport function fillObjectDataBeforeInsert<RxDocType>(\n    schema: RxSchema<RxDocType>,\n    data: Partial<RxDocumentData<RxDocType>> | any\n): RxDocumentData<RxDocType> {\n    let useJson = schema.fillObjectWithDefaults(data);\n    useJson = fillPrimaryKey(\n        schema.primaryPath,\n        schema.jsonSchema,\n        useJson\n    );\n    useJson._meta = getDefaultRxDocumentMeta();\n    if (!useJson.hasOwnProperty('_deleted')) {\n        useJson._deleted = false;\n    }\n    if (!useJson.hasOwnProperty('_attachments')) {\n        useJson._attachments = {};\n    }\n    if (!useJson.hasOwnProperty('_rev')) {\n        useJson._rev = getDefaultRevision();\n    }\n    return useJson;\n}\n\n/**\n * Creates the storage instances that are used internally in the collection\n */\nexport async function createRxCollectionStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>(\n    rxDatabase: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstanceCreationParams: RxStorageInstanceCreationParams<RxDocumentType, InstanceCreationOptions>\n): Promise<RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>> {\n    storageInstanceCreationParams.multiInstance = rxDatabase.multiInstance;\n    const storageInstance = await rxDatabase.storage.createStorageInstance<RxDocumentType>(\n        storageInstanceCreationParams\n    );\n    return storageInstance;\n}\n\n/**\n * Removes the main storage of the collection\n * and all connected storages like the ones from the replication meta etc.\n */\nexport async function removeCollectionStorages(\n    storage: RxStorage<any, any>,\n    databaseInternalStorage: RxStorageInstance<InternalStoreDocType<any>, any, any>,\n    databaseInstanceToken: string,\n    databaseName: string,\n    collectionName: string\n) {\n    const allCollectionMetaDocs = await getAllCollectionDocuments(\n        storage.statics,\n        databaseInternalStorage\n    );\n    const relevantCollectionMetaDocs = allCollectionMetaDocs\n        .filter(metaDoc => metaDoc.data.name === collectionName);\n\n    let removeStorages: {\n        collectionName: string;\n        schema: RxJsonSchema<any>;\n        isCollection: boolean;\n    }[] = [];\n    relevantCollectionMetaDocs.forEach(metaDoc => {\n        removeStorages.push({\n            collectionName: metaDoc.data.name,\n            schema: metaDoc.data.schema,\n            isCollection: true\n        });\n        metaDoc.data.connectedStorages.forEach(row => removeStorages.push({\n            collectionName: row.collectionName,\n            isCollection: false,\n            schema: row.schema\n        }));\n    });\n\n    // ensure uniqueness\n    const alreadyAdded = new Set<string>();\n    removeStorages = removeStorages.filter(row => {\n        const key = row.collectionName + '||' + row.schema.version;\n        if (alreadyAdded.has(key)) {\n            return false;\n        } else {\n            alreadyAdded.add(key);\n            return true;\n        }\n    });\n\n    // remove all the storages\n    await Promise.all(\n        removeStorages\n            .map(async (row) => {\n                const storageInstance = await storage.createStorageInstance<any>({\n                    collectionName: row.collectionName,\n                    databaseInstanceToken,\n                    databaseName,\n                    multiInstance: false,\n                    options: {},\n                    schema: row.schema\n                });\n                await storageInstance.remove();\n                if (row.isCollection) {\n                    await runAsyncPluginHooks('postRemoveRxCollection', {\n                        storage,\n                        databaseName: databaseName,\n                        collectionName\n                    });\n                }\n            })\n    );\n\n    // remove the meta documents\n    const writeRows = relevantCollectionMetaDocs.map(doc => {\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n        return {\n            previous: doc,\n            document: writeDoc\n        };\n    });\n    await databaseInternalStorage.bulkWrite(\n        writeRows,\n        'rx-database-remove-collection-all'\n    );\n}\n"],"mappings":"AASA,SACIA,kBADJ,EAEIC,wBAFJ,QAGO,QAHP;AAIA,SACIC,cADJ,QAEO,oBAFP;AAIA,SAASC,mBAAT,QAAoC,SAApC;AACA,SAASC,yBAAT,QAA0C,8BAA1C;AACA,SAASC,oBAAT,QAAqC,qBAArC;AAEA;AACA;AACA;AACA;;AAsCA;AACA;AACA;AACA;AACA,WAAsBC,wBAAtB,YAAsBA,wBAAtB,CACIC,OADJ,EAEIC,uBAFJ,EAGIC,qBAHJ,EAIIC,YAJJ,EAKIC,cALJ;EAAA,IAME;IAAA,uBACsCP,yBAAyB,CACzDG,OAAO,CAACK,OADiD,EAEzDJ,uBAFyD,CAD/D,iBACQK,qBADR;MAKE,IAAMC,0BAA0B,GAAGD,qBAAqB,CACnDE,MAD8B,CACvB,UAAAC,OAAO;QAAA,OAAIA,OAAO,CAACC,IAAR,CAAaC,IAAb,KAAsBP,cAA1B;MAAA,CADgB,CAAnC;MAGA,IAAIQ,cAID,GAAG,EAJN;MAKAL,0BAA0B,CAACM,OAA3B,CAAmC,UAAAJ,OAAO,EAAI;QAC1CG,cAAc,CAACE,IAAf,CAAoB;UAChBV,cAAc,EAAEK,OAAO,CAACC,IAAR,CAAaC,IADb;UAEhBI,MAAM,EAAEN,OAAO,CAACC,IAAR,CAAaK,MAFL;UAGhBC,YAAY,EAAE;QAHE,CAApB;QAKAP,OAAO,CAACC,IAAR,CAAaO,iBAAb,CAA+BJ,OAA/B,CAAuC,UAAAK,GAAG;UAAA,OAAIN,cAAc,CAACE,IAAf,CAAoB;YAC9DV,cAAc,EAAEc,GAAG,CAACd,cAD0C;YAE9DY,YAAY,EAAE,KAFgD;YAG9DD,MAAM,EAAEG,GAAG,CAACH;UAHkD,CAApB,CAAJ;QAAA,CAA1C;MAKH,CAXD,EAbF,CA0BE;;MACA,IAAMI,YAAY,GAAG,IAAIC,GAAJ,EAArB;MACAR,cAAc,GAAGA,cAAc,CAACJ,MAAf,CAAsB,UAAAU,GAAG,EAAI;QAC1C,IAAMG,GAAG,GAAGH,GAAG,CAACd,cAAJ,GAAqB,IAArB,GAA4Bc,GAAG,CAACH,MAAJ,CAAWO,OAAnD;;QACA,IAAIH,YAAY,CAACI,GAAb,CAAiBF,GAAjB,CAAJ,EAA2B;UACvB,OAAO,KAAP;QACH,CAFD,MAEO;UACHF,YAAY,CAACK,GAAb,CAAiBH,GAAjB;UACA,OAAO,IAAP;QACH;MACJ,CARgB,CAAjB,CA5BF,CAsCE;;MAtCF,uBAuCQI,OAAO,CAACC,GAAR,CACFd,cAAc,CACTe,GADL,WACgBT,GADhB;QAAA,IACwB;UAAA,uBACclB,OAAO,CAAC4B,qBAAR,CAAmC;YAC7DxB,cAAc,EAAEc,GAAG,CAACd,cADyC;YAE7DF,qBAAqB,EAArBA,qBAF6D;YAG7DC,YAAY,EAAZA,YAH6D;YAI7D0B,aAAa,EAAE,KAJ8C;YAK7DC,OAAO,EAAE,EALoD;YAM7Df,MAAM,EAAEG,GAAG,CAACH;UANiD,CAAnC,CADd,iBACVgB,eADU;YAAA,uBASVA,eAAe,CAACC,MAAhB,EATU;cAAA;gBAAA,IAUZd,GAAG,CAACF,YAVQ;kBAAA,uBAWNpB,mBAAmB,CAAC,wBAAD,EAA2B;oBAChDI,OAAO,EAAPA,OADgD;oBAEhDG,YAAY,EAAEA,YAFkC;oBAGhDC,cAAc,EAAdA;kBAHgD,CAA3B,CAXb;gBAAA;cAAA;;cAAA;YAAA;UAAA;QAiBnB,CAlBL;UAAA;QAAA;MAAA,EADE,CAvCR;QA6DE;QACA,IAAM6B,SAAS,GAAG1B,0BAA0B,CAACoB,GAA3B,CAA+B,UAAAO,GAAG,EAAI;UACpD,IAAMC,QAAQ,GAAGrC,oBAAoB,CAACoC,GAAD,CAArC;UACAC,QAAQ,CAACC,QAAT,GAAoB,IAApB;UACA,OAAO;YACHC,QAAQ,EAAEH,GADP;YAEHI,QAAQ,EAAEH;UAFP,CAAP;QAIH,CAPiB,CAAlB;QA9DF,uBAsEQlC,uBAAuB,CAACsC,SAAxB,CACFN,SADE,EAEF,mCAFE,CAtER;MAAA;IAAA;EA0ED,CAhFD;IAAA;EAAA;AAAA;;AAlBA;AACA;AACA;AACA,WAAsBO,iCAAtB,YAAsBA,iCAAtB,CACIC,UADJ,EAEIC,6BAFJ;EAAA,IAGkF;IAC9EA,6BAA6B,CAACb,aAA9B,GAA8CY,UAAU,CAACZ,aAAzD;IAD8E,uBAEhDY,UAAU,CAACzC,OAAX,CAAmB4B,qBAAnB,CAC1Bc,6BAD0B,CAFgD;EAMjF,CATD;IAAA;EAAA;AAAA;AA1BA,OAAO,SAASC,0BAAT,CACH5B,MADG,EAEHL,IAFG,EAGsB;EACzB,IAAIkC,OAAO,GAAG7B,MAAM,CAAC8B,sBAAP,CAA8BnC,IAA9B,CAAd;EACAkC,OAAO,GAAGjD,cAAc,CACpBoB,MAAM,CAAC+B,WADa,EAEpB/B,MAAM,CAACgC,UAFa,EAGpBH,OAHoB,CAAxB;EAKAA,OAAO,CAACI,KAAR,GAAgBtD,wBAAwB,EAAxC;;EACA,IAAI,CAACkD,OAAO,CAACK,cAAR,CAAuB,UAAvB,CAAL,EAAyC;IACrCL,OAAO,CAACR,QAAR,GAAmB,KAAnB;EACH;;EACD,IAAI,CAACQ,OAAO,CAACK,cAAR,CAAuB,cAAvB,CAAL,EAA6C;IACzCL,OAAO,CAACM,YAAR,GAAuB,EAAvB;EACH;;EACD,IAAI,CAACN,OAAO,CAACK,cAAR,CAAuB,MAAvB,CAAL,EAAqC;IACjCL,OAAO,CAACO,IAAR,GAAe1D,kBAAkB,EAAjC;EACH;;EACD,OAAOmD,OAAP;AACH"}