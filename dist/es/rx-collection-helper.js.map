{"version":3,"sources":["../../src/rx-collection-helper.ts"],"names":["getDefaultRxDocumentMeta","createRxCollectionStorageInstances","collectionName","rxDatabase","storageInstanceCreationParams","instanceCreationOptions","multiInstance","Promise","all","storage","createStorageInstance","createKeyObjectStorageInstance","databaseName","name","getCollectionLocalInstanceName","options","storageInstance","localDocumentsStore","fillObjectDataBeforeInsert","collection","data","useJson","schema","fillObjectWithDefaults","fillPrimaryKey","_meta"],"mappings":"AAQA,SAASA,wBAAT,QAAyC,QAAzC;AAEA;AACA;AACA;AACA;;AAeA;AACA;AACA;AACA,WAAsBC,kCAAtB,YAAsBA,kCAAtB,CACIC,cADJ,EAEIC,UAFJ,EAGIC,6BAHJ,EAIIC,uBAJJ;AAAA,MAQG;AACCD,IAAAA,6BAA6B,CAACE,aAA9B,GAA8CH,UAAU,CAACG,aAAzD;AADD,2BAKWC,OAAO,CAACC,GAAR,CAAY,CAClBL,UAAU,CAACM,OAAX,CAAmBC,qBAAnB,CACIN,6BADJ,CADkB,EAIlBD,UAAU,CAACM,OAAX,CAAmBE,8BAAnB,CAAkD;AAC9CC,MAAAA,YAAY,EAAET,UAAU,CAACU,IADqB;;AAE9C;AACZ;AACA;AACA;AACA;AACYX,MAAAA,cAAc,EAAEY,8BAA8B,CAACZ,cAAD,CAPA;AAQ9Ca,MAAAA,OAAO,EAAEV,uBARqC;AAS9CC,MAAAA,aAAa,EAAEH,UAAU,CAACG;AAToB,KAAlD,CAJkB,CAAZ,CALX;AAAA,UAGKU,eAHL;AAAA,UAIKC,mBAJL;AAsBC,aAAO;AACHD,QAAAA,eAAe,EAAfA,eADG;AAEHC,QAAAA,mBAAmB,EAAnBA;AAFG,OAAP;AAtBD;AA0BF,GAlCD;AAAA;AAAA;AAAA;AAjBA,OAAO,SAASC,0BAAT,CACHC,UADG,EAEHC,IAFG,EAGA;AACH,MAAIC,OAAO,GAAGF,UAAU,CAACG,MAAX,CAAkBC,sBAAlB,CAAyCH,IAAzC,CAAd;AACAC,EAAAA,OAAO,GAAGF,UAAU,CAACG,MAAX,CAAkBE,cAAlB,CAAiCH,OAAjC,CAAV;AACAA,EAAAA,OAAO,CAACI,KAAR,GAAgBzB,wBAAwB,EAAxC;AACA,SAAOqB,OAAP;AACH;AAED,OAAO,SAASP,8BAAT,CAAwCZ,cAAxC,EAAwE;AAC3E,SAAOA,cAAc,GAAG,QAAxB;AACH","sourcesContent":["import type {\n    RxCollection,\n    RxDatabase,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageKeyObjectInstance\n} from './types';\nimport { RxCollectionBase } from './rx-collection';\nimport { getDefaultRxDocumentMeta } from './util';\n\n/**\n * fills in the default data.\n * This also clones the data.\n */\nexport function fillObjectDataBeforeInsert(\n    collection: RxCollection | RxCollectionBase<any>,\n    data: any\n): any {\n    let useJson = collection.schema.fillObjectWithDefaults(data);\n    useJson = collection.schema.fillPrimaryKey(useJson);\n    useJson._meta = getDefaultRxDocumentMeta();\n    return useJson;\n}\n\nexport function getCollectionLocalInstanceName(collectionName: string): string {\n    return collectionName + '-local';\n}\n\n/**\n * Creates the storage instances that are used internally in the collection\n */\nexport async function createRxCollectionStorageInstances<RxDocumentType, Internals, InstanceCreationOptions>(\n    collectionName: string,\n    rxDatabase: RxDatabase,\n    storageInstanceCreationParams: RxStorageInstanceCreationParams<RxDocumentType, InstanceCreationOptions>,\n    instanceCreationOptions: InstanceCreationOptions\n): Promise<{\n    storageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>,\n    localDocumentsStore: RxStorageKeyObjectInstance<any, InstanceCreationOptions>\n}> {\n    storageInstanceCreationParams.multiInstance = rxDatabase.multiInstance;\n    const [\n        storageInstance,\n        localDocumentsStore\n    ] = await Promise.all([\n        rxDatabase.storage.createStorageInstance<RxDocumentType>(\n            storageInstanceCreationParams\n        ),\n        rxDatabase.storage.createKeyObjectStorageInstance({\n            databaseName: rxDatabase.name,\n            /**\n             * Use a different collection name for the local documents instance\n             * so that the local docs can be kept while deleting the normal instance\n             * after migration.\n             */\n            collectionName: getCollectionLocalInstanceName(collectionName),\n            options: instanceCreationOptions,\n            multiInstance: rxDatabase.multiInstance\n        })\n    ]);\n\n    return {\n        storageInstance,\n        localDocumentsStore\n    };\n}\n"],"file":"rx-collection-helper.js"}