{"version":3,"sources":["../../src/rx-database.ts"],"names":["IdleQueue","BroadcastChannel","pluginMissing","flatClone","PROMISE_RESOLVE_FALSE","randomCouchString","ensureNotFalsy","PROMISE_RESOLVE_VOID","newRxError","createRxSchema","getPrimaryFieldOfPrimaryKey","overwritable","runPluginHooks","runAsyncPluginHooks","Subject","mergeMap","createRxCollection","findLocalDocument","getAllDocuments","getSingleDocument","INTERNAL_STORAGE_NAME","storageChangeEventToRxChangeEvent","writeSingle","getPseudoSchemaForVersion","createRxCollectionStorageInstances","getCollectionLocalInstanceName","ObliviousSet","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","name","storage","instanceCreationOptions","password","multiInstance","eventReduce","options","idleQueue","internalStore","localDocumentsStore","broadcastChannel","token","_subs","destroyed","eventBulks$","observable$","pipe","changeEventBulk","events","emittedEventBulkIds","collections","dangerousRemoveCollectionInfo","allDocs","writeData","map","doc","deletedDoc","_deleted","previous","document","bulkWrite","$emit","has","id","add","next","writeToSocket","removeCollectionDoc","schema","docId","_collectionNamePrimary","writeDoc","lockedRun","addCollections","collectionCreators","findDocumentsById","Object","keys","collectionDocs","internalDocByCollectionName","entries","forEach","key","schemaHashByName","Promise","all","args","useName","internalDoc","useArgs","hash","database","crypt","schemaHash","previousSchemaHash","previousSchema","hookData","bulkPutDocs","ret","collection","collectionName","push","normalized","version","_attachments","defineProperty","get","length","removeCollection","destroyPromise","destroy","then","_removeAllOfCollection","knownVersions","v","databaseName","storageInstances","instance","storageInstance","remove","fn","wrapCall","requestIdlePromise","exportJSON","_decrypted","_collections","importJSON","_exportedJSON","server","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","sub","unsubscribe","col","close","removeRxDatabase","throwIfDatabaseNameUsed","link","_ensureStorageTokenExists","rxDatabase","storageTokenDocumentId","storageTokenDoc","storageToken","_id","value","internal","databaseToken","postMessage","docs","relevantDocs","filter","split","_prepareBroadcastChannel","addEventListener","createRxDatabaseStorageInstances","createStorageInstance","createKeyObjectStorageInstance","prepare","localDocsSub","changeStream","subscribe","eventBulk","ev","createRxDatabase","ignoreDuplicate","validatePassword","colDoc","parseInt","primaryPath","primaryKey","localInstance","isRxDatabase","obj","dbCount"],"mappings":"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","sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\n\nimport type { LeaderElector } from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageKeyObjectInstance,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    EventBulk,\n    RxChangeEventBulk\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    findLocalDocument,\n    getAllDocuments,\n    getSingleDocument,\n    INTERNAL_STORAGE_NAME,\n    storageChangeEventToRxChangeEvent,\n    writeSingle\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { getPseudoSchemaForVersion } from './rx-schema-helper';\nimport {\n    createRxCollectionStorageInstances,\n    getCollectionLocalInstanceName\n} from './rx-collection-helper';\nimport { ObliviousSet } from 'oblivious-set';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\n// stores information about the collections\nexport type InternalStoreDocumentData = {\n    // primary\n    collectionName: string;\n    schema: RxJsonSchema<any>;\n    schemaHash: string;\n    version: number;\n};\n\nexport class RxDatabaseBase<\n    Internals, InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n    constructor(\n        public readonly name: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        public readonly idleQueue: IdleQueue,\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n        /**\n         * Stores the local documents which are attached to this database.\n         */\n        public readonly localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>,\n        /**\n         * Set if multiInstance: true\n         * This broadcast channel is used to send events to other instances like\n         * other browser tabs or nodejs processes.\n         * We transfer everything in EventBulks because sending many small events has been shown\n         * to be performance expensive.\n         */\n        public readonly broadcastChannel?: BroadcastChannel<RxChangeEventBulk>,\n    ) {\n        this.collections = {} as any;\n        DB_COUNT++;\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public readonly token: string = randomCouchString(10);\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections;\n    public readonly eventBulks$: Subject<RxChangeEventBulk> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     */\n    public storageToken?: string;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * removes all internal collection-info\n     * only use this if you have to upgrade from a major rxdb-version\n     * do NEVER use this to change the schema of a collection\n     */\n    async dangerousRemoveCollectionInfo(): Promise<void> {\n        const allDocs = await getAllDocuments(this.storage, this.internalStore);\n        const writeData: BulkWriteRow<InternalStoreDocumentData>[] = allDocs.map(doc => {\n            const deletedDoc = flatClone(doc);\n            deletedDoc._deleted = true;\n            return {\n                previous: doc,\n                document: deletedDoc\n            };\n        });\n        await this.internalStore.bulkWrite(writeData);\n    }\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n\n        // write to socket to inform other instances about the change\n        writeToSocket(this as any, changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const docId = _collectionNamePrimary(name, schema);\n        const doc = await getSingleDocument(\n            this.internalStore,\n            docId\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        await this.lockedRun(\n            () => this.internalStore.bulkWrite([{\n                document: writeDoc,\n                previous: doc\n            }])\n        );\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        // get local management docs in bulk request\n        const collectionDocs = await this.lockedRun(\n            () => this.internalStore.findDocumentsById(\n                Object\n                    .keys(collectionCreators)\n                    .map(name => {\n                        const schema: RxJsonSchema<any> = (collectionCreators as any)[name].schema;\n                        return _collectionNamePrimary(name, schema);\n                    }),\n                false\n            )\n        );\n\n        const internalDocByCollectionName: any = {};\n        Object.entries(collectionDocs).forEach(([key, doc]) => {\n            internalDocByCollectionName[key] = doc;\n        });\n\n        const schemaHashByName: { [key in keyof CreatedCollections]: string } = {} as any;\n        const collections = await Promise.all(\n            Object.entries(collectionCreators)\n                .map(([name, args]) => {\n                    const useName: keyof CreatedCollections = name as any;\n                    const internalDoc = internalDocByCollectionName[_collectionNamePrimary(name, collectionCreators[useName].schema)];\n                    const useArgs: RxCollectionCreator & { name: keyof CreatedCollections; } = flatClone(args) as any;\n                    useArgs.name = useName;\n                    const schema = createRxSchema((args as RxCollectionCreator).schema);\n                    schemaHashByName[useName] = schema.hash;\n                    (useArgs as any).schema = schema;\n                    (useArgs as any).database = this;\n\n                    // TODO check if already exists and schema hash has changed\n\n                    // crypt=true but no password given\n                    if (\n                        schema.crypt &&\n                        !this.password\n                    ) {\n                        throw newRxError('DB7', {\n                            name: name as string\n                        });\n                    }\n\n                    // collection already exists\n                    if ((this.collections as any)[name]) {\n                        throw newRxError('DB3', {\n                            name\n                        });\n                    }\n\n                    // collection already exists but has different schema\n                    if (internalDoc && internalDoc.schemaHash !== schemaHashByName[useName]) {\n                        throw newRxError('DB6', {\n                            name: name,\n                            previousSchemaHash: internalDoc.schemaHash,\n                            schemaHash: schemaHashByName[useName],\n                            previousSchema: internalDoc.schema,\n                            schema: (args as RxCollectionCreator).schema\n                        });\n                    }\n\n                    // run hooks\n                    const hookData: RxCollectionCreator & { name: string; } = flatClone(args) as any;\n                    (hookData as any).database = this;\n                    hookData.name = name;\n                    runPluginHooks('preCreateRxCollection', hookData);\n\n                    return createRxCollection(useArgs, !!internalDoc);\n                })\n        );\n\n        const bulkPutDocs: BulkWriteRow<InternalStoreDocumentData>[] = [];\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        collections.forEach(collection => {\n            const name: keyof CreatedCollections = collection.name as any;\n            ret[name] = collection;\n\n            // add to bulk-docs list\n            const collectionName = _collectionNamePrimary(name as any, collectionCreators[name].schema);\n            if (!internalDocByCollectionName[collectionName]) {\n                bulkPutDocs.push({\n                    document: {\n                        collectionName,\n                        schemaHash: schemaHashByName[name],\n                        schema: collection.schema.normalized,\n                        version: collection.schema.version,\n                        _attachments: {}\n                    }\n                });\n            }\n\n            // set as getter to the database\n            (this.collections as any)[name] = collection;\n            if (!(this as any)[name]) {\n                Object.defineProperty(this, name, {\n                    get: () => (this.collections as any)[name]\n                });\n            }\n        });\n\n        // make a single write call to the storage instance\n        if (bulkPutDocs.length > 0) {\n            await this.lockedRun(\n                () => this.internalStore.bulkWrite(bulkPutDocs)\n            );\n        }\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        let destroyPromise = PROMISE_RESOLVE_VOID;\n        if ((this.collections as any)[collectionName]) {\n            destroyPromise = (this.collections as any)[collectionName].destroy();\n        }\n\n        // remove schemas from internal db\n        return destroyPromise\n            .then(() => _removeAllOfCollection(this as any, collectionName))\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(v => {\n                            return createRxCollectionStorageInstances<any, any, any>(\n                                collectionName,\n                                this as any,\n                                {\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: getPseudoSchemaForVersion<InternalStoreDocumentData>(v, 'collectionName'),\n                                    options: this.instanceCreationOptions,\n                                    multiInstance: this.multiInstance\n                                },\n                                {}\n                            );\n                        })\n                );\n            })\n            // remove normal and local documents\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => this.lockedRun(\n                            () => Promise.all([\n                                instance.storageInstance.remove(),\n                                instance.localDocumentsStore.remove()\n                            ])\n                        )\n                    )\n                );\n            })\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_decrypted: boolean, _collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_decrypted?: false, _collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_decrypted: boolean = false, _collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        runPluginHooks('preDestroyRxDatabase', this);\n        DB_COUNT--;\n        this.destroyed = true;\n\n        this._subs.map(sub => sub.unsubscribe());\n\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // first wait until db is idle\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            .then(() => this.localDocumentsStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data\n     */\n    remove(): Promise<void> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport async function _ensureStorageTokenExists<Collections = any>(rxDatabase: RxDatabase<Collections>): Promise<string> {\n    const storageTokenDocumentId = 'storageToken';\n    const storageTokenDoc = await findLocalDocument<{ value: string }>(rxDatabase.localDocumentsStore, storageTokenDocumentId);\n    if (!storageTokenDoc) {\n        const storageToken = randomCouchString(10);\n        await rxDatabase.localDocumentsStore.bulkWrite([{\n            document: {\n                _id: storageTokenDocumentId,\n                value: storageToken,\n                _attachments: {}\n\n            }\n        }]);\n        return storageToken;\n    } else {\n        return storageTokenDoc.value;\n    }\n}\n\n/**\n * writes the changeEvent to the broadcastChannel\n */\nexport function writeToSocket(\n    rxDatabase: RxDatabase,\n    changeEventBulk: RxChangeEventBulk\n): Promise<boolean> {\n    if (rxDatabase.destroyed) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    if (\n        rxDatabase.multiInstance &&\n        rxDatabase.broadcastChannel &&\n        !changeEventBulk.internal &&\n        rxDatabase.token === changeEventBulk.databaseToken &&\n        rxDatabase.storageToken === changeEventBulk.storageToken\n\n    ) {\n        return rxDatabase.broadcastChannel\n            .postMessage(changeEventBulk)\n            .then(() => true);\n    } else {\n        return PROMISE_RESOLVE_FALSE;\n    }\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<number[]> {\n    const docs = await rxDatabase.lockedRun(\n        () => getAllDocuments(rxDatabase.storage, rxDatabase.internalStore)\n    );\n    const relevantDocs = docs\n        .filter((doc) => {\n            const name = doc.collectionName.split('-')[0];\n            return name === collectionName;\n        });\n    return Promise.all(\n        relevantDocs\n            .map(\n                doc => {\n                    const writeDoc = flatClone(doc);\n                    writeDoc._deleted = true;\n                    return rxDatabase.lockedRun(\n                        () => writeSingle(\n                            rxDatabase.internalStore,\n                            {\n                                previous: doc,\n                                document: writeDoc\n                            }\n                        )\n                    );\n                }\n            )\n    ).then(() => relevantDocs.map((doc: any) => doc.version));\n}\n\nfunction _prepareBroadcastChannel<Collections>(rxDatabase: RxDatabase<Collections>): void {\n    // listen to changes from other instances that come over the BroadcastChannel\n    ensureNotFalsy(rxDatabase.broadcastChannel)\n        .addEventListener('message', (changeEventBulk: RxChangeEventBulk) => {\n            if (\n                // not same storage-state\n                changeEventBulk.storageToken !== rxDatabase.storageToken ||\n                // this db instance was sender\n                changeEventBulk.databaseToken === rxDatabase.token\n            ) {\n                return;\n            }\n            rxDatabase.$emit(changeEventBulk);\n        });\n}\n\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nasync function createRxDatabaseStorageInstances<Internals, InstanceCreationOptions>(\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean\n): Promise<{\n    internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n    localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>\n}> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocumentData>(\n        {\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: getPseudoSchemaForVersion(0, 'collectionName'),\n            options,\n            multiInstance\n        }\n    );\n\n    const localDocumentsStore = await storage.createKeyObjectStorageInstance({\n        databaseName,\n        collectionName: '',\n        options,\n        multiInstance\n    });\n\n    return {\n        internalStore,\n        localDocumentsStore\n    };\n}\n\n/**\n * do the async things for this database\n */\nasync function prepare<Internals, InstanceCreationOptions, Collections>(\n    rxDatabase: RxDatabaseBase<Internals, InstanceCreationOptions, Collections>\n): Promise<void> {\n    rxDatabase.storageToken = await _ensureStorageTokenExists<Collections>(rxDatabase as any);\n    const localDocsSub = rxDatabase.localDocumentsStore.changeStream()\n        .subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk = {\n                id: eventBulk.id,\n                internal: false,\n                storageToken: ensureNotFalsy(rxDatabase.storageToken),\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    true,\n                    ev\n                )),\n                databaseToken: rxDatabase.token\n            };\n            rxDatabase.$emit(changeEventBulk);\n        });\n    rxDatabase._subs.push(localDocsSub);\n    if (rxDatabase.multiInstance) {\n        _prepareBroadcastChannel<Collections>(rxDatabase as any);\n    }\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {}\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options\n    });\n\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    let broadcastChannel: BroadcastChannel | undefined;\n    if (multiInstance) {\n        broadcastChannel = new BroadcastChannel(\n            'RxDB:' +\n            name + ':' +\n            'socket'\n        );\n    }\n\n    const idleQueue = new IdleQueue();\n\n    return createRxDatabaseStorageInstances<\n        Internals,\n        InstanceCreationOptions\n    >(\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance\n    ).then(storageInstances => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            idleQueue,\n            storageInstances.internalStore,\n            storageInstances.localDocumentsStore,\n            broadcastChannel\n        ) as any;\n        return prepare(rxDatabase)\n            .then(() => runAsyncPluginHooks('createRxDatabase', rxDatabase))\n            .then(() => rxDatabase);\n    });\n}\n\n/**\n * removes the database and all its known data\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<any> {\n    const idleQueue = new IdleQueue();\n\n    const storageInstance = await createRxDatabaseStorageInstances(\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const docs = await getAllDocuments(storage, storageInstance.internalStore);\n    await Promise.all(\n        docs\n            .map(async (colDoc) => {\n                const id = colDoc.collectionName;\n                const schema = colDoc.schema;\n                const split = id.split('-');\n                const collectionName = split[0];\n                const version = parseInt(split[1], 10);\n                const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n                const [instance, localInstance] = await Promise.all([\n                    storage.createStorageInstance<InternalStoreDocumentData>(\n                        {\n                            databaseName,\n                            collectionName,\n                            schema: getPseudoSchemaForVersion(version, primaryPath as any),\n                            options: {},\n                            multiInstance: false\n                        }\n                    ),\n                    storage.createKeyObjectStorageInstance({\n                        databaseName,\n                        collectionName: getCollectionLocalInstanceName(collectionName),\n                        options: {},\n                        multiInstance: false\n                    })\n                ]);\n                await Promise.all([instance.remove(), localInstance.remove()]);\n            })\n    );\n\n    return Promise.all([\n        storageInstance.internalStore.remove(),\n        storageInstance.localDocumentsStore.remove()\n    ]);\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n"],"file":"rx-database.js"}