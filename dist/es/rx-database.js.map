{"version":3,"file":"rx-database.js","names":["IdleQueue","BroadcastChannel","pluginMissing","flatClone","PROMISE_RESOLVE_FALSE","randomCouchString","ensureNotFalsy","PROMISE_RESOLVE_VOID","getDefaultRevision","createRevision","now","newRxError","createRxSchema","overwritable","runPluginHooks","runAsyncPluginHooks","Subject","mergeMap","createRxCollection","getSingleDocument","getWrappedStorageInstance","INTERNAL_STORAGE_NAME","createRxCollectionStorageInstance","ObliviousSet","ensureStorageTokenExists","getAllCollectionDocuments","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","INTERNAL_STORE_SCHEMA","removeRxDatabase","databaseName","storage","createRxDatabaseStorageInstance","dbInternalsStorageInstance","collectionDocs","removedCollectionNames","Promise","all","map","colDoc","schema","data","collectionName","name","push","createStorageInstance","options","multiInstance","storageInstance","remove","prepare","rxDatabase","_prepareBroadcastChannel","_removeAllOfCollection","internalStore","docs","relevantDocs","filter","writeRows","doc","writeDoc","_deleted","_rev","_meta","lwt","previous","document","bulkWrite","then","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","instanceCreationOptions","password","eventReduce","idleQueue","broadcastChannel","cleanupPolicy","token","_subs","destroyed","collections","eventBulks$","observable$","pipe","changeEventBulk","events","storageToken","emittedEventBulkIds","asRxDatabase","$emit","has","id","add","next","writeToSocket","removeCollectionDoc","_collectionNamePrimary","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Object","entries","forEach","args","rxJsonSchema","crypt","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","_attachments","useArgs","assign","database","hookData","putDocsResult","error","_id","docInDb","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","defineProperty","get","removeCollection","destroyPromise","destroy","knownVersions","knownVersionDoc","storageInstances","instance","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","importJSON","_exportedJSON","server","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","complete","sub","unsubscribe","col","close","throwIfDatabaseNameUsed","link","statics","doesBroadcastChangestream","internal","databaseToken","postMessage","addEventListener","databaseStorageToken","createRxDatabase","ignoreDuplicate","localDocuments","validatePassword","creator","isRxDatabase","obj","dbCount"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\n\nimport type { LeaderElector } from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID,\n    getDefaultRevision,\n    createRevision,\n    now\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema, RxSchema\n} from './rx-schema';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport {\n    createRxCollectionStorageInstance\n} from './rx-collection-helper';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA\n} from './rx-database-internal-store';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals, InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n    constructor(\n        public readonly name: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        public readonly idleQueue: IdleQueue,\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        /**\n         * Set if multiInstance: true\n         * This broadcast channel is used to send events to other instances like\n         * other browser tabs or nodejs processes.\n         * We transfer everything in EventBulks because sending many small events has been shown\n         * to be performance expensive.\n         */\n        public readonly broadcastChannel?: BroadcastChannel<RxChangeEventBulk<any>>,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             */\n            this.storageToken = ensureStorageTokenExists(this.asRxDatabase);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public readonly token: string = randomCouchString(10);\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     * \n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n\n        // write to socket to inform other instances about the change\n        writeToSocket(this as any, changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        writeDoc._rev = createRevision(writeDoc, doc);\n        writeDoc._meta = { lwt: now() };\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }]);\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema);\n            schemas[collectionName] = schema;\n\n            // crypt=true but no password given\n            if (\n                schema.crypt &&\n                !this.password\n            ) {\n                throw newRxError('DB7', {\n                    name: name as string\n                });\n            }\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version,\n                },\n                _deleted: false,\n                _meta: {\n                    lwt: now()\n                },\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            collectionDocData._rev = createRevision(collectionDocData);\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this,\n\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(bulkPutDocs);\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    database: this.name,\n                    collection: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        let destroyPromise = PROMISE_RESOLVE_VOID;\n        if ((this.collections as any)[collectionName]) {\n            destroyPromise = (this.collections as any)[collectionName].destroy();\n        }\n\n        // remove schemas from internal db\n        return destroyPromise\n            .then(() => _removeAllOfCollection(this as any, collectionName))\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(knownVersionDoc => {\n                            return createRxCollectionStorageInstance(\n                                this.asRxDatabase,\n                                {\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: knownVersionDoc.data.schema,\n                                    options: this.instanceCreationOptions,\n                                    multiInstance: this.multiInstance\n                                }\n                            );\n                        })\n                );\n            })\n            // remove the storage instance\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => instance.remove()\n                    )\n                );\n            })\n            .then(() => runAsyncPluginHooks('postRemoveRxCollection', {\n                storage: this.storage,\n                databaseName: this.name,\n                collectionName\n            }))\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * writes the changeEvent to the broadcastChannel\n */\nexport function writeToSocket(\n    rxDatabase: RxDatabase,\n    changeEventBulk: RxChangeEventBulk<any>\n): Promise<boolean> {\n    if (rxDatabase.destroyed) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    return rxDatabase.storageToken\n        .then(storageToken => {\n            if (\n                !rxDatabase.storage.statics.doesBroadcastChangestream() &&\n                rxDatabase.multiInstance &&\n                rxDatabase.broadcastChannel &&\n                !changeEventBulk.internal &&\n                rxDatabase.token === changeEventBulk.databaseToken &&\n                storageToken === changeEventBulk.storageToken\n\n            ) {\n                return rxDatabase.broadcastChannel\n                    .postMessage(changeEventBulk)\n                    .then(() => true);\n            } else {\n                return PROMISE_RESOLVE_FALSE;\n            }\n        });\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const docs = await getAllCollectionDocuments(rxDatabase.internalStore, rxDatabase.storage);\n    const relevantDocs = docs\n        .filter((colDoc) => colDoc.data.name === collectionName);\n    const writeRows = relevantDocs.map(doc => {\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        writeDoc._rev = createRevision(writeDoc, doc);\n        writeDoc._meta = { lwt: now() };\n        return {\n            previous: doc,\n            document: writeDoc\n        };\n    });\n    return rxDatabase.internalStore\n        .bulkWrite(writeRows)\n        .then(() => relevantDocs);\n}\n\nfunction _prepareBroadcastChannel<Collections>(rxDatabase: RxDatabase<Collections>): void {\n    // listen to changes from other instances that come over the BroadcastChannel\n    ensureNotFalsy(rxDatabase.broadcastChannel)\n        .addEventListener('message', async (changeEventBulk: RxChangeEventBulk<any>) => {\n            const databaseStorageToken = await rxDatabase.storageToken;\n            if (\n                // not same storage-state\n                changeEventBulk.storageToken !== databaseStorageToken ||\n                // this db instance was sender\n                changeEventBulk.databaseToken === rxDatabase.token\n            ) {\n                return;\n            }\n            rxDatabase.$emit(changeEventBulk);\n        });\n}\n\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nasync function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance\n        }\n    );\n    return internalStore;\n}\n\n/**\n * do the async things for this database\n */\nasync function prepare<Internals, InstanceCreationOptions, Collections>(\n    rxDatabase: RxDatabaseBase<Internals, InstanceCreationOptions, Collections>\n): Promise<void> {\n    if (rxDatabase.multiInstance) {\n        _prepareBroadcastChannel<Collections>(rxDatabase as any);\n    }\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        localDocuments = false\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    let broadcastChannel: BroadcastChannel | undefined;\n    if (multiInstance) {\n        broadcastChannel = new BroadcastChannel(\n            'RxDB:' +\n            name + ':' +\n            'socket'\n        );\n    }\n\n    const idleQueue = new IdleQueue();\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance\n    ).then(storageInstance => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            idleQueue,\n            storageInstance,\n            broadcastChannel,\n            cleanupPolicy\n        ) as any;\n        return prepare(rxDatabase)\n            .then(() => runAsyncPluginHooks('createRxDatabase', {\n                database: rxDatabase,\n                creator: {\n                    storage,\n                    instanceCreationOptions,\n                    name,\n                    password,\n                    multiInstance,\n                    eventReduce,\n                    ignoreDuplicate,\n                    options,\n                    localDocuments\n                }\n            }))\n            .then(() => rxDatabase);\n    });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n * \n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<string[]> {\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        dbInternalsStorageInstance,\n        storage\n    );\n\n    const removedCollectionNames: string[] = [];\n    await Promise.all(\n        collectionDocs\n            .map(async (colDoc) => {\n                const schema = colDoc.data.schema;\n                const collectionName = colDoc.data.name;\n                removedCollectionNames.push(collectionName);\n                const storageInstance = await storage.createStorageInstance<any>(\n                    {\n                        databaseName,\n                        collectionName,\n                        schema,\n                        options: {},\n                        multiInstance: false\n                    }\n                );\n                await storageInstance.remove();\n            })\n    );\n\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n"],"mappings":"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"}