{"version":3,"file":"rx-database.js","names":["IdleQueue","pluginMissing","flatClone","PROMISE_RESOLVE_FALSE","randomCouchString","ensureNotFalsy","getDefaultRevision","getDefaultRxDocumentMeta","defaultHashFunction","newRxError","createRxSchema","runPluginHooks","runAsyncPluginHooks","Subject","mergeMap","createRxCollection","flatCloneDocWithMeta","getSingleDocument","getWrappedStorageInstance","INTERNAL_STORAGE_NAME","ObliviousSet","ensureStorageTokenDocumentExists","getAllCollectionDocuments","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","INTERNAL_STORE_SCHEMA","_collectionNamePrimary","removeCollectionStorages","ensureNoStartupErrors","rxDatabase","storageToken","startupErrors","isRxDatabaseFirstTimeInstantiated","database","storageTokenDocument","tokenDoc","data","instanceToken","token","removeRxDatabase","databaseName","storage","databaseInstanceToken","createRxDatabaseStorageInstance","dbInternalsStorageInstance","statics","collectionDocs","collectionNames","Set","forEach","doc","add","name","removedCollectionNames","Array","from","Promise","all","map","collectionName","remove","options","multiInstance","password","createStorageInstance","schema","USED_DATABASE_NAMES","DB_COUNT","RxDatabaseBase","instanceCreationOptions","eventReduce","internalStore","hashFunction","cleanupPolicy","idleQueue","_subs","onDestroy","destroyed","collections","eventBulks$","observable$","pipe","changeEventBulk","events","emittedEventBulkIds","asRxDatabase","err","push","then","$emit","has","id","next","removeCollectionDoc","writeDoc","_deleted","bulkWrite","document","previous","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Object","entries","args","rxJsonSchema","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","connectedStorages","_meta","_rev","_attachments","useArgs","assign","hookData","putDocsResult","error","_id","docInDb","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","defineProperty","get","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","importJSON","_exportedJSON","serverCouchDB","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","destroy","complete","sub","unsubscribe","col","close","throwIfDatabaseNameUsed","link","createRxDatabase","ignoreDuplicate","localDocuments","storageInstance","creator","isRxDatabase","obj","dbCount"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector\n} from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    CouchDBServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    CouchDBServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    InternalStoreCollectionDocType,\n    RxTypeError,\n    RxError,\n    HashFunction,\n    MaybePromise\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    defaultHashFunction\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    RxSchema\n} from './rx-schema';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    flatCloneDocWithMeta,\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenDocumentExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA,\n    _collectionNamePrimary\n} from './rx-database-internal-store';\nimport { removeCollectionStorages } from './rx-collection-helper';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals,\n    InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n\n    public readonly idleQueue: IdleQueue = new IdleQueue();\n\n    constructor(\n        public readonly name: string,\n        /**\n         * Uniquely identifies the instance\n         * of this RxDatabase.\n         */\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly hashFunction: HashFunction,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         * \n         * TODO this is ugly, we should use a different way in the dev-mode\n         * so that all non-dev-mode code can be cleaner.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             * \n             * Writing the token takes about 20 milliseconds\n             * even on a fast adapter, so this is worth it.\n             */\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase)\n                .catch(err => this.startupErrors.push(err) as any);\n            this.storageToken = this.storageTokenDocument\n                .then(doc => doc.data.token)\n                .catch(err => this.startupErrors.push(err) as any);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public _subs: Subscription[] = [];\n\n    /**\n     * Beceause having unhandled exceptions would fail,\n     * we have to store the async errors of the constructor here\n     * so we can throw them later.\n     */\n    public startupErrors: (RxError | RxTypeError)[] = [];\n\n    /**\n     * When the database is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     * \n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n    /**\n     * Stores the whole state of the internal storage token document.\n     * We need this in some plugins.\n     */\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * TODO instead of having this here, we should add a test to ensure each RxStorage\n     * behaves equal and does never emit duplicate eventBulks.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }], 'rx-database-remove-collection');\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema);\n            schemas[collectionName] = schema;\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version,\n                    connectedStorages: []\n                },\n                _deleted: false,\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this,\n\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(\n            bulkPutDocs,\n            'rx-database-add-collection'\n        );\n\n        await ensureNoStartupErrors(this);\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    database: this.name,\n                    collection: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    serverCouchDB(_options?: CouchDBServerOptions): Promise<CouchDBServerResponse> {\n        throw pluginMissing('server-couchdb');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections as any)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean,\n    password?: string\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance,\n            password\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        localDocuments = false,\n        hashFunction = defaultHashFunction\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    const databaseInstanceToken = randomCouchString(10);\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        databaseInstanceToken,\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance,\n        password\n    )\n        /**\n         * Creating the internal store might fail\n         * if some RxStorage wrapper is used that does some checks\n         * and then throw.\n         * In that case we have to properly clean up the database.\n         */\n        .catch(err => {\n            USED_DATABASE_NAMES.delete(name);\n            throw err;\n        })\n        .then(storageInstance => {\n            const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n                name,\n                databaseInstanceToken,\n                storage,\n                instanceCreationOptions,\n                password,\n                multiInstance,\n                eventReduce,\n                options,\n                storageInstance,\n                hashFunction,\n                cleanupPolicy\n            ) as any;\n\n            return runAsyncPluginHooks('createRxDatabase', {\n                database: rxDatabase,\n                creator: {\n                    storage,\n                    instanceCreationOptions,\n                    name,\n                    password,\n                    multiInstance,\n                    eventReduce,\n                    ignoreDuplicate,\n                    options,\n                    localDocuments\n                }\n            }).then(() => rxDatabase);\n        });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n * \n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<string[]> {\n    const databaseInstanceToken = randomCouchString(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        storage.statics,\n        dbInternalsStorageInstance\n    );\n\n    const collectionNames = new Set<string>();\n    collectionDocs.forEach(doc => collectionNames.add(doc.data.name));\n    const removedCollectionNames: string[] = Array.from(collectionNames);\n\n    await Promise.all(\n        removedCollectionNames.map(collectionName => removeCollectionStorages(\n            storage,\n            dbInternalsStorageInstance,\n            databaseInstanceToken,\n            databaseName,\n            collectionName\n        ))\n    );\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n\n\n/**\n * Returns true if the given RxDatabase was the first\n * instance that was created on the storage with this name.\n * \n * Can be used for some optimizations because on the first instantiation,\n * we can assume that no data was written before.\n */\nexport async function isRxDatabaseFirstTimeInstantiated(\n    database: RxDatabase\n): Promise<boolean> {\n    const tokenDoc = await database.storageTokenDocument;\n    return tokenDoc.data.instanceToken === database.token;\n}\n\n\n/**\n * For better performance some tasks run async\n * and are awaited later.\n * But we still have to ensure that there have been no errors\n * on database creation.\n */\nexport async function ensureNoStartupErrors(\n    rxDatabase: RxDatabaseBase<any, any, any>\n) {\n    await rxDatabase.storageToken;\n    if (rxDatabase.startupErrors[0]) {\n        throw rxDatabase.startupErrors[0];\n    }\n}\n"],"mappings":"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"}