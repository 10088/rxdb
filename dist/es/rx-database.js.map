{"version":3,"sources":["../../src/rx-database.ts"],"names":["IdleQueue","BroadcastChannel","pluginMissing","flatClone","PROMISE_RESOLVE_FALSE","randomCouchString","ensureNotFalsy","PROMISE_RESOLVE_VOID","getDefaultRxDocumentMeta","newRxError","createRxSchema","overwritable","runPluginHooks","runAsyncPluginHooks","Subject","mergeMap","createRxCollection","getSingleDocument","INTERNAL_STORAGE_NAME","createRxCollectionStorageInstance","ObliviousSet","ensureStorageTokenExists","getAllCollectionDocuments","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","INTERNAL_STORE_SCHEMA","removeRxDatabase","databaseName","storage","createRxDatabaseStorageInstance","storageInstance","collectionDocs","Promise","all","map","colDoc","key","schema","data","split","collectionName","createStorageInstance","options","multiInstance","remove","prepare","rxDatabase","_prepareBroadcastChannel","_removeAllOfCollection","lockedRun","internalStore","docs","relevantDocs","filter","doc","name","writeRows","writeDoc","_deleted","previous","document","bulkWrite","then","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","instanceCreationOptions","password","eventReduce","idleQueue","broadcastChannel","token","_subs","destroyed","eventBulks$","observable$","pipe","changeEventBulk","events","storageToken","emittedEventBulkIds","collections","asRxDatabase","$emit","has","id","add","next","writeToSocket","removeCollectionDoc","_collectionNamePrimary","addCollections","collectionCreators","findDocumentsById","Object","keys","internalDocByCollectionName","entries","forEach","_id","schemaHashByName","args","useName","internalDoc","useArgs","hash","database","crypt","schemaHash","previousSchemaHash","previousSchema","hookData","bulkPutDocs","ret","collection","push","context","normalized","version","_meta","_attachments","defineProperty","get","length","removeCollection","destroyPromise","destroy","knownVersions","knownVersionDoc","storageInstances","instance","fn","wrapCall","requestIdlePromise","exportJSON","_collections","importJSON","_exportedJSON","server","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","sub","unsubscribe","col","close","throwIfDatabaseNameUsed","link","statics","doesBroadcastChangestream","internal","databaseToken","postMessage","addEventListener","databaseStorageToken","createRxDatabase","ignoreDuplicate","localDocuments","validatePassword","creator","isRxDatabase","obj","dbCount"],"mappings":"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","sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\n\nimport type { LeaderElector } from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID,\n    getDefaultRxDocumentMeta\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema\n} from './rx-schema';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    getSingleDocument,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport {\n    createRxCollectionStorageInstance\n} from './rx-collection-helper';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA\n} from './rx-database-internal-store';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals, InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n    constructor(\n        public readonly name: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        public readonly idleQueue: IdleQueue,\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        /**\n         * Set if multiInstance: true\n         * This broadcast channel is used to send events to other instances like\n         * other browser tabs or nodejs processes.\n         * We transfer everything in EventBulks because sending many small events has been shown\n         * to be performance expensive.\n         */\n        public readonly broadcastChannel?: BroadcastChannel<RxChangeEventBulk<any>>,\n    ) {\n        this.collections = {} as any;\n        DB_COUNT++;\n\n        if (this.name !== 'pseudoInstance') {\n            this.storageToken = ensureStorageTokenExists(this.asRxDatabase);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public readonly token: string = randomCouchString(10);\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     * \n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n\n        // write to socket to inform other instances about the change\n        writeToSocket(this as any, changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        await this.lockedRun(\n            () => this.internalStore.bulkWrite([{\n                document: writeDoc,\n                previous: doc\n            }])\n        );\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        // get local management docs in bulk request\n        const collectionDocs = await this.lockedRun(\n            () => this.internalStore.findDocumentsById(\n                Object\n                    .keys(collectionCreators)\n                    .map(name => {\n                        const schema: RxJsonSchema<any> = (collectionCreators as any)[name].schema;\n                        return getPrimaryKeyOfInternalDocument(\n                            _collectionNamePrimary(name, schema),\n                            INTERNAL_CONTEXT_COLLECTION\n                        )\n                    }),\n                false\n            )\n        );\n\n        const internalDocByCollectionName: any = {};\n        Object.entries(collectionDocs).forEach(([_id, doc]) => {\n            internalDocByCollectionName[doc.key] = doc;\n        });\n\n        const schemaHashByName: { [key in keyof CreatedCollections]: string } = {} as any;\n        const collections = await Promise.all(\n            Object.entries(collectionCreators)\n                .map(([name, args]) => {\n                    const useName: keyof CreatedCollections = name as any;\n                    const internalDoc: InternalStoreCollectionDocType = internalDocByCollectionName[_collectionNamePrimary(name, collectionCreators[useName].schema)];\n                    const useArgs: RxCollectionCreator & { name: keyof CreatedCollections; } = flatClone(args) as any;\n                    useArgs.name = useName;\n                    const schema = createRxSchema((args as RxCollectionCreator).schema);\n                    schemaHashByName[useName] = schema.hash;\n\n                    /**\n                     * TODO\n                     * do not transfrom RxCollectionCreator\n                     * parameters here.\n                     * createRxCollection() must accept the plain data of\n                     * RxCollectionCreator\n                     */\n                    (useArgs as any).schema = schema;\n                    (useArgs as any).database = this;\n\n                    // crypt=true but no password given\n                    if (\n                        schema.crypt &&\n                        !this.password\n                    ) {\n                        throw newRxError('DB7', {\n                            name: name as string\n                        });\n                    }\n\n                    // collection already exists\n                    if ((this.collections as any)[name]) {\n                        throw newRxError('DB3', {\n                            name\n                        });\n                    }\n\n                    // collection already exists but has different schema\n                    if (internalDoc && internalDoc.data.schemaHash !== schemaHashByName[useName]) {\n                        throw newRxError('DB6', {\n                            name: name,\n                            previousSchemaHash: internalDoc.data.schemaHash,\n                            schemaHash: schemaHashByName[useName],\n                            previousSchema: internalDoc.data.schema,\n                            schema: (args as RxCollectionCreator).schema\n                        });\n                    }\n\n                    // run hooks\n                    const hookData: RxCollectionCreator & { name: string; } = flatClone(args) as any;\n                    (hookData as any).database = this;\n                    hookData.name = name;\n                    runPluginHooks('preCreateRxCollection', hookData);\n\n                    return createRxCollection(useArgs);\n                })\n        );\n\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        collections.forEach(collection => {\n            const name: keyof CreatedCollections = collection.name as any;\n            ret[name] = collection;\n\n            // add to bulk-docs list\n            const collectionName = _collectionNamePrimary(name as any, collectionCreators[name].schema);\n            if (!internalDocByCollectionName[collectionName]) {\n                bulkPutDocs.push({\n                    document: {\n                        id: getPrimaryKeyOfInternalDocument(\n                            collectionName,\n                            INTERNAL_CONTEXT_COLLECTION\n                        ),\n                        key: collectionName,\n                        context: INTERNAL_CONTEXT_COLLECTION,\n                        data: {\n                            schemaHash: schemaHashByName[name],\n                            schema: collection.schema.normalized,\n                            version: collection.schema.version,\n                        },\n                        _deleted: false,\n                        _meta: getDefaultRxDocumentMeta(),\n                        _attachments: {}\n                    }\n                });\n            }\n\n            // set as getter to the database\n            (this.collections as any)[name] = collection;\n            if (!(this as any)[name]) {\n                Object.defineProperty(this, name, {\n                    get: () => (this.collections as any)[name]\n                });\n            }\n        });\n\n        // make a single write call to the storage instance\n        if (bulkPutDocs.length > 0) {\n            await this.lockedRun(\n                () => this.internalStore.bulkWrite(bulkPutDocs)\n            );\n        }\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        let destroyPromise = PROMISE_RESOLVE_VOID;\n        if ((this.collections as any)[collectionName]) {\n            destroyPromise = (this.collections as any)[collectionName].destroy();\n        }\n\n        // remove schemas from internal db\n        return destroyPromise\n            .then(() => _removeAllOfCollection(this as any, collectionName))\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(knownVersionDoc => {\n                            return createRxCollectionStorageInstance(\n                                this.asRxDatabase,\n                                {\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: knownVersionDoc.data.schema,\n                                    options: this.instanceCreationOptions,\n                                    multiInstance: this.multiInstance\n                                }\n                            );\n                        })\n                );\n            })\n            // remove the storage instance\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => instance.remove()\n                    )\n                );\n            })\n            .then(() => runAsyncPluginHooks('postRemoveRxCollection', {\n                storage: this.storage,\n                databaseName: this.name,\n                collectionName\n            }))\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        DB_COUNT--;\n\n        this._subs.map(sub => sub.unsubscribe());\n\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // first wait until db is idle\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data\n     */\n    remove(): Promise<void> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * writes the changeEvent to the broadcastChannel\n */\nexport function writeToSocket(\n    rxDatabase: RxDatabase,\n    changeEventBulk: RxChangeEventBulk<any>\n): Promise<boolean> {\n    if (rxDatabase.destroyed) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    return rxDatabase.storageToken\n        .then(storageToken => {\n            if (\n                !rxDatabase.storage.statics.doesBroadcastChangestream() &&\n                rxDatabase.multiInstance &&\n                rxDatabase.broadcastChannel &&\n                !changeEventBulk.internal &&\n                rxDatabase.token === changeEventBulk.databaseToken &&\n                storageToken === changeEventBulk.storageToken\n\n            ) {\n                return rxDatabase.broadcastChannel\n                    .postMessage(changeEventBulk)\n                    .then(() => true);\n            } else {\n                return PROMISE_RESOLVE_FALSE;\n            }\n        });\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const docs = await rxDatabase.lockedRun(\n        () => getAllCollectionDocuments(rxDatabase.internalStore, rxDatabase.storage)\n    );\n    const relevantDocs = docs\n        .filter((doc) => {\n            const name = doc.key.split('-')[0];\n            return name === collectionName;\n        });\n\n    const writeRows = relevantDocs.map(doc => {\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        return {\n            previous: doc,\n            document: writeDoc\n        };\n    });\n    return rxDatabase.lockedRun(\n        () => rxDatabase.internalStore.bulkWrite(writeRows)\n    ).then(() => relevantDocs);\n}\n\nfunction _prepareBroadcastChannel<Collections>(rxDatabase: RxDatabase<Collections>): void {\n    // listen to changes from other instances that come over the BroadcastChannel\n    ensureNotFalsy(rxDatabase.broadcastChannel)\n        .addEventListener('message', async (changeEventBulk: RxChangeEventBulk<any>) => {\n            const databaseStorageToken = await rxDatabase.storageToken;\n            if (\n                // not same storage-state\n                changeEventBulk.storageToken !== databaseStorageToken ||\n                // this db instance was sender\n                changeEventBulk.databaseToken === rxDatabase.token\n            ) {\n                return;\n            }\n            rxDatabase.$emit(changeEventBulk);\n        });\n}\n\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nasync function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance\n        }\n    );\n    return internalStore;\n}\n\n/**\n * do the async things for this database\n */\nasync function prepare<Internals, InstanceCreationOptions, Collections>(\n    rxDatabase: RxDatabaseBase<Internals, InstanceCreationOptions, Collections>\n): Promise<void> {\n    if (rxDatabase.multiInstance) {\n        _prepareBroadcastChannel<Collections>(rxDatabase as any);\n    }\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        localDocuments = false\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    let broadcastChannel: BroadcastChannel | undefined;\n    if (multiInstance) {\n        broadcastChannel = new BroadcastChannel(\n            'RxDB:' +\n            name + ':' +\n            'socket'\n        );\n    }\n\n    const idleQueue = new IdleQueue();\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance\n    ).then(storageInstance => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            idleQueue,\n            storageInstance,\n            broadcastChannel\n        ) as any;\n        return prepare(rxDatabase)\n            .then(() => runAsyncPluginHooks('createRxDatabase', {\n                database: rxDatabase,\n                creator: {\n                    storage,\n                    instanceCreationOptions,\n                    name,\n                    password,\n                    multiInstance,\n                    eventReduce,\n                    ignoreDuplicate,\n                    options,\n                    localDocuments\n                }\n            }))\n            .then(() => rxDatabase);\n    });\n}\n\n/**\n * removes the database and all its known data\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<any> {\n    const storageInstance = await createRxDatabaseStorageInstance(\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        storageInstance,\n        storage\n    );\n\n    await Promise.all(\n        collectionDocs\n            .map(async (colDoc) => {\n                const key = colDoc.key;\n                const schema = colDoc.data.schema;\n                const split = key.split('-');\n                const collectionName = split[0];\n                const storageInstance = storage.createStorageInstance<any>(\n                    {\n                        databaseName,\n                        collectionName,\n                        schema,\n                        options: {},\n                        multiInstance: false\n                    }\n                );\n                await (await storageInstance).remove();\n            })\n    );\n\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    return storageInstance.remove();\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n"],"file":"rx-database.js"}