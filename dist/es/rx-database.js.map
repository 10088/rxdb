{"version":3,"file":"rx-database.js","names":["IdleQueue","pluginMissing","flatClone","PROMISE_RESOLVE_FALSE","randomCouchString","ensureNotFalsy","PROMISE_RESOLVE_VOID","getDefaultRevision","createRevision","now","newRxError","createRxSchema","overwritable","runPluginHooks","runAsyncPluginHooks","Subject","mergeMap","createRxCollection","getSingleDocument","getWrappedStorageInstance","INTERNAL_STORAGE_NAME","createRxCollectionStorageInstance","ObliviousSet","ensureStorageTokenExists","getAllCollectionDocuments","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","INTERNAL_STORE_SCHEMA","BROADCAST_CHANNEL_BY_TOKEN","removeRxDatabase","databaseName","storage","databaseInstanceToken","createRxDatabaseStorageInstance","dbInternalsStorageInstance","collectionDocs","removedCollectionNames","Promise","all","map","colDoc","schema","data","collectionName","name","push","createStorageInstance","options","multiInstance","storageInstance","remove","_removeAllOfCollection","rxDatabase","internalStore","docs","relevantDocs","filter","writeRows","doc","writeDoc","_deleted","_rev","_meta","Object","assign","lwt","previous","document","bulkWrite","then","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","token","instanceCreationOptions","password","eventReduce","idleQueue","cleanupPolicy","_subs","destroyed","collections","eventBulks$","observable$","pipe","changeEventBulk","events","storageToken","emittedEventBulkIds","asRxDatabase","$emit","has","id","add","next","removeCollectionDoc","_collectionNamePrimary","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","entries","forEach","args","rxJsonSchema","crypt","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","_attachments","useArgs","database","hookData","putDocsResult","error","_id","docInDb","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","defineProperty","get","removeCollection","destroyPromise","destroy","knownVersions","knownVersionDoc","storageInstances","instance","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","importJSON","_exportedJSON","server","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","complete","sub","unsubscribe","col","close","broadcastChannel","bcState","bc","throwIfDatabaseNameUsed","link","createRxDatabase","ignoreDuplicate","localDocuments","validatePassword","creator","isRxDatabase","obj","dbCount"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector,\n    BroadcastChannel\n} from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID,\n    getDefaultRevision,\n    createRevision,\n    now\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema, RxSchema\n} from './rx-schema';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport {\n    createRxCollectionStorageInstance\n} from './rx-collection-helper';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA\n} from './rx-database-internal-store';\nimport { BROADCAST_CHANNEL_BY_TOKEN } from './rx-storage-multiinstance';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals, InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n    constructor(\n        public readonly name: string,\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        public readonly idleQueue: IdleQueue,\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             */\n            this.storageToken = ensureStorageTokenExists(this.asRxDatabase);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n\n    /**\n     * Set if multiInstance: true\n     * This broadcast channel is used to send events to other instances like\n     * other browser tabs or nodejs processes.\n     * We transfer everything in EventBulks because sending many small events has been shown\n     * to be performance expensive.\n     * \n     * @deprecated The broadcast channel has been moved out of the RxDatabase and is part of the\n     * RxStorage but only if it is needed there.\n     * @see ./rx-storage-multiinstance.ts\n     * \n     */\n    get broadcastChannel(): BroadcastChannel<RxChangeEventBulk<any>> | undefined {\n        const bcState = BROADCAST_CHANNEL_BY_TOKEN.get(this.token);\n        if (bcState) {\n            return bcState.bc as any;\n        }\n    }\n\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     * \n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * TODO instead of having this here, we should add a test to ensure each RxStorage\n     * behaves equal and does never emit duplicate eventBulks.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        writeDoc._rev = createRevision(writeDoc, doc);\n        writeDoc._meta = { lwt: now() };\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }]);\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema);\n            schemas[collectionName] = schema;\n\n            // crypt=true but no password given\n            if (\n                schema.crypt &&\n                !this.password\n            ) {\n                throw newRxError('DB7', {\n                    name: name as string\n                });\n            }\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version,\n                },\n                _deleted: false,\n                _meta: {\n                    lwt: now()\n                },\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            collectionDocData._rev = createRevision(collectionDocData);\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this,\n\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(bulkPutDocs);\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    database: this.name,\n                    collection: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        let destroyPromise = PROMISE_RESOLVE_VOID;\n        if ((this.collections as any)[collectionName]) {\n            destroyPromise = (this.collections as any)[collectionName].destroy();\n        }\n        // remove schemas from internal db\n        return destroyPromise\n            .then(() => _removeAllOfCollection(this as any, collectionName))\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(knownVersionDoc => {\n                            return createRxCollectionStorageInstance(\n                                this.asRxDatabase,\n                                {\n                                    databaseInstanceToken: this.token,\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: knownVersionDoc.data.schema,\n                                    options: this.instanceCreationOptions,\n                                    multiInstance: this.multiInstance\n                                }\n                            );\n                        })\n                );\n            })\n            // remove the storage instance\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => instance.remove()\n                    )\n                );\n            })\n            .then(() => runAsyncPluginHooks('postRemoveRxCollection', {\n                storage: this.storage,\n                databaseName: this.name,\n                collectionName\n            }))\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const docs = await getAllCollectionDocuments(rxDatabase.internalStore, rxDatabase.storage);\n    const relevantDocs = docs\n        .filter((colDoc) => colDoc.data.name === collectionName);\n    const writeRows = relevantDocs.map(doc => {\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        writeDoc._rev = createRevision(writeDoc, doc);\n        writeDoc._meta = Object.assign(\n            {},\n            doc._meta,\n            { lwt: now() }\n        );\n        return {\n            previous: doc,\n            document: writeDoc\n        };\n    });\n    return rxDatabase.internalStore\n        .bulkWrite(writeRows)\n        .then(() => relevantDocs);\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nasync function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        localDocuments = false\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    const idleQueue = new IdleQueue();\n\n    const databaseInstanceToken = randomCouchString(10);\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        databaseInstanceToken,\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance\n    ).then(storageInstance => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            databaseInstanceToken,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            idleQueue,\n            storageInstance,\n            cleanupPolicy\n        ) as any;\n        return runAsyncPluginHooks('createRxDatabase', {\n            database: rxDatabase,\n            creator: {\n                storage,\n                instanceCreationOptions,\n                name,\n                password,\n                multiInstance,\n                eventReduce,\n                ignoreDuplicate,\n                options,\n                localDocuments\n            }\n        }).then(() => rxDatabase);\n    });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n * \n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<string[]> {\n    const databaseInstanceToken = randomCouchString(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        dbInternalsStorageInstance,\n        storage\n    );\n\n    const removedCollectionNames: string[] = [];\n    await Promise.all(\n        collectionDocs\n            .map(async (colDoc) => {\n                const schema = colDoc.data.schema;\n                const collectionName = colDoc.data.name;\n                removedCollectionNames.push(collectionName);\n                const storageInstance = await storage.createStorageInstance<any>(\n                    {\n                        databaseInstanceToken,\n                        databaseName,\n                        collectionName,\n                        schema,\n                        options: {},\n                        multiInstance: false\n                    }\n                );\n                await storageInstance.remove();\n            })\n    );\n\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n"],"mappings":"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"}