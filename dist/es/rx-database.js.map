{"version":3,"file":"rx-database.js","names":["IdleQueue","pluginMissing","flatClone","PROMISE_RESOLVE_FALSE","randomCouchString","ensureNotFalsy","getDefaultRevision","getDefaultRxDocumentMeta","defaultHashFunction","newRxError","createRxSchema","runPluginHooks","runAsyncPluginHooks","Subject","mergeMap","createRxCollection","flatCloneDocWithMeta","getSingleDocument","getWrappedStorageInstance","INTERNAL_STORAGE_NAME","ObliviousSet","ensureStorageTokenDocumentExists","getAllCollectionDocuments","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","INTERNAL_STORE_SCHEMA","_collectionNamePrimary","ensureNoStartupErrors","rxDatabase","storageToken","startupErrors","isRxDatabaseFirstTimeInstantiated","database","storageTokenDocument","tokenDoc","data","instanceToken","token","removeRxDatabase","databaseName","storage","databaseInstanceToken","createRxDatabaseStorageInstance","dbInternalsStorageInstance","statics","collectionDocs","removedCollectionNames","Promise","all","map","colDoc","schema","collectionName","name","push","createStorageInstance","options","multiInstance","storageInstance","remove","password","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","instanceCreationOptions","eventReduce","internalStore","hashFunction","cleanupPolicy","idleQueue","_subs","onDestroy","destroyed","collections","eventBulks$","observable$","pipe","changeEventBulk","events","emittedEventBulkIds","asRxDatabase","err","then","doc","$emit","has","id","add","next","removeCollectionDoc","writeDoc","_deleted","bulkWrite","document","previous","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Object","entries","forEach","args","rxJsonSchema","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","connectedStorages","_meta","_rev","_attachments","useArgs","assign","hookData","putDocsResult","error","_id","docInDb","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","defineProperty","get","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","importJSON","_exportedJSON","serverCouchDB","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","destroy","complete","sub","unsubscribe","col","close","throwIfDatabaseNameUsed","link","createRxDatabase","ignoreDuplicate","localDocuments","creator","isRxDatabase","obj","dbCount"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector\n} from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    CouchDBServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    CouchDBServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    InternalStoreCollectionDocType,\n    RxTypeError,\n    RxError,\n    HashFunction,\n    MaybePromise\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    defaultHashFunction\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    RxSchema\n} from './rx-schema';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    flatCloneDocWithMeta,\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenDocumentExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA,\n    _collectionNamePrimary\n} from './rx-database-internal-store';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals,\n    InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n\n    public readonly idleQueue: IdleQueue = new IdleQueue();\n\n    constructor(\n        public readonly name: string,\n        /**\n         * Uniquely identifies the instance\n         * of this RxDatabase.\n         */\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly hashFunction: HashFunction,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         * \n         * TODO this is ugly, we should use a different way in the dev-mode\n         * so that all non-dev-mode code can be cleaner.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             * \n             * Writing the token takes about 20 milliseconds\n             * even on a fast adapter, so this is worth it.\n             */\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase)\n                .catch(err => this.startupErrors.push(err) as any);\n            this.storageToken = this.storageTokenDocument\n                .then(doc => doc.data.token)\n                .catch(err => this.startupErrors.push(err) as any);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public _subs: Subscription[] = [];\n\n    /**\n     * Beceause having unhandled exceptions would fail,\n     * we have to store the async errors of the constructor here\n     * so we can throw them later.\n     */\n    public startupErrors: (RxError | RxTypeError)[] = [];\n\n    /**\n     * When the database is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     * \n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n    /**\n     * Stores the whole state of the internal storage token document.\n     * We need this in some plugins.\n     */\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * TODO instead of having this here, we should add a test to ensure each RxStorage\n     * behaves equal and does never emit duplicate eventBulks.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }], 'rx-database-remove-collection');\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema);\n            schemas[collectionName] = schema;\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version,\n                    connectedStorages: []\n                },\n                _deleted: false,\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this,\n\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(\n            bulkPutDocs,\n            'rx-database-add-collection'\n        );\n\n        await ensureNoStartupErrors(this);\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    database: this.name,\n                    collection: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    serverCouchDB(_options?: CouchDBServerOptions): Promise<CouchDBServerResponse> {\n        throw pluginMissing('server-couchdb');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections as any)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean,\n    password?: string\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance,\n            password\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        localDocuments = false,\n        hashFunction = defaultHashFunction\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    const databaseInstanceToken = randomCouchString(10);\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        databaseInstanceToken,\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance,\n        password\n    )\n        /**\n         * Creating the internal store might fail\n         * if some RxStorage wrapper is used that does some checks\n         * and then throw.\n         * In that case we have to properly clean up the database.\n         */\n        .catch(err => {\n            USED_DATABASE_NAMES.delete(name);\n            throw err;\n        })\n        .then(storageInstance => {\n            const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n                name,\n                databaseInstanceToken,\n                storage,\n                instanceCreationOptions,\n                password,\n                multiInstance,\n                eventReduce,\n                options,\n                storageInstance,\n                hashFunction,\n                cleanupPolicy\n            ) as any;\n\n            return runAsyncPluginHooks('createRxDatabase', {\n                database: rxDatabase,\n                creator: {\n                    storage,\n                    instanceCreationOptions,\n                    name,\n                    password,\n                    multiInstance,\n                    eventReduce,\n                    ignoreDuplicate,\n                    options,\n                    localDocuments\n                }\n            }).then(() => rxDatabase);\n        });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n * \n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<string[]> {\n    const databaseInstanceToken = randomCouchString(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        storage.statics,\n        dbInternalsStorageInstance\n    );\n\n    const removedCollectionNames: string[] = [];\n    await Promise.all(\n        collectionDocs\n            .map(async (colDoc) => {\n                const schema = colDoc.data.schema;\n                const collectionName = colDoc.data.name;\n                removedCollectionNames.push(collectionName);\n                const storageInstance = await storage.createStorageInstance<any>(\n                    {\n                        databaseInstanceToken,\n                        databaseName,\n                        collectionName,\n                        schema,\n                        options: {},\n                        multiInstance: false\n                    }\n                );\n                await storageInstance.remove();\n            })\n    );\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n\n\n/**\n * Returns true if the given RxDatabase was the first\n * instance that was created on the storage with this name.\n * \n * Can be used for some optimizations because on the first instantiation,\n * we can assume that no data was written before.\n */\nexport async function isRxDatabaseFirstTimeInstantiated(\n    database: RxDatabase\n): Promise<boolean> {\n    const tokenDoc = await database.storageTokenDocument;\n    return tokenDoc.data.instanceToken === database.token;\n}\n\n\n/**\n * For better performance some tasks run async\n * and are awaited later.\n * But we still have to ensure that there have been no errors\n * on database creation.\n */\nexport async function ensureNoStartupErrors(\n    rxDatabase: RxDatabaseBase<any, any, any>\n) {\n    await rxDatabase.storageToken;\n    if (rxDatabase.startupErrors[0]) {\n        throw rxDatabase.startupErrors[0];\n    }\n}\n"],"mappings":"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"}