{"version":3,"file":"hooks.js","names":["HOOKS","preAddRxPlugin","preCreateRxDatabase","createRxDatabase","preCreateRxCollection","createRxCollection","postDestroyRxCollection","postRemoveRxCollection","preCreateRxSchema","createRxSchema","preCreateRxQuery","createRxQuery","preQueryMatcher","preSortComparator","prePrepareQuery","preWriteToStorageInstance","postReadFromInstance","preWriteAttachment","postReadAttachment","createRxDocument","postCreateRxDocument","preCreateRxStorageInstance","preMigrateDocument","postMigrateDocument","preDestroyRxDatabase","postRemoveRxDatabase","runPluginHooks","hookKey","obj","forEach","fun","runAsyncPluginHooks","Promise","all","map","_clearHook","type","filter","h"],"sources":["../../src/hooks.ts"],"sourcesContent":["\n/**\n * hook-functions that can be extended by the plugin\n */\nexport const HOOKS: { [k: string]: any[] } = {\n    /**\n     * Runs before a plugin is added.\n     * Use this to block the usage of non-compatible plugins.\n     */\n    preAddRxPlugin: [],\n    /**\n     * functions that run before the database is created\n     */\n    preCreateRxDatabase: [],\n    /**\n     * runs after the database is created and prepared\n     * but before the instance is returned to the user\n     * @async\n     */\n    createRxDatabase: [],\n    preCreateRxCollection: [],\n    createRxCollection: [],\n    /**\n    * runs at the end of the destroy-process of a collection\n    * @async\n    */\n    postDestroyRxCollection: [],\n    /**\n     * Runs after a collection is removed.\n     * @async\n     */\n    postRemoveRxCollection: [],\n    /**\n      * functions that get the json-schema as input\n      * to do additionally checks/manipulation\n      */\n    preCreateRxSchema: [],\n    /**\n     * functions that run after the RxSchema is created\n     * gets RxSchema as attribute\n     */\n    createRxSchema: [],\n    preCreateRxQuery: [],\n    createRxQuery: [],\n    /**\n     * Runs before a document is send to the query matcher.\n     */\n    preQueryMatcher: [],\n    /**\n     * Runs before a document is send to the sortComparator.\n     */\n    preSortComparator: [],\n    /**\n     * Runs before a query is send to the\n     * prepareQuery function of the storage engine.\n     */\n    prePrepareQuery: [],\n    /**\n     * Runs before the document data is send to the\n     * bulkWrite of the storage instance\n     */\n    preWriteToStorageInstance: [],\n    /**\n     * Runs after the document data is ready from\n     * the RxStorage instance.\n     */\n    postReadFromInstance: [],\n    preWriteAttachment: [],\n    postReadAttachment: [],\n    createRxDocument: [],\n    /**\n     * runs after a RxDocument is created,\n     * cannot be async\n     */\n    postCreateRxDocument: [],\n    /**\n     * Runs before a RxStorageInstance is created\n     * gets the params of createStorageInstance()\n     * as attribute so you can manipulate them.\n     * Notice that you have to clone stuff before mutating the inputs.\n     */\n    preCreateRxStorageInstance: [],\n    /**\n     * runs on the document-data before the document is migrated\n     * {\n     *   doc: Object, // originam doc-data\n     *   migrated: // migrated doc-data after run throught migration-strategies\n     * }\n     */\n    preMigrateDocument: [],\n    /**\n     * runs after the migration of a document has been done\n     */\n    postMigrateDocument: [],\n    /**\n     * runs at the beginning of the destroy-process of a database\n     */\n    preDestroyRxDatabase: [],\n    /**\n     * runs after a database has been removed\n     * @async\n     */\n    postRemoveRxDatabase: []\n};\n\nexport function runPluginHooks(hookKey: string, obj: any) {\n    HOOKS[hookKey].forEach(fun => fun(obj));\n}\n\n\n/**\n * TODO\n * we should not run the hooks in parallel\n * this makes stuff unpredictable.\n */\nexport function runAsyncPluginHooks(hookKey: string, obj: any): Promise<any> {\n    return Promise.all(\n        HOOKS[hookKey].map(fun => fun(obj))\n    );\n}\n\n/**\n * used in tests to remove hooks\n */\nexport function _clearHook(type: string, fun: Function) {\n    HOOKS[type] = HOOKS[type].filter(h => h !== fun);\n}\n"],"mappings":"AACA;AACA;AACA;AACA,OAAO,IAAMA,KAA6B,GAAG;EACzC;AACJ;AACA;AACA;EACIC,cAAc,EAAE,EALyB;;EAMzC;AACJ;AACA;EACIC,mBAAmB,EAAE,EAToB;;EAUzC;AACJ;AACA;AACA;AACA;EACIC,gBAAgB,EAAE,EAfuB;EAgBzCC,qBAAqB,EAAE,EAhBkB;EAiBzCC,kBAAkB,EAAE,EAjBqB;;EAkBzC;AACJ;AACA;AACA;EACIC,uBAAuB,EAAE,EAtBgB;;EAuBzC;AACJ;AACA;AACA;EACIC,sBAAsB,EAAE,EA3BiB;;EA4BzC;AACJ;AACA;AACA;EACIC,iBAAiB,EAAE,EAhCsB;;EAiCzC;AACJ;AACA;AACA;EACIC,cAAc,EAAE,EArCyB;EAsCzCC,gBAAgB,EAAE,EAtCuB;EAuCzCC,aAAa,EAAE,EAvC0B;;EAwCzC;AACJ;AACA;EACIC,eAAe,EAAE,EA3CwB;;EA4CzC;AACJ;AACA;EACIC,iBAAiB,EAAE,EA/CsB;;EAgDzC;AACJ;AACA;AACA;EACIC,eAAe,EAAE,EApDwB;;EAqDzC;AACJ;AACA;AACA;EACIC,yBAAyB,EAAE,EAzDc;;EA0DzC;AACJ;AACA;AACA;EACIC,oBAAoB,EAAE,EA9DmB;EA+DzCC,kBAAkB,EAAE,EA/DqB;EAgEzCC,kBAAkB,EAAE,EAhEqB;EAiEzCC,gBAAgB,EAAE,EAjEuB;;EAkEzC;AACJ;AACA;AACA;EACIC,oBAAoB,EAAE,EAtEmB;;EAuEzC;AACJ;AACA;AACA;AACA;AACA;EACIC,0BAA0B,EAAE,EA7Ea;;EA8EzC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,kBAAkB,EAAE,EArFqB;;EAsFzC;AACJ;AACA;EACIC,mBAAmB,EAAE,EAzFoB;;EA0FzC;AACJ;AACA;EACIC,oBAAoB,EAAE,EA7FmB;;EA8FzC;AACJ;AACA;AACA;EACIC,oBAAoB,EAAE;AAlGmB,CAAtC;AAqGP,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAyCC,GAAzC,EAAmD;EACtD5B,KAAK,CAAC2B,OAAD,CAAL,CAAeE,OAAf,CAAuB,UAAAC,GAAG;IAAA,OAAIA,GAAG,CAACF,GAAD,CAAP;EAAA,CAA1B;AACH;AAGD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,mBAAT,CAA6BJ,OAA7B,EAA8CC,GAA9C,EAAsE;EACzE,OAAOI,OAAO,CAACC,GAAR,CACHjC,KAAK,CAAC2B,OAAD,CAAL,CAAeO,GAAf,CAAmB,UAAAJ,GAAG;IAAA,OAAIA,GAAG,CAACF,GAAD,CAAP;EAAA,CAAtB,CADG,CAAP;AAGH;AAED;AACA;AACA;;AACA,OAAO,SAASO,UAAT,CAAoBC,IAApB,EAAkCN,GAAlC,EAAiD;EACpD9B,KAAK,CAACoC,IAAD,CAAL,GAAcpC,KAAK,CAACoC,IAAD,CAAL,CAAYC,MAAZ,CAAmB,UAAAC,CAAC;IAAA,OAAIA,CAAC,KAAKR,GAAV;EAAA,CAApB,CAAd;AACH"}