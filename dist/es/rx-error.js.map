{"version":3,"sources":["../../src/rx-error.ts"],"names":["overwritable","parametersToString","parameters","ret","Object","keys","length","map","k","paramStr","JSON","stringify","_k","v","undefined","e","join","messageForError","message","code","RxError","mes","rxdb","toString","Error","RxTypeError","TypeError","newRxError","tunnelErrorMessage","newRxTypeError","isPouchdbConflictError","err","pouchDbError","status"],"mappings":"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","sourcesContent":["/**\n * here we use custom errors with the additional field 'parameters'\n */\n\nimport { overwritable } from './overwritable';\nimport type {\n    RxErrorParameters,\n    PouchWriteError,\n    RxErrorKey\n} from './types';\n\n/**\n * transform an object of parameters to a presentable string\n */\nfunction parametersToString(parameters: any): string {\n    let ret = '';\n    if (Object.keys(parameters).length === 0)\n        return ret;\n    ret += 'Given parameters: {\\n';\n    ret += Object.keys(parameters)\n        .map(k => {\n            let paramStr = '[object Object]';\n            try {\n                paramStr = JSON.stringify(\n                    parameters[k],\n                    (_k, v) => v === undefined ? null : v,\n                    2\n                );\n            } catch (e) { }\n            return k + ':' + paramStr;\n        })\n        .join('\\n');\n    ret += '}';\n    return ret;\n}\n\nfunction messageForError(\n    message: string,\n    code: string,\n    parameters: any\n): string {\n    return 'RxError (' + code + '):' + '\\n' +\n        message + '\\n' +\n        parametersToString(parameters);\n}\n\nexport class RxError extends Error {\n    public code: RxErrorKey;\n    public message: string;\n    public parameters: RxErrorParameters;\n    public rxdb: true;\n    constructor(\n        code: RxErrorKey,\n        message: string,\n        parameters: RxErrorParameters = {}\n    ) {\n        const mes = messageForError(message, code, parameters);\n        super(mes);\n        this.code = code;\n        this.message = mes;\n        this.parameters = parameters;\n        this.rxdb = true; // tag them as internal\n    }\n    get name(): string {\n        return 'RxError (' + this.code + ')';\n    }\n    toString(): string {\n        return this.message;\n    }\n    get typeError(): boolean {\n        return false;\n    }\n}\n\nexport class RxTypeError extends TypeError {\n    public code: RxErrorKey;\n    public message: string;\n    public parameters: RxErrorParameters;\n    public rxdb: true;\n    constructor(\n        code: RxErrorKey,\n        message: string,\n        parameters: RxErrorParameters = {}\n    ) {\n        const mes = messageForError(message, code, parameters);\n        super(mes);\n        this.code = code;\n        this.message = mes;\n        this.parameters = parameters;\n        this.rxdb = true; // tag them as internal\n    }\n    get name(): string {\n        return 'RxTypeError (' + this.code + ')';\n    }\n    toString(): string {\n        return this.message;\n    }\n    get typeError(): boolean {\n        return true;\n    }\n}\n\nexport function newRxError(\n    code: RxErrorKey,\n    parameters?: RxErrorParameters\n): RxError {\n    return new RxError(\n        code,\n        overwritable.tunnelErrorMessage(code),\n        parameters\n    );\n}\n\nexport function newRxTypeError(\n    code: RxErrorKey,\n    parameters?: RxErrorParameters\n): RxTypeError {\n    return new RxTypeError(\n        code,\n        overwritable.tunnelErrorMessage(code),\n        parameters\n    );\n}\n\nexport function isPouchdbConflictError(err: RxError | RxTypeError): boolean {\n    if (\n        err.parameters && err.parameters.pouchDbError &&\n        (err.parameters.pouchDbError as PouchWriteError).status === 409\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"file":"rx-error.js"}