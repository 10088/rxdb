{"version":3,"file":"meta-instance.js","names":["fillWithDefaultSettings","getComposedPrimaryKeyOfDocumentData","flatCloneDocWithMeta","getDefaultRevision","createRevision","now","getAssumedMasterState","state","docIds","input","metaInstance","findDocumentsById","map","docId","useId","RX_REPLICATION_META_INSTANCE_SCHEMA","itemId","replicationIdentifier","checkpointKey","isCheckpoint","metaDocs","ret","Object","values","forEach","metaDoc","docData","data","metaDocument","primaryKey","key","fields","separator","type","version","additionalProperties","properties","id","minLength","maxLength","isResolvedConflict","required","getMetaWriteRow","newMasterDocState","previous","primaryPath","newMeta","_attachments","_deleted","_rev","_meta","lwt","document"],"sources":["../../../src/replication/meta-instance.ts"],"sourcesContent":["import {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData\n} from '../rx-schema-helper';\nimport { flatCloneDocWithMeta } from '../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types';\nimport { getDefaultRevision, createRevision, now } from '../util';\n\nexport const RX_REPLICATION_META_INSTANCE_SCHEMA: RxJsonSchema<RxDocumentData<RxStorageReplicationMeta>> = fillWithDefaultSettings({\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'replicationIdentifier',\n            'itemId',\n            'isCheckpoint'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    version: 0,\n    additionalProperties: false,\n    properties: {\n        id: {\n            type: 'string',\n            minLength: 1,\n            maxLength: 100\n        },\n        replicationIdentifier: {\n            type: 'string'\n        },\n        isCheckpoint: {\n            type: 'string',\n            enum: [\n                '0',\n                '1'\n            ],\n            maxLength: 1\n        },\n        itemId: {\n            type: 'string'\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        },\n        isResolvedConflict: {\n            type: 'string'\n        }\n    },\n    required: [\n        'id',\n        'replicationIdentifier',\n        'isCheckpoint',\n        'itemId',\n        'data'\n    ]\n});\n\n\n/**\n * Returns the document states of what the fork instance\n * assumes to be the latest state on the master instance.\n */\nexport async function getAssumedMasterState<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    docIds: string[]\n): Promise<ById<{\n    docData: WithDeleted<RxDocType>;\n    metaDocument: RxDocumentData<RxStorageReplicationMeta>\n}>> {\n    const metaDocs = await state.input.metaInstance.findDocumentsById(\n        docIds.map(docId => {\n            const useId = getComposedPrimaryKeyOfDocumentData(\n                RX_REPLICATION_META_INSTANCE_SCHEMA,\n                {\n                    itemId: docId,\n                    replicationIdentifier: state.checkpointKey,\n                    isCheckpoint: '0'\n                }\n            );\n            return useId;\n        }),\n        true\n    );\n\n    const ret: {\n        [docId: string]: {\n            docData: RxDocumentData<RxDocType>;\n            metaDocument: RxDocumentData<RxStorageReplicationMeta>\n        }\n    } = {};\n    Object\n        .values(metaDocs)\n        .forEach((metaDoc) => {\n            ret[metaDoc.itemId] = {\n                docData: metaDoc.data,\n                metaDocument: metaDoc\n            };\n        });\n\n    return ret;\n}\n\n\nexport function getMetaWriteRow<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    newMasterDocState: WithDeleted<RxDocType>,\n    previous?: RxDocumentData<RxStorageReplicationMeta>,\n    isResolvedConflict?: string\n): BulkWriteRow<RxStorageReplicationMeta> {\n    const docId: string = (newMasterDocState as any)[state.primaryPath];\n    const newMeta: RxDocumentData<RxStorageReplicationMeta> = previous ? flatCloneDocWithMeta(\n        previous\n    ) : {\n        id: '',\n        replicationIdentifier: state.checkpointKey,\n        isCheckpoint: '0',\n        itemId: docId,\n        data: newMasterDocState,\n        _attachments: {},\n        _deleted: false,\n        _rev: getDefaultRevision(),\n        _meta: {\n            lwt: 0\n        }\n    };\n    newMeta.data = newMasterDocState;\n    newMeta.isResolvedConflict = isResolvedConflict;\n    newMeta._meta.lwt = now();\n    newMeta.id = getComposedPrimaryKeyOfDocumentData(\n        RX_REPLICATION_META_INSTANCE_SCHEMA,\n        newMeta\n    );\n    newMeta._rev = createRevision(newMeta, previous);\n    return {\n        previous,\n        document: newMeta\n    };\n}\n"],"mappings":"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"}