{"version":3,"file":"conflicts.js","names":["deepEqual","getDefaultRevision","createRevision","now","flatClone","resolveConflictError","conflictHandler","input","forkState","conflictHandlerOutput","isEqual","undefined","resolvedDoc","Object","assign","documentData","_meta","_rev","_attachments","lwt","output","defaultConflictHandler","i","_context","newDocumentState","realMasterState","Promise","resolve"],"sources":["../../../src/replication/conflicts.ts"],"sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport type {\n    RxConflictHandler,\n    RxConflictHandlerInput,\n    RxConflictHandlerOutput,\n    RxDocumentData\n} from '../types';\nimport {\n    getDefaultRevision,\n    createRevision,\n    now,\n    flatClone\n} from '../util';\n\nexport const defaultConflictHandler: RxConflictHandler<any> = function (\n    i: RxConflictHandlerInput<any>,\n    _context: string\n): Promise<RxConflictHandlerOutput<any>> {\n    if (deepEqual(\n        i.newDocumentState,\n        i.realMasterState\n    )) {\n        return Promise.resolve({\n            isEqual: true\n        });\n    }\n\n    /**\n     * The default conflict handler will always\n     * drop the fork state and use the master state instead.\n     */\n    return Promise.resolve({\n        isEqual: false,\n        documentData: i.realMasterState\n    });\n}\n\n\n/**\n * Resolves a conflict error or determines that the given document states are equal.\n * Returns the resolved document that must be written to the fork.\n * Then the new document state can be pushed upstream.\n * If document is not in conflict, returns undefined.\n * If error is non-409, it throws an error.\n * Conflicts are only solved in the upstream, never in the downstream.\n */\nexport async function resolveConflictError<RxDocType>(\n    conflictHandler: RxConflictHandler<RxDocType>,\n    input: RxConflictHandlerInput<RxDocType>,\n    forkState: RxDocumentData<RxDocType>\n): Promise<{\n    resolvedDoc: RxDocumentData<RxDocType>;\n    output: RxConflictHandlerOutput<RxDocType>;\n} | undefined> {\n    const conflictHandlerOutput = await conflictHandler(input, 'replication-resolve-conflict');\n\n    if (conflictHandlerOutput.isEqual) {\n        /**\n         * Documents are equal,\n         * so this is not a conflict -> do nothing.\n         */\n        return undefined;\n    } else {\n        /**\n         * We have a resolved conflict,\n         * use the resolved document data.\n         */\n        const resolvedDoc: RxDocumentData<RxDocType> = Object.assign(\n            {},\n            conflictHandlerOutput.documentData,\n            {\n                /**\n                 * Because the resolved conflict is written to the fork,\n                 * we have to keep/update the forks _meta data, not the masters.\n                 */\n                _meta: flatClone(forkState._meta),\n                _rev: getDefaultRevision(),\n                _attachments: flatClone(forkState._attachments)\n            }\n        );\n        resolvedDoc._meta.lwt = now();\n        resolvedDoc._rev = createRevision(resolvedDoc, forkState);\n        return {\n            resolvedDoc,\n            output: conflictHandlerOutput\n        };\n    }\n}\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AAOA,SACIC,kBADJ,EAEIC,cAFJ,EAGIC,GAHJ,EAIIC,SAJJ,QAKO,SALP;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAsBC,oBAAtB,YAAsBA,oBAAtB,CACIC,eADJ,EAEIC,KAFJ,EAGIC,SAHJ;EAAA,IAOe;IAAA,uBACyBF,eAAe,CAACC,KAAD,EAAQ,8BAAR,CADxC,iBACLE,qBADK;MAAA,IAGPA,qBAAqB,CAACC,OAHf;QAIP;AACR;AACA;AACA;QACQ,OAAOC,SAAP;MARO;QAUP;AACR;AACA;AACA;QACQ,IAAMC,WAAsC,GAAGC,MAAM,CAACC,MAAP,CAC3C,EAD2C,EAE3CL,qBAAqB,CAACM,YAFqB,EAG3C;UACI;AAChB;AACA;AACA;UACgBC,KAAK,EAAEZ,SAAS,CAACI,SAAS,CAACQ,KAAX,CALpB;UAMIC,IAAI,EAAEhB,kBAAkB,EAN5B;UAOIiB,YAAY,EAAEd,SAAS,CAACI,SAAS,CAACU,YAAX;QAP3B,CAH2C,CAA/C;QAaAN,WAAW,CAACI,KAAZ,CAAkBG,GAAlB,GAAwBhB,GAAG,EAA3B;QACAS,WAAW,CAACK,IAAZ,GAAmBf,cAAc,CAACU,WAAD,EAAcJ,SAAd,CAAjC;QACA,OAAO;UACHI,WAAW,EAAXA,WADG;UAEHQ,MAAM,EAAEX;QAFL,CAAP;MA7BO;IAAA;EAkCd,CAzCD;IAAA;EAAA;AAAA;AAhCA,OAAO,IAAMY,sBAA8C,GAAG,SAAjDA,sBAAiD,CAC1DC,CAD0D,EAE1DC,QAF0D,EAGrB;EACrC,IAAIvB,SAAS,CACTsB,CAAC,CAACE,gBADO,EAETF,CAAC,CAACG,eAFO,CAAb,EAGG;IACC,OAAOC,OAAO,CAACC,OAAR,CAAgB;MACnBjB,OAAO,EAAE;IADU,CAAhB,CAAP;EAGH;EAED;AACJ;AACA;AACA;;;EACI,OAAOgB,OAAO,CAACC,OAAR,CAAgB;IACnBjB,OAAO,EAAE,KADU;IAEnBK,YAAY,EAAEO,CAAC,CAACG;EAFG,CAAhB,CAAP;AAIH,CArBM"}