{"version":3,"sources":["../../src/rx-schema.ts"],"names":["deepEqual","hash","overwriteGetterForCaching","flatClone","isMaybeReadonlyArray","newRxError","runPluginHooks","defineGetterSetter","fillWithDefaultSettings","getComposedPrimaryKeyOfDocumentData","getFinalFields","getPrimaryFieldOfPrimaryKey","normalizeRxJsonSchema","overwritable","RxSchema","jsonSchema","indexes","getIndexes","primaryPath","primaryKey","finalFields","validateChange","dataBefore","dataAfter","forEach","fieldName","schema","validate","_obj","_schemaPath","fillObjectWithDefaults","obj","Object","entries","defaultValues","filter","k","hasOwnProperty","v","getDocumentPrototype","proto","getPrimaryOfDocumentData","documentData","version","values","properties","encrypted","length","attachments","map","index","getPreviousVersions","c","Array","fill","createRxSchema","runPreCreateHooks","useJsonSchema","deepFreezeWhenDevMode","isInstanceOf","toTypedRxJsonSchema"],"mappings":"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","sourcesContent":["import deepEqual from 'fast-deep-equal';\n\nimport {\n    hash,\n    overwriteGetterForCaching,\n    flatClone,\n    isMaybeReadonlyArray\n} from './util';\nimport {\n    newRxError,\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport {\n    defineGetterSetter\n} from './rx-document';\n\nimport type {\n    DeepMutable,\n    DeepReadonly, MaybeReadonly,\n    RxDocumentData,\n    RxJsonSchema\n} from './types';\nimport {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData,\n    getFinalFields,\n    getPrimaryFieldOfPrimaryKey,\n    normalizeRxJsonSchema\n} from './rx-schema-helper';\nimport { overwritable } from './overwritable';\n\nexport class RxSchema<T = any> {\n    public indexes: MaybeReadonly<string[]>[];\n    public primaryPath: keyof T;\n    public finalFields: string[];\n\n    constructor(\n        public readonly jsonSchema: RxJsonSchema<RxDocumentData<T>>\n    ) {\n        this.indexes = getIndexes(this.jsonSchema);\n\n        // primary is always required\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.jsonSchema.primaryKey) as any;\n\n        this.finalFields = getFinalFields(this.jsonSchema);\n    }\n\n    public get version(): number {\n        return this.jsonSchema.version;\n    }\n\n    public get defaultValues(): { [P in keyof T]: T[P] } {\n        const values = {} as { [P in keyof T]: T[P] };\n        Object\n            .entries(this.jsonSchema.properties)\n            .filter(([, v]) => (v as any).hasOwnProperty('default'))\n            .forEach(([k, v]) => (values as any)[k] = (v as any).default);\n        return overwriteGetterForCaching(\n            this,\n            'defaultValues',\n            values\n        );\n    }\n\n    /**\n        * true if schema contains at least one encrypted path\n        */\n    get crypt(): boolean {\n        if (\n            !!this.jsonSchema.encrypted && this.jsonSchema.encrypted.length > 0 ||\n            this.jsonSchema.attachments && this.jsonSchema.attachments.encrypted\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @overrides itself on the first call\n     */\n    public get hash(): string {\n        return overwriteGetterForCaching(\n            this,\n            'hash',\n            hash(this.jsonSchema)\n        );\n    }\n\n    /**\n     * checks if a given change on a document is allowed\n     * Ensures that:\n     * - primary is not modified\n     * - final fields are not modified\n     * @throws {Error} if not valid\n     */\n    validateChange(dataBefore: any, dataAfter: any): void {\n        this.finalFields.forEach(fieldName => {\n            if (!deepEqual(dataBefore[fieldName], dataAfter[fieldName])) {\n                throw newRxError('DOC9', {\n                    dataBefore,\n                    dataAfter,\n                    fieldName,\n                    schema: this.jsonSchema\n                });\n            }\n        });\n    }\n\n    /**\n     * validate if the obj matches the schema\n     * @overwritten by plugin (required)\n     * @param schemaPath if given, validates agains deep-path of schema\n     * @throws {Error} if not valid\n     * @param obj equal to input-obj\n     */\n    public validate(_obj: any, _schemaPath?: string): void {\n        /**\n         * This method might be overwritten by a validation plugin,\n         * otherwise do nothing.\n         */\n    }\n\n    /**\n     * fills all unset fields with default-values if set\n     */\n    fillObjectWithDefaults(obj: any): any {\n        obj = flatClone(obj);\n        Object\n            .entries(this.defaultValues)\n            .filter(([k]) => !obj.hasOwnProperty(k) || typeof obj[k] === 'undefined')\n            .forEach(([k, v]) => obj[k] = v);\n        return obj;\n    }\n\n    /**\n     * creates the schema-based document-prototype,\n     * see RxCollection.getDocumentPrototype()\n     */\n    public getDocumentPrototype(): any {\n        const proto = {};\n        defineGetterSetter(this, proto, '');\n        overwriteGetterForCaching(\n            this,\n            'getDocumentPrototype',\n            () => proto\n        );\n        return proto;\n    }\n\n\n    getPrimaryOfDocumentData(\n        documentData: Partial<T>\n    ): string {\n        return getComposedPrimaryKeyOfDocumentData(\n            this.jsonSchema,\n            documentData\n        );\n    }\n}\n\nexport function getIndexes<T = any>(\n    jsonSchema: RxJsonSchema<T>\n): MaybeReadonly<string[]>[] {\n    return (jsonSchema.indexes || []).map(index => isMaybeReadonlyArray(index) ? index : [index]);\n}\n\n/**\n * array with previous version-numbers\n */\nexport function getPreviousVersions(schema: RxJsonSchema<any>): number[] {\n    const version = schema.version ? schema.version : 0;\n    let c = 0;\n    return new Array(version)\n        .fill(0)\n        .map(() => c++);\n}\n\nexport function createRxSchema<T>(\n    jsonSchema: RxJsonSchema<T>,\n    runPreCreateHooks = true\n): RxSchema<T> {\n    if (runPreCreateHooks) {\n        runPluginHooks('preCreateRxSchema', jsonSchema);\n    }\n\n    let useJsonSchema = fillWithDefaultSettings(jsonSchema);\n    useJsonSchema = normalizeRxJsonSchema(useJsonSchema);\n    overwritable.deepFreezeWhenDevMode(useJsonSchema);\n\n    const schema = new RxSchema(useJsonSchema);\n    runPluginHooks('createRxSchema', schema);\n    return schema;\n}\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxSchema;\n}\n\n/**\n * Used as helper function the generate the document type out of the schema via typescript.\n * @link https://github.com/pubkey/rxdb/discussions/3467\n */\nexport function toTypedRxJsonSchema<T extends DeepReadonly<RxJsonSchema<any>>>(schema: T): DeepMutable<T> {\n    return schema as any;\n}\n"],"file":"rx-schema.js"}