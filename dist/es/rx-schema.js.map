{"version":3,"file":"rx-schema.js","names":["deepEqual","hash","overwriteGetterForCaching","flatClone","isMaybeReadonlyArray","newRxError","runPluginHooks","defineGetterSetter","fillWithDefaultSettings","getComposedPrimaryKeyOfDocumentData","getFinalFields","getPrimaryFieldOfPrimaryKey","normalizeRxJsonSchema","overwritable","fillObjectDataBeforeInsert","RxSchema","jsonSchema","indexes","getIndexes","primaryPath","primaryKey","finalFields","validateChange","dataBefore","dataAfter","forEach","fieldName","schema","validate","obj","schemaPath","validateFullDocumentData","fullDocData","_docData","_schemaPath","fillObjectWithDefaults","Object","entries","defaultValues","filter","k","hasOwnProperty","v","getDocumentPrototype","proto","getPrimaryOfDocumentData","documentData","version","values","properties","encrypted","length","attachments","map","index","getPreviousVersions","c","Array","fill","createRxSchema","runPreCreateHooks","useJsonSchema","deepFreezeWhenDevMode","isInstanceOf","toTypedRxJsonSchema"],"sources":["../../src/rx-schema.ts"],"sourcesContent":["import deepEqual from 'fast-deep-equal';\n\nimport {\n    hash,\n    overwriteGetterForCaching,\n    flatClone,\n    isMaybeReadonlyArray\n} from './util';\nimport {\n    newRxError,\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport {\n    defineGetterSetter\n} from './rx-document';\n\nimport type {\n    DeepMutable,\n    DeepReadonly, MaybeReadonly,\n    RxDocumentData,\n    RxJsonSchema\n} from './types';\nimport {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData,\n    getFinalFields,\n    getPrimaryFieldOfPrimaryKey,\n    normalizeRxJsonSchema\n} from './rx-schema-helper';\nimport { overwritable } from './overwritable';\nimport { fillObjectDataBeforeInsert } from './rx-collection-helper';\n\nexport class RxSchema<RxDocType = any> {\n    public indexes: MaybeReadonly<string[]>[];\n    public readonly primaryPath: keyof RxDocType;\n    public finalFields: string[];\n\n    constructor(\n        public readonly jsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n    ) {\n        this.indexes = getIndexes(this.jsonSchema);\n\n        // primary is always required\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.jsonSchema.primaryKey) as any;\n\n        this.finalFields = getFinalFields(this.jsonSchema);\n    }\n\n    public get version(): number {\n        return this.jsonSchema.version;\n    }\n\n    public get defaultValues(): { [P in keyof RxDocType]: RxDocType[P] } {\n        const values = {} as { [P in keyof RxDocType]: RxDocType[P] };\n        Object\n            .entries(this.jsonSchema.properties)\n            .filter(([, v]) => (v as any).hasOwnProperty('default'))\n            .forEach(([k, v]) => (values as any)[k] = (v as any).default);\n        return overwriteGetterForCaching(\n            this,\n            'defaultValues',\n            values\n        );\n    }\n\n    /**\n        * true if schema contains at least one encrypted path\n        */\n    get crypt(): boolean {\n        if (\n            !!this.jsonSchema.encrypted && this.jsonSchema.encrypted.length > 0 ||\n            this.jsonSchema.attachments && this.jsonSchema.attachments.encrypted\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @overrides itself on the first call\n     */\n    public get hash(): string {\n        return overwriteGetterForCaching(\n            this,\n            'hash',\n            hash(this.jsonSchema)\n        );\n    }\n\n    /**\n     * checks if a given change on a document is allowed\n     * Ensures that:\n     * - primary is not modified\n     * - final fields are not modified\n     * @throws {Error} if not valid\n     */\n    validateChange(dataBefore: any, dataAfter: any): void {\n        this.finalFields.forEach(fieldName => {\n            if (!deepEqual(dataBefore[fieldName], dataAfter[fieldName])) {\n                throw newRxError('DOC9', {\n                    dataBefore,\n                    dataAfter,\n                    fieldName,\n                    schema: this.jsonSchema\n                });\n            }\n        });\n    }\n\n    /**\n     * validate if the given document data matches the schema\n     * @param schemaPath if given, validates against deep-path of schema\n     * @throws {Error} if not valid\n     * @param obj equal to input-obj\n     *\n     */\n    public validate(obj: Partial<RxDocType> | any, schemaPath?: string): void {\n        if (!this.validateFullDocumentData) {\n            return;\n        } else {\n            const fullDocData = fillObjectDataBeforeInsert(this, obj);\n            return this.validateFullDocumentData(fullDocData, schemaPath);\n        }\n    }\n\n    /**\n     * @overwritten by the given validation plugin\n     */\n    public validateFullDocumentData(\n        _docData: RxDocumentData<RxDocType>,\n        _schemaPath?: string\n    ) {\n        /**\n         * This method might be overwritten by a validation plugin,\n         * otherwise do nothing, because if not validation plugin\n         * was added to RxDB, we assume all given data is valid.\n         */\n    }\n\n    /**\n     * fills all unset fields with default-values if set\n     */\n    fillObjectWithDefaults(obj: any): any {\n        obj = flatClone(obj);\n        Object\n            .entries(this.defaultValues)\n            .filter(([k]) => !obj.hasOwnProperty(k) || typeof obj[k] === 'undefined')\n            .forEach(([k, v]) => obj[k] = v);\n        return obj;\n    }\n\n    /**\n     * creates the schema-based document-prototype,\n     * see RxCollection.getDocumentPrototype()\n     */\n    public getDocumentPrototype(): any {\n        const proto = {};\n        defineGetterSetter(this, proto, '');\n        overwriteGetterForCaching(\n            this,\n            'getDocumentPrototype',\n            () => proto\n        );\n        return proto;\n    }\n\n\n    getPrimaryOfDocumentData(\n        documentData: Partial<RxDocType>\n    ): string {\n        return getComposedPrimaryKeyOfDocumentData(\n            this.jsonSchema,\n            documentData\n        );\n    }\n}\n\nexport function getIndexes<RxDocType = any>(\n    jsonSchema: RxJsonSchema<RxDocType>\n): MaybeReadonly<string[]>[] {\n    return (jsonSchema.indexes || []).map(index => isMaybeReadonlyArray(index) ? index : [index]);\n}\n\n/**\n * array with previous version-numbers\n */\nexport function getPreviousVersions(schema: RxJsonSchema<any>): number[] {\n    const version = schema.version ? schema.version : 0;\n    let c = 0;\n    return new Array(version)\n        .fill(0)\n        .map(() => c++);\n}\n\nexport function createRxSchema<T>(\n    jsonSchema: RxJsonSchema<T>,\n    runPreCreateHooks = true\n): RxSchema<T> {\n    if (runPreCreateHooks) {\n        runPluginHooks('preCreateRxSchema', jsonSchema);\n    }\n\n    let useJsonSchema = fillWithDefaultSettings(jsonSchema);\n    useJsonSchema = normalizeRxJsonSchema(useJsonSchema);\n    overwritable.deepFreezeWhenDevMode(useJsonSchema);\n\n    const schema = new RxSchema(useJsonSchema);\n    runPluginHooks('createRxSchema', schema);\n    return schema;\n}\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxSchema;\n}\n\n/**\n * Used as helper function the generate the document type out of the schema via typescript.\n * @link https://github.com/pubkey/rxdb/discussions/3467\n */\nexport function toTypedRxJsonSchema<T extends DeepReadonly<RxJsonSchema<any>>>(schema: T): DeepMutable<T> {\n    return schema as any;\n}\n"],"mappings":"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"}