{"version":3,"file":"downstream.js","names":["firstValueFrom","filter","stackCheckpoints","createRevision","ensureNotFalsy","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","now","parseRevision","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","getLastCheckpointDoc","setCheckpoint","writeDocToDocState","getAssumedMasterState","getMetaWriteRow","pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","startReplicationDownstream","downstreamResyncOnce","stats","down","events","canceled","getValue","checkpointQueue","lastCheckpoint","Promise","all","promises","lastTimeMasterChangesRequested","timer","replicationHandler","masterChangesSince","input","pullBatchSize","downResult","documents","length","checkpoint","push","persistFromMaster","openTasks","addNewTask","task","taskWithTime","time","streamQueue","useTasks","active","next","innerTaskWithTime","shift","downstreamProcessChanges","firstSyncDone","sub","masterChangeStream$","subscribe","masterChangeStreamEmit","pipe","unsubscribe","tasks","docsOfAllTasks","forEach","Error","concat","persistenceQueue","nonPersistedFromMaster","docs","docData","docId","primaryPath","downDocsById","useCheckpoint","docIds","Object","keys","writeRowsToFork","writeRowsToForkById","writeRowsToMeta","useMetaWriteRows","forkInstance","findDocumentsById","currentForkState","assumedMasterState","map","forkStateFullDoc","forkStateDocData","undefined","masterState","assumedMaster","metaDocument","isResolvedConflict","_rev","isAssumedMasterEqualToForkStatePromise","conflictHandler","realMasterState","newDocumentState","r","isEqual","isAssumedMasterEqualToForkState","_meta","identifier","height","areStatesExactlyEqualPromise","areStatesExactlyEqual","newForkState","assign","_attachments","lwt","hashFunction","nextRevisionHeight","forkWriteRow","previous","document","bulkWrite","downstreamBulkWriteFlag","forkWriteResult","success","processed","metaInstance","unhandledError","error"],"sources":["../../../src/replication-protocol/downstream.ts"],"sourcesContent":["import {\n    firstValueFrom,\n    filter\n} from 'rxjs';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    RxStorageInstanceReplicationState,\n    BulkWriteRow,\n    BulkWriteRowById,\n    RxStorageReplicationMeta,\n    RxDocumentData,\n    ById,\n    WithDeleted,\n    DocumentsWithCheckpoint\n} from '../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    parseRevision,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID\n} from '../util';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint';\nimport { writeDocToDocState } from './helper';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance';\n\n/**\n * Writes all documents from the master to the fork.\n * The downstream has two operation modes\n * - Sync by iterating over the checkpoints via downstreamResyncOnce()\n * - Sync by listening to the changestream via downstreamProcessChanges()\n * We need this to be able to do initial syncs\n * and still can have fast event based sync when the client is not offline.\n */\nexport function startReplicationDownstream<RxDocType, CheckpointType = any>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    const replicationHandler = state.input.replicationHandler;\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n\n\n    type Task = DocumentsWithCheckpoint<RxDocType, any> | 'RESYNC';\n    type TaskWithTime = {\n        time: number;\n        task: Task;\n    };\n    const openTasks: TaskWithTime[] = [];\n\n\n    function addNewTask(task: Task): void {\n        state.stats.down.addNewTask = state.stats.down.addNewTask + 1;\n        const taskWithTime = {\n            time: timer++,\n            task\n        };\n        openTasks.push(taskWithTime);\n        state.streamQueue.down = state.streamQueue.down\n            .then(() => {\n                const useTasks: Task[] = [];\n                while (openTasks.length > 0) {\n                    state.events.active.down.next(true);\n                    const innerTaskWithTime = ensureNotFalsy(openTasks.shift());\n\n                    /**\n                     * If the task came in before the last time we started the pull\n                     * from the master, then we can drop the task.\n                     */\n                    if (innerTaskWithTime.time < lastTimeMasterChangesRequested) {\n                        continue;\n                    }\n\n                    if (innerTaskWithTime.task === 'RESYNC') {\n                        if (useTasks.length === 0) {\n                            useTasks.push(innerTaskWithTime.task);\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    useTasks.push(innerTaskWithTime.task);\n                }\n\n                if (useTasks.length === 0) return;\n\n                if (useTasks[0] === 'RESYNC') {\n                    return downstreamResyncOnce();\n                } else {\n                    return downstreamProcessChanges(useTasks);\n                }\n            }).then(() => {\n                state.events.active.down.next(false);\n                if (!state.firstSyncDone.down.getValue()) {\n                    state.firstSyncDone.down.next(true);\n                }\n            });\n    }\n    addNewTask('RESYNC');\n\n    /**\n     * If a write on the master happens, we have to trigger the downstream.\n     */\n    const sub = replicationHandler\n        .masterChangeStream$\n        .subscribe((task: Task) => {\n            state.stats.down.masterChangeStreamEmit = state.stats.down.masterChangeStreamEmit + 1;\n            addNewTask(task);\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    /**\n     * For faster performance, we directly start each write\n     * and then await all writes at the end.\n     */\n    let lastTimeMasterChangesRequested: number = -1;\n    async function downstreamResyncOnce() {\n        state.stats.down.downstreamResyncOnce = state.stats.down.downstreamResyncOnce + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'down'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n\n        const promises: Promise<any>[] = [];\n        while (!state.events.canceled.getValue()) {\n            lastTimeMasterChangesRequested = timer++;\n            const downResult = await replicationHandler.masterChangesSince(\n                lastCheckpoint,\n                state.input.pullBatchSize\n            );\n\n            if (downResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, downResult.checkpoint]);\n\n            promises.push(\n                persistFromMaster(\n                    downResult.documents,\n                    lastCheckpoint\n                )\n            );\n\n            /**\n             * By definition we stop pull when the pulled documents\n             * do not fill up the pullBatchSize because we\n             * can assume that the remote has no more documents.\n             */\n            if (downResult.documents.length < state.input.pullBatchSize) {\n                break;\n            }\n\n        }\n        await Promise.all(promises);\n    }\n\n\n    function downstreamProcessChanges(tasks: Task[]) {\n        state.stats.down.downstreamProcessChanges = state.stats.down.downstreamProcessChanges + 1;\n        let docsOfAllTasks: WithDeleted<RxDocType>[] = [];\n        let lastCheckpoint: CheckpointType | undefined = null as any;\n\n        tasks.forEach(task => {\n            if (task === 'RESYNC') {\n                throw new Error('SNH');\n            }\n            docsOfAllTasks = docsOfAllTasks.concat(task.documents);\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, task.checkpoint]);\n        });\n        return persistFromMaster(\n            docsOfAllTasks,\n            ensureNotFalsy(lastCheckpoint)\n        );\n    }\n\n\n    /**\n     * It can happen that the calls to masterChangesSince() or the changeStream()\n     * are way faster then how fast the documents can be persisted.\n     * Therefore we merge all incoming downResults into the nonPersistedFromMaster object\n     * and process them together if possible.\n     * This often bundles up single writes and improves performance\n     * by processing the documents in bulks.\n     */\n    let persistenceQueue = PROMISE_RESOLVE_VOID;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<WithDeleted<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    function persistFromMaster(\n        docs: WithDeleted<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<void> {\n        state.stats.down.persistFromMaster = state.stats.down.persistFromMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistend list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n        /**\n         * Run in the queue\n         * with all open documents from nonPersistedFromMaster.\n         */\n        persistenceQueue = persistenceQueue.then(() => {\n            const downDocsById: ById<WithDeleted<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(downDocsById);\n\n            if (\n                state.events.canceled.getValue() ||\n                docIds.length === 0\n            ) {\n                return PROMISE_RESOLVE_VOID;\n            }\n\n            const writeRowsToFork: BulkWriteRow<RxDocType>[] = [];\n            const writeRowsToForkById: ById<BulkWriteRow<RxDocType>> = {};\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n            const useMetaWriteRows: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n\n            return Promise.all([\n                state.input.forkInstance.findDocumentsById(docIds, true),\n                getAssumedMasterState(\n                    state,\n                    docIds\n                )\n            ]).then(([\n                currentForkState,\n                assumedMasterState\n            ]) => {\n                return Promise.all(\n                    docIds.map(async (docId) => {\n                        const forkStateFullDoc: RxDocumentData<RxDocType> | undefined = currentForkState[docId];\n                        const forkStateDocData: WithDeleted<RxDocType> | undefined = forkStateFullDoc ? writeDocToDocState(forkStateFullDoc) : undefined;\n                        const masterState = downDocsById[docId];\n                        const assumedMaster = assumedMasterState[docId];\n\n                        if (\n                            assumedMaster &&\n                            assumedMaster.metaDocument.isResolvedConflict === forkStateFullDoc._rev\n                        ) {\n                            /**\n                             * The current fork state represents a resolved conflict\n                             * that first must be send to the master in the upstream.\n                             * All conflicts are resolved by the upstream.\n                             */\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n                        const isAssumedMasterEqualToForkStatePromise = !assumedMaster || !forkStateDocData ?\n                            PROMISE_RESOLVE_FALSE :\n                            state.input.conflictHandler({\n                                realMasterState: assumedMaster.docData,\n                                newDocumentState: forkStateDocData\n                            }, 'downstream-check-if-equal-0').then(r => r.isEqual);\n                        let isAssumedMasterEqualToForkState = await isAssumedMasterEqualToForkStatePromise;\n\n                        if (\n                            !isAssumedMasterEqualToForkState &&\n                            (\n                                assumedMaster &&\n                                (assumedMaster.docData as any)._rev &&\n                                forkStateFullDoc._meta[state.input.identifier] &&\n                                parseRevision(forkStateFullDoc._rev).height === forkStateFullDoc._meta[state.input.identifier]\n                            )\n                        ) {\n                            isAssumedMasterEqualToForkState = true;\n                        }\n                        if (\n                            (\n                                forkStateFullDoc &&\n                                assumedMaster &&\n                                isAssumedMasterEqualToForkState === false\n                            ) ||\n                            (\n                                forkStateFullDoc && !assumedMaster\n                            )\n                        ) {\n                            /**\n                             * We have a non-upstream-replicated\n                             * local write to the fork.\n                             * This means we ignore the downstream of this document\n                             * because anyway the upstream will first resolve the conflict.\n                             */\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n\n                        const areStatesExactlyEqualPromise = !forkStateDocData ?\n                            PROMISE_RESOLVE_FALSE :\n                            state.input.conflictHandler({\n                                realMasterState: masterState,\n                                newDocumentState: forkStateDocData\n                            }, 'downstream-check-if-equal-1').then(r => r.isEqual);\n                        const areStatesExactlyEqual = await areStatesExactlyEqualPromise;\n\n                        if (\n                            forkStateDocData &&\n                            areStatesExactlyEqual\n                        ) {\n                            /**\n                             * Document states are exactly equal.\n                             * This can happen when the replication is shut down\n                             * unexpected like when the user goes offline.\n                             *\n                             * Only when the assumedMaster is different from the forkState,\n                             * we have to patch the document in the meta instance.\n                             */\n                            if (\n                                !assumedMaster ||\n                                isAssumedMasterEqualToForkState === false\n                            ) {\n                                useMetaWriteRows.push(\n                                    getMetaWriteRow(\n                                        state,\n                                        forkStateDocData,\n                                        assumedMaster ? assumedMaster.metaDocument : undefined\n                                    )\n                                );\n                            }\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n                        /**\n                         * All other master states need to be written to the forkInstance\n                         * and metaInstance.\n                         */\n                        const newForkState = Object.assign(\n                            {},\n                            masterState,\n                            forkStateFullDoc ? {\n                                _meta: flatClone(forkStateFullDoc._meta),\n                                _attachments: {},\n                                _rev: getDefaultRevision()\n                            } : {\n                                _meta: getDefaultRxDocumentMeta(),\n                                _rev: getDefaultRevision(),\n                                _attachments: {}\n                            });\n\n\n                        /**\n                         * TODO for unknown reason we need\n                         * to manually set the lwt and the _rev here\n                         * to fix the pouchdb tests. This is not required for\n                         * the other RxStorage implementations which means something is wrong.\n                         */\n                        newForkState._meta.lwt = now();\n                        newForkState._rev = (masterState as any)._rev ? (masterState as any)._rev : createRevision(\n                            state.input.hashFunction,\n                            newForkState,\n                            forkStateFullDoc\n                        );\n\n                        /**\n                         * If the remote works with revisions,\n                         * we store the height of the next fork-state revision\n                         * inside of the documents meta data.\n                         * By doing so we can filter it out in the upstream\n                         * and detect the document as being equal to master or not.\n                         * This is used for example in the CouchDB replication plugin.\n                         */\n                        if ((masterState as any)._rev) {\n                            const nextRevisionHeight = !forkStateFullDoc ? 1 : parseRevision(forkStateFullDoc._rev).height + 1;\n                            newForkState._meta[state.input.identifier] = nextRevisionHeight;\n                        }\n\n                        const forkWriteRow = {\n                            previous: forkStateFullDoc,\n                            document: newForkState\n                        };\n\n                        writeRowsToFork.push(forkWriteRow);\n                        writeRowsToForkById[docId] = forkWriteRow;\n                        writeRowsToMeta[docId] = getMetaWriteRow(\n                            state,\n                            masterState,\n                            assumedMaster ? assumedMaster.metaDocument : undefined\n                        );\n                    })\n                );\n            }).then(() => {\n                if (writeRowsToFork.length > 0) {\n                    return state.input.forkInstance.bulkWrite(\n                        writeRowsToFork,\n                        state.downstreamBulkWriteFlag\n                    ).then((forkWriteResult) => {\n                        Object.keys(forkWriteResult.success).forEach((docId) => {\n                            state.events.processed.down.next(writeRowsToForkById[docId]);\n                            useMetaWriteRows.push(writeRowsToMeta[docId]);\n                        });\n                    });\n                }\n            }).then(() => {\n                if (useMetaWriteRows.length > 0) {\n                    return state.input.metaInstance.bulkWrite(\n                        useMetaWriteRows,\n                        'replication-down-write-meta'\n                    );\n                }\n            }).then(() => {\n                /**\n                 * For better performance we do not await checkpoint writes,\n                 * but to ensure order on parallel checkpoint writes,\n                 * we have to use a queue.\n                 */\n                state.checkpointQueue = state.checkpointQueue.then(() => setCheckpoint(\n                    state,\n                    'down',\n                    useCheckpoint\n                ));\n            });\n        }).catch(unhandledError => state.events.error.next(unhandledError));\n        return persistenceQueue;\n    }\n}\n"],"mappings":"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"}