{"version":3,"file":"meta-instance.js","names":["fillWithDefaultSettings","getComposedPrimaryKeyOfDocumentData","getLengthOfPrimaryKey","flatCloneDocWithMeta","getDefaultRevision","createRevision","now","getRxReplicationMetaInstanceSchema","replicatedDocumentsSchema","parentPrimaryKeyLength","metaInstanceSchema","primaryKey","key","fields","separator","type","version","additionalProperties","properties","id","minLength","maxLength","isCheckpoint","enum","itemId","data","isResolvedConflict","required","getAssumedMasterState","state","docIds","input","metaInstance","findDocumentsById","map","docId","useId","schema","then","metaDocs","ret","Object","values","forEach","metaDoc","docData","metaDocument","getMetaWriteRow","newMasterDocState","previous","primaryPath","newMeta","_attachments","_deleted","_rev","_meta","lwt","identifier","document"],"sources":["../../../src/replication-protocol/meta-instance.ts"],"sourcesContent":["import {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData,\n    getLengthOfPrimaryKey\n} from '../rx-schema-helper';\nimport { flatCloneDocWithMeta } from '../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types';\nimport { getDefaultRevision, createRevision, now } from '../plugins/utils';\n\n\nexport function getRxReplicationMetaInstanceSchema(\n    replicatedDocumentsSchema: RxJsonSchema<RxDocumentData<any>>\n): RxJsonSchema<RxDocumentData<RxStorageReplicationMeta>> {\n    const parentPrimaryKeyLength = getLengthOfPrimaryKey(replicatedDocumentsSchema);\n\n    const metaInstanceSchema: RxJsonSchema<RxDocumentData<RxStorageReplicationMeta>> = fillWithDefaultSettings({\n        primaryKey: {\n            key: 'id',\n            fields: [\n                'itemId',\n                'isCheckpoint'\n            ],\n            separator: '|'\n        },\n        type: 'object',\n        version: 0,\n        additionalProperties: false,\n        properties: {\n            id: {\n                type: 'string',\n                minLength: 1,\n                // add +1 for the '|' and +1 for the 'isCheckpoint' flag\n                maxLength: parentPrimaryKeyLength + 2\n            },\n            isCheckpoint: {\n                type: 'string',\n                enum: [\n                    '0',\n                    '1'\n                ],\n                minLength: 1,\n                maxLength: 1\n            },\n            itemId: {\n                type: 'string',\n                maxLength: parentPrimaryKeyLength\n            },\n            data: {\n                type: 'object',\n                additionalProperties: true\n            },\n            isResolvedConflict: {\n                type: 'string'\n            }\n        },\n        required: [\n            'id',\n            'isCheckpoint',\n            'itemId',\n            'data'\n        ]\n    });\n    return metaInstanceSchema;\n}\n\n\n\n/**\n * Returns the document states of what the fork instance\n * assumes to be the latest state on the master instance.\n */\nexport function getAssumedMasterState<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    docIds: string[]\n): Promise<ById<{\n    docData: WithDeleted<RxDocType>;\n    metaDocument: RxDocumentData<RxStorageReplicationMeta>;\n}>> {\n    return state.input.metaInstance.findDocumentsById(\n        docIds.map(docId => {\n            const useId = getComposedPrimaryKeyOfDocumentData(\n                state.input.metaInstance.schema,\n                {\n                    itemId: docId,\n                    isCheckpoint: '0'\n                }\n            );\n            return useId;\n        }),\n        true\n    ).then(metaDocs => {\n        const ret: {\n            [docId: string]: {\n                docData: RxDocumentData<RxDocType>;\n                metaDocument: RxDocumentData<RxStorageReplicationMeta>;\n            };\n        } = {};\n        Object\n            .values(metaDocs)\n            .forEach((metaDoc) => {\n                ret[metaDoc.itemId] = {\n                    docData: metaDoc.data,\n                    metaDocument: metaDoc\n                };\n            });\n\n        return ret;\n    });\n}\n\n\nexport function getMetaWriteRow<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    newMasterDocState: WithDeleted<RxDocType>,\n    previous?: RxDocumentData<RxStorageReplicationMeta>,\n    isResolvedConflict?: string\n): BulkWriteRow<RxStorageReplicationMeta> {\n    const docId: string = (newMasterDocState as any)[state.primaryPath];\n    const newMeta: RxDocumentData<RxStorageReplicationMeta> = previous ? flatCloneDocWithMeta(\n        previous\n    ) : {\n        id: '',\n        isCheckpoint: '0',\n        itemId: docId,\n        data: newMasterDocState,\n        _attachments: {},\n        _deleted: false,\n        _rev: getDefaultRevision(),\n        _meta: {\n            lwt: 0\n        }\n    };\n    newMeta.data = newMasterDocState;\n    newMeta.isResolvedConflict = isResolvedConflict;\n    newMeta._meta.lwt = now();\n    newMeta.id = getComposedPrimaryKeyOfDocumentData(\n        state.input.metaInstance.schema,\n        newMeta\n    );\n    newMeta._rev = createRevision(\n        state.input.identifier,\n        previous\n    );\n    return {\n        previous,\n        document: newMeta\n    };\n}\n"],"mappings":"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"}