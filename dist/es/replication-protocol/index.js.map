{"version":3,"file":"index.js","names":["BehaviorSubject","combineLatest","filter","firstValueFrom","map","Subject","getPrimaryFieldOfPrimaryKey","ensureNotFalsy","PROMISE_RESOLVE_VOID","getCheckpointKey","startReplicationDownstream","docStateToWriteDoc","writeDocToDocState","startReplicationUpstream","pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","cancelRxStorageReplication","replicationState","events","canceled","next","streamQueue","down","up","checkpointQueue","active","complete","processed","resolvedConflicts","awaitRxStorageReplicationIdle","awaitRxStorageReplicationFirstInSync","Promise","all","replicateRxStorageInstance","input","checkpointKey","primaryPath","forkInstance","schema","primaryKey","downstreamBulkWriteFlag","error","stats","addNewTask","downstreamProcessChanges","downstreamResyncOnce","masterChangeStreamEmit","persistFromMaster","forkChangeStreamEmit","persistToMaster","persistToMasterConflictWrites","persistToMasterHadConflicts","processTasks","upstreamInitialSync","firstSyncDone","lastCheckpointDoc","pipe","awaitRxStorageReplicationInSync","rxStorageInstanceToReplicationHandler","instance","conflictHandler","hashFunction","replicationHandler","masterChangeStream$","changeStream","eventBulk","ret","checkpoint","documents","event","documentData","masterChangesSince","batchSize","getChangedDocumentsSince","length","d","masterWrite","rows","rowById","forEach","row","docId","newDocumentState","ids","Object","keys","findDocumentsById","masterDocsState","conflicts","writeRows","entries","id","masterState","push","document","assumedMasterState","realMasterState","isEqual","previous","bulkWrite","values","err","status","Error","documentInDb"],"sources":["../../../src/replication-protocol/index.ts"],"sourcesContent":["/**\n * These files contain the replication protocol.\n * It can be used to replicated RxStorageInstances or RxCollections\n * or even to do a client(s)-server replication.\n */\n\n\nimport {\n    BehaviorSubject,\n    combineLatest,\n    filter,\n    firstValueFrom,\n    map,\n    Subject\n} from 'rxjs';\nimport {\n    getPrimaryFieldOfPrimaryKey\n} from '../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    DocumentsWithCheckpoint,\n    HashFunction,\n    RxConflictHandler,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    WithDeleted\n} from '../types';\nimport {\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID\n} from '../util';\nimport {\n    getCheckpointKey\n} from './checkpoint';\nimport { startReplicationDownstream } from './downstream';\nimport { docStateToWriteDoc, writeDocToDocState } from './helper';\nimport { startReplicationUpstream } from './upstream';\n\n\nexport * from './checkpoint';\nexport * from './downstream';\nexport * from './upstream';\nexport * from './meta-instance';\nexport * from './conflicts';\nexport * from './helper';\n\n\nexport function replicateRxStorageInstance<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): RxStorageInstanceReplicationState<RxDocType> {\n    const checkpointKey = getCheckpointKey(input);\n    const state: RxStorageInstanceReplicationState<RxDocType> = {\n        primaryPath: getPrimaryFieldOfPrimaryKey(input.forkInstance.schema.primaryKey),\n        input,\n        checkpointKey,\n        downstreamBulkWriteFlag: 'replication-downstream-' + checkpointKey,\n        events: {\n            canceled: new BehaviorSubject<boolean>(false),\n            active: {\n                down: new BehaviorSubject<boolean>(true),\n                up: new BehaviorSubject<boolean>(true)\n            },\n            processed: {\n                down: new Subject(),\n                up: new Subject()\n            },\n            resolvedConflicts: new Subject(),\n            error: new Subject()\n        },\n        stats: {\n            down: {\n                addNewTask: 0,\n                downstreamProcessChanges: 0,\n                downstreamResyncOnce: 0,\n                masterChangeStreamEmit: 0,\n                persistFromMaster: 0\n            },\n            up: {\n                forkChangeStreamEmit: 0,\n                persistToMaster: 0,\n                persistToMasterConflictWrites: 0,\n                persistToMasterHadConflicts: 0,\n                processTasks: 0,\n                upstreamInitialSync: 0\n            }\n        },\n        firstSyncDone: {\n            down: new BehaviorSubject<boolean>(false),\n            up: new BehaviorSubject<boolean>(false)\n        },\n        streamQueue: {\n            down: PROMISE_RESOLVE_VOID,\n            up: PROMISE_RESOLVE_VOID\n        },\n        checkpointQueue: PROMISE_RESOLVE_VOID,\n        lastCheckpointDoc: {}\n    };\n\n    startReplicationDownstream(state);\n    startReplicationUpstream(state);\n    return state;\n}\n\nexport function awaitRxStorageReplicationFirstInSync(\n    state: RxStorageInstanceReplicationState<any>\n): Promise<void> {\n    return firstValueFrom(\n        combineLatest([\n            state.firstSyncDone.down.pipe(\n                filter(v => !!v)\n            ),\n            state.firstSyncDone.up.pipe(\n                filter(v => !!v)\n            )\n        ])\n    ).then(() => { });\n}\n\nexport function awaitRxStorageReplicationInSync(\n    replicationState: RxStorageInstanceReplicationState<any>\n) {\n    return Promise.all([\n        replicationState.streamQueue.up,\n        replicationState.streamQueue.down\n    ]);\n}\n\n\nexport async function awaitRxStorageReplicationIdle(\n    state: RxStorageInstanceReplicationState<any>\n) {\n    await awaitRxStorageReplicationFirstInSync(state);\n    while (true) {\n        const { down, up } = state.streamQueue;\n        await Promise.all([\n            up,\n            down\n        ]);\n        /**\n         * If the Promises have not been reasigned\n         * after awaiting them, we know that the replication\n         * is in idle state at this point in time.\n         */\n        if (\n            down === state.streamQueue.down &&\n            up === state.streamQueue.up\n        ) {\n            return;\n        }\n    }\n}\n\n\nexport function rxStorageInstanceToReplicationHandler<RxDocType, MasterCheckpointType>(\n    instance: RxStorageInstance<RxDocType, any, any, MasterCheckpointType>,\n    conflictHandler: RxConflictHandler<RxDocType>,\n    hashFunction: HashFunction\n): RxReplicationHandler<RxDocType, MasterCheckpointType> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(instance.schema.primaryKey);\n    const replicationHandler: RxReplicationHandler<RxDocType, MasterCheckpointType> = {\n        masterChangeStream$: instance.changeStream().pipe(\n            map(eventBulk => {\n                const ret: DocumentsWithCheckpoint<RxDocType, MasterCheckpointType> = {\n                    checkpoint: eventBulk.checkpoint,\n                    documents: eventBulk.events.map(event => {\n                        return writeDocToDocState(ensureNotFalsy(event.documentData) as any);\n                    })\n                };\n                return ret;\n            })\n        ),\n        masterChangesSince(\n            checkpoint,\n            batchSize\n        ) {\n            return instance.getChangedDocumentsSince(\n                batchSize,\n                checkpoint\n            ).then(result => {\n                return {\n                    checkpoint: result.documents.length > 0 ? result.checkpoint : checkpoint,\n                    documents: result.documents.map(d => writeDocToDocState(d))\n                }\n            })\n        },\n        async masterWrite(\n            rows\n        ) {\n            const rowById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            rows.forEach(row => {\n                const docId: string = (row.newDocumentState as any)[primaryPath];\n                rowById[docId] = row;\n            });\n            const ids = Object.keys(rowById);\n\n            const masterDocsState = await instance.findDocumentsById(\n                ids,\n                true\n            );\n            const conflicts: WithDeleted<RxDocType>[] = [];\n            const writeRows: BulkWriteRow<RxDocType>[] = [];\n            await Promise.all(\n                Object.entries(rowById)\n                    .map(async ([id, row]) => {\n                        const masterState = masterDocsState[id];\n                        if (!masterState) {\n                            writeRows.push({\n                                document: docStateToWriteDoc(hashFunction, row.newDocumentState)\n                            });\n                        } else if (\n                            masterState &&\n                            !row.assumedMasterState\n                        ) {\n                            conflicts.push(writeDocToDocState(masterState));\n                        } else if (\n                            (await conflictHandler({\n                                realMasterState: writeDocToDocState(masterState),\n                                newDocumentState: ensureNotFalsy(row.assumedMasterState)\n                            }, 'rxStorageInstanceToReplicationHandler-masterWrite')).isEqual === true\n                        ) {\n                            writeRows.push({\n                                previous: masterState,\n                                document: docStateToWriteDoc(hashFunction, row.newDocumentState, masterState)\n                            });\n                        } else {\n                            conflicts.push(writeDocToDocState(masterState));\n                        }\n                    })\n            );\n\n\n            if (writeRows.length > 0) {\n                const result = await instance.bulkWrite(\n                    writeRows,\n                    'replication-master-write'\n                );\n                Object\n                    .values(result.error)\n                    .forEach(err => {\n                        if (err.status !== 409) {\n                            throw new Error('non conflict error');\n                        } else {\n                            conflicts.push(\n                                writeDocToDocState(ensureNotFalsy(err.documentInDb))\n                            );\n                        }\n                    });\n            }\n            return conflicts;\n        }\n    };\n\n    return replicationHandler;\n}\n\n\nexport async function cancelRxStorageReplication(\n    replicationState: RxStorageInstanceReplicationState<any>\n): Promise<void> {\n    replicationState.events.canceled.next(true);\n\n    await replicationState.streamQueue.down;\n    await replicationState.streamQueue.up;\n    await replicationState.checkpointQueue;\n\n    replicationState.events.active.up.complete();\n    replicationState.events.active.down.complete();\n    replicationState.events.processed.up.complete();\n    replicationState.events.processed.down.complete();\n    replicationState.events.resolvedConflicts.complete();\n}\n"],"mappings":"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"}