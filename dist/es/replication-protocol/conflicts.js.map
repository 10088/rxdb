{"version":3,"file":"conflicts.js","names":["deepEqual","getDefaultRevision","createRevision","now","flatClone","resolveConflictError","state","input","forkState","conflictHandler","conflictHandlerOutput","isEqual","undefined","resolvedDoc","Object","assign","documentData","_meta","_rev","_attachments","lwt","hashFunction","output","defaultConflictHandler","i","_context","newDocumentState","realMasterState","Promise","resolve"],"sources":["../../../src/replication-protocol/conflicts.ts"],"sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport type {\n    RxConflictHandler,\n    RxConflictHandlerInput,\n    RxConflictHandlerOutput,\n    RxDocumentData,\n    RxStorageInstanceReplicationState\n} from '../types';\nimport {\n    getDefaultRevision,\n    createRevision,\n    now,\n    flatClone\n} from '../util';\n\nexport const defaultConflictHandler: RxConflictHandler<any> = function (\n    i: RxConflictHandlerInput<any>,\n    _context: string\n): Promise<RxConflictHandlerOutput<any>> {\n    /**\n     * If the documents are deep equal,\n     * we have no conflict.\n     * On your custom conflict handler you might only\n     * check some properties, like the updatedAt time,\n     * for better performance, because deepEqual is expensive.\n     */\n    if (deepEqual(\n        i.newDocumentState,\n        i.realMasterState\n    )) {\n        return Promise.resolve({\n            isEqual: true\n        });\n    }\n\n    /**\n     * The default conflict handler will always\n     * drop the fork state and use the master state instead.\n     */\n    return Promise.resolve({\n        isEqual: false,\n        documentData: i.realMasterState\n    });\n};\n\n\n/**\n * Resolves a conflict error or determines that the given document states are equal.\n * Returns the resolved document that must be written to the fork.\n * Then the new document state can be pushed upstream.\n * If document is not in conflict, returns undefined.\n * If error is non-409, it throws an error.\n * Conflicts are only solved in the upstream, never in the downstream.\n */\nexport async function resolveConflictError<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    input: RxConflictHandlerInput<RxDocType>,\n    forkState: RxDocumentData<RxDocType>\n): Promise<{\n        resolvedDoc: RxDocumentData<RxDocType>;\n        output: RxConflictHandlerOutput<RxDocType>;\n    } | undefined> {\n    const conflictHandler: RxConflictHandler<RxDocType> = state.input.conflictHandler;\n    const conflictHandlerOutput = await conflictHandler(input, 'replication-resolve-conflict');\n\n    if (conflictHandlerOutput.isEqual) {\n        /**\n         * Documents are equal,\n         * so this is not a conflict -> do nothing.\n         */\n        return undefined;\n    } else {\n        /**\n         * We have a resolved conflict,\n         * use the resolved document data.\n         */\n        const resolvedDoc: RxDocumentData<RxDocType> = Object.assign(\n            {},\n            conflictHandlerOutput.documentData,\n            {\n                /**\n                 * Because the resolved conflict is written to the fork,\n                 * we have to keep/update the forks _meta data, not the masters.\n                 */\n                _meta: flatClone(forkState._meta),\n                _rev: getDefaultRevision(),\n                _attachments: flatClone(forkState._attachments)\n            }\n        );\n        resolvedDoc._meta.lwt = now();\n        resolvedDoc._rev = createRevision(\n            state.input.hashFunction,\n            resolvedDoc,\n            forkState\n        );\n        return {\n            resolvedDoc,\n            output: conflictHandlerOutput\n        };\n    }\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,iBAAiB;AAQvC,SACIC,kBAAkB,EAClBC,cAAc,EACdC,GAAG,EACHC,SAAS,QACN,SAAS;AAiChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAsBC,oBAAoB,YAApBA,oBAAoB,CACtCC,KAAmD,EACnDC,KAAwC,EACxCC,SAAoC;EAAA,IAIrB;IACf,IAAMC,eAA6C,GAAGH,KAAK,CAACC,KAAK,CAACE,eAAe;IAAC,uBAC9CA,eAAe,CAACF,KAAK,EAAE,8BAA8B,CAAC,iBAApFG,qBAAqB;MAAA,IAEvBA,qBAAqB,CAACC,OAAO;QAC7B;AACR;AACA;AACA;QACQ,OAAOC,SAAS;MAAC;QAEjB;AACR;AACA;AACA;QACQ,IAAMC,WAAsC,GAAGC,MAAM,CAACC,MAAM,CACxD,CAAC,CAAC,EACFL,qBAAqB,CAACM,YAAY,EAClC;UACI;AAChB;AACA;AACA;UACgBC,KAAK,EAAEb,SAAS,CAACI,SAAS,CAACS,KAAK,CAAC;UACjCC,IAAI,EAAEjB,kBAAkB,EAAE;UAC1BkB,YAAY,EAAEf,SAAS,CAACI,SAAS,CAACW,YAAY;QAClD,CAAC,CACJ;QACDN,WAAW,CAACI,KAAK,CAACG,GAAG,GAAGjB,GAAG,EAAE;QAC7BU,WAAW,CAACK,IAAI,GAAGhB,cAAc,CAC7BI,KAAK,CAACC,KAAK,CAACc,YAAY,EACxBR,WAAW,EACXL,SAAS,CACZ;QACD,OAAO;UACHK,WAAW,EAAXA,WAAW;UACXS,MAAM,EAAEZ;QACZ,CAAC;MAAC;IAAA;EAEV,CAAC;IAAA;EAAA;AAAA;AArFD,OAAO,IAAMa,sBAA8C,GAAG,SAAjDA,sBAA8C,CACvDC,CAA8B,EAC9BC,QAAgB,EACqB;EACrC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAIzB,SAAS,CACTwB,CAAC,CAACE,gBAAgB,EAClBF,CAAC,CAACG,eAAe,CACpB,EAAE;IACC,OAAOC,OAAO,CAACC,OAAO,CAAC;MACnBlB,OAAO,EAAE;IACb,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;EACI,OAAOiB,OAAO,CAACC,OAAO,CAAC;IACnBlB,OAAO,EAAE,KAAK;IACdK,YAAY,EAAEQ,CAAC,CAACG;EACpB,CAAC,CAAC;AACN,CAAC"}