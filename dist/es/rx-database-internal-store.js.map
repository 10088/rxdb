{"version":3,"sources":["../../src/rx-database-internal-store.ts"],"names":["getComposedPrimaryKeyOfDocumentData","getSingleDocument","writeSingle","createRevision","getDefaultRevision","getDefaultRxDocumentMeta","randomCouchString","body","recover","result","e","then","ensureStorageTokenExists","rxDatabase","storageTokenDocumentId","getPrimaryKeyOfInternalDocument","STORAGE_TOKEN_DOCUMENT_KEY","INTERNAL_CONTEXT_STORAGE_TOKEN","storageToken","docData","id","context","key","data","token","_deleted","_meta","_rev","_attachments","internalStore","document","err","isError","status","useStorageTokenDoc","getAllCollectionDocuments","storageInstance","storage","getAllQueryPrepared","statics","prepareQuery","schema","selector","INTERNAL_CONTEXT_COLLECTION","sort","query","queryResult","allDocs","documents","INTERNAL_CONTEXT_ENCRYPTION","INTERNAL_CONTEXT_REPLICATION_PRIMITIVES","INTERNAL_STORE_SCHEMA","version","primaryKey","fields","separator","type","properties","additionalProperties","indexes","required"],"mappings":"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","sourcesContent":["import { getComposedPrimaryKeyOfDocumentData } from './rx-schema-helper';\nimport { getSingleDocument, writeSingle } from './rx-storage-helper';\nimport type {\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageInstance\n} from './types';\nimport { createRevision, getDefaultRevision, getDefaultRxDocumentMeta, randomCouchString } from './util';\n\nexport const INTERNAL_CONTEXT_COLLECTION = 'collection';\nexport const INTERNAL_CONTEXT_STORAGE_TOKEN = 'storage-token';\nexport const INTERNAL_CONTEXT_ENCRYPTION = 'plugin-encryption';\nexport const INTERNAL_CONTEXT_REPLICATION_PRIMITIVES = 'plugin-replication-primitives';\n\nexport const INTERNAL_STORE_SCHEMA: RxJsonSchema<InternalStoreDocType<any>> = {\n    version: 0,\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'context',\n            'key'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string'\n        },\n        key: {\n            type: 'string'\n        },\n        context: {\n            type: 'string',\n            enum: [\n                INTERNAL_CONTEXT_COLLECTION,\n                INTERNAL_CONTEXT_STORAGE_TOKEN,\n                INTERNAL_CONTEXT_ENCRYPTION,\n                INTERNAL_CONTEXT_REPLICATION_PRIMITIVES,\n                'OTHER'\n            ]\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        }\n    },\n    indexes: [],\n    required: [\n        'key',\n        'context',\n        'data'\n    ],\n    additionalProperties: false\n};\n\nexport type InternalStoreDocType<Data = any> = {\n    id: string;\n    key: string;\n    context: string;\n    data: Data;\n}\n\n/**\n * Stores information about the collections.\n * The collection.name is the 'key' value.\n */\nexport type InternalStoreStorageTokenDocType = InternalStoreDocType<{\n    token: string;\n}>;\n\n/**\n * Stores information about the collections.\n * The collection.name is the 'key' value.\n */\nexport type InternalStoreCollectionDocType = InternalStoreDocType<{\n    schema: RxJsonSchema<any>;\n    schemaHash: string;\n    version: number;\n}>;\n\n\nexport function getPrimaryKeyOfInternalDocument(\n    key: string,\n    context: string\n): string {\n    return getComposedPrimaryKeyOfDocumentData<InternalStoreDocType>(\n        INTERNAL_STORE_SCHEMA,\n        {\n            key,\n            context\n        }\n    )\n}\n\n/**\n * Returns all internal documents\n * with context 'collection'\n */\nexport async function getAllCollectionDocuments(\n    storageInstance: RxStorageInstance<InternalStoreDocType<any>, any, any>,\n    storage: RxStorage<any, any>\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {\n                context: INTERNAL_CONTEXT_COLLECTION\n            },\n            sort: [{ id: 'asc' }]\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport const STORAGE_TOKEN_DOCUMENT_KEY = 'storageToken';\nexport async function ensureStorageTokenExists<Collections = any>(rxDatabase: RxDatabase<Collections>): Promise<string> {\n    const storageTokenDocumentId = getPrimaryKeyOfInternalDocument(\n        STORAGE_TOKEN_DOCUMENT_KEY,\n        INTERNAL_CONTEXT_STORAGE_TOKEN\n    );\n\n    /**\n     * To have less read-write cycles,\n     * we just try to insert a new document\n     * and only fetch the existing one if a conflict happened.\n     */\n    const storageToken = randomCouchString(10);\n    try {\n        const docData = {\n            id: storageTokenDocumentId,\n            context: INTERNAL_CONTEXT_STORAGE_TOKEN,\n            key: STORAGE_TOKEN_DOCUMENT_KEY,\n            data: {\n                token: storageToken\n            },\n            _deleted: false,\n            _meta: getDefaultRxDocumentMeta(),\n            _rev: getDefaultRevision(),\n            _attachments: {}\n        };\n        docData._rev = createRevision(docData);\n        await writeSingle<InternalStoreStorageTokenDocType>(\n            rxDatabase.internalStore,\n            {\n                document: docData\n            }\n        );\n        return storageToken;\n    } catch (err: RxStorageBulkWriteError<InternalStoreStorageTokenDocType> | any) {\n        /**\n         * If we get a 409 error,\n         * it means another instance already inserted the storage token.\n         * So we get that token from the database and return that one.\n         */\n        if (\n            err.isError &&\n            (err as RxStorageBulkWriteError<InternalStoreStorageTokenDocType>).status === 409\n        ) {\n            const useStorageTokenDoc = await getSingleDocument<InternalStoreStorageTokenDocType>(\n                rxDatabase.internalStore,\n                storageTokenDocumentId\n            );\n            if (useStorageTokenDoc) {\n                return useStorageTokenDoc.data.token;\n            }\n        }\n        throw err;\n    }\n}\n"],"file":"rx-database-internal-store.js"}