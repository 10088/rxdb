{"version":3,"file":"rx-database-internal-store.js","names":["fillWithDefaultSettings","getComposedPrimaryKeyOfDocumentData","writeSingle","createRevision","getDefaultRevision","now","randomCouchString","body","recover","result","e","then","ensureStorageTokenExists","rxDatabase","storageTokenDocumentId","getPrimaryKeyOfInternalDocument","STORAGE_TOKEN_DOCUMENT_KEY","INTERNAL_CONTEXT_STORAGE_TOKEN","storageToken","docData","id","context","key","data","token","_deleted","_meta","lwt","_rev","_attachments","internalStore","document","err","isError","status","storageTokenDocInDb","documentInDb","getAllCollectionDocuments","storageInstance","storage","getAllQueryPrepared","statics","prepareQuery","schema","selector","INTERNAL_CONTEXT_COLLECTION","sort","skip","query","queryResult","allDocs","documents","INTERNAL_CONTEXT_ENCRYPTION","INTERNAL_CONTEXT_REPLICATION_PRIMITIVES","INTERNAL_STORE_SCHEMA","version","primaryKey","fields","separator","type","properties","maxLength","additionalProperties","indexes","required","sharding","shards","mode"],"sources":["../../src/rx-database-internal-store.ts"],"sourcesContent":["import { fillWithDefaultSettings, getComposedPrimaryKeyOfDocumentData } from './rx-schema-helper';\nimport { writeSingle } from './rx-storage-helper';\nimport type {\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageInstance\n} from './types';\nimport { createRevision, getDefaultRevision, now, randomCouchString } from './util';\n\nexport const INTERNAL_CONTEXT_COLLECTION = 'collection';\nexport const INTERNAL_CONTEXT_STORAGE_TOKEN = 'storage-token';\nexport const INTERNAL_CONTEXT_ENCRYPTION = 'plugin-encryption';\nexport const INTERNAL_CONTEXT_REPLICATION_PRIMITIVES = 'plugin-replication-primitives';\n\nexport const INTERNAL_STORE_SCHEMA: RxJsonSchema<RxDocumentData<InternalStoreDocType<any>>> = fillWithDefaultSettings({\n    version: 0,\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'context',\n            'key'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string',\n            maxLength: 200\n        },\n        key: {\n            type: 'string'\n        },\n        context: {\n            type: 'string',\n            enum: [\n                INTERNAL_CONTEXT_COLLECTION,\n                INTERNAL_CONTEXT_STORAGE_TOKEN,\n                INTERNAL_CONTEXT_ENCRYPTION,\n                INTERNAL_CONTEXT_REPLICATION_PRIMITIVES,\n                'OTHER'\n            ]\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        }\n    },\n    indexes: [],\n    required: [\n        'key',\n        'context',\n        'data'\n    ],\n    additionalProperties: false,\n    /**\n     * If the sharding plugin is used,\n     * it must not shard on the internal RxStorageInstance\n     * because that one anyway has only a small amount of documents\n     * and also its creation is in the hot path of the initial page load,\n     * so we should spend less time creating multiple RxStorageInstances.\n     */\n    sharding: {\n        shards: 1,\n        mode: 'collection'\n    }\n});\n\nexport type InternalStoreDocType<Data = any> = {\n    id: string;\n    key: string;\n    context: string;\n    data: Data;\n}\n\n/**\n * Stores information about the collections.\n * The collection.name is the 'key' value.\n */\nexport type InternalStoreStorageTokenDocType = InternalStoreDocType<{\n    token: string;\n}>;\n\n/**\n * Stores information about the collections.\n * The collection.name is the 'key' value.\n */\nexport type InternalStoreCollectionDocType = InternalStoreDocType<{\n    /**\n     * Plain name of the collection\n     */\n    name: string;\n    schema: RxJsonSchema<any>;\n    schemaHash: string;\n    version: number;\n}>;\n\n\nexport function getPrimaryKeyOfInternalDocument(\n    key: string,\n    context: string\n): string {\n    return getComposedPrimaryKeyOfDocumentData<InternalStoreDocType>(\n        INTERNAL_STORE_SCHEMA,\n        {\n            key,\n            context\n        }\n    )\n}\n\n/**\n * Returns all internal documents\n * with context 'collection'\n */\nexport async function getAllCollectionDocuments(\n    storageInstance: RxStorageInstance<InternalStoreDocType<any>, any, any>,\n    storage: RxStorage<any, any>\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {\n                context: INTERNAL_CONTEXT_COLLECTION\n            },\n            sort: [{ id: 'asc' }],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport const STORAGE_TOKEN_DOCUMENT_KEY = 'storageToken';\nexport async function ensureStorageTokenExists<Collections = any>(rxDatabase: RxDatabase<Collections>): Promise<string> {\n    const storageTokenDocumentId = getPrimaryKeyOfInternalDocument(\n        STORAGE_TOKEN_DOCUMENT_KEY,\n        INTERNAL_CONTEXT_STORAGE_TOKEN\n    );\n\n    /**\n     * To have less read-write cycles,\n     * we just try to insert a new document\n     * and only fetch the existing one if a conflict happened.\n     */\n    const storageToken = randomCouchString(10);\n    try {\n        const docData = {\n            id: storageTokenDocumentId,\n            context: INTERNAL_CONTEXT_STORAGE_TOKEN,\n            key: STORAGE_TOKEN_DOCUMENT_KEY,\n            data: {\n                token: storageToken\n            },\n            _deleted: false,\n            _meta: {\n                lwt: now()\n            },\n            _rev: getDefaultRevision(),\n            _attachments: {}\n        };\n        docData._rev = createRevision(docData);\n        await writeSingle<InternalStoreStorageTokenDocType>(\n            rxDatabase.internalStore,\n            {\n                document: docData\n            }\n        );\n        return storageToken;\n    } catch (err: RxStorageBulkWriteError<InternalStoreStorageTokenDocType> | any) {\n        /**\n         * If we get a 409 error,\n         * it means another instance already inserted the storage token.\n         * So we get that token from the database and return that one.\n         */\n        if (\n            err.isError &&\n            (err as RxStorageBulkWriteError<InternalStoreStorageTokenDocType>).status === 409\n        ) {\n            const storageTokenDocInDb = (err as RxStorageBulkWriteError<InternalStoreStorageTokenDocType>).documentInDb;\n            return storageTokenDocInDb.data.token;\n        }\n        throw err;\n    }\n}\n"],"mappings":"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"}