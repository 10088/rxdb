{"version":3,"file":"rx-storage-multiinstance.js","names":["Subject","mergeWith","BroadcastChannel","removeBroadcastChannelReference","databaseInstanceToken","refObject","state","BROADCAST_CHANNEL_BY_TOKEN","get","refs","size","bc","close","Map","getBroadcastChannelReference","databaseName","Set","set","add","addRxStorageMultiInstanceSupport","instanceCreationParams","instance","providedBroadcastChannel","multiInstance","storage","broadcastChannel","changesFromOtherInstances$","eventListener","msg","storageName","name","collectionName","version","schema","next","eventBulk","addEventListener","oldChangestream$","changeStream","closed","sub","subscribe","postMessage","asObservable","pipe","oldClose","bind","unsubscribe","removeEventListener","oldRemove","remove"],"sources":["../../src/rx-storage-multiinstance.ts"],"sourcesContent":["/**\n * When a persistend RxStorage is used in more the one JavaScript process,\n * the even stream of the changestream() function must be broadcasted to the other\n * RxStorageInstances of the same databaseName+collectionName.\n * \n * In the past this was done by RxDB but it makes more sense to do this\n * at the RxStorage level so that the broadcasting etc can all happen inside of a WebWorker\n * and not on the main thread.\n * Also it makes it less complex to stack up different RxStorages onto each other\n * like what we do with the in-memory plugin.\n * \n * This is intened to be used inside of createStorageInstance() of a storage.\n * Do not use this if the storage anyway broadcasts the events like when using MongoDB\n * or in the future W3C might introduce a way to listen to IndexedDB changes.\n */\n\nimport { Observable, Subject } from 'rxjs';\nimport { mergeWith } from 'rxjs/operators';\nimport type {\n    EventBulk,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from './types';\n\nimport {\n    BroadcastChannel\n} from 'broadcast-channel';\n\n/**\n * The broadcast-channel is reused by the databaseInstanceToken.\n * This is required so that it is easy to simulate multi-tab usage\n * in the test where different instances of the same RxDatabase must\n * have different broadcast channels.\n * But also it ensures that for each RxDatabase we only create a single\n * broadcast channel that can even be reused in the leader election plugin.\n * \n * TODO at the end of the unit tests,\n * we should ensure that all channels are closed and cleaned up.\n * Otherwise we have forgot something.\n */\nexport const BROADCAST_CHANNEL_BY_TOKEN: Map<string, {\n    bc: BroadcastChannel<RxStorageMultiInstanceBroadcastType>;\n    /**\n     * Contains all context objects that currently use the channel.\n     * If this becomes empty, we can close the channel\n     */\n    refs: Set<any>;\n}> = new Map();\n\n\nexport type RxStorageMultiInstanceBroadcastType = {\n    storageName: string;\n    collectionName: string;\n    /**\n     * collection.schema.version\n     */\n    version: number;\n    databaseName: string;\n    eventBulk: EventBulk<any, any>;\n}\n\nexport function getBroadcastChannelReference(\n    databaseInstanceToken: string,\n    databaseName: string,\n    refObject: any\n): BroadcastChannel<RxStorageMultiInstanceBroadcastType> {\n    let state = BROADCAST_CHANNEL_BY_TOKEN.get(databaseInstanceToken);\n    if (!state) {\n        state = {\n            /**\n             * We have to use the databaseName instead of the databaseInstanceToken\n             * in the BroadcastChannel name because different instances must end with the same\n             * channel name to be able to broadcast messages between each other.\n             */\n            bc: new BroadcastChannel('RxDB:' + databaseName),\n            refs: new Set<any>()\n        };\n        BROADCAST_CHANNEL_BY_TOKEN.set(databaseInstanceToken, state);\n    }\n    state.refs.add(refObject);\n    return state.bc;\n}\n\nexport async function removeBroadcastChannelReference(\n    databaseInstanceToken: string,\n    refObject: any\n) {\n    const state = BROADCAST_CHANNEL_BY_TOKEN.get(databaseInstanceToken);\n    if (!state) {\n        return;\n    }\n    state.refs.delete(refObject);\n    if (state.refs.size === 0) {\n        BROADCAST_CHANNEL_BY_TOKEN.delete(databaseInstanceToken);\n        return state.bc.close();\n    }\n}\n\n\nexport function addRxStorageMultiInstanceSupport<RxDocType>(\n    instanceCreationParams: RxStorageInstanceCreationParams<RxDocType, any>,\n    instance: RxStorageInstance<RxDocType, any, any>,\n    /**\n     * If provided, that channel will be used\n     * instead of an own one.\n     */\n    providedBroadcastChannel?: BroadcastChannel<any>\n) {\n    if (!instanceCreationParams.multiInstance) {\n        return;\n    }\n\n    const storage = instance.storage;\n\n    type Emit = EventBulk<RxStorageChangeEvent<RxDocType>, any>;\n\n    const broadcastChannel = providedBroadcastChannel ?\n        providedBroadcastChannel :\n        getBroadcastChannelReference(\n            instanceCreationParams.databaseInstanceToken,\n            instance.databaseName,\n            instance\n        );\n\n    const changesFromOtherInstances$: Subject<Emit> = new Subject();\n\n\n    const eventListener = (msg: RxStorageMultiInstanceBroadcastType) => {\n        if (\n            msg.storageName === storage.name &&\n            msg.databaseName === instanceCreationParams.databaseName &&\n            msg.collectionName === instanceCreationParams.collectionName &&\n            msg.version === instanceCreationParams.schema.version\n        ) {\n            changesFromOtherInstances$.next(msg.eventBulk);\n        }\n    };\n    broadcastChannel.addEventListener('message', eventListener);\n\n    const oldChangestream$ = instance.changeStream();\n\n    let closed = false;\n    const sub = oldChangestream$.subscribe(eventBulk => {\n        if (closed) {\n            return;\n        }\n        broadcastChannel.postMessage({\n            storageName: storage.name,\n            databaseName: instanceCreationParams.databaseName,\n            collectionName: instanceCreationParams.collectionName,\n            version: instanceCreationParams.schema.version,\n            eventBulk\n        });\n    });\n\n    instance.changeStream = function (): Observable<Emit> {\n        return changesFromOtherInstances$.asObservable().pipe(\n            mergeWith(oldChangestream$)\n        );\n    }\n\n    const oldClose = instance.close.bind(instance);\n    instance.close = async function () {\n        closed = true;\n        sub.unsubscribe();\n        broadcastChannel.removeEventListener('message', eventListener);\n        if (!providedBroadcastChannel) {\n            await removeBroadcastChannelReference(\n                instanceCreationParams.databaseInstanceToken,\n                instance\n            );\n        }\n        return oldClose();\n    }\n\n    const oldRemove = instance.remove.bind(instance);\n    instance.remove = async function () {\n        closed = true;\n        sub.unsubscribe();\n        broadcastChannel.removeEventListener('message', eventListener);\n        if (!providedBroadcastChannel) {\n            await removeBroadcastChannelReference(\n                instanceCreationParams.databaseInstanceToken,\n                instance\n            );\n        }\n        return oldRemove();\n    }\n}\n"],"mappings":"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"}