{"version":3,"file":"rx-change-event.d.js","names":[],"sources":["../../../src/types/rx-change-event.d.ts"],"sourcesContent":["import { EventBulk, RxDocumentData } from './rx-storage';\nimport { DeepReadonly } from './util';\n\nexport type RxChangeEventBase = {\n    readonly eventId: string;\n    readonly documentId: string;\n\n    // optional, does not exist on changes to localdocs of the database\n    readonly collectionName?: string;\n\n    // true if the event is about a local document, false if not.\n    readonly isLocal: boolean;\n\n    /**\n     * Unix timestamp in milliseconds of when the operation was triggered\n     * and when it was finished.\n     * This is optional because we do not have this time\n     * for events that come from the internal storage instance changestream.\n     */\n    readonly startTime?: number;\n    readonly endTime?: number;\n}\n\nexport type RxChangeEventInsert<DocType> = RxChangeEventBase & {\n    operation: 'INSERT';\n    documentData: DeepReadonly<RxDocumentData<DocType>>;\n    previousDocumentData: null;\n}\n\nexport type RxChangeEventUpdate<DocType> = RxChangeEventBase & {\n    operation: 'UPDATE';\n    documentData: DeepReadonly<RxDocumentData<DocType>>;\n    previousDocumentData: DeepReadonly<RxDocumentData<DocType>> | 'UNKNOWN';\n}\n\nexport type RxChangeEventDelete<DocType> = RxChangeEventBase & {\n    operation: 'DELETE';\n    documentData: null;\n    previousDocumentData: DeepReadonly<RxDocumentData<DocType>> | 'UNKNOWN';\n}\n\nexport type RxChangeEvent<DocType> = RxChangeEventInsert<DocType> | RxChangeEventUpdate<DocType> | RxChangeEventDelete<DocType>;\n\n/**\n * Internally, all events are processed via bulks\n * to save performance when sending them over a transport layer\n * or de-duplicating them.\n */\nexport type RxChangeEventBulk<DocType> = EventBulk<RxChangeEvent<DocType>> & {\n    // optional, not given for changes to local documents of a RxDatabase.\n    collectionName?: string;\n    /**\n     * Token of the database instance that created the events.\n     * Used to determine if the events came from another instance over the BroadcastChannel.\n     */\n    databaseToken: string;\n    /**\n     * The storageToken of the RxDatabase that created the events.\n     * Used to ensure we do not process events of other RxDatabases.\n     */\n    storageToken: string;\n    /**\n     * If true, the events belong to some internal stuff like from plugins.\n     * Internal events are not emitted to the outside over the .$ Observables.\n     */\n    internal: boolean;\n}\n"],"mappings":""}