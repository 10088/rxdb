{"version":3,"file":"rx-storage-helper.js","names":["map","runPluginHooks","overwritable","newRxError","fillPrimaryKey","getPrimaryFieldOfPrimaryKey","createRevision","ensureNotFalsy","firstPropertyValueOfObject","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","now","parseRevision","randomCouchString","writeSingle","instance","writeRow","context","bulkWrite","writeResult","Object","keys","error","length","ret","success","getSingleDocument","storageInstance","documentId","findDocumentsById","results","doc","getAllDocuments","primaryKey","storage","getAllQueryPrepared","statics","prepareQuery","schema","selector","sort","skip","query","queryResult","allDocs","documents","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","change","operation","previousDocumentData","previous","eventId","collectionName","name","undefined","startTime","endTime","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","id","data","getNewestOfDocumentStates","primaryPath","docs","forEach","_meta","lwt","categorizeBulkWriteRows","docsInDb","bulkWriteRows","hasAttachments","attachments","bulkInsertDocs","bulkUpdateDocs","errors","changedDocumentIds","eventBulk","events","checkpoint","attachmentsAdd","attachmentsRemove","attachmentsUpdate","document","documentInDb","get","attachmentError","insertedIsDeleted","_deleted","entries","_attachments","attachmentId","attachmentData","isError","push","stripAttachmentsDataFromRow","getUniqueDeterministicEventKey","stripAttachmentsDataFromDocument","revInDb","_rev","err","find","previousAttachmentData","writeDoc","args","useDoc","digest","type","flatCloneDocWithMeta","docId","binaryValues","binary","v","join","eventKey","databaseName","hashAttachmentData","attachmentBase64String","storageStatics","hash","atob","getAttachmentSize","getWrappedStorageInstance","database","rxJsonSchema","transformDocumentDataFromRxDBToRxStorage","isDevMode","prev","current","height","dataBefore","dataAfter","metaFieldName","hasOwnProperty","hookParams","transformDocumentDataFromRxStorageToRxDB","transformErrorDataFromRxStorageToRxDB","internals","options","rows","toStorageWriteRows","row","lockedRun","then","reInsertErrors","values","filter","useWriteResult","reInserts","assign","subResult","k","preparedQuery","ids","deleted","findResult","key","getAttachmentData","getChangedDocumentsSince","limit","result","cleanup","minDeletedTime","remove","close","changeStream","pipe","event","conflictResultionTasks","task","assumedMasterState","input","newDocumentState","realMasterState","resolveConflictResultionTask","taskSolution","output","isEqual","postHookDocData"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport type { ChangeEvent } from 'event-reduce-js';\nimport { map } from 'rxjs/operators';\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport {\n    fillPrimaryKey,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxAttachmentWriteData,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageStatics,\n    StringKeys\n} from './types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    firstPropertyValueOfObject,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    parseRevision,\n    randomCouchString\n} from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\n/**\n * Returns all non-deleted documents\n * of the storage.\n */\nexport async function getAllDocuments<RxDocType>(\n    primaryKey: keyof RxDocType,\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n    const storage = storageInstance.storage;\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [primaryKey]: 'asc' } as any],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    let documentData;\n    /**\n     * TODO\n     * this data design is shit,\n     * instead of having the documentData depending on the operation,\n     * we should always have a current doc data, that might or might not\n     * have set _deleted to true.\n     */\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        documentData = rxStorageChangeEvent.change.doc;\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        previousDocumentData = rxStorageChangeEvent.change.previous;\n    }\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageBulkWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('COL19', {\n                collection: collection.name,\n                id: documentId,\n                error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\nexport function getNewestOfDocumentStates<RxDocType>(\n    primaryPath: string,\n    docs: RxDocumentData<RxDocType>[]\n): RxDocumentData<RxDocType> {\n    let ret: RxDocumentData<RxDocType> | null = null;\n    docs.forEach(doc => {\n        if (\n            !ret ||\n            doc._meta.lwt > ret._meta.lwt ||\n            (\n                doc._meta.lwt === ret._meta.lwt &&\n                (doc as any)[primaryPath] > (ret as any)[primaryPath]\n            )\n        ) {\n            ret = doc;\n        }\n\n    });\n    return ensureNotFalsy(ret as any);\n}\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     */\n    docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string\n): {\n    bulkInsertDocs: BulkWriteRow<RxDocType>[];\n    bulkUpdateDocs: BulkWriteRow<RxDocType>[];\n    /**\n     * Ids of all documents that are changed\n     * and so their change must be written into the\n     * sequences table so that they can be fetched via\n     * RxStorageInstance().getChangedDocumentsSince().\n     */\n    changedDocumentIds: RxDocumentData<RxDocType>[StringKeys<RxDocType>][];\n\n    /**\n     * TODO directly return a docId->error object\n     * like in the return value of bulkWrite().\n     * This will improve performance because we do not have to iterate\n     * over the error array again.\n     */\n    errors: RxStorageBulkWriteError<RxDocType>[];\n    eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>;\n    attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[];\n    attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n    }[];\n    attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[];\n} {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRow<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRow<RxDocType>[] = [];\n    const errors: RxStorageBulkWriteError<RxDocType>[] = [];\n    const changedDocumentIds: RxDocumentData<RxDocType>[StringKeys<RxDocType>][] = [];\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: randomCouchString(10),\n        events: [],\n        checkpoint: null,\n        context\n    };\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n\n\n    const startTime = now();\n    bulkWriteRows.forEach(writeRow => {\n        const id = writeRow.document[primaryPath];\n        const documentInDb = docsInDb.get(id);\n        let attachmentError: RxStorageBulkWriteError<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = writeRow.document._deleted ? true : false;\n            Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n                if (\n                    !(attachmentData as RxAttachmentWriteData).data\n                ) {\n                    attachmentError = {\n                        documentId: id as any,\n                        isError: true,\n                        status: 510,\n                        writeRow\n                    };\n                    errors.push(attachmentError);\n                } else {\n                    attachmentsAdd.push({\n                        documentId: id as any,\n                        attachmentId,\n                        attachmentData: attachmentData as any\n                    });\n                }\n            });\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkInsertDocs.push(writeRow);\n                }\n            }\n\n            if (!insertedIsDeleted) {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change: {\n                        doc: hasAttachments ? stripAttachmentsDataFromDocument(writeRow.document) : writeRow.document,\n                        id: id as any,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !writeRow.previous\n                ) ||\n                (\n                    !!writeRow.previous &&\n                    revInDb !== writeRow.previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageBulkWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: id as any,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors.push(err);\n                return;\n            }\n\n            // handle attachments data\n            if (writeRow.document._deleted) {\n                /**\n                 * Deleted documents must have cleared all their attachments.\n                 */\n                if (writeRow.previous) {\n                    Object\n                        .keys(writeRow.previous._attachments)\n                        .forEach(attachmentId => {\n                            attachmentsRemove.push({\n                                documentId: id as any,\n                                attachmentId\n                            });\n                        });\n                }\n            } else {\n                // first check for errors\n                Object\n                    .entries(writeRow.document._attachments)\n                    .find(([attachmentId, attachmentData]) => {\n                        const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                        if (\n                            !previousAttachmentData &&\n                            !(attachmentData as RxAttachmentWriteData).data\n                        ) {\n                            attachmentError = {\n                                documentId: id as any,\n                                documentInDb: documentInDb,\n                                isError: true,\n                                status: 510,\n                                writeRow\n                            };\n                        }\n                        return true;\n                    });\n                if (!attachmentError) {\n                    Object\n                        .entries(writeRow.document._attachments)\n                        .forEach(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                            if (!previousAttachmentData) {\n                                attachmentsAdd.push({\n                                    documentId: id as any,\n                                    attachmentId,\n                                    attachmentData: attachmentData as any\n                                });\n                            } else {\n                                attachmentsUpdate.push({\n                                    documentId: id as any,\n                                    attachmentId,\n                                    attachmentData: attachmentData as any\n                                });\n                            }\n                        });\n                }\n            }\n            if (attachmentError) {\n                errors.push(attachmentError);\n            } else {\n                if (hasAttachments) {\n                    bulkUpdateDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkUpdateDocs.push(writeRow);\n                }\n            }\n\n            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n            const writeDoc = writeRow.document;\n            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'INSERT',\n                    previous: null,\n                    doc: hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'UPDATE',\n                    previous: writeRow.previous,\n                    doc: hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'DELETE',\n                    previous: writeRow.previous,\n                    doc: null\n                };\n            }\n            if (!change) {\n                if (\n                    writeRow.previous && writeRow.previous._deleted &&\n                    writeRow.document._deleted\n                ) {\n                    // deleted doc got overwritten with other deleted doc -> do not send an event\n                } else {\n                    throw newRxError('SNH', { args: { writeRow } });\n                }\n            } else {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change,\n                    startTime,\n                    endTime: now()\n                });\n            }\n        }\n    });\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        errors,\n        changedDocumentIds,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRow<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc);\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = {\n                digest: attachmentData.digest,\n                length: attachmentData.length,\n                type: attachmentData.type\n            };\n        })\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    const ret = flatClone(doc);\n    ret._meta = flatClone(doc._meta);\n    return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates.\n */\nexport function getUniqueDeterministicEventKey(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: string,\n    writeRow: BulkWriteRow<any>\n): string {\n    const docId = writeRow.document[primaryPath];\n    const binaryValues: boolean[] = [\n        !!writeRow.previous,\n        (writeRow.previous && writeRow.previous._deleted),\n        !!writeRow.document._deleted\n    ];\n    const binary = binaryValues.map(v => v ? '1' : '0').join('');\n    const eventKey = storageInstance.databaseName + '|' + storageInstance.collectionName + '|' + docId + '|' + '|' + binary + '|' + writeRow.document._rev;\n    return eventKey;\n}\n\nexport function hashAttachmentData(\n    attachmentBase64String: string,\n    storageStatics: RxStorageStatics\n): Promise<string> {\n    return storageStatics.hash(atob(attachmentBase64String));\n}\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        /**\n         * Do some checks in dev-mode\n         * that would be too performance expensive\n         * in production.\n         */\n        if (overwritable.isDevMode()) {\n            // ensure that the primary key has not been changed\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n\n            /**\n             * Ensure that the new revision is higher\n             * then the previous one\n             */\n            if (writeRow.previous) {\n                const prev = parseRevision(writeRow.previous._rev);\n                const current = parseRevision(writeRow.document._rev);\n                if (current.height <= prev.height) {\n                    throw newRxError('SNH', {\n                        dataBefore: writeRow.previous,\n                        dataAfter: writeRow.document,\n                        args: {\n                            prev,\n                            current\n                        }\n                    });\n                }\n            }\n\n            /**\n             * Ensure that _meta fields have been merged\n             * and not replaced.\n             * This is important so that when one plugin A\n             * sets a _meta field and another plugin B does a write\n             * to the document, it must be ensured that the\n             * field of plugin A was not removed.\n             */\n            if (writeRow.previous) {\n                Object.keys(writeRow.previous._meta)\n                    .forEach(metaFieldName => {\n                        if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n                            throw newRxError('SNH', {\n                                dataBefore: writeRow.previous,\n                                dataAfter: writeRow.document\n                            });\n                        }\n                    });\n            }\n        }\n        data._meta.lwt = now();\n\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n        /**\n         * Run the hooks once for the previous doc,\n         * once for the new write data\n         */\n        let previous = writeRow.previous;\n        if (previous) {\n            hookParams.doc = previous;\n            runPluginHooks('preWriteToStorageInstance', hookParams);\n            previous = hookParams.doc;\n        }\n\n        hookParams.doc = data;\n        runPluginHooks('preWriteToStorageInstance', hookParams);\n        data = hookParams.doc;\n\n        /**\n         * Do not update the revision here.\n         * The caller of bulkWrite() must be able to set\n         * the revision and to be sure that the given revision\n         * is used when storing the document.\n         * The revision must be provided by the caller of bulkWrite().\n         */\n        if (!data._rev) {\n            throw newRxError('SNH', {\n                data\n            });\n        }\n\n        return {\n            document: data,\n            previous\n        };\n    }\n\n    function transformDocumentDataFromRxStorageToRxDB(\n        data: any\n    ): any {\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n        runPluginHooks('postReadFromInstance', hookParams);\n        return hookParams.doc;\n    }\n\n    function transformErrorDataFromRxStorageToRxDB<RxDocType>(\n        error: RxStorageBulkWriteError<RxDocType>\n    ): RxStorageBulkWriteError<RxDocType> {\n        const ret = flatClone(error);\n        ret.writeRow = flatClone(ret.writeRow);\n\n        if (ret.documentInDb) {\n            ret.documentInDb = transformDocumentDataFromRxStorageToRxDB(ret.documentInDb);\n        }\n\n        ret.writeRow.document = transformDocumentDataFromRxStorageToRxDB(ret.writeRow.document);\n        if (ret.writeRow.previous) {\n            ret.writeRow.previous = transformDocumentDataFromRxStorageToRxDB(ret.writeRow.previous);\n        }\n\n        return ret;\n    }\n\n    const ret: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        storage: storageInstance.storage,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const reInsertErrors: RxStorageBulkWriteError<RxDocType>[] = Object\n                        .values(writeResult.error)\n                        .filter((error) => {\n                            if (\n                                error.status === 409 &&\n                                !error.writeRow.previous &&\n                                !error.writeRow.document._deleted &&\n                                ensureNotFalsy(error.documentInDb)._deleted\n                            ) {\n                                return true;\n                            }\n                            return false;\n                        });\n\n                    if (reInsertErrors.length > 0) {\n                        const useWriteResult: typeof writeResult = {\n                            error: flatClone(writeResult.error),\n                            success: flatClone(writeResult.success)\n                        };\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                delete useWriteResult.error[error.documentId];\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(error.writeRow.document, error.documentInDb)\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            useWriteResult.error = Object.assign(\n                                useWriteResult.error,\n                                subResult.error\n                            );\n                            useWriteResult.success = Object.assign(\n                                useWriteResult.success,\n                                subResult.success\n                            );\n                            return useWriteResult;\n                        });\n                    }\n\n                    return writeResult;\n                })\n                .then(writeResult => {\n                    const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                        success: {},\n                        error: {}\n                    };\n                    Object.entries(writeResult.success).forEach(([k, v]) => {\n                        ret.success[k] = transformDocumentDataFromRxStorageToRxDB(v);\n                    });\n                    Object.entries(writeResult.error).forEach(([k, error]) => {\n                        ret.error[k] = transformErrorDataFromRxStorageToRxDB(error);\n                    });\n                    return ret;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            ).then(queryResult => {\n                return {\n                    documents: queryResult.documents.map(doc => transformDocumentDataFromRxStorageToRxDB(doc))\n                };\n            });\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            ).then(findResult => {\n                const ret: RxDocumentDataById<RxDocType> = {};\n                Object.entries(findResult).forEach(([key, doc]) => {\n                    ret[key] = transformDocumentDataFromRxStorageToRxDB(doc);\n                });\n                return ret;\n            });\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(limit, checkpoint)\n            ).then(result => {\n                return result.map(row => ({\n                    checkpoint: row.checkpoint,\n                    document: transformDocumentDataFromRxStorageToRxDB(row.document)\n                }));\n            });\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream().pipe(\n                map(eventBulk => {\n                    const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, CheckpointType> = {\n                        id: eventBulk.id,\n                        events: eventBulk.events.map(event => {\n                            return {\n                                eventId: event.eventId,\n                                documentId: event.documentId,\n                                endTime: event.endTime,\n                                startTime: event.startTime,\n                                change: {\n                                    id: event.change.id,\n                                    operation: event.change.operation,\n                                    doc: event.change.doc ? transformDocumentDataFromRxStorageToRxDB(event.change.doc) : undefined,\n                                    previous: event.change.previous ? transformDocumentDataFromRxStorageToRxDB(event.change.previous) : undefined\n                                }\n                            }\n                        }),\n                        checkpoint: eventBulk.checkpoint,\n                        context: eventBulk.context\n                    };\n                    return ret;\n                })\n            )\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks().pipe(\n                map(task => {\n                    const assumedMasterState = task.input.assumedMasterState ? transformDocumentDataFromRxStorageToRxDB(task.input.assumedMasterState) : undefined;\n                    const newDocumentState = transformDocumentDataFromRxStorageToRxDB(task.input.newDocumentState);\n                    const realMasterState = transformDocumentDataFromRxStorageToRxDB(task.input.realMasterState);\n                    return {\n                        id: task.id,\n                        context: task.context,\n                        input: {\n                            assumedMasterState,\n                            realMasterState,\n                            newDocumentState\n                        }\n                    };\n                })\n            );\n        },\n        resolveConflictResultionTask(taskSolution) {\n\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const hookParams = {\n                database,\n                primaryPath,\n                schema: rxJsonSchema,\n                doc: Object.assign(\n                    {},\n                    taskSolution.output.documentData,\n                    {\n                        _meta: getDefaultRxDocumentMeta(),\n                        _rev: getDefaultRevision(),\n                        _attachments: {}\n                    }\n                )\n            };\n            hookParams.doc._rev = createRevision(hookParams.doc);\n\n            runPluginHooks('preWriteToStorageInstance', hookParams);\n            const postHookDocData = hookParams.doc;\n\n            const documentData = flatClone(postHookDocData);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n    return ret;\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SACIC,cADJ,EAEIC,2BAFJ,QAGO,oBAHP;AAsBA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,0BAHJ,EAIIC,SAJJ,EAKIC,kBALJ,EAMIC,wBANJ,EAOIC,GAPJ,EAQIC,aARJ,EASIC,iBATJ,QAUO,QAVP;;AAkDA;AACA;AACA;AACA;AACA,WAAsBC,WAAtB,YAAsBA,WAAtB,CACIC,QADJ,EAEIC,QAFJ,EAGIC,OAHJ;EAAA,IAIsC;IAAA,uBACRF,QAAQ,CAACG,SAAT,CACtB,CAACF,QAAD,CADsB,EAEtBC,OAFsB,CADQ,iBAC5BE,WAD4B;MAAA,IAM9BC,MAAM,CAACC,IAAP,CAAYF,WAAW,CAACG,KAAxB,EAA+BC,MAA/B,GAAwC,CANV;QAO9B,IAAMD,KAAK,GAAGf,0BAA0B,CAACY,WAAW,CAACG,KAAb,CAAxC;QACA,MAAMA,KAAN;MAR8B;QAU9B,IAAME,GAAG,GAAGjB,0BAA0B,CAACY,WAAW,CAACM,OAAb,CAAtC;QACA,OAAOD,GAAP;MAX8B;IAAA;EAarC,CAjBD;IAAA;EAAA;AAAA;AAjBA,WAAsBE,iBAAtB,YAAsBA,iBAAtB,CACIC,eADJ,EAEIC,UAFJ;EAAA,IAG6C;IAAA,uBACnBD,eAAe,CAACE,iBAAhB,CAAkC,CAACD,UAAD,CAAlC,EAAgD,KAAhD,CADmB,iBACnCE,OADmC;MAEzC,IAAMC,GAAG,GAAGD,OAAO,CAACF,UAAD,CAAnB;;MAFyC,IAGrCG,GAHqC;QAIrC,OAAOA,GAAP;MAJqC;QAMrC,OAAO,IAAP;MANqC;IAAA;EAQ5C,CAXD;IAAA;EAAA;AAAA;;AAtBA;AACA;AACA;AACA;AACA,WAAsBC,eAAtB,YAAsBA,eAAtB,CACIC,UADJ,EAEIN,eAFJ;EAAA,IAGwC;IAAA;;IACpC,IAAMO,OAAO,GAAGP,eAAe,CAACO,OAAhC;IACA,IAAMC,mBAAmB,GAAGD,OAAO,CAACE,OAAR,CAAgBC,YAAhB,CACxBV,eAAe,CAACW,MADQ,EAExB;MACIC,QAAQ,EAAE,EADd;MAEIC,IAAI,EAAE,kBAAIP,UAAJ,IAAiB,KAAjB,QAFV;MAGIQ,IAAI,EAAE;IAHV,CAFwB,CAA5B;IAFoC,uBAUVd,eAAe,CAACe,KAAhB,CAAsBP,mBAAtB,CAVU,iBAU9BQ,WAV8B;MAWpC,IAAMC,OAAO,GAAGD,WAAW,CAACE,SAA5B;MACA,OAAOD,OAAP;IAZoC;EAavC,CAhBD;IAAA;EAAA;AAAA;AAPA,OAAO,IAAME,qBAAqB,GAAG,gBAA9B;AACP,OAAO,IAAMC,mCAAmC,GAAG,0BAA5C;AA6DP,OAAO,SAASC,iCAAT,CACHC,OADG,EAEHC,oBAFG,EAGHC,YAHG,EAImB;EACtB,IAAIC,YAAJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACI,IAAIF,oBAAoB,CAACG,MAArB,CAA4BC,SAA5B,KAA0C,QAA9C,EAAwD;IACpDF,YAAY,GAAGF,oBAAoB,CAACG,MAArB,CAA4BtB,GAA3C;EACH;;EACD,IAAIwB,oBAAJ;;EACA,IAAIL,oBAAoB,CAACG,MAArB,CAA4BC,SAA5B,KAA0C,QAA9C,EAAwD;IACpDC,oBAAoB,GAAGL,oBAAoB,CAACG,MAArB,CAA4BG,QAAnD;EACH;;EACD,IAAMhC,GAA2B,GAAG;IAChCiC,OAAO,EAAEP,oBAAoB,CAACO,OADE;IAEhC7B,UAAU,EAAEsB,oBAAoB,CAACtB,UAFD;IAGhC8B,cAAc,EAAEP,YAAY,GAAGA,YAAY,CAACQ,IAAhB,GAAuBC,SAHnB;IAIhCC,SAAS,EAAEX,oBAAoB,CAACW,SAJA;IAKhCC,OAAO,EAAEZ,oBAAoB,CAACY,OALE;IAMhCb,OAAO,EAAPA,OANgC;IAOhCK,SAAS,EAAEJ,oBAAoB,CAACG,MAArB,CAA4BC,SAPP;IAQhCF,YAAY,EAAEnD,YAAY,CAAC8D,qBAAb,CAAmCX,YAAnC,CARkB;IAShCG,oBAAoB,EAAEtD,YAAY,CAAC8D,qBAAb,CAAmCR,oBAAnC;EATU,CAApC;EAWA,OAAO/B,GAAP;AACH;AAED,OAAO,SAASwC,0BAAT,CACHC,UADG,EAEHrC,UAFG,EAGHsC,SAHG,EAIH5C,KAJG,EAKL;EACE,IAAIA,KAAJ,EAAW;IACP,IAAIA,KAAK,CAAC6C,MAAN,KAAiB,GAArB,EAA0B;MACtB,MAAMjE,UAAU,CAAC,OAAD,EAAU;QACtB+D,UAAU,EAAEA,UAAU,CAACN,IADD;QAEtBS,EAAE,EAAExC,UAFkB;QAGtBN,KAAK,EAALA,KAHsB;QAItB+C,IAAI,EAAEH;MAJgB,CAAV,CAAhB;IAMH,CAPD,MAOO;MACH,MAAM5C,KAAN;IACH;EACJ;AACJ;AAGD,OAAO,SAASgD,yBAAT,CACHC,WADG,EAEHC,IAFG,EAGsB;EACzB,IAAIhD,GAAqC,GAAG,IAA5C;EACAgD,IAAI,CAACC,OAAL,CAAa,UAAA1C,GAAG,EAAI;IAChB,IACI,CAACP,GAAD,IACAO,GAAG,CAAC2C,KAAJ,CAAUC,GAAV,GAAgBnD,GAAG,CAACkD,KAAJ,CAAUC,GAD1B,IAGI5C,GAAG,CAAC2C,KAAJ,CAAUC,GAAV,KAAkBnD,GAAG,CAACkD,KAAJ,CAAUC,GAA5B,IACC5C,GAAD,CAAawC,WAAb,IAA6B/C,GAAD,CAAa+C,WAAb,CALpC,EAOE;MACE/C,GAAG,GAAGO,GAAN;IACH;EAEJ,CAZD;EAaA,OAAOzB,cAAc,CAACkB,GAAD,CAArB;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoD,uBAAT,CACHjD,eADG,EAEH4C,WAFG;AAGH;AACJ;AACA;AACA;AACA;AACIM,QARG;AASH;AACJ;AACA;AACA;AACIC,aAbG,EAcH7D,OAdG,EAgDL;EACE,IAAM8D,cAAc,GAAG,CAAC,CAACpD,eAAe,CAACW,MAAhB,CAAuB0C,WAAhD;EACA,IAAMC,cAAyC,GAAG,EAAlD;EACA,IAAMC,cAAyC,GAAG,EAAlD;EACA,IAAMC,MAA4C,GAAG,EAArD;EACA,IAAMC,kBAAsE,GAAG,EAA/E;EACA,IAAMC,SAA0E,GAAG;IAC/EjB,EAAE,EAAEvD,iBAAiB,CAAC,EAAD,CAD0D;IAE/EyE,MAAM,EAAE,EAFuE;IAG/EC,UAAU,EAAE,IAHmE;IAI/EtE,OAAO,EAAPA;EAJ+E,CAAnF;EAOA,IAAMuE,cAIH,GAAG,EAJN;EAKA,IAAMC,iBAGH,GAAG,EAHN;EAIA,IAAMC,iBAIH,GAAG,EAJN;EAOA,IAAM7B,SAAS,GAAGlD,GAAG,EAArB;EACAmE,aAAa,CAACL,OAAd,CAAsB,UAAAzD,QAAQ,EAAI;IAC9B,IAAMoD,EAAE,GAAGpD,QAAQ,CAAC2E,QAAT,CAAkBpB,WAAlB,CAAX;IACA,IAAMqB,YAAY,GAAGf,QAAQ,CAACgB,GAAT,CAAazB,EAAb,CAArB;IACA,IAAI0B,eAAJ;;IAEA,IAAI,CAACF,YAAL,EAAmB;MACf;AACZ;AACA;AACA;MACY,IAAMG,iBAAiB,GAAG/E,QAAQ,CAAC2E,QAAT,CAAkBK,QAAlB,GAA6B,IAA7B,GAAoC,KAA9D;MACA5E,MAAM,CAAC6E,OAAP,CAAejF,QAAQ,CAAC2E,QAAT,CAAkBO,YAAjC,EAA+CzB,OAA/C,CAAuD,iBAAoC;QAAA,IAAlC0B,YAAkC;QAAA,IAApBC,cAAoB;;QACvF,IACI,CAAEA,cAAD,CAA0C/B,IAD/C,EAEE;UACEyB,eAAe,GAAG;YACdlE,UAAU,EAAEwC,EADE;YAEdiC,OAAO,EAAE,IAFK;YAGdlC,MAAM,EAAE,GAHM;YAIdnD,QAAQ,EAARA;UAJc,CAAlB;UAMAmE,MAAM,CAACmB,IAAP,CAAYR,eAAZ;QACH,CAVD,MAUO;UACHN,cAAc,CAACc,IAAf,CAAoB;YAChB1E,UAAU,EAAEwC,EADI;YAEhB+B,YAAY,EAAZA,YAFgB;YAGhBC,cAAc,EAAEA;UAHA,CAApB;QAKH;MACJ,CAlBD;;MAmBA,IAAI,CAACN,eAAL,EAAsB;QAClB,IAAIf,cAAJ,EAAoB;UAChBE,cAAc,CAACqB,IAAf,CAAoBC,2BAA2B,CAACvF,QAAD,CAA/C;QACH,CAFD,MAEO;UACHiE,cAAc,CAACqB,IAAf,CAAoBtF,QAApB;QACH;MACJ;;MAED,IAAI,CAAC+E,iBAAL,EAAwB;QACpBX,kBAAkB,CAACkB,IAAnB,CAAwBlC,EAAxB;QACAiB,SAAS,CAACC,MAAV,CAAiBgB,IAAjB,CAAsB;UAClB7C,OAAO,EAAE+C,8BAA8B,CAAC7E,eAAD,EAAkB4C,WAAlB,EAAsCvD,QAAtC,CADrB;UAElBY,UAAU,EAAEwC,EAFM;UAGlBf,MAAM,EAAE;YACJtB,GAAG,EAAEgD,cAAc,GAAG0B,gCAAgC,CAACzF,QAAQ,CAAC2E,QAAV,CAAnC,GAAyD3E,QAAQ,CAAC2E,QADjF;YAEJvB,EAAE,EAAEA,EAFA;YAGJd,SAAS,EAAE,QAHP;YAIJE,QAAQ,EAAE;UAJN,CAHU;UASlBK,SAAS,EAATA,SATkB;UAUlBC,OAAO,EAAEnD,GAAG;QAVM,CAAtB;MAYH;IACJ,CAhDD,MAgDO;MACH;MACA,IAAM+F,OAAe,GAAGd,YAAY,CAACe,IAArC;MAEA;AACZ;AACA;;MACY,IAEQ,CAAC3F,QAAQ,CAACwC,QADd,IAII,CAAC,CAACxC,QAAQ,CAACwC,QAAX,IACAkD,OAAO,KAAK1F,QAAQ,CAACwC,QAAT,CAAkBmD,IANtC,EAQE;QACE;QACA,IAAMC,GAAuC,GAAG;UAC5CP,OAAO,EAAE,IADmC;UAE5ClC,MAAM,EAAE,GAFoC;UAG5CvC,UAAU,EAAEwC,EAHgC;UAI5CpD,QAAQ,EAAEA,QAJkC;UAK5C4E,YAAY,EAAZA;QAL4C,CAAhD;QAOAT,MAAM,CAACmB,IAAP,CAAYM,GAAZ;QACA;MACH,CA1BE,CA4BH;;;MACA,IAAI5F,QAAQ,CAAC2E,QAAT,CAAkBK,QAAtB,EAAgC;QAC5B;AAChB;AACA;QACgB,IAAIhF,QAAQ,CAACwC,QAAb,EAAuB;UACnBpC,MAAM,CACDC,IADL,CACUL,QAAQ,CAACwC,QAAT,CAAkB0C,YAD5B,EAEKzB,OAFL,CAEa,UAAA0B,YAAY,EAAI;YACrBV,iBAAiB,CAACa,IAAlB,CAAuB;cACnB1E,UAAU,EAAEwC,EADO;cAEnB+B,YAAY,EAAZA;YAFmB,CAAvB;UAIH,CAPL;QAQH;MACJ,CAdD,MAcO;QACH;QACA/E,MAAM,CACD6E,OADL,CACajF,QAAQ,CAAC2E,QAAT,CAAkBO,YAD/B,EAEKW,IAFL,CAEU,iBAAoC;UAAA,IAAlCV,YAAkC;UAAA,IAApBC,cAAoB;UACtC,IAAMU,sBAAsB,GAAG9F,QAAQ,CAACwC,QAAT,GAAoBxC,QAAQ,CAACwC,QAAT,CAAkB0C,YAAlB,CAA+BC,YAA/B,CAApB,GAAmEvC,SAAlG;;UACA,IACI,CAACkD,sBAAD,IACA,CAAEV,cAAD,CAA0C/B,IAF/C,EAGE;YACEyB,eAAe,GAAG;cACdlE,UAAU,EAAEwC,EADE;cAEdwB,YAAY,EAAEA,YAFA;cAGdS,OAAO,EAAE,IAHK;cAIdlC,MAAM,EAAE,GAJM;cAKdnD,QAAQ,EAARA;YALc,CAAlB;UAOH;;UACD,OAAO,IAAP;QACH,CAjBL;;QAkBA,IAAI,CAAC8E,eAAL,EAAsB;UAClB1E,MAAM,CACD6E,OADL,CACajF,QAAQ,CAAC2E,QAAT,CAAkBO,YAD/B,EAEKzB,OAFL,CAEa,iBAAoC;YAAA,IAAlC0B,YAAkC;YAAA,IAApBC,cAAoB;YACzC,IAAMU,sBAAsB,GAAG9F,QAAQ,CAACwC,QAAT,GAAoBxC,QAAQ,CAACwC,QAAT,CAAkB0C,YAAlB,CAA+BC,YAA/B,CAApB,GAAmEvC,SAAlG;;YACA,IAAI,CAACkD,sBAAL,EAA6B;cACzBtB,cAAc,CAACc,IAAf,CAAoB;gBAChB1E,UAAU,EAAEwC,EADI;gBAEhB+B,YAAY,EAAZA,YAFgB;gBAGhBC,cAAc,EAAEA;cAHA,CAApB;YAKH,CAND,MAMO;cACHV,iBAAiB,CAACY,IAAlB,CAAuB;gBACnB1E,UAAU,EAAEwC,EADO;gBAEnB+B,YAAY,EAAZA,YAFmB;gBAGnBC,cAAc,EAAEA;cAHG,CAAvB;YAKH;UACJ,CAjBL;QAkBH;MACJ;;MACD,IAAIN,eAAJ,EAAqB;QACjBX,MAAM,CAACmB,IAAP,CAAYR,eAAZ;MACH,CAFD,MAEO;QACH,IAAIf,cAAJ,EAAoB;UAChBG,cAAc,CAACoB,IAAf,CAAoBC,2BAA2B,CAACvF,QAAD,CAA/C;QACH,CAFD,MAEO;UACHkE,cAAc,CAACoB,IAAf,CAAoBtF,QAApB;QACH;MACJ;;MAED,IAAIqC,MAAqD,GAAG,IAA5D;MACA,IAAM0D,QAAQ,GAAG/F,QAAQ,CAAC2E,QAA1B;;MACA,IAAI3E,QAAQ,CAACwC,QAAT,IAAqBxC,QAAQ,CAACwC,QAAT,CAAkBwC,QAAvC,IAAmD,CAACe,QAAQ,CAACf,QAAjE,EAA2E;QACvE3C,MAAM,GAAG;UACLe,EAAE,EAAEA,EADC;UAELd,SAAS,EAAE,QAFN;UAGLE,QAAQ,EAAE,IAHL;UAILzB,GAAG,EAAEgD,cAAc,GAAG0B,gCAAgC,CAACM,QAAD,CAAnC,GAAgDA;QAJ9D,CAAT;MAMH,CAPD,MAOO,IAAI/F,QAAQ,CAACwC,QAAT,IAAqB,CAACxC,QAAQ,CAACwC,QAAT,CAAkBwC,QAAxC,IAAoD,CAACe,QAAQ,CAACf,QAAlE,EAA4E;QAC/E3C,MAAM,GAAG;UACLe,EAAE,EAAEA,EADC;UAELd,SAAS,EAAE,QAFN;UAGLE,QAAQ,EAAExC,QAAQ,CAACwC,QAHd;UAILzB,GAAG,EAAEgD,cAAc,GAAG0B,gCAAgC,CAACM,QAAD,CAAnC,GAAgDA;QAJ9D,CAAT;MAMH,CAPM,MAOA,IAAI/F,QAAQ,CAACwC,QAAT,IAAqB,CAACxC,QAAQ,CAACwC,QAAT,CAAkBwC,QAAxC,IAAoDe,QAAQ,CAACf,QAAjE,EAA2E;QAC9E3C,MAAM,GAAG;UACLe,EAAE,EAAEA,EADC;UAELd,SAAS,EAAE,QAFN;UAGLE,QAAQ,EAAExC,QAAQ,CAACwC,QAHd;UAILzB,GAAG,EAAE;QAJA,CAAT;MAMH;;MACD,IAAI,CAACsB,MAAL,EAAa;QACT,IACIrC,QAAQ,CAACwC,QAAT,IAAqBxC,QAAQ,CAACwC,QAAT,CAAkBwC,QAAvC,IACAhF,QAAQ,CAAC2E,QAAT,CAAkBK,QAFtB,EAGE,CACE;QACH,CALD,MAKO;UACH,MAAM9F,UAAU,CAAC,KAAD,EAAQ;YAAE8G,IAAI,EAAE;cAAEhG,QAAQ,EAARA;YAAF;UAAR,CAAR,CAAhB;QACH;MACJ,CATD,MASO;QACHoE,kBAAkB,CAACkB,IAAnB,CAAwBlC,EAAxB;QACAiB,SAAS,CAACC,MAAV,CAAiBgB,IAAjB,CAAsB;UAClB7C,OAAO,EAAE+C,8BAA8B,CAAC7E,eAAD,EAAkB4C,WAAlB,EAAsCvD,QAAtC,CADrB;UAElBY,UAAU,EAAEwC,EAFM;UAGlBf,MAAM,EAANA,MAHkB;UAIlBQ,SAAS,EAATA,SAJkB;UAKlBC,OAAO,EAAEnD,GAAG;QALM,CAAtB;MAOH;IACJ;EACJ,CA/LD;EAiMA,OAAO;IACHsE,cAAc,EAAdA,cADG;IAEHC,cAAc,EAAdA,cAFG;IAGHC,MAAM,EAANA,MAHG;IAIHC,kBAAkB,EAAlBA,kBAJG;IAKHC,SAAS,EAATA,SALG;IAMHG,cAAc,EAAdA,cANG;IAOHC,iBAAiB,EAAjBA,iBAPG;IAQHC,iBAAiB,EAAjBA;EARG,CAAP;AAUH;AAED,OAAO,SAASa,2BAAT,CAAgDvF,QAAhD,EAA4G;EAC/G,OAAO;IACHwC,QAAQ,EAAExC,QAAQ,CAACwC,QADhB;IAEHmC,QAAQ,EAAEc,gCAAgC,CAACzF,QAAQ,CAAC2E,QAAV;EAFvC,CAAP;AAIH;AACD,OAAO,SAASc,gCAAT,CAAqD1E,GAArD,EAAqH;EACxH,IAAMkF,MAAiC,GAAGzG,SAAS,CAACuB,GAAD,CAAnD;EACAkF,MAAM,CAACf,YAAP,GAAsB,EAAtB;EACA9E,MAAM,CACD6E,OADL,CACalE,GAAG,CAACmE,YADjB,EAEKzB,OAFL,CAEa,iBAAoC;IAAA,IAAlC0B,YAAkC;IAAA,IAApBC,cAAoB;IACzCa,MAAM,CAACf,YAAP,CAAoBC,YAApB,IAAoC;MAChCe,MAAM,EAAEd,cAAc,CAACc,MADS;MAEhC3F,MAAM,EAAE6E,cAAc,CAAC7E,MAFS;MAGhC4F,IAAI,EAAEf,cAAc,CAACe;IAHW,CAApC;EAKH,CARL;EASA,OAAOF,MAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,oBAAT,CACHrF,GADG,EAEsB;EACzB,IAAMP,GAAG,GAAGhB,SAAS,CAACuB,GAAD,CAArB;EACAP,GAAG,CAACkD,KAAJ,GAAYlE,SAAS,CAACuB,GAAG,CAAC2C,KAAL,CAArB;EACA,OAAOlD,GAAP;AACH;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASgF,8BAAT,CACH7E,eADG,EAEH4C,WAFG,EAGHvD,QAHG,EAIG;EACN,IAAMqG,KAAK,GAAGrG,QAAQ,CAAC2E,QAAT,CAAkBpB,WAAlB,CAAd;EACA,IAAM+C,YAAuB,GAAG,CAC5B,CAAC,CAACtG,QAAQ,CAACwC,QADiB,EAE3BxC,QAAQ,CAACwC,QAAT,IAAqBxC,QAAQ,CAACwC,QAAT,CAAkBwC,QAFZ,EAG5B,CAAC,CAAChF,QAAQ,CAAC2E,QAAT,CAAkBK,QAHQ,CAAhC;EAKA,IAAMuB,MAAM,GAAGD,YAAY,CAACvH,GAAb,CAAiB,UAAAyH,CAAC;IAAA,OAAIA,CAAC,GAAG,GAAH,GAAS,GAAd;EAAA,CAAlB,EAAqCC,IAArC,CAA0C,EAA1C,CAAf;EACA,IAAMC,QAAQ,GAAG/F,eAAe,CAACgG,YAAhB,GAA+B,GAA/B,GAAqChG,eAAe,CAAC+B,cAArD,GAAsE,GAAtE,GAA4E2D,KAA5E,GAAoF,GAApF,GAA0F,GAA1F,GAAgGE,MAAhG,GAAyG,GAAzG,GAA+GvG,QAAQ,CAAC2E,QAAT,CAAkBgB,IAAlJ;EACA,OAAOe,QAAP;AACH;AAED,OAAO,SAASE,kBAAT,CACHC,sBADG,EAEHC,cAFG,EAGY;EACf,OAAOA,cAAc,CAACC,IAAf,CAAoBC,IAAI,CAACH,sBAAD,CAAxB,CAAP;AACH;AACD,OAAO,SAASI,iBAAT,CACHJ,sBADG,EAEG;EACN,OAAOG,IAAI,CAACH,sBAAD,CAAJ,CAA6BtG,MAApC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2G,yBAAT,CAMHC,QANG,EAOHxG,eAPG;AAQH;AACJ;AACA;AACA;AACIyG,YAZG,EAa6D;EAChEnI,YAAY,CAAC8D,qBAAb,CAAmCqE,YAAnC;EACA,IAAM7D,WAAW,GAAGnE,2BAA2B,CAACgI,YAAY,CAACnG,UAAd,CAA/C;;EAEA,SAASoG,wCAAT,CACIrH,QADJ,EAEE;IACE,IAAIqD,IAAI,GAAG7D,SAAS,CAACQ,QAAQ,CAAC2E,QAAV,CAApB;IACAtB,IAAI,CAACK,KAAL,GAAalE,SAAS,CAAC6D,IAAI,CAACK,KAAN,CAAtB;IAEA;AACR;AACA;AACA;AACA;;IACQ,IAAIzE,YAAY,CAACqI,SAAb,EAAJ,EAA8B;MAC1B;MACAjE,IAAI,GAAGlE,cAAc,CACjBoE,WADiB,EAEjB6D,YAFiB,EAGjB/D,IAHiB,CAArB;MAMA;AACZ;AACA;AACA;;MACY,IAAIrD,QAAQ,CAACwC,QAAb,EAAuB;QACnB,IAAM+E,IAAI,GAAG3H,aAAa,CAACI,QAAQ,CAACwC,QAAT,CAAkBmD,IAAnB,CAA1B;QACA,IAAM6B,OAAO,GAAG5H,aAAa,CAACI,QAAQ,CAAC2E,QAAT,CAAkBgB,IAAnB,CAA7B;;QACA,IAAI6B,OAAO,CAACC,MAAR,IAAkBF,IAAI,CAACE,MAA3B,EAAmC;UAC/B,MAAMvI,UAAU,CAAC,KAAD,EAAQ;YACpBwI,UAAU,EAAE1H,QAAQ,CAACwC,QADD;YAEpBmF,SAAS,EAAE3H,QAAQ,CAAC2E,QAFA;YAGpBqB,IAAI,EAAE;cACFuB,IAAI,EAAJA,IADE;cAEFC,OAAO,EAAPA;YAFE;UAHc,CAAR,CAAhB;QAQH;MACJ;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;;MACY,IAAIxH,QAAQ,CAACwC,QAAb,EAAuB;QACnBpC,MAAM,CAACC,IAAP,CAAYL,QAAQ,CAACwC,QAAT,CAAkBkB,KAA9B,EACKD,OADL,CACa,UAAAmE,aAAa,EAAI;UACtB,IAAI,CAAC5H,QAAQ,CAAC2E,QAAT,CAAkBjB,KAAlB,CAAwBmE,cAAxB,CAAuCD,aAAvC,CAAL,EAA4D;YACxD,MAAM1I,UAAU,CAAC,KAAD,EAAQ;cACpBwI,UAAU,EAAE1H,QAAQ,CAACwC,QADD;cAEpBmF,SAAS,EAAE3H,QAAQ,CAAC2E;YAFA,CAAR,CAAhB;UAIH;QACJ,CARL;MASH;IACJ;;IACDtB,IAAI,CAACK,KAAL,CAAWC,GAAX,GAAiBhE,GAAG,EAApB;IAEA,IAAMmI,UAAU,GAAG;MACfX,QAAQ,EAARA,QADe;MAEf5D,WAAW,EAAXA,WAFe;MAGfjC,MAAM,EAAE8F,YAHO;MAIfrG,GAAG,EAAEsC;IAJU,CAAnB;IAOA;AACR;AACA;AACA;;IACQ,IAAIb,QAAQ,GAAGxC,QAAQ,CAACwC,QAAxB;;IACA,IAAIA,QAAJ,EAAc;MACVsF,UAAU,CAAC/G,GAAX,GAAiByB,QAAjB;MACAxD,cAAc,CAAC,2BAAD,EAA8B8I,UAA9B,CAAd;MACAtF,QAAQ,GAAGsF,UAAU,CAAC/G,GAAtB;IACH;;IAED+G,UAAU,CAAC/G,GAAX,GAAiBsC,IAAjB;IACArE,cAAc,CAAC,2BAAD,EAA8B8I,UAA9B,CAAd;IACAzE,IAAI,GAAGyE,UAAU,CAAC/G,GAAlB;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQ,IAAI,CAACsC,IAAI,CAACsC,IAAV,EAAgB;MACZ,MAAMzG,UAAU,CAAC,KAAD,EAAQ;QACpBmE,IAAI,EAAJA;MADoB,CAAR,CAAhB;IAGH;;IAED,OAAO;MACHsB,QAAQ,EAAEtB,IADP;MAEHb,QAAQ,EAARA;IAFG,CAAP;EAIH;;EAED,SAASuF,wCAAT,CACI1E,IADJ,EAEO;IACH,IAAMyE,UAAU,GAAG;MACfX,QAAQ,EAARA,QADe;MAEf5D,WAAW,EAAXA,WAFe;MAGfjC,MAAM,EAAE8F,YAHO;MAIfrG,GAAG,EAAEsC;IAJU,CAAnB;IAOArE,cAAc,CAAC,sBAAD,EAAyB8I,UAAzB,CAAd;IACA,OAAOA,UAAU,CAAC/G,GAAlB;EACH;;EAED,SAASiH,qCAAT,CACI1H,KADJ,EAEsC;IAClC,IAAME,GAAG,GAAGhB,SAAS,CAACc,KAAD,CAArB;IACAE,GAAG,CAACR,QAAJ,GAAeR,SAAS,CAACgB,GAAG,CAACR,QAAL,CAAxB;;IAEA,IAAIQ,GAAG,CAACoE,YAAR,EAAsB;MAClBpE,GAAG,CAACoE,YAAJ,GAAmBmD,wCAAwC,CAACvH,GAAG,CAACoE,YAAL,CAA3D;IACH;;IAEDpE,GAAG,CAACR,QAAJ,CAAa2E,QAAb,GAAwBoD,wCAAwC,CAACvH,GAAG,CAACR,QAAJ,CAAa2E,QAAd,CAAhE;;IACA,IAAInE,GAAG,CAACR,QAAJ,CAAawC,QAAjB,EAA2B;MACvBhC,GAAG,CAACR,QAAJ,CAAawC,QAAb,GAAwBuF,wCAAwC,CAACvH,GAAG,CAACR,QAAJ,CAAawC,QAAd,CAAhE;IACH;;IAED,OAAOhC,GAAP;EACH;;EAED,IAAMA,GAAqE,GAAG;IAC1EU,OAAO,EAAEP,eAAe,CAACO,OADiD;IAE1EI,MAAM,EAAEX,eAAe,CAACW,MAFkD;IAG1E2G,SAAS,EAAEtH,eAAe,CAACsH,SAH+C;IAI1EvF,cAAc,EAAE/B,eAAe,CAAC+B,cAJ0C;IAK1EiE,YAAY,EAAEhG,eAAe,CAACgG,YAL4C;IAM1EuB,OAAO,EAAEvH,eAAe,CAACuH,OANiD;IAO1EhI,SAP0E,qBAQtEiI,IARsE,EAStElI,OATsE,EAUxE;MACE,IAAMmI,kBAA6C,GAAGD,IAAI,CACrDpJ,GADiD,CAC7C,UAAAsJ,GAAG;QAAA,OAAIhB,wCAAwC,CAACgB,GAAD,CAA5C;MAAA,CAD0C,CAAtD;MAGA,OAAOlB,QAAQ,CAACmB,SAAT,CACH;QAAA,OAAM3H,eAAe,CAACT,SAAhB,CACFkI,kBADE,EAEFnI,OAFE,CAAN;MAAA,CADG;MAMH;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;MAbmB,CAcFsI,IAdE,CAcG,UAAApI,WAAW,EAAI;QACjB,IAAMqI,cAAoD,GAAGpI,MAAM,CAC9DqI,MADwD,CACjDtI,WAAW,CAACG,KADqC,EAExDoI,MAFwD,CAEjD,UAACpI,KAAD,EAAW;UACf,IACIA,KAAK,CAAC6C,MAAN,KAAiB,GAAjB,IACA,CAAC7C,KAAK,CAACN,QAAN,CAAewC,QADhB,IAEA,CAAClC,KAAK,CAACN,QAAN,CAAe2E,QAAf,CAAwBK,QAFzB,IAGA1F,cAAc,CAACgB,KAAK,CAACsE,YAAP,CAAd,CAAmCI,QAJvC,EAKE;YACE,OAAO,IAAP;UACH;;UACD,OAAO,KAAP;QACH,CAZwD,CAA7D;;QAcA,IAAIwD,cAAc,CAACjI,MAAf,GAAwB,CAA5B,EAA+B;UAC3B,IAAMoI,cAAkC,GAAG;YACvCrI,KAAK,EAAEd,SAAS,CAACW,WAAW,CAACG,KAAb,CADuB;YAEvCG,OAAO,EAAEjB,SAAS,CAACW,WAAW,CAACM,OAAb;UAFqB,CAA3C;UAIA,IAAMmI,SAAoC,GAAGJ,cAAc,CACtDzJ,GADwC,CACpC,UAACuB,KAAD,EAAW;YACZ,OAAOqI,cAAc,CAACrI,KAAf,CAAqBA,KAAK,CAACM,UAA3B,CAAP;YACA,OAAO;cACH4B,QAAQ,EAAElC,KAAK,CAACsE,YADb;cAEHD,QAAQ,EAAEvE,MAAM,CAACyI,MAAP,CACN,EADM,EAENvI,KAAK,CAACN,QAAN,CAAe2E,QAFT,EAGN;gBACIgB,IAAI,EAAEtG,cAAc,CAACiB,KAAK,CAACN,QAAN,CAAe2E,QAAhB,EAA0BrE,KAAK,CAACsE,YAAhC;cADxB,CAHM;YAFP,CAAP;UAUH,CAbwC,CAA7C;UAeA,OAAOuC,QAAQ,CAACmB,SAAT,CACH;YAAA,OAAM3H,eAAe,CAACT,SAAhB,CACF0I,SADE,EAEF3I,OAFE,CAAN;UAAA,CADG,EAKLsI,IALK,CAKA,UAAAO,SAAS,EAAI;YAChBH,cAAc,CAACrI,KAAf,GAAuBF,MAAM,CAACyI,MAAP,CACnBF,cAAc,CAACrI,KADI,EAEnBwI,SAAS,CAACxI,KAFS,CAAvB;YAIAqI,cAAc,CAAClI,OAAf,GAAyBL,MAAM,CAACyI,MAAP,CACrBF,cAAc,CAAClI,OADM,EAErBqI,SAAS,CAACrI,OAFW,CAAzB;YAIA,OAAOkI,cAAP;UACH,CAfM,CAAP;QAgBH;;QAED,OAAOxI,WAAP;MACH,CApEE,EAqEFoI,IArEE,CAqEG,UAAApI,WAAW,EAAI;QACjB,IAAMK,GAA0C,GAAG;UAC/CC,OAAO,EAAE,EADsC;UAE/CH,KAAK,EAAE;QAFwC,CAAnD;QAIAF,MAAM,CAAC6E,OAAP,CAAe9E,WAAW,CAACM,OAA3B,EAAoCgD,OAApC,CAA4C,iBAAY;UAAA,IAAVsF,CAAU;UAAA,IAAPvC,CAAO;UACpDhG,GAAG,CAACC,OAAJ,CAAYsI,CAAZ,IAAiBhB,wCAAwC,CAACvB,CAAD,CAAzD;QACH,CAFD;QAGApG,MAAM,CAAC6E,OAAP,CAAe9E,WAAW,CAACG,KAA3B,EAAkCmD,OAAlC,CAA0C,iBAAgB;UAAA,IAAdsF,CAAc;UAAA,IAAXzI,KAAW;UACtDE,GAAG,CAACF,KAAJ,CAAUyI,CAAV,IAAef,qCAAqC,CAAC1H,KAAD,CAApD;QACH,CAFD;QAGA,OAAOE,GAAP;MACH,CAjFE,CAAP;IAkFH,CAhGyE;IAiG1EkB,KAjG0E,iBAiGpEsH,aAjGoE,EAiGrD;MACjB,OAAO7B,QAAQ,CAACmB,SAAT,CACH;QAAA,OAAM3H,eAAe,CAACe,KAAhB,CAAsBsH,aAAtB,CAAN;MAAA,CADG,EAELT,IAFK,CAEA,UAAA5G,WAAW,EAAI;QAClB,OAAO;UACHE,SAAS,EAAEF,WAAW,CAACE,SAAZ,CAAsB9C,GAAtB,CAA0B,UAAAgC,GAAG;YAAA,OAAIgH,wCAAwC,CAAChH,GAAD,CAA5C;UAAA,CAA7B;QADR,CAAP;MAGH,CANM,CAAP;IAOH,CAzGyE;IA0G1EF,iBA1G0E,6BA0GxDoI,GA1GwD,EA0GnDC,OA1GmD,EA0G1C;MAC5B,OAAO/B,QAAQ,CAACmB,SAAT,CACH;QAAA,OAAM3H,eAAe,CAACE,iBAAhB,CAAkCoI,GAAlC,EAAuCC,OAAvC,CAAN;MAAA,CADG,EAELX,IAFK,CAEA,UAAAY,UAAU,EAAI;QACjB,IAAM3I,GAAkC,GAAG,EAA3C;QACAJ,MAAM,CAAC6E,OAAP,CAAekE,UAAf,EAA2B1F,OAA3B,CAAmC,iBAAgB;UAAA,IAAd2F,GAAc;UAAA,IAATrI,GAAS;UAC/CP,GAAG,CAAC4I,GAAD,CAAH,GAAWrB,wCAAwC,CAAChH,GAAD,CAAnD;QACH,CAFD;QAGA,OAAOP,GAAP;MACH,CARM,CAAP;IASH,CApHyE;IAqH1E6I,iBArH0E,6BAsHtEzI,UAtHsE,EAuHtEuE,YAvHsE,EAwHxE;MACE,OAAOgC,QAAQ,CAACmB,SAAT,CACH;QAAA,OAAM3H,eAAe,CAAC0I,iBAAhB,CAAkCzI,UAAlC,EAA8CuE,YAA9C,CAAN;MAAA,CADG,CAAP;IAGH,CA5HyE;IA6H1EmE,wBA7H0E,oCA6HjDC,KA7HiD,EA6HlChF,UA7HkC,EA6HhB;MACtD,OAAO4C,QAAQ,CAACmB,SAAT,CACH;QAAA,OAAM3H,eAAe,CAAC2I,wBAAhB,CAAyCC,KAAzC,EAAgDhF,UAAhD,CAAN;MAAA,CADG,EAELgE,IAFK,CAEA,UAAAiB,MAAM,EAAI;QACb,OAAOA,MAAM,CAACzK,GAAP,CAAW,UAAAsJ,GAAG;UAAA,OAAK;YACtB9D,UAAU,EAAE8D,GAAG,CAAC9D,UADM;YAEtBI,QAAQ,EAAEoD,wCAAwC,CAACM,GAAG,CAAC1D,QAAL;UAF5B,CAAL;QAAA,CAAd,CAAP;MAIH,CAPM,CAAP;IAQH,CAtIyE;IAuI1E8E,OAvI0E,mBAuIlEC,cAvIkE,EAuI1C;MAC5B,OAAOvC,QAAQ,CAACmB,SAAT,CACH;QAAA,OAAM3H,eAAe,CAAC8I,OAAhB,CAAwBC,cAAxB,CAAN;MAAA,CADG,CAAP;IAGH,CA3IyE;IA4I1EC,MA5I0E,oBA4IjE;MACL,OAAOxC,QAAQ,CAACmB,SAAT,CACH;QAAA,OAAM3H,eAAe,CAACgJ,MAAhB,EAAN;MAAA,CADG,CAAP;IAGH,CAhJyE;IAiJ1EC,KAjJ0E,mBAiJlE;MACJ,OAAOzC,QAAQ,CAACmB,SAAT,CACH;QAAA,OAAM3H,eAAe,CAACiJ,KAAhB,EAAN;MAAA,CADG,CAAP;IAGH,CArJyE;IAsJ1EC,YAtJ0E,0BAsJ3D;MACX,OAAOlJ,eAAe,CAACkJ,YAAhB,GAA+BC,IAA/B,CACH/K,GAAG,CAAC,UAAAsF,SAAS,EAAI;QACb,IAAM7D,GAA+E,GAAG;UACpF4C,EAAE,EAAEiB,SAAS,CAACjB,EADsE;UAEpFkB,MAAM,EAAED,SAAS,CAACC,MAAV,CAAiBvF,GAAjB,CAAqB,UAAAgL,KAAK,EAAI;YAClC,OAAO;cACHtH,OAAO,EAAEsH,KAAK,CAACtH,OADZ;cAEH7B,UAAU,EAAEmJ,KAAK,CAACnJ,UAFf;cAGHkC,OAAO,EAAEiH,KAAK,CAACjH,OAHZ;cAIHD,SAAS,EAAEkH,KAAK,CAAClH,SAJd;cAKHR,MAAM,EAAE;gBACJe,EAAE,EAAE2G,KAAK,CAAC1H,MAAN,CAAae,EADb;gBAEJd,SAAS,EAAEyH,KAAK,CAAC1H,MAAN,CAAaC,SAFpB;gBAGJvB,GAAG,EAAEgJ,KAAK,CAAC1H,MAAN,CAAatB,GAAb,GAAmBgH,wCAAwC,CAACgC,KAAK,CAAC1H,MAAN,CAAatB,GAAd,CAA3D,GAAgF6B,SAHjF;gBAIJJ,QAAQ,EAAEuH,KAAK,CAAC1H,MAAN,CAAaG,QAAb,GAAwBuF,wCAAwC,CAACgC,KAAK,CAAC1H,MAAN,CAAaG,QAAd,CAAhE,GAA0FI;cAJhG;YALL,CAAP;UAYH,CAbO,CAF4E;UAgBpF2B,UAAU,EAAEF,SAAS,CAACE,UAhB8D;UAiBpFtE,OAAO,EAAEoE,SAAS,CAACpE;QAjBiE,CAAxF;QAmBA,OAAOO,GAAP;MACH,CArBE,CADA,CAAP;IAwBH,CA/KyE;IAgL1EwJ,sBAhL0E,oCAgLjD;MACrB,OAAOrJ,eAAe,CAACqJ,sBAAhB,GAAyCF,IAAzC,CACH/K,GAAG,CAAC,UAAAkL,IAAI,EAAI;QACR,IAAMC,kBAAkB,GAAGD,IAAI,CAACE,KAAL,CAAWD,kBAAX,GAAgCnC,wCAAwC,CAACkC,IAAI,CAACE,KAAL,CAAWD,kBAAZ,CAAxE,GAA0GtH,SAArI;QACA,IAAMwH,gBAAgB,GAAGrC,wCAAwC,CAACkC,IAAI,CAACE,KAAL,CAAWC,gBAAZ,CAAjE;QACA,IAAMC,eAAe,GAAGtC,wCAAwC,CAACkC,IAAI,CAACE,KAAL,CAAWE,eAAZ,CAAhE;QACA,OAAO;UACHjH,EAAE,EAAE6G,IAAI,CAAC7G,EADN;UAEHnD,OAAO,EAAEgK,IAAI,CAAChK,OAFX;UAGHkK,KAAK,EAAE;YACHD,kBAAkB,EAAlBA,kBADG;YAEHG,eAAe,EAAfA,eAFG;YAGHD,gBAAgB,EAAhBA;UAHG;QAHJ,CAAP;MASH,CAbE,CADA,CAAP;IAgBH,CAjMyE;IAkM1EE,4BAlM0E,wCAkM7CC,YAlM6C,EAkM/B;MAEvC,IAAIA,YAAY,CAACC,MAAb,CAAoBC,OAAxB,EAAiC;QAC7B,OAAO9J,eAAe,CAAC2J,4BAAhB,CAA6CC,YAA7C,CAAP;MACH;;MAED,IAAMzC,UAAU,GAAG;QACfX,QAAQ,EAARA,QADe;QAEf5D,WAAW,EAAXA,WAFe;QAGfjC,MAAM,EAAE8F,YAHO;QAIfrG,GAAG,EAAEX,MAAM,CAACyI,MAAP,CACD,EADC,EAED0B,YAAY,CAACC,MAAb,CAAoBpI,YAFnB,EAGD;UACIsB,KAAK,EAAEhE,wBAAwB,EADnC;UAEIiG,IAAI,EAAElG,kBAAkB,EAF5B;UAGIyF,YAAY,EAAE;QAHlB,CAHC;MAJU,CAAnB;MAcA4C,UAAU,CAAC/G,GAAX,CAAe4E,IAAf,GAAsBtG,cAAc,CAACyI,UAAU,CAAC/G,GAAZ,CAApC;MAEA/B,cAAc,CAAC,2BAAD,EAA8B8I,UAA9B,CAAd;MACA,IAAM4C,eAAe,GAAG5C,UAAU,CAAC/G,GAAnC;MAEA,IAAMqB,YAAY,GAAG5C,SAAS,CAACkL,eAAD,CAA9B;MACA,OAAQtI,YAAD,CAAsBsB,KAA7B;MACA,OAAQtB,YAAD,CAAsBuD,IAA7B;MACA,OAAQvD,YAAD,CAAsB8C,YAA7B;MAEA,OAAOvE,eAAe,CAAC2J,4BAAhB,CAA6C;QAChDlH,EAAE,EAAEmH,YAAY,CAACnH,EAD+B;QAEhDoH,MAAM,EAAE;UACJC,OAAO,EAAE,KADL;UAEJrI,YAAY,EAAZA;QAFI;MAFwC,CAA7C,CAAP;IAOH;EAvOyE,CAA9E;EAyOA,OAAO5B,GAAP;AACH"}