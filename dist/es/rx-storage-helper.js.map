{"version":3,"file":"rx-storage-helper.js","names":["map","runPluginHooks","overwritable","newRxError","fillPrimaryKey","getPrimaryFieldOfPrimaryKey","createRevision","firstPropertyValueOfObject","flatClone","now","randomCouchString","writeSingle","instance","writeRow","bulkWrite","writeResult","Object","keys","error","length","ret","success","getSingleDocument","storageInstance","documentId","findDocumentsById","results","doc","getAllDocuments","primaryKey","storage","getAllQueryPrepared","statics","prepareQuery","schema","selector","sort","skip","query","queryResult","allDocs","documents","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","change","operation","previousDocumentData","previous","eventId","collectionName","name","undefined","startTime","endTime","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","id","pouchDbError","data","categorizeBulkWriteRows","primaryPath","docsInDb","bulkWriteRows","bulkInsertDocs","bulkUpdateDocs","errors","changedDocumentIds","eventBulk","events","forEach","document","documentInDb","get","insertedIsDeleted","_deleted","push","getUniqueDeterministicEventKey","revInDb","_rev","err","isError","writeDoc","args","docId","binaryValues","binary","v","join","eventKey","databaseName","hashAttachmentData","attachmentBase64String","storageStatics","hash","atob","getAttachmentSize","getWrappedStorageInstance","database","rxJsonSchema","transformDocumentDataFromRxDBToRxStorage","_meta","isDevMode","lwt","hookParams","transformDocumentDataFromRxStorageToRxDB","internals","options","rows","toStorageWriteRows","row","lockedRun","then","entries","k","preparedQuery","ids","deleted","findResult","key","getAttachmentData","attachmentId","getChangedDocumentsSince","limit","checkpoint","result","cleanup","minDeletedTime","remove","close","changeStream","pipe","event"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport type { ChangeEvent } from 'event-reduce-js';\nimport { map } from 'rxjs/operators';\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport { fillPrimaryKey, getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageStatics\n} from './types';\nimport {\n    createRevision,\n    firstPropertyValueOfObject,\n    flatClone,\n    now,\n    randomCouchString\n} from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\n/**\n * Returns all non-deleted documents\n * of the storage.\n */\nexport async function getAllDocuments<RxDocType>(\n    primaryKey: keyof RxDocType,\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n    const storage = storageInstance.storage;\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [primaryKey]: 'asc' } as any],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    let documentData;\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        documentData = rxStorageChangeEvent.change.doc;\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        previousDocumentData = rxStorageChangeEvent.change.previous;\n    }\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageBulkWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('COL19', {\n                collection: collection.name,\n                id: documentId,\n                pouchDbError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: keyof RxDocType,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     */\n    docsInDb: Map<RxDocumentData<RxDocType>[keyof RxDocType], RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[]\n): {\n    bulkInsertDocs: BulkWriteRow<RxDocType>[];\n    bulkUpdateDocs: BulkWriteRow<RxDocType>[];\n    /**\n     * Ids of all documents that are changed\n     * and so their change must be written into the\n     * sequences table so that they can be fetched via\n     * RxStorageInstance().getChangedDocumentsSince().\n     */\n    changedDocumentIds: RxDocumentData<RxDocType>[keyof RxDocType][];\n\n    /**\n     * TODO directly return a docId->error object\n     * like in the return value of bulkWrite().\n     * This will improve performance because we do not have to iterate\n     * over the error array again.\n     */\n    errors: RxStorageBulkWriteError<RxDocType>[];\n    eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>;\n} {\n    const bulkInsertDocs: BulkWriteRow<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRow<RxDocType>[] = [];\n    const errors: RxStorageBulkWriteError<RxDocType>[] = [];\n    const changedDocumentIds: RxDocumentData<RxDocType>[keyof RxDocType][] = [];\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n        id: randomCouchString(10),\n        events: []\n    };\n\n\n    const startTime = now();\n    bulkWriteRows.forEach(writeRow => {\n        const id = writeRow.document[primaryPath];\n        const documentInDb = docsInDb.get(id);\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = writeRow.document._deleted ? true : false;\n            bulkInsertDocs.push(writeRow);\n            if (!insertedIsDeleted) {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change: {\n                        doc: writeRow.document,\n                        id: id as any,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            // inserting a deleted document is possible\n            // without sending the previous data.\n            if (!writeRow.previous && documentInDb._deleted) {\n                writeRow.previous = documentInDb;\n            }\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !writeRow.previous &&\n                    !documentInDb._deleted\n                ) ||\n                (\n                    !!writeRow.previous &&\n                    revInDb !== writeRow.previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageBulkWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: id as any,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors.push(err);\n                return;\n            }\n\n            bulkUpdateDocs.push(writeRow);\n            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n            const writeDoc = writeRow.document;\n            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'INSERT',\n                    previous: null,\n                    doc: writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'UPDATE',\n                    previous: writeRow.previous,\n                    doc: writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'DELETE',\n                    previous: writeRow.previous,\n                    doc: null\n                };\n            }\n            if (!change) {\n                if (\n                    writeRow.previous && writeRow.previous._deleted &&\n                    writeRow.document._deleted\n                ) {\n                    // deleted doc got overwritten with other deleted doc -> do not send an event\n                } else {\n                    throw newRxError('SNH', { args: { writeRow } });\n                }\n            } else {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change,\n                    startTime,\n                    endTime: now()\n                });\n            }\n        }\n    });\n\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        errors,\n        changedDocumentIds,\n        eventBulk\n    };\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates.\n */\nexport function getUniqueDeterministicEventKey(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: string,\n    writeRow: BulkWriteRow<any>\n): string {\n    const docId = writeRow.document[primaryPath];\n    const binaryValues: boolean[] = [\n        !!writeRow.previous,\n        (writeRow.previous && writeRow.previous._deleted),\n        !!writeRow.document._deleted\n    ];\n    const binary = binaryValues.map(v => v ? '1' : '0').join('');\n    const eventKey = storageInstance.databaseName + '|' + storageInstance.collectionName + '|' + docId + '|' + '|' + binary + '|' + writeRow.document._rev;\n    return eventKey;\n}\n\n\nexport function hashAttachmentData(\n    attachmentBase64String: string,\n    storageStatics: RxStorageStatics\n): Promise<string> {\n    return storageStatics.hash(atob(attachmentBase64String));\n}\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\n\nexport function getWrappedStorageInstance<RxDocType, Internals, InstanceCreationOptions>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        // ensure primary key has not been changed\n        if (overwritable.isDevMode()) {\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n        }\n\n        data._meta.lwt = now();\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n\n        /**\n         * Run the hooks once for the previous doc,\n         * once for the new write data\n         */\n        let previous = writeRow.previous;\n        if (previous) {\n            hookParams.doc = previous;\n            runPluginHooks('preWriteToStorageInstance', hookParams);\n            previous = hookParams.doc;\n        }\n\n        hookParams.doc = data;\n        runPluginHooks('preWriteToStorageInstance', hookParams);\n        data = hookParams.doc;\n\n        /**\n         * Update the revision after the hooks have run.\n         * Do not update the revision if no previous is given,\n         * because the migration plugin must be able to do an insert\n         * with a pre-created revision.\n         */\n        if (\n            writeRow.previous ||\n            !data._rev\n        ) {\n            data._rev = createRevision(data, writeRow.previous);\n        }\n\n        return {\n            document: data,\n            previous\n        };\n    }\n\n    function transformDocumentDataFromRxStorageToRxDB(\n        data: any\n    ): any {\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n        runPluginHooks('postReadFromInstance', hookParams);\n        return hookParams.doc;\n    }\n\n    const ret: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        storage: storageInstance.storage,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(rows: BulkWriteRow<RxDocType>[]) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows\n                )\n            ).then(writeResult => {\n                const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                    success: {},\n                    error: {}\n                };\n                Object.entries(writeResult.error).forEach(([k, v]) => {\n                    ret.error[k] = v;\n                });\n                Object.entries(writeResult.success).forEach(([k, v]) => {\n                    ret.success[k] = transformDocumentDataFromRxStorageToRxDB(v);\n                });\n\n                return ret;\n            });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            ).then(queryResult => {\n                return {\n                    documents: queryResult.documents.map(doc => transformDocumentDataFromRxStorageToRxDB(doc))\n                };\n            });\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            ).then(findResult => {\n                const ret: { [documentId: string]: RxDocumentData<RxDocType>; } = {};\n                Object.entries(findResult).forEach(([key, doc]) => {\n                    ret[key] = transformDocumentDataFromRxStorageToRxDB(doc);\n                });\n                return ret;\n            });\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(limit, checkpoint)\n            ).then(result => {\n                return result.map(row => ({\n                    checkpoint: row.checkpoint,\n                    document: transformDocumentDataFromRxStorageToRxDB(row.document)\n                }));\n            });\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream().pipe(\n                map(eventBulk => {\n                    const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n                        id: eventBulk.id,\n                        events: eventBulk.events.map(event => {\n                            return {\n                                eventId: event.eventId,\n                                documentId: event.documentId,\n                                endTime: event.endTime,\n                                startTime: event.startTime,\n                                change: {\n                                    id: event.change.id,\n                                    operation: event.change.operation,\n                                    doc: event.change.doc ? transformDocumentDataFromRxStorageToRxDB(event.change.doc) : undefined,\n                                    previous: event.change.previous ? transformDocumentDataFromRxStorageToRxDB(event.change.previous) : undefined\n                                }\n                            }\n\n                        })\n                    };\n                    return ret;\n                })\n            )\n        }\n    };\n    return ret;\n}\n"],"mappings":"AAAA;AACA;AACA;AAGA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,cAAT,EAAyBC,2BAAzB,QAA4D,oBAA5D;AAgBA,SACIC,cADJ,EAEIC,0BAFJ,EAGIC,SAHJ,EAIIC,GAJJ,EAKIC,iBALJ,QAMO,QANP;;AA8CA;AACA;AACA;AACA;AACA,WAAsBC,WAAtB,YAAsBA,WAAtB,CACIC,QADJ,EAEIC,QAFJ;EAAA,IAGsC;IAAA,uBACRD,QAAQ,CAACE,SAAT,CACtB,CAACD,QAAD,CADsB,CADQ,iBAC5BE,WAD4B;MAAA,IAK9BC,MAAM,CAACC,IAAP,CAAYF,WAAW,CAACG,KAAxB,EAA+BC,MAA/B,GAAwC,CALV;QAM9B,IAAMD,KAAK,GAAGX,0BAA0B,CAACQ,WAAW,CAACG,KAAb,CAAxC;QACA,MAAMA,KAAN;MAP8B;QAS9B,IAAME,GAAG,GAAGb,0BAA0B,CAACQ,WAAW,CAACM,OAAb,CAAtC;QACA,OAAOD,GAAP;MAV8B;IAAA;EAYrC,CAfD;IAAA;EAAA;AAAA;AAjBA,WAAsBE,iBAAtB,YAAsBA,iBAAtB,CACIC,eADJ,EAEIC,UAFJ;EAAA,IAG6C;IAAA,uBACnBD,eAAe,CAACE,iBAAhB,CAAkC,CAACD,UAAD,CAAlC,EAAgD,KAAhD,CADmB,iBACnCE,OADmC;MAEzC,IAAMC,GAAG,GAAGD,OAAO,CAACF,UAAD,CAAnB;;MAFyC,IAGrCG,GAHqC;QAIrC,OAAOA,GAAP;MAJqC;QAMrC,OAAO,IAAP;MANqC;IAAA;EAQ5C,CAXD;IAAA;EAAA;AAAA;;AAtBA;AACA;AACA;AACA;AACA,WAAsBC,eAAtB,YAAsBA,eAAtB,CACIC,UADJ,EAEIN,eAFJ;EAAA,IAGwC;IAAA;;IACpC,IAAMO,OAAO,GAAGP,eAAe,CAACO,OAAhC;IACA,IAAMC,mBAAmB,GAAGD,OAAO,CAACE,OAAR,CAAgBC,YAAhB,CACxBV,eAAe,CAACW,MADQ,EAExB;MACIC,QAAQ,EAAE,EADd;MAEIC,IAAI,EAAE,kBAAIP,UAAJ,IAAiB,KAAjB,QAFV;MAGIQ,IAAI,EAAE;IAHV,CAFwB,CAA5B;IAFoC,uBAUVd,eAAe,CAACe,KAAhB,CAAsBP,mBAAtB,CAVU,iBAU9BQ,WAV8B;MAWpC,IAAMC,OAAO,GAAGD,WAAW,CAACE,SAA5B;MACA,OAAOD,OAAP;IAZoC;EAavC,CAhBD;IAAA;EAAA;AAAA;AAPA,OAAO,IAAME,qBAAqB,GAAG,gBAA9B;AACP,OAAO,IAAMC,mCAAmC,GAAG,0BAA5C;AA0DP,OAAO,SAASC,iCAAT,CACHC,OADG,EAEHC,oBAFG,EAGHC,YAHG,EAImB;EACtB,IAAIC,YAAJ;;EACA,IAAIF,oBAAoB,CAACG,MAArB,CAA4BC,SAA5B,KAA0C,QAA9C,EAAwD;IACpDF,YAAY,GAAGF,oBAAoB,CAACG,MAArB,CAA4BtB,GAA3C;EACH;;EACD,IAAIwB,oBAAJ;;EACA,IAAIL,oBAAoB,CAACG,MAArB,CAA4BC,SAA5B,KAA0C,QAA9C,EAAwD;IACpDC,oBAAoB,GAAGL,oBAAoB,CAACG,MAArB,CAA4BG,QAAnD;EACH;;EACD,IAAMhC,GAA2B,GAAG;IAChCiC,OAAO,EAAEP,oBAAoB,CAACO,OADE;IAEhC7B,UAAU,EAAEsB,oBAAoB,CAACtB,UAFD;IAGhC8B,cAAc,EAAEP,YAAY,GAAGA,YAAY,CAACQ,IAAhB,GAAuBC,SAHnB;IAIhCC,SAAS,EAAEX,oBAAoB,CAACW,SAJA;IAKhCC,OAAO,EAAEZ,oBAAoB,CAACY,OALE;IAMhCb,OAAO,EAAPA,OANgC;IAOhCK,SAAS,EAAEJ,oBAAoB,CAACG,MAArB,CAA4BC,SAPP;IAQhCF,YAAY,EAAE9C,YAAY,CAACyD,qBAAb,CAAmCX,YAAnC,CARkB;IAShCG,oBAAoB,EAAEjD,YAAY,CAACyD,qBAAb,CAAmCR,oBAAnC;EATU,CAApC;EAWA,OAAO/B,GAAP;AACH;AAED,OAAO,SAASwC,0BAAT,CACHC,UADG,EAEHrC,UAFG,EAGHsC,SAHG,EAIH5C,KAJG,EAKL;EACE,IAAIA,KAAJ,EAAW;IACP,IAAIA,KAAK,CAAC6C,MAAN,KAAiB,GAArB,EAA0B;MACtB,MAAM5D,UAAU,CAAC,OAAD,EAAU;QACtB0D,UAAU,EAAEA,UAAU,CAACN,IADD;QAEtBS,EAAE,EAAExC,UAFkB;QAGtByC,YAAY,EAAE/C,KAHQ;QAItBgD,IAAI,EAAEJ;MAJgB,CAAV,CAAhB;IAMH,CAPD,MAOO;MACH,MAAM5C,KAAN;IACH;EACJ;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiD,uBAAT,CACH5C,eADG,EAEH6C,WAFG;AAGH;AACJ;AACA;AACA;AACA;AACIC,QARG;AASH;AACJ;AACA;AACA;AACIC,aAbG,EAiCL;EACE,IAAMC,cAAyC,GAAG,EAAlD;EACA,IAAMC,cAAyC,GAAG,EAAlD;EACA,IAAMC,MAA4C,GAAG,EAArD;EACA,IAAMC,kBAAgE,GAAG,EAAzE;EACA,IAAMC,SAAqE,GAAG;IAC1EX,EAAE,EAAEtD,iBAAiB,CAAC,EAAD,CADqD;IAE1EkE,MAAM,EAAE;EAFkE,CAA9E;EAMA,IAAMnB,SAAS,GAAGhD,GAAG,EAArB;EACA6D,aAAa,CAACO,OAAd,CAAsB,UAAAhE,QAAQ,EAAI;IAC9B,IAAMmD,EAAE,GAAGnD,QAAQ,CAACiE,QAAT,CAAkBV,WAAlB,CAAX;IACA,IAAMW,YAAY,GAAGV,QAAQ,CAACW,GAAT,CAAahB,EAAb,CAArB;;IAEA,IAAI,CAACe,YAAL,EAAmB;MACf;AACZ;AACA;AACA;MACY,IAAME,iBAAiB,GAAGpE,QAAQ,CAACiE,QAAT,CAAkBI,QAAlB,GAA6B,IAA7B,GAAoC,KAA9D;MACAX,cAAc,CAACY,IAAf,CAAoBtE,QAApB;;MACA,IAAI,CAACoE,iBAAL,EAAwB;QACpBP,kBAAkB,CAACS,IAAnB,CAAwBnB,EAAxB;QACAW,SAAS,CAACC,MAAV,CAAiBO,IAAjB,CAAsB;UAClB9B,OAAO,EAAE+B,8BAA8B,CAAC7D,eAAD,EAAkB6C,WAAlB,EAAsCvD,QAAtC,CADrB;UAElBW,UAAU,EAAEwC,EAFM;UAGlBf,MAAM,EAAE;YACJtB,GAAG,EAAEd,QAAQ,CAACiE,QADV;YAEJd,EAAE,EAAEA,EAFA;YAGJd,SAAS,EAAE,QAHP;YAIJE,QAAQ,EAAE;UAJN,CAHU;UASlBK,SAAS,EAATA,SATkB;UAUlBC,OAAO,EAAEjD,GAAG;QAVM,CAAtB;MAYH;IACJ,CAtBD,MAsBO;MACH;MACA,IAAM4E,OAAe,GAAGN,YAAY,CAACO,IAArC,CAFG,CAIH;MACA;;MACA,IAAI,CAACzE,QAAQ,CAACuC,QAAV,IAAsB2B,YAAY,CAACG,QAAvC,EAAiD;QAC7CrE,QAAQ,CAACuC,QAAT,GAAoB2B,YAApB;MACH;MAED;AACZ;AACA;;;MACY,IAEQ,CAAClE,QAAQ,CAACuC,QAAV,IACA,CAAC2B,YAAY,CAACG,QAFlB,IAKI,CAAC,CAACrE,QAAQ,CAACuC,QAAX,IACAiC,OAAO,KAAKxE,QAAQ,CAACuC,QAAT,CAAkBkC,IAPtC,EASE;QACE;QACA,IAAMC,GAAuC,GAAG;UAC5CC,OAAO,EAAE,IADmC;UAE5CzB,MAAM,EAAE,GAFoC;UAG5CvC,UAAU,EAAEwC,EAHgC;UAI5CnD,QAAQ,EAAEA,QAJkC;UAK5CkE,YAAY,EAAZA;QAL4C,CAAhD;QAOAN,MAAM,CAACU,IAAP,CAAYI,GAAZ;QACA;MACH;;MAEDf,cAAc,CAACW,IAAf,CAAoBtE,QAApB;MACA,IAAIoC,MAAqD,GAAG,IAA5D;MACA,IAAMwC,QAAQ,GAAG5E,QAAQ,CAACiE,QAA1B;;MACA,IAAIjE,QAAQ,CAACuC,QAAT,IAAqBvC,QAAQ,CAACuC,QAAT,CAAkB8B,QAAvC,IAAmD,CAACO,QAAQ,CAACP,QAAjE,EAA2E;QACvEjC,MAAM,GAAG;UACLe,EAAE,EAAEA,EADC;UAELd,SAAS,EAAE,QAFN;UAGLE,QAAQ,EAAE,IAHL;UAILzB,GAAG,EAAE8D;QAJA,CAAT;MAMH,CAPD,MAOO,IAAI5E,QAAQ,CAACuC,QAAT,IAAqB,CAACvC,QAAQ,CAACuC,QAAT,CAAkB8B,QAAxC,IAAoD,CAACO,QAAQ,CAACP,QAAlE,EAA4E;QAC/EjC,MAAM,GAAG;UACLe,EAAE,EAAEA,EADC;UAELd,SAAS,EAAE,QAFN;UAGLE,QAAQ,EAAEvC,QAAQ,CAACuC,QAHd;UAILzB,GAAG,EAAE8D;QAJA,CAAT;MAMH,CAPM,MAOA,IAAI5E,QAAQ,CAACuC,QAAT,IAAqB,CAACvC,QAAQ,CAACuC,QAAT,CAAkB8B,QAAxC,IAAoDO,QAAQ,CAACP,QAAjE,EAA2E;QAC9EjC,MAAM,GAAG;UACLe,EAAE,EAAEA,EADC;UAELd,SAAS,EAAE,QAFN;UAGLE,QAAQ,EAAEvC,QAAQ,CAACuC,QAHd;UAILzB,GAAG,EAAE;QAJA,CAAT;MAMH;;MACD,IAAI,CAACsB,MAAL,EAAa;QACT,IACIpC,QAAQ,CAACuC,QAAT,IAAqBvC,QAAQ,CAACuC,QAAT,CAAkB8B,QAAvC,IACArE,QAAQ,CAACiE,QAAT,CAAkBI,QAFtB,EAGE,CACE;QACH,CALD,MAKO;UACH,MAAM/E,UAAU,CAAC,KAAD,EAAQ;YAAEuF,IAAI,EAAE;cAAE7E,QAAQ,EAARA;YAAF;UAAR,CAAR,CAAhB;QACH;MACJ,CATD,MASO;QACH6D,kBAAkB,CAACS,IAAnB,CAAwBnB,EAAxB;QACAW,SAAS,CAACC,MAAV,CAAiBO,IAAjB,CAAsB;UAClB9B,OAAO,EAAE+B,8BAA8B,CAAC7D,eAAD,EAAkB6C,WAAlB,EAAsCvD,QAAtC,CADrB;UAElBW,UAAU,EAAEwC,EAFM;UAGlBf,MAAM,EAANA,MAHkB;UAIlBQ,SAAS,EAATA,SAJkB;UAKlBC,OAAO,EAAEjD,GAAG;QALM,CAAtB;MAOH;IACJ;EACJ,CA1GD;EA6GA,OAAO;IACH8D,cAAc,EAAdA,cADG;IAEHC,cAAc,EAAdA,cAFG;IAGHC,MAAM,EAANA,MAHG;IAIHC,kBAAkB,EAAlBA,kBAJG;IAKHC,SAAS,EAATA;EALG,CAAP;AAOH;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASS,8BAAT,CACH7D,eADG,EAEH6C,WAFG,EAGHvD,QAHG,EAIG;EACN,IAAM8E,KAAK,GAAG9E,QAAQ,CAACiE,QAAT,CAAkBV,WAAlB,CAAd;EACA,IAAMwB,YAAuB,GAAG,CAC5B,CAAC,CAAC/E,QAAQ,CAACuC,QADiB,EAE3BvC,QAAQ,CAACuC,QAAT,IAAqBvC,QAAQ,CAACuC,QAAT,CAAkB8B,QAFZ,EAG5B,CAAC,CAACrE,QAAQ,CAACiE,QAAT,CAAkBI,QAHQ,CAAhC;EAKA,IAAMW,MAAM,GAAGD,YAAY,CAAC5F,GAAb,CAAiB,UAAA8F,CAAC;IAAA,OAAIA,CAAC,GAAG,GAAH,GAAS,GAAd;EAAA,CAAlB,EAAqCC,IAArC,CAA0C,EAA1C,CAAf;EACA,IAAMC,QAAQ,GAAGzE,eAAe,CAAC0E,YAAhB,GAA+B,GAA/B,GAAqC1E,eAAe,CAAC+B,cAArD,GAAsE,GAAtE,GAA4EqC,KAA5E,GAAoF,GAApF,GAA0F,GAA1F,GAAgGE,MAAhG,GAAyG,GAAzG,GAA+GhF,QAAQ,CAACiE,QAAT,CAAkBQ,IAAlJ;EACA,OAAOU,QAAP;AACH;AAGD,OAAO,SAASE,kBAAT,CACHC,sBADG,EAEHC,cAFG,EAGY;EACf,OAAOA,cAAc,CAACC,IAAf,CAAoBC,IAAI,CAACH,sBAAD,CAAxB,CAAP;AACH;AACD,OAAO,SAASI,iBAAT,CACHJ,sBADG,EAEG;EACN,OAAOG,IAAI,CAACH,sBAAD,CAAJ,CAA6BhF,MAApC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASqF,yBAAT,CACHC,QADG,EAEHlF,eAFG;AAGH;AACJ;AACA;AACA;AACImF,YAPG,EAQ6D;EAChExG,YAAY,CAACyD,qBAAb,CAAmC+C,YAAnC;EACA,IAAMtC,WAAW,GAAG/D,2BAA2B,CAACqG,YAAY,CAAC7E,UAAd,CAA/C;;EAEA,SAAS8E,wCAAT,CACI9F,QADJ,EAEE;IACE,IAAIqD,IAAI,GAAG1D,SAAS,CAACK,QAAQ,CAACiE,QAAV,CAApB;IACAZ,IAAI,CAAC0C,KAAL,GAAapG,SAAS,CAAC0D,IAAI,CAAC0C,KAAN,CAAtB,CAFF,CAIE;;IACA,IAAI1G,YAAY,CAAC2G,SAAb,EAAJ,EAA8B;MAC1B3C,IAAI,GAAG9D,cAAc,CACjBgE,WADiB,EAEjBsC,YAFiB,EAGjBxC,IAHiB,CAArB;IAKH;;IAEDA,IAAI,CAAC0C,KAAL,CAAWE,GAAX,GAAiBrG,GAAG,EAApB;IACA,IAAMsG,UAAU,GAAG;MACfN,QAAQ,EAARA,QADe;MAEfrC,WAAW,EAAXA,WAFe;MAGflC,MAAM,EAAEwE,YAHO;MAIf/E,GAAG,EAAEuC;IAJU,CAAnB;IAQA;AACR;AACA;AACA;;IACQ,IAAId,QAAQ,GAAGvC,QAAQ,CAACuC,QAAxB;;IACA,IAAIA,QAAJ,EAAc;MACV2D,UAAU,CAACpF,GAAX,GAAiByB,QAAjB;MACAnD,cAAc,CAAC,2BAAD,EAA8B8G,UAA9B,CAAd;MACA3D,QAAQ,GAAG2D,UAAU,CAACpF,GAAtB;IACH;;IAEDoF,UAAU,CAACpF,GAAX,GAAiBuC,IAAjB;IACAjE,cAAc,CAAC,2BAAD,EAA8B8G,UAA9B,CAAd;IACA7C,IAAI,GAAG6C,UAAU,CAACpF,GAAlB;IAEA;AACR;AACA;AACA;AACA;AACA;;IACQ,IACId,QAAQ,CAACuC,QAAT,IACA,CAACc,IAAI,CAACoB,IAFV,EAGE;MACEpB,IAAI,CAACoB,IAAL,GAAYhF,cAAc,CAAC4D,IAAD,EAAOrD,QAAQ,CAACuC,QAAhB,CAA1B;IACH;;IAED,OAAO;MACH0B,QAAQ,EAAEZ,IADP;MAEHd,QAAQ,EAARA;IAFG,CAAP;EAIH;;EAED,SAAS4D,wCAAT,CACI9C,IADJ,EAEO;IACH,IAAM6C,UAAU,GAAG;MACfN,QAAQ,EAARA,QADe;MAEfrC,WAAW,EAAXA,WAFe;MAGflC,MAAM,EAAEwE,YAHO;MAIf/E,GAAG,EAAEuC;IAJU,CAAnB;IAOAjE,cAAc,CAAC,sBAAD,EAAyB8G,UAAzB,CAAd;IACA,OAAOA,UAAU,CAACpF,GAAlB;EACH;;EAED,IAAMP,GAAqE,GAAG;IAC1EU,OAAO,EAAEP,eAAe,CAACO,OADiD;IAE1EI,MAAM,EAAEX,eAAe,CAACW,MAFkD;IAG1E+E,SAAS,EAAE1F,eAAe,CAAC0F,SAH+C;IAI1E3D,cAAc,EAAE/B,eAAe,CAAC+B,cAJ0C;IAK1E2C,YAAY,EAAE1E,eAAe,CAAC0E,YAL4C;IAM1EiB,OAAO,EAAE3F,eAAe,CAAC2F,OANiD;IAO1EpG,SAP0E,qBAOhEqG,IAPgE,EAO/B;MACvC,IAAMC,kBAA6C,GAAGD,IAAI,CACrDnH,GADiD,CAC7C,UAAAqH,GAAG;QAAA,OAAIV,wCAAwC,CAACU,GAAD,CAA5C;MAAA,CAD0C,CAAtD;MAEA,OAAOZ,QAAQ,CAACa,SAAT,CACH;QAAA,OAAM/F,eAAe,CAACT,SAAhB,CACFsG,kBADE,CAAN;MAAA,CADG,EAILG,IAJK,CAIA,UAAAxG,WAAW,EAAI;QAClB,IAAMK,GAA0C,GAAG;UAC/CC,OAAO,EAAE,EADsC;UAE/CH,KAAK,EAAE;QAFwC,CAAnD;QAIAF,MAAM,CAACwG,OAAP,CAAezG,WAAW,CAACG,KAA3B,EAAkC2D,OAAlC,CAA0C,iBAAY;UAAA,IAAV4C,CAAU;UAAA,IAAP3B,CAAO;UAClD1E,GAAG,CAACF,KAAJ,CAAUuG,CAAV,IAAe3B,CAAf;QACH,CAFD;QAGA9E,MAAM,CAACwG,OAAP,CAAezG,WAAW,CAACM,OAA3B,EAAoCwD,OAApC,CAA4C,iBAAY;UAAA,IAAV4C,CAAU;UAAA,IAAP3B,CAAO;UACpD1E,GAAG,CAACC,OAAJ,CAAYoG,CAAZ,IAAiBT,wCAAwC,CAAClB,CAAD,CAAzD;QACH,CAFD;QAIA,OAAO1E,GAAP;MACH,CAjBM,CAAP;IAkBH,CA5ByE;IA6B1EkB,KA7B0E,iBA6BpEoF,aA7BoE,EA6BrD;MACjB,OAAOjB,QAAQ,CAACa,SAAT,CACH;QAAA,OAAM/F,eAAe,CAACe,KAAhB,CAAsBoF,aAAtB,CAAN;MAAA,CADG,EAELH,IAFK,CAEA,UAAAhF,WAAW,EAAI;QAClB,OAAO;UACHE,SAAS,EAAEF,WAAW,CAACE,SAAZ,CAAsBzC,GAAtB,CAA0B,UAAA2B,GAAG;YAAA,OAAIqF,wCAAwC,CAACrF,GAAD,CAA5C;UAAA,CAA7B;QADR,CAAP;MAGH,CANM,CAAP;IAOH,CArCyE;IAsC1EF,iBAtC0E,6BAsCxDkG,GAtCwD,EAsCnDC,OAtCmD,EAsC1C;MAC5B,OAAOnB,QAAQ,CAACa,SAAT,CACH;QAAA,OAAM/F,eAAe,CAACE,iBAAhB,CAAkCkG,GAAlC,EAAuCC,OAAvC,CAAN;MAAA,CADG,EAELL,IAFK,CAEA,UAAAM,UAAU,EAAI;QACjB,IAAMzG,GAAyD,GAAG,EAAlE;QACAJ,MAAM,CAACwG,OAAP,CAAeK,UAAf,EAA2BhD,OAA3B,CAAmC,iBAAgB;UAAA,IAAdiD,GAAc;UAAA,IAATnG,GAAS;UAC/CP,GAAG,CAAC0G,GAAD,CAAH,GAAWd,wCAAwC,CAACrF,GAAD,CAAnD;QACH,CAFD;QAGA,OAAOP,GAAP;MACH,CARM,CAAP;IASH,CAhDyE;IAiD1E2G,iBAjD0E,6BAkDtEvG,UAlDsE,EAmDtEwG,YAnDsE,EAoDxE;MACE,OAAOvB,QAAQ,CAACa,SAAT,CACH;QAAA,OAAM/F,eAAe,CAACwG,iBAAhB,CAAkCvG,UAAlC,EAA8CwG,YAA9C,CAAN;MAAA,CADG,CAAP;IAGH,CAxDyE;IAyD1EC,wBAzD0E,oCAyDjDC,KAzDiD,EAyDlCC,UAzDkC,EAyDhB;MACtD,OAAO1B,QAAQ,CAACa,SAAT,CACH;QAAA,OAAM/F,eAAe,CAAC0G,wBAAhB,CAAyCC,KAAzC,EAAgDC,UAAhD,CAAN;MAAA,CADG,EAELZ,IAFK,CAEA,UAAAa,MAAM,EAAI;QACb,OAAOA,MAAM,CAACpI,GAAP,CAAW,UAAAqH,GAAG;UAAA,OAAK;YACtBc,UAAU,EAAEd,GAAG,CAACc,UADM;YAEtBrD,QAAQ,EAAEkC,wCAAwC,CAACK,GAAG,CAACvC,QAAL;UAF5B,CAAL;QAAA,CAAd,CAAP;MAIH,CAPM,CAAP;IAQH,CAlEyE;IAmE1EuD,OAnE0E,mBAmElEC,cAnEkE,EAmE1C;MAC5B,OAAO7B,QAAQ,CAACa,SAAT,CACH;QAAA,OAAM/F,eAAe,CAAC8G,OAAhB,CAAwBC,cAAxB,CAAN;MAAA,CADG,CAAP;IAGH,CAvEyE;IAwE1EC,MAxE0E,oBAwEjE;MACL,OAAO9B,QAAQ,CAACa,SAAT,CACH;QAAA,OAAM/F,eAAe,CAACgH,MAAhB,EAAN;MAAA,CADG,CAAP;IAGH,CA5EyE;IA6E1EC,KA7E0E,mBA6ElE;MACJ,OAAO/B,QAAQ,CAACa,SAAT,CACH;QAAA,OAAM/F,eAAe,CAACiH,KAAhB,EAAN;MAAA,CADG,CAAP;IAGH,CAjFyE;IAkF1EC,YAlF0E,0BAkF3D;MACX,OAAOlH,eAAe,CAACkH,YAAhB,GAA+BC,IAA/B,CACH1I,GAAG,CAAC,UAAA2E,SAAS,EAAI;QACb,IAAMvD,GAA+D,GAAG;UACpE4C,EAAE,EAAEW,SAAS,CAACX,EADsD;UAEpEY,MAAM,EAAED,SAAS,CAACC,MAAV,CAAiB5E,GAAjB,CAAqB,UAAA2I,KAAK,EAAI;YAClC,OAAO;cACHtF,OAAO,EAAEsF,KAAK,CAACtF,OADZ;cAEH7B,UAAU,EAAEmH,KAAK,CAACnH,UAFf;cAGHkC,OAAO,EAAEiF,KAAK,CAACjF,OAHZ;cAIHD,SAAS,EAAEkF,KAAK,CAAClF,SAJd;cAKHR,MAAM,EAAE;gBACJe,EAAE,EAAE2E,KAAK,CAAC1F,MAAN,CAAae,EADb;gBAEJd,SAAS,EAAEyF,KAAK,CAAC1F,MAAN,CAAaC,SAFpB;gBAGJvB,GAAG,EAAEgH,KAAK,CAAC1F,MAAN,CAAatB,GAAb,GAAmBqF,wCAAwC,CAAC2B,KAAK,CAAC1F,MAAN,CAAatB,GAAd,CAA3D,GAAgF6B,SAHjF;gBAIJJ,QAAQ,EAAEuF,KAAK,CAAC1F,MAAN,CAAaG,QAAb,GAAwB4D,wCAAwC,CAAC2B,KAAK,CAAC1F,MAAN,CAAaG,QAAd,CAAhE,GAA0FI;cAJhG;YALL,CAAP;UAaH,CAdO;QAF4D,CAAxE;QAkBA,OAAOpC,GAAP;MACH,CApBE,CADA,CAAP;IAuBH;EA1GyE,CAA9E;EA4GA,OAAOA,GAAP;AACH"}