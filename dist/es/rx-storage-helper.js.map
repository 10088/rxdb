{"version":3,"sources":["../../src/rx-storage-helper.ts"],"names":["runPluginHooks","overwritable","newRxError","firstPropertyValueOfObject","INTERNAL_STORAGE_NAME","getAllDocuments","storage","storageInstance","getAllQueryPrepared","statics","prepareQuery","schema","selector","query","queryResult","allDocs","documents","getSingleDocument","documentId","findDocumentsById","results","doc","countAllUndeleted","docs","length","getBatch","limit","preparedQuery","result","writeSingle","instance","writeRow","bulkWrite","writeResult","Object","keys","error","ret","success","writeSingleLocal","findLocalDocument","id","findLocalDocumentsById","docList","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","change","operation","hookParams","collection","_crypter","decrypt","previousDocumentData","previous","eventId","collectionName","name","undefined","startTime","endTime","deepFreezeWhenDevMode"],"mappings":"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","sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport type {\n    BulkWriteLocalRow,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxStorage,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageKeyObjectInstance\n} from './types';\nimport { firstPropertyNameOfObject, firstPropertyValueOfObject } from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\n\n/**\n * returns all NON-LOCAL documents\n * TODO this is pouchdb specific should not be needed\n */\nexport async function getAllDocuments<RxDocType>(\n    storage: RxStorage<any, any>,\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {}\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n\n/**\n * get the number of all undeleted documents\n */\nexport async function countAllUndeleted<DocType>(\n    storage: RxStorage<any, any>,\n    storageInstance: RxStorageInstance<DocType, any, any>\n): Promise<number> {\n    const docs = await getAllDocuments(\n        storage,\n        storageInstance\n    );\n    return docs.length;\n}\n\n/**\n * get a batch of documents from the storage-instance\n */\nexport async function getBatch<DocType>(\n    storage: RxStorage<any, any>,\n    storageInstance: RxStorageInstance<DocType, any, any>,\n    limit: number\n): Promise<any[]> {\n    if (limit <= 1) {\n        throw newRxError('P1', {\n            limit\n        });\n    }\n\n    const preparedQuery = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            limit\n        }\n    );\n    const result = await storageInstance.query(preparedQuery);\n    return result.documents;\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n/**\n * Writes a single local document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingleLocal<DocumentData>(\n    instance: RxStorageKeyObjectInstance<any, any>,\n    writeRow: BulkWriteLocalRow<DocumentData>\n): Promise<RxLocalDocumentData<RxLocalDocumentData>> {\n    const writeResult: RxLocalStorageBulkWriteResponse<DocumentData> = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\nexport async function findLocalDocument<DocType>(\n    instance: RxStorageKeyObjectInstance<any, any>,\n    id: string\n): Promise<RxDocumentData<RxLocalDocumentData<DocType>> | null> {\n    const docList = await instance.findLocalDocumentsById([id]);\n    const doc = docList[id];\n    if (!doc) {\n        return null;\n    } else {\n        return doc;\n    }\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    let documentData;\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        if (!rxCollection) {\n            documentData = rxStorageChangeEvent.change.doc;\n        } else {\n            const hookParams = {\n                collection: rxCollection,\n                doc: rxStorageChangeEvent.change.doc as any\n            };\n            runPluginHooks('postReadFromInstance', hookParams);\n            documentData = hookParams.doc;\n            documentData = rxCollection._crypter.decrypt(documentData);\n        }\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        if (!rxCollection) {\n            previousDocumentData = rxStorageChangeEvent.change.previous;\n        } else {\n\n            const hookParams = {\n                collection: rxCollection,\n                doc: rxStorageChangeEvent.change.previous as any\n            };\n            runPluginHooks('postReadFromInstance', hookParams);\n            previousDocumentData = hookParams.doc;\n            previousDocumentData = rxCollection._crypter.decrypt(previousDocumentData);\n        }\n    }\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData)\n    };\n    return ret;\n}\n"],"file":"rx-storage-helper.js"}