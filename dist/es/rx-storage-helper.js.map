{"version":3,"sources":["../../src/rx-storage-helper.ts"],"names":["runPluginHooks","overwritable","newRxError","INTERNAL_STORAGE_NAME","getAllDocuments","storageInstance","getAllQueryPrepared","prepareQuery","selector","query","queryResult","allDocs","documents","getSingleDocument","documentId","findDocumentsById","results","doc","get","countAllUndeleted","docs","length","getBatch","limit","preparedQuery","result","writeSingle","instance","writeRow","bulkWrite","writeResult","error","size","values","next","value","ret","success","writeSingleLocal","findLocalDocument","id","findLocalDocumentsById","docList","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxDatabase","rxCollection","documentData","change","operation","hookParams","collection","_crypter","decrypt","previousDocumentData","previous","eventId","databaseToken","token","collectionName","name","undefined","startTime","endTime","deepFreezeWhenDevMode"],"mappings":"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","sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport type {\n    BulkWriteLocalRow,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxLocalDocumentData,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageKeyObjectInstance\n} from './types';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\n\n/**\n * returns all NON-LOCAL documents\n * TODO this is pouchdb specific should not be needed\n */\nexport async function getAllDocuments<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n\n    const getAllQueryPrepared = storageInstance.prepareQuery(\n        {\n            selector: {}\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results.get(documentId);\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n\n/**\n * get the number of all undeleted documents\n */\nexport async function countAllUndeleted<DocType>(\n    storageInstance: RxStorageInstance<DocType, any, any>\n): Promise<number> {\n    const docs = await getAllDocuments(\n        storageInstance\n    );\n    return docs.length;\n}\n\n/**\n * get a batch of documents from the storage-instance\n */\nexport async function getBatch<DocType>(\n    storageInstance: RxStorageInstance<DocType, any, any>,\n    limit: number\n): Promise<any[]> {\n    if (limit <= 1) {\n        throw newRxError('P1', {\n            limit\n        });\n    }\n\n    const preparedQuery = storageInstance.prepareQuery(\n        {\n            selector: {},\n            limit\n        }\n    );\n    const result = await storageInstance.query(preparedQuery);\n    return result.documents;\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (writeResult.error.size > 0) {\n        const error = writeResult.error.values().next().value;\n        throw error;\n    } else {\n        const ret = writeResult.success.values().next().value;\n        return ret;\n    }\n}\n\n/**\n * Writes a single local document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingleLocal<DocumentData>(\n    instance: RxStorageKeyObjectInstance<any, any>,\n    writeRow: BulkWriteLocalRow<DocumentData>\n): Promise<RxDocumentData<RxLocalDocumentData>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (writeResult.error.size > 0) {\n        const error = writeResult.error.values().next().value;\n        throw error;\n    } else {\n        const ret = writeResult.success.values().next().value;\n        return ret;\n    }\n}\n\nexport async function findLocalDocument<DocType>(\n    instance: RxStorageKeyObjectInstance<any, any>,\n    id: string\n): Promise<RxDocumentData<RxLocalDocumentData<DocType>> | null> {\n    const docList = await instance.findLocalDocumentsById([id]);\n    const doc = docList.get(id);\n    if (!doc) {\n        return null;\n    } else {\n        return doc;\n    }\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxDatabase: RxDatabase,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n\n    let documentData;\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        if (!rxCollection) {\n            documentData = rxStorageChangeEvent.change.doc;\n        } else {\n\n            const hookParams = {\n                collection: rxCollection,\n                doc: rxStorageChangeEvent.change.doc as any\n            };\n            runPluginHooks('postReadFromInstance', hookParams);\n            documentData = hookParams.doc;\n            documentData = rxCollection._crypter.decrypt(documentData);\n        }\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        if (!rxCollection) {\n            previousDocumentData = rxStorageChangeEvent.change.previous;\n        } else {\n\n            const hookParams = {\n                collection: rxCollection,\n                doc: rxStorageChangeEvent.change.previous as any\n            };\n            runPluginHooks('postReadFromInstance', hookParams);\n            previousDocumentData = hookParams.doc;\n            previousDocumentData = rxCollection._crypter.decrypt(previousDocumentData);\n        }\n    }\n\n\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        databaseToken: rxDatabase.token,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData)\n    };\n\n    return ret;\n}\n"],"file":"rx-storage-helper.js"}