{"version":3,"sources":["../../src/rx-storage-helper.ts"],"names":["map","runPluginHooks","overwritable","newRxError","fillPrimaryKey","getPrimaryFieldOfPrimaryKey","createRevision","firstPropertyValueOfObject","flatClone","now","randomCouchString","writeSingle","instance","writeRow","bulkWrite","writeResult","Object","keys","error","length","ret","success","getSingleDocument","storageInstance","documentId","findDocumentsById","results","doc","getAllDocuments","primaryKey","storage","getAllQueryPrepared","statics","prepareQuery","schema","selector","sort","query","queryResult","allDocs","documents","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","change","operation","previousDocumentData","previous","eventId","collectionName","name","undefined","startTime","endTime","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","id","pouchDbError","data","categorizeBulkWriteRows","primaryPath","docsInDb","bulkWriteRows","bulkInsertDocs","bulkUpdateDocs","errors","changedDocumentIds","eventBulk","events","forEach","document","documentInDb","get","insertedIsDeleted","_deleted","push","getUniqueDeterministicEventKey","revInDb","_rev","err","isError","writeDoc","args","docId","binaryValues","binary","v","join","eventKey","databaseName","hashAttachmentData","attachmentBase64String","storageStatics","hash","atob","getAttachmentSize","getWrappedStorageInstance","database","rxJsonSchema","transformDocumentDataFromRxDBToRxStorage","_meta","isDevMode","lwt","hookParams","transformDocumentDataFromRxStorageToRxDB","internals","options","rows","toStorageWriteRows","row","lockedRun","then","entries","k","preparedQuery","ids","deleted","findResult","key","getAttachmentData","attachmentId","getChangedDocumentsSince","limit","checkpoint","result","d","cleanup","minDeletedTime","remove","close","changeStream","pipe","event"],"mappings":"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","sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport type { ChangeEvent } from 'event-reduce-js';\nimport { map } from 'rxjs/operators';\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport { fillPrimaryKey, getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageStatics\n} from './types';\nimport {\n    createRevision,\n    firstPropertyValueOfObject,\n    flatClone,\n    now,\n    randomCouchString\n} from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\n/**\n * Returns all non-deleted documents\n * of the storage.\n */\nexport async function getAllDocuments<RxDocType>(\n    primaryKey: keyof RxDocType,\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n    const storage = storageInstance.storage;\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [primaryKey]: 'asc' } as any]\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    let documentData;\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        documentData = rxStorageChangeEvent.change.doc;\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        previousDocumentData = rxStorageChangeEvent.change.previous;\n    }\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageBulkWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('COL19', {\n                collection: collection.name,\n                id: documentId,\n                pouchDbError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: keyof RxDocType,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     */\n    docsInDb: Map<RxDocumentData<RxDocType>[keyof RxDocType], RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[]\n): {\n    bulkInsertDocs: BulkWriteRow<RxDocType>[];\n    bulkUpdateDocs: BulkWriteRow<RxDocType>[];\n    /**\n     * Ids of all documents that are changed\n     * and so their change must be written into the\n     * sequences table so that they can be fetched via\n     * RxStorageInstance().getChangedDocumentsSince().\n     */\n    changedDocumentIds: RxDocumentData<RxDocType>[keyof RxDocType][];\n    errors: RxStorageBulkWriteError<RxDocType>[];\n    eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>;\n} {\n    const bulkInsertDocs: BulkWriteRow<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRow<RxDocType>[] = [];\n    const errors: RxStorageBulkWriteError<RxDocType>[] = [];\n    const changedDocumentIds: RxDocumentData<RxDocType>[keyof RxDocType][] = [];\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n        id: randomCouchString(10),\n        events: []\n    };\n\n\n    const startTime = now();\n    bulkWriteRows.forEach(writeRow => {\n        const id = writeRow.document[primaryPath];\n        const documentInDb = docsInDb.get(id);\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = writeRow.document._deleted ? true : false;\n            bulkInsertDocs.push(writeRow);\n            if (!insertedIsDeleted) {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change: {\n                        doc: writeRow.document,\n                        id: id as any,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            // inserting a deleted document is possible\n            // without sending the previous data.\n            if (!writeRow.previous && documentInDb._deleted) {\n                writeRow.previous = documentInDb;\n            }\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !writeRow.previous &&\n                    !documentInDb._deleted\n                ) ||\n                (\n                    !!writeRow.previous &&\n                    revInDb !== writeRow.previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageBulkWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: id as any,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors.push(err);\n                return;\n            }\n\n            bulkUpdateDocs.push(writeRow);\n            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n            const writeDoc = writeRow.document;\n            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'INSERT',\n                    previous: null,\n                    doc: writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'UPDATE',\n                    previous: writeRow.previous,\n                    doc: writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'DELETE',\n                    previous: writeRow.previous,\n                    doc: null\n                };\n            }\n            if (!change) {\n                if (\n                    writeRow.previous && writeRow.previous._deleted &&\n                    writeRow.document._deleted\n                ) {\n                    // deleted doc got overwritten with other deleted doc -> do not send an event\n                } else {\n                    throw newRxError('SNH', { args: { writeRow } });\n                }\n            } else {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change,\n                    startTime,\n                    endTime: now()\n                });\n            }\n        }\n    });\n\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        errors,\n        changedDocumentIds,\n        eventBulk\n    };\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates.\n */\nexport function getUniqueDeterministicEventKey(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: string,\n    writeRow: BulkWriteRow<any>\n): string {\n    const docId = writeRow.document[primaryPath];\n    const binaryValues: boolean[] = [\n        !!writeRow.previous,\n        (writeRow.previous && writeRow.previous._deleted),\n        !!writeRow.document._deleted\n    ];\n    const binary = binaryValues.map(v => v ? '1' : '0').join('');\n    const eventKey = storageInstance.databaseName + '|' + storageInstance.collectionName + '|' + docId + '|' + '|' + binary + '|' + writeRow.document._rev;\n    return eventKey;\n}\n\n\nexport function hashAttachmentData(\n    attachmentBase64String: string,\n    storageStatics: RxStorageStatics\n): Promise<string> {\n    return storageStatics.hash(atob(attachmentBase64String));\n}\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\n\nexport function getWrappedStorageInstance<RxDocType, Internals, InstanceCreationOptions>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        // ensure primary key has not been changed\n        if (overwritable.isDevMode()) {\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n        }\n\n        data._meta.lwt = now();\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n\n        /**\n         * Run the hooks once for the previous doc,\n         * once for the new write data\n         */\n        let previous = writeRow.previous;\n        if (previous) {\n            hookParams.doc = previous;\n            runPluginHooks('preWriteToStorageInstance', hookParams);\n            previous = hookParams.doc;\n        }\n\n        hookParams.doc = data;\n        runPluginHooks('preWriteToStorageInstance', hookParams);\n        data = hookParams.doc;\n\n        /**\n         * Update the revision after the hooks have run.\n         * Do not update the revision if no previous is given,\n         * because the migration plugin must be able to do an insert\n         * with a pre-created revision.\n         */\n        if (\n            writeRow.previous ||\n            !data._rev\n        ) {\n            data._rev = createRevision(data, writeRow.previous);\n        }\n\n        return {\n            document: data,\n            previous\n        };\n    }\n\n    function transformDocumentDataFromRxStorageToRxDB(\n        data: any\n    ): any {\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n        runPluginHooks('postReadFromInstance', hookParams);\n        return hookParams.doc;\n    }\n\n    const ret: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        storage: storageInstance.storage,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(rows: BulkWriteRow<RxDocType>[]) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows\n                )\n            ).then(writeResult => {\n                const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                    success: {},\n                    error: {}\n                };\n                Object.entries(writeResult.error).forEach(([k, v]) => {\n                    ret.error[k] = v;\n                });\n                Object.entries(writeResult.success).forEach(([k, v]) => {\n                    ret.success[k] = transformDocumentDataFromRxStorageToRxDB(v);\n                });\n\n                return ret;\n            });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            ).then(queryResult => {\n                return {\n                    documents: queryResult.documents.map(doc => transformDocumentDataFromRxStorageToRxDB(doc))\n                };\n            });\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            ).then(findResult => {\n                const ret: { [documentId: string]: RxDocumentData<RxDocType>; } = {};\n                Object.entries(findResult).forEach(([key, doc]) => {\n                    ret[key] = transformDocumentDataFromRxStorageToRxDB(doc);\n                });\n                return ret;\n            });\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(limit, checkpoint)\n            ).then(result => {\n                const documents = result.documents.map(d => transformDocumentDataFromRxStorageToRxDB(d));\n                return {\n                    documents,\n                    checkpoint: result.checkpoint\n                };\n            });\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream().pipe(\n                map(eventBulk => {\n                    const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n                        id: eventBulk.id,\n                        events: eventBulk.events.map(event => {\n                            return {\n                                eventId: event.eventId,\n                                documentId: event.documentId,\n                                endTime: event.endTime,\n                                startTime: event.startTime,\n                                change: {\n                                    id: event.change.id,\n                                    operation: event.change.operation,\n                                    doc: event.change.doc ? transformDocumentDataFromRxStorageToRxDB(event.change.doc) : undefined,\n                                    previous: event.change.previous ? transformDocumentDataFromRxStorageToRxDB(event.change.previous) : undefined\n                                }\n                            }\n\n                        })\n                    };\n                    return ret;\n                })\n            )\n        }\n    };\n    return ret;\n}\n"],"file":"rx-storage-helper.js"}