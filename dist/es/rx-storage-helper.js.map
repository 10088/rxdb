{"version":3,"file":"rx-storage-helper.js","names":["map","runPluginHooks","overwritable","newRxError","fillPrimaryKey","getPrimaryFieldOfPrimaryKey","firstPropertyValueOfObject","flatClone","now","parseRevision","randomCouchString","writeSingle","instance","writeRow","bulkWrite","writeResult","Object","keys","error","length","ret","success","getSingleDocument","storageInstance","documentId","findDocumentsById","results","doc","getAllDocuments","primaryKey","storage","getAllQueryPrepared","statics","prepareQuery","schema","selector","sort","skip","query","queryResult","allDocs","documents","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","change","operation","previousDocumentData","previous","eventId","collectionName","name","undefined","startTime","endTime","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","id","data","categorizeBulkWriteRows","primaryPath","docsInDb","bulkWriteRows","hasAttachments","attachments","bulkInsertDocs","bulkUpdateDocs","errors","changedDocumentIds","eventBulk","events","attachmentsAdd","attachmentsRemove","attachmentsUpdate","forEach","document","documentInDb","get","attachmentError","insertedIsDeleted","_deleted","entries","_attachments","attachmentId","attachmentData","isError","push","stripAttachmentsDataFromRow","getUniqueDeterministicEventKey","stripAttachmentsDataFromDocument","revInDb","_rev","err","find","previousAttachmentData","writeDoc","args","useDoc","digest","type","flatCloneDocWithMeta","_meta","docId","binaryValues","binary","v","join","eventKey","databaseName","hashAttachmentData","attachmentBase64String","storageStatics","hash","atob","getAttachmentSize","getWrappedStorageInstance","database","rxJsonSchema","transformDocumentDataFromRxDBToRxStorage","isDevMode","prev","current","height","dataBefore","dataAfter","metaFieldName","hasOwnProperty","lwt","hookParams","transformDocumentDataFromRxStorageToRxDB","transformErrorDataFromRxStorageToRxDB","internals","options","rows","toStorageWriteRows","row","lockedRun","then","k","preparedQuery","ids","deleted","findResult","key","getAttachmentData","getChangedDocumentsSince","limit","checkpoint","result","cleanup","minDeletedTime","remove","close","changeStream","pipe","event"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport type { ChangeEvent } from 'event-reduce-js';\nimport { map } from 'rxjs/operators';\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport { fillPrimaryKey, getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxAttachmentWriteData,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageStatics,\n    StringKeys\n} from './types';\nimport {\n    firstPropertyValueOfObject,\n    flatClone,\n    now,\n    parseRevision,\n    randomCouchString\n} from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\n/**\n * Returns all non-deleted documents\n * of the storage.\n */\nexport async function getAllDocuments<RxDocType>(\n    primaryKey: keyof RxDocType,\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n    const storage = storageInstance.storage;\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [primaryKey]: 'asc' } as any],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    let documentData;\n\n    /**\n     * TODO\n     * this data design is shit,\n     * instead of having the documentData depending on the operation,\n     * we should always have a current doc data, that might or might not\n     * have set _deleted to true.\n     */\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        documentData = rxStorageChangeEvent.change.doc;\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        previousDocumentData = rxStorageChangeEvent.change.previous;\n    }\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageBulkWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('COL19', {\n                collection: collection.name,\n                id: documentId,\n                error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     */\n    docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[]\n): {\n    bulkInsertDocs: BulkWriteRow<RxDocType>[];\n    bulkUpdateDocs: BulkWriteRow<RxDocType>[];\n    /**\n     * Ids of all documents that are changed\n     * and so their change must be written into the\n     * sequences table so that they can be fetched via\n     * RxStorageInstance().getChangedDocumentsSince().\n     */\n    changedDocumentIds: RxDocumentData<RxDocType>[StringKeys<RxDocType>][];\n\n    /**\n     * TODO directly return a docId->error object\n     * like in the return value of bulkWrite().\n     * This will improve performance because we do not have to iterate\n     * over the error array again.\n     */\n    errors: RxStorageBulkWriteError<RxDocType>[];\n    eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>;\n    attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[];\n    attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n    }[];\n    attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[];\n} {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRow<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRow<RxDocType>[] = [];\n    const errors: RxStorageBulkWriteError<RxDocType>[] = [];\n    const changedDocumentIds: RxDocumentData<RxDocType>[StringKeys<RxDocType>][] = [];\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n        id: randomCouchString(10),\n        events: []\n    };\n\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n\n\n    const startTime = now();\n    bulkWriteRows.forEach(writeRow => {\n        const id = writeRow.document[primaryPath];\n        const documentInDb = docsInDb.get(id);\n        let attachmentError: RxStorageBulkWriteError<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = writeRow.document._deleted ? true : false;\n            Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n                if (\n                    !(attachmentData as RxAttachmentWriteData).data\n                ) {\n                    attachmentError = {\n                        documentId: id as any,\n                        isError: true,\n                        status: 510,\n                        writeRow\n                    };\n                    errors.push(attachmentError);\n                } else {\n                    attachmentsAdd.push({\n                        documentId: id as any,\n                        attachmentId,\n                        attachmentData: attachmentData as any\n                    });\n                }\n            });\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkInsertDocs.push(writeRow);\n                }\n            }\n\n            if (!insertedIsDeleted) {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change: {\n                        doc: hasAttachments ? stripAttachmentsDataFromDocument(writeRow.document) : writeRow.document,\n                        id: id as any,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            // inserting a deleted document is possible\n            // without sending the previous data.\n            if (!writeRow.previous && documentInDb._deleted) {\n                writeRow.previous = documentInDb;\n            }\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !writeRow.previous &&\n                    !documentInDb._deleted\n                ) ||\n                (\n                    !!writeRow.previous &&\n                    revInDb !== writeRow.previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageBulkWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: id as any,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors.push(err);\n                return;\n            }\n\n\n            // handle attachments data\n            if (writeRow.document._deleted) {\n                /**\n                 * Deleted documents must have cleared all their attachments.\n                 */\n                if (writeRow.previous) {\n                    Object\n                        .keys(writeRow.previous._attachments)\n                        .forEach(attachmentId => {\n                            attachmentsRemove.push({\n                                documentId: id as any,\n                                attachmentId\n                            });\n                        });\n                }\n            } else {\n\n                // first check for errors\n                Object\n                    .entries(writeRow.document._attachments)\n                    .find(([attachmentId, attachmentData]) => {\n                        const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                        if (\n                            !previousAttachmentData &&\n                            !(attachmentData as RxAttachmentWriteData).data\n                        ) {\n                            attachmentError = {\n                                documentId: id as any,\n                                documentInDb: documentInDb,\n                                isError: true,\n                                status: 510,\n                                writeRow\n                            };\n                        }\n                        return true;\n                    });\n                if (!attachmentError) {\n                    Object\n                        .entries(writeRow.document._attachments)\n                        .forEach(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                            if (!previousAttachmentData) {\n                                attachmentsAdd.push({\n                                    documentId: id as any,\n                                    attachmentId,\n                                    attachmentData: attachmentData as any\n                                });\n                            } else {\n                                attachmentsUpdate.push({\n                                    documentId: id as any,\n                                    attachmentId,\n                                    attachmentData: attachmentData as any\n                                });\n                            }\n                        });\n                }\n            }\n            if (attachmentError) {\n                errors.push(attachmentError);\n            } else {\n                if (hasAttachments) {\n                    bulkUpdateDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkUpdateDocs.push(writeRow);\n                }\n            }\n\n\n\n            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n            const writeDoc = writeRow.document;\n            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'INSERT',\n                    previous: null,\n                    doc: hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'UPDATE',\n                    previous: writeRow.previous,\n                    doc: hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'DELETE',\n                    previous: writeRow.previous,\n                    doc: null\n                };\n            }\n            if (!change) {\n                if (\n                    writeRow.previous && writeRow.previous._deleted &&\n                    writeRow.document._deleted\n                ) {\n                    // deleted doc got overwritten with other deleted doc -> do not send an event\n                } else {\n                    throw newRxError('SNH', { args: { writeRow } });\n                }\n            } else {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change,\n                    startTime,\n                    endTime: now()\n                });\n            }\n        }\n    });\n\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        errors,\n        changedDocumentIds,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRow<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc);\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = {\n                digest: attachmentData.digest,\n                length: attachmentData.length,\n                type: attachmentData.type\n            };\n        })\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    const ret = flatClone(doc);\n    ret._meta = flatClone(doc._meta);\n    return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates.\n */\nexport function getUniqueDeterministicEventKey(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: string,\n    writeRow: BulkWriteRow<any>\n): string {\n    const docId = writeRow.document[primaryPath];\n    const binaryValues: boolean[] = [\n        !!writeRow.previous,\n        (writeRow.previous && writeRow.previous._deleted),\n        !!writeRow.document._deleted\n    ];\n    const binary = binaryValues.map(v => v ? '1' : '0').join('');\n    const eventKey = storageInstance.databaseName + '|' + storageInstance.collectionName + '|' + docId + '|' + '|' + binary + '|' + writeRow.document._rev;\n    return eventKey;\n}\n\n\nexport function hashAttachmentData(\n    attachmentBase64String: string,\n    storageStatics: RxStorageStatics\n): Promise<string> {\n    return storageStatics.hash(atob(attachmentBase64String));\n}\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\n\nexport function getWrappedStorageInstance<RxDocType, Internals, InstanceCreationOptions>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        /**\n         * Do some checks in dev-mode\n         * that would be too performance expensive\n         * in production.\n         */\n        if (overwritable.isDevMode()) {\n            // ensure that the primary key has not been changed\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n\n            /**\n             * Ensure that the new revision is higher\n             * then the previous one\n             */\n            if (writeRow.previous) {\n                const prev = parseRevision(writeRow.previous._rev);\n                const current = parseRevision(writeRow.document._rev);\n                if (current.height <= prev.height) {\n                    throw newRxError('SNH', {\n                        dataBefore: writeRow.previous,\n                        dataAfter: writeRow.document,\n                        args: {\n                            prev,\n                            current\n                        }\n                    });\n                }\n            }\n\n            /**\n             * Ensure that _meta fields have been merged\n             * and not replaced.\n             * This is important so that when one plugin A\n             * sets a _meta field and another plugin B does a write\n             * to the document, it must be ensured that the\n             * field of plugin A was not removed.\n             */\n            if (writeRow.previous) {\n                Object.keys(writeRow.previous._meta)\n                    .forEach(metaFieldName => {\n                        if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n                            throw newRxError('SNH', {\n                                dataBefore: writeRow.previous,\n                                dataAfter: writeRow.document\n                            });\n                        }\n                    });\n            }\n        }\n\n        data._meta.lwt = now();\n\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n\n        /**\n         * Run the hooks once for the previous doc,\n         * once for the new write data\n         */\n        let previous = writeRow.previous;\n        if (previous) {\n            hookParams.doc = previous;\n            runPluginHooks('preWriteToStorageInstance', hookParams);\n            previous = hookParams.doc;\n        }\n\n        hookParams.doc = data;\n        runPluginHooks('preWriteToStorageInstance', hookParams);\n        data = hookParams.doc;\n\n\n        /**\n         * Do not update the revision here.\n         * The caller of bulkWrite() must be able to set\n         * the revision and to be sure that the given revision\n         * is used when storing the document.\n         * The revision must be provided by the caller of bulkWrite().\n         */\n        if (!data._rev) {\n            throw newRxError('SNH', {\n                data\n            });\n        }\n\n        return {\n            document: data,\n            previous\n        };\n    }\n\n    function transformDocumentDataFromRxStorageToRxDB(\n        data: any\n    ): any {\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n        runPluginHooks('postReadFromInstance', hookParams);\n        return hookParams.doc;\n    }\n\n    function transformErrorDataFromRxStorageToRxDB<RxDocType>(\n        error: RxStorageBulkWriteError<RxDocType>\n    ): RxStorageBulkWriteError<RxDocType> {\n        const ret = flatClone(error);\n        ret.writeRow = flatClone(ret.writeRow);\n\n        if (ret.documentInDb) {\n            ret.documentInDb = transformDocumentDataFromRxStorageToRxDB(ret.documentInDb);\n        }\n\n        ret.writeRow.document = transformDocumentDataFromRxStorageToRxDB(ret.writeRow.document);\n        if (ret.writeRow.previous) {\n            ret.writeRow.previous = transformDocumentDataFromRxStorageToRxDB(ret.writeRow.previous);\n        }\n\n        return ret;\n    }\n\n    const ret: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        storage: storageInstance.storage,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(rows: BulkWriteRow<RxDocType>[]) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows\n                )\n            ).then(writeResult => {\n                const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                    success: {},\n                    error: {}\n                };\n                Object.entries(writeResult.success).forEach(([k, v]) => {\n                    ret.success[k] = transformDocumentDataFromRxStorageToRxDB(v);\n                });\n                Object.entries(writeResult.error).forEach(([k, error]) => {\n                    ret.error[k] = transformErrorDataFromRxStorageToRxDB(error);\n                });\n                return ret;\n            });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            ).then(queryResult => {\n                return {\n                    documents: queryResult.documents.map(doc => transformDocumentDataFromRxStorageToRxDB(doc))\n                };\n            });\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            ).then(findResult => {\n                const ret: RxDocumentDataById<RxDocType> = {};\n                Object.entries(findResult).forEach(([key, doc]) => {\n                    ret[key] = transformDocumentDataFromRxStorageToRxDB(doc);\n                });\n                return ret;\n            });\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(limit, checkpoint)\n            ).then(result => {\n                return result.map(row => ({\n                    checkpoint: row.checkpoint,\n                    document: transformDocumentDataFromRxStorageToRxDB(row.document)\n                }));\n            });\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream().pipe(\n                map(eventBulk => {\n                    const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n                        id: eventBulk.id,\n                        events: eventBulk.events.map(event => {\n                            return {\n                                eventId: event.eventId,\n                                documentId: event.documentId,\n                                endTime: event.endTime,\n                                startTime: event.startTime,\n                                change: {\n                                    id: event.change.id,\n                                    operation: event.change.operation,\n                                    doc: event.change.doc ? transformDocumentDataFromRxStorageToRxDB(event.change.doc) : undefined,\n                                    previous: event.change.previous ? transformDocumentDataFromRxStorageToRxDB(event.change.previous) : undefined\n                                }\n                            }\n\n                        })\n                    };\n                    return ret;\n                })\n            )\n        }\n    };\n    return ret;\n}\n"],"mappings":"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"}