{"version":3,"sources":["../../src/rx-storage-helper.ts"],"names":["map","runPluginHooks","overwritable","newRxError","firstPropertyValueOfObject","flatClone","findLocalDocument","instance","id","withDeleted","findLocalDocumentsById","docList","doc","writeSingleLocal","writeRow","bulkWrite","writeResult","Object","keys","error","length","ret","success","writeSingle","getSingleDocument","storageInstance","documentId","findDocumentsById","results","getAllDocuments","primaryKey","storage","getAllQueryPrepared","statics","prepareQuery","schema","selector","sort","query","queryResult","allDocs","documents","INTERNAL_STORAGE_NAME","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","change","operation","previousDocumentData","previous","eventId","collectionName","name","undefined","startTime","endTime","deepFreezeWhenDevMode","transformDocumentDataFromRxDBToRxStorage","col","data","updateLwt","_meta","isDevMode","fillPrimaryKey","_crypter","encrypt","lwt","Date","getTime","hookParams","collection","transformDocumentDataFromRxStorageToRxDB","decrypt","throwIfIsStorageWriteError","writeData","status","pouchDbError","getWrappedStorageInstance","database","internals","databaseName","options","bulkAddRevisions","toStorageDocuments","lockedRun","rows","toStorageWriteRows","row","document","then","entries","forEach","k","v","preparedQuery","ids","deleted","findResult","key","getAttachmentData","attachmentId","getChangedDocuments","remove","close","changeStream","pipe","eventBulk","events","event","transformLocalDocumentDataFromRxDBToRxStorage","parent","transformLocalDocumentDataFromRxStorageToRxDB","getWrappedKeyObjectInstance","keyObjectInstance","changeDoc","console","dir"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SAASC,UAAT,QAA2B,YAA3B;AAoBA,SAASC,0BAAT,EAAqCC,SAArC,QAAsD,QAAtD;AA+EA,WAAsBC,iBAAtB,YAAsBA,iBAAtB,CACIC,QADJ,EAEIC,EAFJ,EAGIC,WAHJ;AAAA,MAIgE;AAAA,2BACtCF,QAAQ,CAACG,sBAAT,CAAgC,CAACF,EAAD,CAAhC,EAAsCC,WAAtC,CADsC,iBACtDE,OADsD;AAE5D,UAAMC,GAAG,GAAGD,OAAO,CAACH,EAAD,CAAnB;;AAF4D,UAGxD,CAACI,GAHuD;AAIxD,eAAO,IAAP;AAJwD;AAMxD,eAAOA,GAAP;AANwD;AAAA;AAQ/D,GAZD;AAAA;AAAA;AAAA;;AArBA;AACA;AACA;AACA;AACA,WAAsBC,gBAAtB,YAAsBA,gBAAtB,CACIN,QADJ,EAEIO,QAFJ;AAAA,MAGqD;AAAA,2BACwBP,QAAQ,CAACQ,SAAT,CACrE,CAACD,QAAD,CADqE,CADxB,iBAC3CE,WAD2C;AAAA,UAK7CC,MAAM,CAACC,IAAP,CAAYF,WAAW,CAACG,KAAxB,EAA+BC,MAA/B,GAAwC,CALK;AAM7C,YAAMD,KAAK,GAAGf,0BAA0B,CAACY,WAAW,CAACG,KAAb,CAAxC;AACA,cAAMA,KAAN;AAP6C;AAS7C,YAAME,GAAG,GAAGjB,0BAA0B,CAACY,WAAW,CAACM,OAAb,CAAtC;AACA,eAAOD,GAAP;AAV6C;AAAA;AAYpD,GAfD;AAAA;AAAA;AAAA;;AAzBA;AACA;AACA;AACA;AACA,WAAsBE,WAAtB,YAAsBA,WAAtB,CACIhB,QADJ,EAEIO,QAFJ;AAAA,MAGsC;AAAA,2BACRP,QAAQ,CAACQ,SAAT,CACtB,CAACD,QAAD,CADsB,CADQ,iBAC5BE,WAD4B;AAAA,UAK9BC,MAAM,CAACC,IAAP,CAAYF,WAAW,CAACG,KAAxB,EAA+BC,MAA/B,GAAwC,CALV;AAM9B,YAAMD,KAAK,GAAGf,0BAA0B,CAACY,WAAW,CAACG,KAAb,CAAxC;AACA,cAAMA,KAAN;AAP8B;AAS9B,YAAME,GAAG,GAAGjB,0BAA0B,CAACY,WAAW,CAACM,OAAb,CAAtC;AACA,eAAOD,GAAP;AAV8B;AAAA;AAYrC,GAfD;AAAA;AAAA;AAAA;AAjBA,WAAsBG,iBAAtB,YAAsBA,iBAAtB,CACIC,eADJ,EAEIC,UAFJ;AAAA,MAG6C;AAAA,2BACnBD,eAAe,CAACE,iBAAhB,CAAkC,CAACD,UAAD,CAAlC,EAAgD,KAAhD,CADmB,iBACnCE,OADmC;AAEzC,UAAMhB,GAAG,GAAGgB,OAAO,CAACF,UAAD,CAAnB;;AAFyC,UAGrCd,GAHqC;AAIrC,eAAOA,GAAP;AAJqC;AAMrC,eAAO,IAAP;AANqC;AAAA;AAQ5C,GAXD;AAAA;AAAA;AAAA;;AApBA;AACA;AACA;AACA,WAAsBiB,eAAtB,YAAsBA,eAAtB,CACIC,UADJ,EAEIC,OAFJ,EAGIN,eAHJ;AAAA,MAIwC;AAAA;;AACpC,QAAMO,mBAAmB,GAAGD,OAAO,CAACE,OAAR,CAAgBC,YAAhB,CACxBT,eAAe,CAACU,MADQ,EAExB;AACIC,MAAAA,QAAQ,EAAE,EADd;AAEIC,MAAAA,IAAI,EAAE,kBAAIP,UAAJ,IAAiB,KAAjB;AAFV,KAFwB,CAA5B;AADoC,2BAQVL,eAAe,CAACa,KAAhB,CAAsBN,mBAAtB,CARU,iBAQ9BO,WAR8B;AASpC,UAAMC,OAAO,GAAGD,WAAW,CAACE,SAA5B;AACA,aAAOD,OAAP;AAVoC;AAWvC,GAfD;AAAA;AAAA;AAAA;AALA,OAAO,IAAME,qBAAqB,GAAG,gBAA9B;AA2FP,OAAO,SAASC,iCAAT,CACHC,OADG,EAEHC,oBAFG,EAGHC,YAHG,EAImB;AACtB,MAAIC,YAAJ;;AACA,MAAIF,oBAAoB,CAACG,MAArB,CAA4BC,SAA5B,KAA0C,QAA9C,EAAwD;AACpDF,IAAAA,YAAY,GAAGF,oBAAoB,CAACG,MAArB,CAA4BpC,GAA3C;AACH;;AACD,MAAIsC,oBAAJ;;AACA,MAAIL,oBAAoB,CAACG,MAArB,CAA4BC,SAA5B,KAA0C,QAA9C,EAAwD;AACpDC,IAAAA,oBAAoB,GAAGL,oBAAoB,CAACG,MAArB,CAA4BG,QAAnD;AACH;;AACD,MAAM9B,GAA2B,GAAG;AAChC+B,IAAAA,OAAO,EAAEP,oBAAoB,CAACO,OADE;AAEhC1B,IAAAA,UAAU,EAAEmB,oBAAoB,CAACnB,UAFD;AAGhC2B,IAAAA,cAAc,EAAEP,YAAY,GAAGA,YAAY,CAACQ,IAAhB,GAAuBC,SAHnB;AAIhCC,IAAAA,SAAS,EAAEX,oBAAoB,CAACW,SAJA;AAKhCC,IAAAA,OAAO,EAAEZ,oBAAoB,CAACY,OALE;AAMhCb,IAAAA,OAAO,EAAPA,OANgC;AAOhCK,IAAAA,SAAS,EAAEJ,oBAAoB,CAACG,MAArB,CAA4BC,SAPP;AAQhCF,IAAAA,YAAY,EAAE7C,YAAY,CAACwD,qBAAb,CAAmCX,YAAnC,CARkB;AAShCG,IAAAA,oBAAoB,EAAEhD,YAAY,CAACwD,qBAAb,CAAmCR,oBAAnC;AATU,GAApC;AAWA,SAAO7B,GAAP;AACH;AAED,OAAO,SAASsC,wCAAT,CACHC,GADG,EAEHC,IAFG,EAGHC,SAHG,EAIL;AACED,EAAAA,IAAI,GAAGxD,SAAS,CAACwD,IAAD,CAAhB;AACAA,EAAAA,IAAI,CAACE,KAAL,GAAa1D,SAAS,CAACwD,IAAI,CAACE,KAAN,CAAtB,CAFF,CAIE;;AACA,MAAI7D,YAAY,CAAC8D,SAAb,EAAJ,EAA8B;AAC1BJ,IAAAA,GAAG,CAACzB,MAAJ,CAAW8B,cAAX,CAA0BJ,IAA1B;AACH;;AAEDA,EAAAA,IAAI,GAAID,GAAG,CAACM,QAAL,CAAsBC,OAAtB,CAA8BN,IAA9B,CAAP;;AAEA,MAAIC,SAAJ,EAAe;AACXD,IAAAA,IAAI,CAACE,KAAL,CAAWK,GAAX,GAAiB,IAAIC,IAAJ,GAAWC,OAAX,EAAjB;AACH;;AAED,MAAMC,UAAU,GAAG;AACfC,IAAAA,UAAU,EAAEZ,GADG;AAEfhD,IAAAA,GAAG,EAAEiD;AAFU,GAAnB;AAIA5D,EAAAA,cAAc,CAAC,2BAAD,EAA8BsE,UAA9B,CAAd;AACA,SAAOA,UAAU,CAAC3D,GAAlB;AACH;AAED,OAAO,SAAS6D,wCAAT,CACHb,GADG,EAEHC,IAFG,EAGL;AACE,MAAMU,UAAU,GAAG;AACfC,IAAAA,UAAU,EAAEZ,GADG;AAEfhD,IAAAA,GAAG,EAAEiD;AAFU,GAAnB;AAIA5D,EAAAA,cAAc,CAAC,sBAAD,EAAyBsE,UAAzB,CAAd;AACA,SAAQX,GAAG,CAACM,QAAL,CAAsBQ,OAAtB,CAA8BH,UAAU,CAAC3D,GAAzC,CAAP;AACH;AAED,OAAO,SAAS+D,0BAAT,CACHH,UADG,EAEH9C,UAFG,EAGHkD,SAHG,EAIHzD,KAJG,EAKL;AACE,MAAIA,KAAJ,EAAW;AACP,QAAIA,KAAK,CAAC0D,MAAN,KAAiB,GAArB,EAA0B;AACtB,YAAM1E,UAAU,CAAC,OAAD,EAAU;AACtBqE,QAAAA,UAAU,EAAEA,UAAU,CAAClB,IADD;AAEtB9C,QAAAA,EAAE,EAAEkB,UAFkB;AAGtBoD,QAAAA,YAAY,EAAE3D,KAHQ;AAItB0C,QAAAA,IAAI,EAAEe;AAJgB,OAAV,CAAhB;AAMH,KAPD,MAOO;AACH,YAAMzD,KAAN;AACH;AACJ;AACJ;AAGD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4D,yBAAT,CACHP,UADG,EAEH/C,eAFG,EAGkE;AACrE,MAAMuD,QAAQ,GAAGR,UAAU,CAACQ,QAA5B;AACA,MAAM3D,GAA0E,GAAG;AAC/Ec,IAAAA,MAAM,EAAEV,eAAe,CAACU,MADuD;AAE/E8C,IAAAA,SAAS,EAAExD,eAAe,CAACwD,SAFoD;AAG/E5B,IAAAA,cAAc,EAAE5B,eAAe,CAAC4B,cAH+C;AAI/E6B,IAAAA,YAAY,EAAEzD,eAAe,CAACyD,YAJiD;AAK/EC,IAAAA,OAAO,EAAE1D,eAAe,CAAC0D,OALsD;AAM/EC,IAAAA,gBAN+E,4BAM9D3C,SAN8D,EAMnD;AACxB,UAAM4C,kBAAkB,GAAG5C,SAAS,CAACzC,GAAV,CAAc,UAAAY,GAAG;AAAA,eAAI+C,wCAAwC,CAACa,UAAD,EAAa5D,GAAb,EAAkB,IAAlB,CAA5C;AAAA,OAAjB,CAA3B;AACA,aAAOoE,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM7D,eAAe,CAAC2D,gBAAhB,CACFC,kBADE,CAAN;AAAA,OADG,CAAP;AAKH,KAb8E;AAc/EtE,IAAAA,SAd+E,qBAcrEwE,IAdqE,EAc/B;AAC5C,UAAMC,kBAAkD,GAAGD,IAAI,CAACvF,GAAL,CAAS,UAAAyF,GAAG,EAAI;AACvE,eAAO;AACHC,UAAAA,QAAQ,EAAE/B,wCAAwC,CAACa,UAAD,EAAaiB,GAAG,CAACC,QAAjB,EAA2B,IAA3B,CAD/C;AAEHvC,UAAAA,QAAQ,EAAEsC,GAAG,CAACtC,QAAJ,GAAeQ,wCAAwC,CAACa,UAAD,EAAaiB,GAAG,CAACtC,QAAjB,EAA2B,KAA3B,CAAvD,GAA2FI;AAFlG,SAAP;AAIH,OAL0D,CAA3D;AAOA,aAAOyB,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM7D,eAAe,CAACV,SAAhB,CACFyE,kBADE,CAAN;AAAA,OADG,EAILG,IAJK,CAIA,UAAA3E,WAAW,EAAI;AAClB,YAAMK,GAA+C,GAAG;AACpDC,UAAAA,OAAO,EAAE,EAD2C;AAEpDH,UAAAA,KAAK,EAAE;AAF6C,SAAxD;AAIAF,QAAAA,MAAM,CAAC2E,OAAP,CAAe5E,WAAW,CAACG,KAA3B,EAAkC0E,OAAlC,CAA0C,iBAAY;AAAA,cAAVC,CAAU;AAAA,cAAPC,CAAO;AAClD1E,UAAAA,GAAG,CAACF,KAAJ,CAAU2E,CAAV,IAAeC,CAAf;AACH,SAFD;AAGA9E,QAAAA,MAAM,CAAC2E,OAAP,CAAe5E,WAAW,CAACM,OAA3B,EAAoCuE,OAApC,CAA4C,iBAAY;AAAA,cAAVC,CAAU;AAAA,cAAPC,CAAO;AACpD1E,UAAAA,GAAG,CAACC,OAAJ,CAAYwE,CAAZ,IAAiBrB,wCAAwC,CAACD,UAAD,EAAauB,CAAb,CAAzD;AACH,SAFD;AAGA,eAAO1E,GAAP;AACH,OAhBM,CAAP;AAiBH,KAvC8E;AAwC/EiB,IAAAA,KAxC+E,iBAwCzE0D,aAxCyE,EAwC1D;AACjB,aAAOhB,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM7D,eAAe,CAACa,KAAhB,CAAsB0D,aAAtB,CAAN;AAAA,OADG,EAELL,IAFK,CAEA,UAAApD,WAAW,EAAI;AAClB,eAAO;AACHE,UAAAA,SAAS,EAAEF,WAAW,CAACE,SAAZ,CAAsBzC,GAAtB,CAA0B,UAAAY,GAAG;AAAA,mBAAI6D,wCAAwC,CAACD,UAAD,EAAa5D,GAAb,CAA5C;AAAA,WAA7B;AADR,SAAP;AAGH,OANM,CAAP;AAOH,KAhD8E;AAiD/Ee,IAAAA,iBAjD+E,6BAiD7DsE,GAjD6D,EAiDxDC,OAjDwD,EAiD/C;AAC5B,aAAOlB,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM7D,eAAe,CAACE,iBAAhB,CAAkCsE,GAAlC,EAAuCC,OAAvC,CAAN;AAAA,OADG,EAELP,IAFK,CAEA,UAAAQ,UAAU,EAAI;AACjB,YAAM9E,GAA8D,GAAG,EAAvE;AACAJ,QAAAA,MAAM,CAAC2E,OAAP,CAAeO,UAAf,EAA2BN,OAA3B,CAAmC,iBAAgB;AAAA,cAAdO,GAAc;AAAA,cAATxF,GAAS;AAC/CS,UAAAA,GAAG,CAAC+E,GAAD,CAAH,GAAW3B,wCAAwC,CAACD,UAAD,EAAa5D,GAAb,CAAnD;AACH,SAFD;AAGA,eAAOS,GAAP;AACH,OARM,CAAP;AASH,KA3D8E;AA4D/EgF,IAAAA,iBA5D+E,6BA6D3E3E,UA7D2E,EA8D3E4E,YA9D2E,EA+D7E;AACE,aAAOtB,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM7D,eAAe,CAAC4E,iBAAhB,CAAkC3E,UAAlC,EAA8C4E,YAA9C,CAAN;AAAA,OADG,CAAP;AAGH,KAnE8E;AAoE/EC,IAAAA,mBApE+E,+BAoE3DpB,OApE2D,EAoEzB;AAClD,aAAOH,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM7D,eAAe,CAAC8E,mBAAhB,CAAoCpB,OAApC,CAAN;AAAA,OADG,CAAP;AAGH,KAxE8E;AAyE/EqB,IAAAA,MAzE+E,oBAyEtE;AACL,aAAOxB,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM7D,eAAe,CAAC+E,MAAhB,EAAN;AAAA,OADG,CAAP;AAGH,KA7E8E;AA8E/EC,IAAAA,KA9E+E,mBA8EvE;AACJ,aAAOzB,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM7D,eAAe,CAACgF,KAAhB,EAAN;AAAA,OADG,CAAP;AAGH,KAlF8E;AAmF/EC,IAAAA,YAnF+E,0BAmFhE;AACX,aAAOjF,eAAe,CAACiF,YAAhB,GAA+BC,IAA/B,CACH3G,GAAG,CAAC,UAAA4G,SAAS,EAAI;AACb,YAAMvF,GAAoE,GAAG;AACzEb,UAAAA,EAAE,EAAEoG,SAAS,CAACpG,EAD2D;AAEzEqG,UAAAA,MAAM,EAAED,SAAS,CAACC,MAAV,CAAiB7G,GAAjB,CAAqB,UAAA8G,KAAK,EAAI;AAClC,mBAAO;AACH1D,cAAAA,OAAO,EAAE0D,KAAK,CAAC1D,OADZ;AAEH1B,cAAAA,UAAU,EAAEoF,KAAK,CAACpF,UAFf;AAGH+B,cAAAA,OAAO,EAAEqD,KAAK,CAACrD,OAHZ;AAIHD,cAAAA,SAAS,EAAEsD,KAAK,CAACtD,SAJd;AAKHR,cAAAA,MAAM,EAAE;AACJxC,gBAAAA,EAAE,EAAEsG,KAAK,CAAC9D,MAAN,CAAaxC,EADb;AAEJyC,gBAAAA,SAAS,EAAE6D,KAAK,CAAC9D,MAAN,CAAaC,SAFpB;AAGJrC,gBAAAA,GAAG,EAAEkG,KAAK,CAAC9D,MAAN,CAAapC,GAAb,GAAmB6D,wCAAwC,CAACD,UAAD,EAAasC,KAAK,CAAC9D,MAAN,CAAapC,GAA1B,CAA3D,GAA4F2C,SAH7F;AAIJJ,gBAAAA,QAAQ,EAAE2D,KAAK,CAAC9D,MAAN,CAAaG,QAAb,GAAwBsB,wCAAwC,CAACD,UAAD,EAAasC,KAAK,CAAC9D,MAAN,CAAaG,QAA1B,CAAhE,GAAsGI;AAJ5G;AALL,aAAP;AAaH,WAdO;AAFiE,SAA7E;AAkBA,eAAOlC,GAAP;AACH,OApBE,CADA,CAAP;AAuBH;AA3G8E,GAAnF;AA6GA,SAAOA,GAAP;AACH;AAID,OAAO,SAAS0F,6CAAT,CACHC,MADG,EAEHnD,IAFG,EAGHC,SAHG,EAImB;AACtBD,EAAAA,IAAI,GAAGxD,SAAS,CAACwD,IAAD,CAAhB;AACAA,EAAAA,IAAI,CAACE,KAAL,GAAa1D,SAAS,CAACwD,IAAI,CAACE,KAAN,CAAtB;;AAEA,MAAID,SAAJ,EAAe;AACXD,IAAAA,IAAI,CAACE,KAAL,CAAWK,GAAX,GAAiB,IAAIC,IAAJ,GAAWC,OAAX,EAAjB;AACH;;AAED,SAAOT,IAAP;AACH;AAED,OAAO,SAASoD,6CAAT,CACHD,MADG,EAEHnD,IAFG,EAGmB;AACtB,SAAOA,IAAP;AACH;AAGD;AACA;AACA;AACA;;AACA,OAAO,SAASqD,2BAAT,CACHF,MADG,EAEHG,iBAFG,EAG2D;AAC9D,MAAMnC,QAAoB,GAAGgC,MAAM,CAAChC,QAAP,GAAkBgC,MAAM,CAAChC,QAAzB,GAA2CgC,MAAxE;AACA,MAAM3F,GAAmE,GAAG;AACxE6D,IAAAA,YAAY,EAAEF,QAAQ,CAAC1B,IADiD;AAExE2B,IAAAA,SAAS,EAAEkC,iBAAiB,CAAClC,SAF2C;AAGxEE,IAAAA,OAAO,EAAEgC,iBAAiB,CAAChC,OAH6C;AAIxEpE,IAAAA,SAJwE,qBAIrDwE,IAJqD,EAIsB;AAC1F,UAAMC,kBAA0C,GAAGD,IAAI,CAACvF,GAAL,CAAS,UAAAyF,GAAG,EAAI;AAC/D,eAAO;AACHC,UAAAA,QAAQ,EAAEqB,6CAA6C,CAACC,MAAD,EAASvB,GAAG,CAACC,QAAb,EAAuB,IAAvB,CADpD;AAEHvC,UAAAA,QAAQ,EAAEsC,GAAG,CAACtC,QAAJ,GAAe4D,6CAA6C,CAACC,MAAD,EAASvB,GAAG,CAACtC,QAAb,EAAuB,KAAvB,CAA5D,GAA4FI;AAFnG,SAAP;AAIH,OALkD,CAAnD;AAOA,aAAOyB,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM6B,iBAAiB,CAACpG,SAAlB,CACFyE,kBADE,CAAN;AAAA,OADG,EAILG,IAJK,CAIA,UAAA3E,WAAW,EAAI;AAClB,YAAMK,GAAuC,GAAG;AAC5CC,UAAAA,OAAO,EAAE,EADmC;AAE5CH,UAAAA,KAAK,EAAE;AAFqC,SAAhD;AAIAF,QAAAA,MAAM,CAAC2E,OAAP,CAAe5E,WAAW,CAACG,KAA3B,EAAkC0E,OAAlC,CAA0C,iBAAY;AAAA,cAAVC,CAAU;AAAA,cAAPC,CAAO;AAClD1E,UAAAA,GAAG,CAACF,KAAJ,CAAU2E,CAAV,IAAeC,CAAf;AACH,SAFD;AAGA9E,QAAAA,MAAM,CAAC2E,OAAP,CAAe5E,WAAW,CAACM,OAA3B,EAAoCuE,OAApC,CAA4C,iBAAY;AAAA,cAAVC,CAAU;AAAA,cAAPC,CAAO;AACpD1E,UAAAA,GAAG,CAACC,OAAJ,CAAYwE,CAAZ,IAAiBmB,6CAA6C,CAACD,MAAD,EAASjB,CAAT,CAA9D;AACH,SAFD;AAGA,eAAO1E,GAAP;AACH,OAhBM,CAAP;AAiBH,KA7BuE;AA8BxEX,IAAAA,sBA9BwE,kCA+BpEuF,GA/BoE,EAgCpExF,WAhCoE,EAmCrE;AACC,aAAOuE,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM6B,iBAAiB,CAACzG,sBAAlB,CAAyCuF,GAAzC,EAA8CxF,WAA9C,CAAN;AAAA,OADG,EAELkF,IAFK,CAEA,UAAAQ,UAAU,EAAI;AACjB,YAAM9E,GAAsD,GAAG,EAA/D;AACAJ,QAAAA,MAAM,CAAC2E,OAAP,CAAeO,UAAf,EAA2BN,OAA3B,CAAmC,iBAAgB;AAAA,cAAdO,GAAc;AAAA,cAATxF,GAAS;AAC/CS,UAAAA,GAAG,CAAC+E,GAAD,CAAH,GAAWa,6CAA6C,CAACD,MAAD,EAASpG,GAAT,CAAxD;AACH,SAFD;AAGA,eAAOS,GAAP;AACH,OARM,CAAP;AASH,KA7CuE;AA8CxEqF,IAAAA,YA9CwE,0BA8CzD;AACX,aAAOS,iBAAiB,CAACT,YAAlB,GAAiCC,IAAjC,CACH3G,GAAG,CAAC,UAAA4G,SAAS,EAAI;AACb,YAAMvF,GAAyD,GAAG;AAC9Db,UAAAA,EAAE,EAAEoG,SAAS,CAACpG,EADgD;AAE9DqG,UAAAA,MAAM,EAAED,SAAS,CAACC,MAAV,CAAiB7G,GAAjB,CAAqB,UAAA8G,KAAK,EAAI;AAClC,gBAAMM,SAAS,GAAGN,KAAK,CAAC9D,MAAN,CAAapC,GAA/B;;AAEA,gBAAIwG,SAAS,IAAI,CAACA,SAAS,CAACrD,KAA5B,EAAmC;AAC/BsD,cAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAC,cAAAA,OAAO,CAAClG,KAAR,CAAc,oCAAd,EAF+B,CAG/B;AACH;;AAED,mBAAO;AACHiC,cAAAA,OAAO,EAAE0D,KAAK,CAAC1D,OADZ;AAEH1B,cAAAA,UAAU,EAAEoF,KAAK,CAACpF,UAFf;AAGH+B,cAAAA,OAAO,EAAEqD,KAAK,CAACrD,OAHZ;AAIHD,cAAAA,SAAS,EAAEsD,KAAK,CAACtD,SAJd;AAKHR,cAAAA,MAAM,EAAE;AACJxC,gBAAAA,EAAE,EAAEsG,KAAK,CAAC9D,MAAN,CAAaxC,EADb;AAEJyC,gBAAAA,SAAS,EAAE6D,KAAK,CAAC9D,MAAN,CAAaC,SAFpB;AAGJrC,gBAAAA,GAAG,EAAEkG,KAAK,CAAC9D,MAAN,CAAapC,GAAb,GAAmBqG,6CAA6C,CAACD,MAAD,EAASF,KAAK,CAAC9D,MAAN,CAAapC,GAAtB,CAAhE,GAAoG2C,SAHrG;AAIJJ,gBAAAA,QAAQ,EAAE2D,KAAK,CAAC9D,MAAN,CAAaG,QAAb,GAAwB8D,6CAA6C,CAACD,MAAD,EAASF,KAAK,CAAC9D,MAAN,CAAaG,QAAtB,CAArE,GAA8GI;AAJpH;AALL,aAAP;AAaH,WAtBO;AAFsD,SAAlE;AA0BA,eAAOlC,GAAP;AACH,OA5BE,CADA,CAAP;AA+BH,KA9EuE;AA+ExEmF,IAAAA,MA/EwE,oBA+E/D;AACL,aAAOxB,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM6B,iBAAiB,CAACX,MAAlB,EAAN;AAAA,OADG,CAAP;AAGH,KAnFuE;AAoFxEC,IAAAA,KApFwE,mBAoFhE;AACJ,aAAOzB,QAAQ,CAACM,SAAT,CACH;AAAA,eAAM6B,iBAAiB,CAACV,KAAlB,EAAN;AAAA,OADG,CAAP;AAGH;AAxFuE,GAA5E;AA0FA,SAAOpF,GAAP;AACH","sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { map } from 'rxjs/operators';\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { RxCollectionBase } from './rx-collection';\nimport { newRxError } from './rx-error';\nimport type {\n    BulkWriteLocalRow,\n    BulkWriteRow,\n    ChangeStreamOnceOptions,\n    EventBulk,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageKeyObjectInstance\n} from './types';\nimport { firstPropertyValueOfObject, flatClone } from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\n\n/**\n * returns all NON-LOCAL documents\n */\nexport async function getAllDocuments<RxDocType>(\n    primaryKey: keyof RxDocType,\n    storage: RxStorage<any, any>,\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [primaryKey]: 'asc' } as any]\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n/**\n * Writes a single local document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingleLocal<DocumentData>(\n    instance: RxStorageKeyObjectInstance<any, any>,\n    writeRow: BulkWriteLocalRow<DocumentData>\n): Promise<RxLocalDocumentData<RxLocalDocumentData>> {\n    const writeResult: RxLocalStorageBulkWriteResponse<DocumentData> = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\nexport async function findLocalDocument<DocType>(\n    instance: RxStorageKeyObjectInstance<any, any>,\n    id: string,\n    withDeleted: boolean\n): Promise<RxDocumentData<RxLocalDocumentData<DocType>> | null> {\n    const docList = await instance.findLocalDocumentsById([id], withDeleted);\n    const doc = docList[id];\n    if (!doc) {\n        return null;\n    } else {\n        return doc;\n    }\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    let documentData;\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        documentData = rxStorageChangeEvent.change.doc;\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        previousDocumentData = rxStorageChangeEvent.change.previous;\n    }\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function transformDocumentDataFromRxDBToRxStorage(\n    col: RxCollection | RxCollectionBase<any, any, any>,\n    data: any,\n    updateLwt: boolean\n) {\n    data = flatClone(data);\n    data._meta = flatClone(data._meta);\n\n    // ensure primary key has not been changed\n    if (overwritable.isDevMode()) {\n        col.schema.fillPrimaryKey(data);\n    }\n\n    data = (col._crypter as any).encrypt(data);\n\n    if (updateLwt) {\n        data._meta.lwt = new Date().getTime();\n    }\n\n    const hookParams = {\n        collection: col,\n        doc: data\n    };\n    runPluginHooks('preWriteToStorageInstance', hookParams);\n    return hookParams.doc;\n}\n\nexport function transformDocumentDataFromRxStorageToRxDB(\n    col: RxCollection | RxCollectionBase<any, any, any>,\n    data: any\n) {\n    const hookParams = {\n        collection: col,\n        doc: data\n    };\n    runPluginHooks('postReadFromInstance', hookParams);\n    return (col._crypter as any).decrypt(hookParams.doc);\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageBulkWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('COL19', {\n                collection: collection.name,\n                id: documentId,\n                pouchDbError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>(\n    collection: RxCollection<RxDocumentType, {}, {}, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>\n): RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> {\n    const database = collection.database;\n    const ret: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> = {\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkAddRevisions(documents) {\n            const toStorageDocuments = documents.map(doc => transformDocumentDataFromRxDBToRxStorage(collection, doc, true))\n            return database.lockedRun(\n                () => storageInstance.bulkAddRevisions(\n                    toStorageDocuments\n                )\n            );\n        },\n        bulkWrite(rows: BulkWriteRow<RxDocumentType>[]) {\n            const toStorageWriteRows: BulkWriteRow<RxDocumentType>[] = rows.map(row => {\n                return {\n                    document: transformDocumentDataFromRxDBToRxStorage(collection, row.document, true),\n                    previous: row.previous ? transformDocumentDataFromRxDBToRxStorage(collection, row.previous, false) : undefined,\n                }\n            });\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows\n                )\n            ).then(writeResult => {\n                const ret: RxStorageBulkWriteResponse<RxDocumentType> = {\n                    success: {},\n                    error: {}\n                };\n                Object.entries(writeResult.error).forEach(([k, v]) => {\n                    ret.error[k] = v;\n                });\n                Object.entries(writeResult.success).forEach(([k, v]) => {\n                    ret.success[k] = transformDocumentDataFromRxStorageToRxDB(collection, v);\n                });\n                return ret;\n            });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            ).then(queryResult => {\n                return {\n                    documents: queryResult.documents.map(doc => transformDocumentDataFromRxStorageToRxDB(collection, doc))\n                };\n            });\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            ).then(findResult => {\n                const ret: { [documentId: string]: RxDocumentData<RxDocumentType>; } = {};\n                Object.entries(findResult).forEach(([key, doc]) => {\n                    ret[key] = transformDocumentDataFromRxStorageToRxDB(collection, doc);\n                });\n                return ret;\n            });\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocuments(options: ChangeStreamOnceOptions) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocuments(options)\n            );\n        },\n        remove() {\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream().pipe(\n                map(eventBulk => {\n                    const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocumentType>>> = {\n                        id: eventBulk.id,\n                        events: eventBulk.events.map(event => {\n                            return {\n                                eventId: event.eventId,\n                                documentId: event.documentId,\n                                endTime: event.endTime,\n                                startTime: event.startTime,\n                                change: {\n                                    id: event.change.id,\n                                    operation: event.change.operation,\n                                    doc: event.change.doc ? transformDocumentDataFromRxStorageToRxDB(collection, event.change.doc) : undefined,\n                                    previous: event.change.previous ? transformDocumentDataFromRxStorageToRxDB(collection, event.change.previous) : undefined\n                                }\n                            }\n\n                        })\n                    };\n                    return ret;\n                })\n            )\n        }\n    };\n    return ret;\n}\n\n\n\nexport function transformLocalDocumentDataFromRxDBToRxStorage<D>(\n    parent: RxCollection | RxDatabase,\n    data: RxLocalDocumentData<D>,\n    updateLwt: boolean\n): RxLocalDocumentData<D> {\n    data = flatClone(data);\n    data._meta = flatClone(data._meta);\n\n    if (updateLwt) {\n        data._meta.lwt = new Date().getTime();\n    }\n\n    return data;\n}\n\nexport function transformLocalDocumentDataFromRxStorageToRxDB<D>(\n    parent: RxCollection | RxDatabase,\n    data: RxLocalDocumentData<D>\n): RxLocalDocumentData<D> {\n    return data;\n}\n\n\n/**\n * Does the same as getWrappedStorageInstance()\n * but for a key->object store.\n */\nexport function getWrappedKeyObjectInstance<Internals, InstanceCreationOptions>(\n    parent: RxCollection | RxDatabase,\n    keyObjectInstance: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>\n): RxStorageKeyObjectInstance<Internals, InstanceCreationOptions> {\n    const database: RxDatabase = parent.database ? parent.database as any : parent as any;\n    const ret: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions> = {\n        databaseName: database.name,\n        internals: keyObjectInstance.internals,\n        options: keyObjectInstance.options,\n        bulkWrite<D = any>(rows: BulkWriteLocalRow<D>[]): Promise<RxLocalStorageBulkWriteResponse<D>> {\n            const toStorageWriteRows: BulkWriteLocalRow<D>[] = rows.map(row => {\n                return {\n                    document: transformLocalDocumentDataFromRxDBToRxStorage(parent, row.document, true),\n                    previous: row.previous ? transformLocalDocumentDataFromRxDBToRxStorage(parent, row.previous, false) : undefined,\n                }\n            });\n\n            return database.lockedRun(\n                () => keyObjectInstance.bulkWrite(\n                    toStorageWriteRows\n                )\n            ).then(writeResult => {\n                const ret: RxLocalStorageBulkWriteResponse<D> = {\n                    success: {},\n                    error: {}\n                };\n                Object.entries(writeResult.error).forEach(([k, v]) => {\n                    ret.error[k] = v;\n                });\n                Object.entries(writeResult.success).forEach(([k, v]) => {\n                    ret.success[k] = transformLocalDocumentDataFromRxStorageToRxDB(parent, v);\n                });\n                return ret;\n            });\n        },\n        findLocalDocumentsById<D = any>(\n            ids: string[],\n            withDeleted: boolean\n        ): Promise<{\n            [documentId: string]: RxLocalDocumentData<D>\n        }> {\n            return database.lockedRun(\n                () => keyObjectInstance.findLocalDocumentsById(ids, withDeleted)\n            ).then(findResult => {\n                const ret: { [documentId: string]: RxLocalDocumentData<D>; } = {};\n                Object.entries(findResult).forEach(([key, doc]) => {\n                    ret[key] = transformLocalDocumentDataFromRxStorageToRxDB(parent, doc);\n                });\n                return ret;\n            });\n        },\n        changeStream() {\n            return keyObjectInstance.changeStream().pipe(\n                map(eventBulk => {\n                    const ret: EventBulk<RxStorageChangeEvent<RxLocalDocumentData>> = {\n                        id: eventBulk.id,\n                        events: eventBulk.events.map(event => {\n                            const changeDoc = event.change.doc;\n\n                            if (changeDoc && !changeDoc._meta) {\n                                console.dir(changeDoc);\n                                console.error('local changeSTream meta is missing');\n                                // process.exit(1);\n                            }\n\n                            return {\n                                eventId: event.eventId,\n                                documentId: event.documentId,\n                                endTime: event.endTime,\n                                startTime: event.startTime,\n                                change: {\n                                    id: event.change.id,\n                                    operation: event.change.operation,\n                                    doc: event.change.doc ? transformLocalDocumentDataFromRxStorageToRxDB(parent, event.change.doc) as any : undefined,\n                                    previous: event.change.previous ? transformLocalDocumentDataFromRxStorageToRxDB(parent, event.change.previous as any) : undefined\n                                }\n                            }\n\n                        })\n                    };\n                    return ret;\n                })\n            )\n        },\n        remove() {\n            return database.lockedRun(\n                () => keyObjectInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => keyObjectInstance.close()\n            );\n        }\n    };\n    return ret;\n}\n"],"file":"rx-storage-helper.js"}