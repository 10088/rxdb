{"version":3,"file":"rx-storage-replication.js","names":["BehaviorSubject","combineLatest","filter","firstValueFrom","getPrimaryKeyOfInternalDocument","getPrimaryFieldOfPrimaryKey","flatCloneDocWithMeta","createRevision","ensureNotFalsy","fastUnsecureHash","flatClone","lastOfArray","now","parseRevision","PROMISE_RESOLVE_VOID","pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","awaitRxStorageReplicationIdle","awaitRxStorageReplicationFirstInSync","streamQueue","down","up","Promise","all","firstSyncDone","pipe","setCheckpoint","direction","checkpointDoc","checkpoint","lastCheckpoint","input","checkPointInstance","canceled","getValue","JSON","stringify","data","checkpointKeyWithDirection","checkpointKey","newDoc","key","id","context","_deleted","_attachments","_meta","lwt","_rev","bulkWrite","previous","document","resolveConflictError","conflictHandler","error","status","Error","documentInDb","writeRow","undefined","documentStateAtForkTime","newDocumentStateInMaster","currentForkDocumentState","resolved","resolvedDoc","resolvedDocumentState","getLastCheckpointDoc","checkpointDocId","findDocumentsById","checkpointResult","MASTER_CURRENT_STATE_FLAG_SUFFIX","UPSTREAM_MARKING_WRITE_FLAG_SUFFIX","FROM_FORK_FLAG_SUFFIX","replicateRxStorageInstance","primaryPath","masterInstance","schema","primaryKey","getCheckpointKey","startReplicationDownstream","startReplicationUpstream","downstreamSyncOnce","checkpointState","writeToChildQueue","next","lastCheckpointDoc","done","getChangedDocumentsSince","bulkSize","downResult","length","writeRowsLeft","r","isDocumentStateFromUpstream","map","useDoc","forkInstance","writeResult","Object","values","docInDb","docAtForkTime","newRevHeigth","height","docInMasterRevHeight","push","inQueueCount","addRunAgain","sub","changeStream","subscribe","eventBulk","hasNotFromUpstream","events","find","event","checkDoc","change","doc","unsubscribe","upstreamSyncOnce","writeToMasterQueue","hadConflicts","upResult","writeRowsToChild","writeRowsToMaster","forEach","isDocumentStateFromDownstream","docId","toChildNewData","masterWriteResult","keys","childWriteResult","masterWriteErrors","Set","useWriteRowsToChild","entries","has","hasNotFromDownstream","waitBeforePersist","hash","identifier","storage","name","databaseName","collectionName","join","docData","latestMasterDocState","upstreamRev"],"sources":["../../src/rx-storage-replication.ts"],"sourcesContent":["/**\n * Replicates two RxStorageInstances\n * with each other.\n * \n * Compared to the 'normal' replication plugins,\n * this one is made for internal use where:\n * - No permission handling is needed.\n * - It is made so that the write amount on the master is less but might increase on the child.\n * - It does not have to be easy to implement a compatible backend.\n *   Here we use another RxStorageImplementation as replication goal\n *   so it has to exactly behave like the RxStorage interface defines.\n * \n * This is made to be used internally by plugins\n * to get a really fast replication performance.\n * \n * The replication works like git, where the fork contains all new writes\n * and must be merged with the master before it can push it's new state to the master.\n */\n\nimport {\n    BehaviorSubject,\n    combineLatest,\n    filter,\n    firstValueFrom\n} from 'rxjs';\nimport {\n    getPrimaryKeyOfInternalDocument,\n    InternalStoreDocType\n} from './rx-database-internal-store';\nimport { getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport { flatCloneDocWithMeta } from './rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    RxConflictHandler,\n    RxDocumentData,\n    RxStorageBulkWriteError,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationDirection\n} from './types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    fastUnsecureHash,\n    flatClone,\n    lastOfArray,\n    now,\n    parseRevision,\n    PROMISE_RESOLVE_VOID\n} from './util';\n\n/**\n * Flags which document state is assumed\n * to be the current state at the master RxStorage instance.\n * Used in the ._meta of the document data that is stored at the client\n * and contains the full document.\n */\nconst MASTER_CURRENT_STATE_FLAG_SUFFIX = '-master';\n\n/**\n * Flags that a document write happened to\n * update the 'current master' meta field, after\n * the document has been pushed by the upstream.\n * Contains the revision.\n * Document states where this flag is equal to the current\n * revision, must not be upstreamed again.\n */\nconst UPSTREAM_MARKING_WRITE_FLAG_SUFFIX = '-after-up';\n\n/**\n * Flags that a document state was written to the master\n * by the upstream from the fork.\n * Used in the ._meta of the document data that is stored at the master\n * and contains only the revision.\n * We need this to detect if the document state was written from the upstream\n * so that it is not again replicated to the downstream.\n * TODO instead of doing that, we should have a way to 'mark' bulkWrite()\n * calls so that the emitted events can be detected as being from the upstream.\n */\nconst FROM_FORK_FLAG_SUFFIX = '-fork';\n\nexport function replicateRxStorageInstance<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): RxStorageInstanceReplicationState<RxDocType> {\n    const state: RxStorageInstanceReplicationState<RxDocType> = {\n        primaryPath: getPrimaryFieldOfPrimaryKey(input.masterInstance.schema.primaryKey),\n        input,\n        checkpointKey: getCheckpointKey(input),\n        canceled: new BehaviorSubject<boolean>(false),\n        firstSyncDone: {\n            down: new BehaviorSubject<boolean>(false),\n            up: new BehaviorSubject<boolean>(false)\n        },\n        lastCheckpoint: {},\n        streamQueue: {\n            down: PROMISE_RESOLVE_VOID,\n            up: PROMISE_RESOLVE_VOID\n        }\n    };\n\n    startReplicationDownstream(state);\n    startReplicationUpstream(state);\n    return state;\n}\n\n\n/**\n * Writes all documents from the master to the fork.\n */\nexport function startReplicationDownstream<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    let inQueueCount = 0;\n    state.streamQueue.down = state.streamQueue.down.then(() => downstreamSyncOnce());\n\n    function addRunAgain() {\n        if (inQueueCount > 2) {\n            return;\n        }\n        inQueueCount = inQueueCount + 1;\n        state.streamQueue.down = state.streamQueue.down\n            .then(() => downstreamSyncOnce())\n            .catch(() => { })\n            .then(() => inQueueCount = inQueueCount - 1);\n    }\n\n    /**\n     * If a write on the master happens, we have to trigger the downstream.\n     */\n    const sub = state.input.masterInstance.changeStream().subscribe(async (eventBulk) => {\n        addRunAgain(); // TODO move down again\n        return;\n        /**\n         * Do not trigger on changes that came from the upstream\n         */\n        const hasNotFromUpstream = eventBulk.events.find(event => {\n            const checkDoc = event.change.doc ? event.change.doc : event.change.previous;\n            return !isDocumentStateFromUpstream(state, checkDoc as any);\n        });\n        if (hasNotFromUpstream) {\n        }\n    });\n    firstValueFrom(\n        state.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    /**\n     * For faster performance, we directly start each write\n     * and then await all writes at the end.\n     */\n    let writeToChildQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n\n    async function downstreamSyncOnce() {\n        if (state.canceled.getValue()) {\n            return;\n        }\n        const checkpointState = await getLastCheckpointDoc(state, 'down');\n        const lastCheckpointDoc = checkpointState ? checkpointState.checkpointDoc : undefined;\n\n        let done = false;\n        while (!done && !state.canceled.getValue()) {\n            const downResult = await state.input.masterInstance.getChangedDocumentsSince(\n                state.input.bulkSize,\n                state.lastCheckpoint.down\n            );\n            if (downResult.length === 0) {\n                done = true;\n                continue;\n            }\n            state.lastCheckpoint.down = lastOfArray(downResult).checkpoint;\n            writeToChildQueue = writeToChildQueue.then((async () => {\n                let writeRowsLeft: BulkWriteRow<RxDocType>[] = downResult\n                    .filter(r => !isDocumentStateFromUpstream(state, r.document))\n                    .map(r => {\n                        const useDoc = flatCloneDocWithMeta(r.document);\n                        useDoc._meta[state.checkpointKey + MASTER_CURRENT_STATE_FLAG_SUFFIX] = r.document;\n                        delete useDoc._meta[state.checkpointKey + FROM_FORK_FLAG_SUFFIX];\n                        return { document: useDoc };\n                    });\n\n                while (writeRowsLeft.length > 0 && !state.canceled.getValue()) {\n                    const writeResult = await state.input.forkInstance.bulkWrite(writeRowsLeft);\n                    writeRowsLeft = [];\n\n                    await Promise.all(\n                        Object.values(writeResult.error)\n                            .map(async (error: RxStorageBulkWriteError<RxDocType>) => {\n                                /**\n                                 * The PouchDB RxStorage sometimes emits too old\n                                 * document states when calling getChangedDocumentsSince()\n                                 * Therefore we filter out conflicts where the new master state\n                                 * is older then the master state at fork time.\n                                 * \n                                 * On other RxStorage implementations this should never be the case\n                                 * because getChangedDocumentsSince() must always return the current newest\n                                 * document state, not the state at the write time of the event.\n                                 */\n                                const docInDb = ensureNotFalsy(error.documentInDb);\n                                const docAtForkTime: RxDocumentData<RxDocType> | undefined = docInDb._meta[state.checkpointKey + MASTER_CURRENT_STATE_FLAG_SUFFIX] as any;\n                                if (docAtForkTime) {\n                                    const newRevHeigth = parseRevision(error.writeRow.document._rev).height;\n                                    const docInMasterRevHeight = parseRevision(docAtForkTime._rev).height;\n                                    if (newRevHeigth <= docInMasterRevHeight) {\n                                        return;\n                                    }\n                                }\n\n\n                                const resolved = await resolveConflictError(\n                                    state.input.conflictHandler,\n                                    error\n                                );\n                                if (resolved) {\n                                    /**\n                                     * Keep the meta data of the original\n                                     * document from the master.\n                                     */\n                                    const resolvedDoc = flatClone(resolved);\n                                    resolvedDoc._meta = flatClone(error.writeRow.document._meta);\n                                    resolvedDoc._meta.lwt = now();\n\n                                    writeRowsLeft.push({\n                                        previous: ensureNotFalsy(error.documentInDb),\n                                        document: resolvedDoc\n                                    });\n                                }\n                            })\n                    );\n                }\n            }));\n        }\n        await writeToChildQueue;\n\n        if (!state.firstSyncDone.down.getValue()) {\n            state.firstSyncDone.down.next(true);\n        }\n\n        /**\n         * Write the new checkpoint\n         */\n        await setCheckpoint(\n            state,\n            'down',\n            lastCheckpointDoc\n        );\n    }\n}\n\n\n/**\n * Writes all document changes from the client to the master.\n */\nexport function startReplicationUpstream<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    let writeToMasterQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n    let inQueueCount = 0;\n    state.streamQueue.up = state.streamQueue.up.then(() => upstreamSyncOnce());\n\n    function addRunAgain() {\n        if (inQueueCount > 2) {\n            return state.streamQueue.up;\n        }\n        inQueueCount = inQueueCount + 1;\n        state.streamQueue.up = state.streamQueue.up\n            .then(() => upstreamSyncOnce())\n            .catch(() => { })\n            .then(() => inQueueCount = inQueueCount - 1);\n        return state.streamQueue.up;\n    }\n    const sub = state.input.forkInstance.changeStream().subscribe(async (eventBulk) => {\n        /**\n         * Do not trigger on changes that came from the downstream\n         */\n        const hasNotFromDownstream = eventBulk.events.find(event => {\n            const checkDoc = event.change.doc ? event.change.doc : event.change.previous;\n            return !isDocumentStateFromDownstream(state, checkDoc as any);\n        })\n        if (hasNotFromDownstream) {\n            if (state.input.waitBeforePersist) {\n                await state.input.waitBeforePersist();\n            }\n            addRunAgain();\n        }\n    });\n    firstValueFrom(\n        state.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    async function upstreamSyncOnce() {\n        if (state.canceled.getValue()) {\n            return;\n        }\n\n        const checkpointState = await getLastCheckpointDoc(state, 'up');\n        const lastCheckpointDoc = checkpointState ? checkpointState.checkpointDoc : undefined;\n        let hadConflicts = false;\n\n        let done = false;\n        while (!done && !state.canceled.getValue()) {\n            const upResult = await state.input.forkInstance.getChangedDocumentsSince(\n                state.input.bulkSize,\n                state.lastCheckpoint.up\n            );\n            if (\n                upResult.length === 0 ||\n                state.canceled.getValue()\n            ) {\n                done = true;\n                continue;\n            }\n\n            state.lastCheckpoint.up = lastOfArray(upResult).checkpoint;\n            writeToMasterQueue = writeToMasterQueue.then((async () => {\n                if (state.canceled.getValue()) {\n                    return;\n                }\n\n                const writeRowsToChild: {\n                    [docId: string]: BulkWriteRow<RxDocType>\n                } = {};\n                const writeRowsToMaster: BulkWriteRow<RxDocType>[] = [];\n                upResult.forEach(r => {\n                    if (isDocumentStateFromDownstream(state, r.document)) {\n                        return;\n                    }\n                    if (isDocumentStateFromUpstream(state, r.document)) {\n                        return;\n                    }\n                    const docId: string = (r.document as any)[state.primaryPath];\n                    const useDoc = flatCloneDocWithMeta(r.document);\n                    delete useDoc._meta[state.checkpointKey + MASTER_CURRENT_STATE_FLAG_SUFFIX];\n                    useDoc._meta[state.checkpointKey + FROM_FORK_FLAG_SUFFIX] = useDoc._rev;\n                    const previous = r.document._meta[state.checkpointKey + MASTER_CURRENT_STATE_FLAG_SUFFIX] as any;\n\n\n                    const toChildNewData = flatCloneDocWithMeta(r.document);\n                    toChildNewData._meta[state.checkpointKey + MASTER_CURRENT_STATE_FLAG_SUFFIX] = useDoc;\n                    toChildNewData._meta.lwt = now();\n                    toChildNewData._rev = createRevision(toChildNewData, r.document);\n                    toChildNewData._meta[state.checkpointKey + UPSTREAM_MARKING_WRITE_FLAG_SUFFIX] = toChildNewData._rev;\n\n\n                    writeRowsToChild[docId] = {\n                        previous: r.document,\n                        document: toChildNewData\n                    };\n                    writeRowsToMaster.push({\n                        previous,\n                        document: useDoc\n                    });\n                });\n\n                if (writeRowsToMaster.length === 0) {\n                    hadConflicts = false;\n                    return;\n                }\n\n                const masterWriteResult = await state.input.masterInstance.bulkWrite(writeRowsToMaster);\n                const masterWriteErrors = new Set(Object.keys(masterWriteResult.error));\n                /**\n                 * TODO here we have the most critical point in the replicaiton.\n                 * If the child RxStorage is closed or the process exits between\n                 * the write to master and the write to the child,\n                 * we can land in a state where the child does not remember\n                 * that a document was already pushed to the master\n                 * and will try to do that again which will lead to a replication conflict\n                 * even if there should be none.\n                 */\n                const useWriteRowsToChild: BulkWriteRow<RxDocType>[] = [];\n                Object.entries(writeRowsToChild).forEach(([docId, writeRow]) => {\n                    if (!masterWriteErrors.has(docId)) {\n                        useWriteRowsToChild.push(writeRow);\n                    }\n                })\n                let childWriteResult;\n                if (useWriteRowsToChild.length > 0) {\n                    childWriteResult = await state.input.forkInstance.bulkWrite(useWriteRowsToChild);\n                }\n\n                // TODO check if has non-409 errors and then throw\n                hadConflicts = Object.keys(masterWriteResult.error).length > 0 ||\n                    (!!childWriteResult && Object.keys(childWriteResult.error).length > 0);\n            }));\n        }\n\n        await writeToMasterQueue;\n\n        await setCheckpoint(\n            state,\n            'up',\n            lastCheckpointDoc\n        );\n\n        if (hadConflicts) {\n            /**\n             * If we had a conflict,\n             * we have to first wait until the downstream\n             * is idle so we know that it had resolved all conflicts.\n             * Then we can run the upstream again.\n             */\n            state.streamQueue.up = state.streamQueue.up\n                .then(() => state.streamQueue.down)\n                .then(() => {\n                    addRunAgain();\n                });\n        } else if (!state.firstSyncDone.up.getValue()) {\n            state.firstSyncDone.up.next(true);\n        }\n    }\n}\n\n\nexport async function getLastCheckpointDoc<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection\n): Promise<undefined | {\n    checkpoint: any;\n    checkpointDoc?: RxDocumentData<InternalStoreDocType>;\n}> {\n    if (!state.input.checkPointInstance) {\n        return {\n            checkpoint: state.lastCheckpoint[direction]\n        };\n    }\n\n    const checkpointDocId = getPrimaryKeyOfInternalDocument(\n        state.checkpointKey + '-' + direction,\n        'OTHER'\n    );\n    const checkpointResult = await state.input.checkPointInstance.findDocumentsById(\n        [\n            checkpointDocId\n        ],\n        false\n    );\n\n    const checkpointDoc = checkpointResult[checkpointDocId];\n    if (checkpointDoc) {\n        return {\n            checkpoint: checkpointDoc.data,\n            checkpointDoc\n        };\n    } else {\n        return undefined;\n    }\n}\n\n\nexport function getCheckpointKey<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): string {\n    const hash = fastUnsecureHash([\n        input.identifier,\n        input.masterInstance.storage.name,\n        input.masterInstance.databaseName,\n        input.masterInstance.collectionName,\n        input.forkInstance.storage.name,\n        input.forkInstance.databaseName,\n        input.forkInstance.collectionName\n    ].join('||'));\n    return 'rx-storage-replication-' + hash;\n}\n\n\n/**\n * Resolves a conflict error.\n * Returns the resolved document.\n * If document is not in conflict, returns undefined.\n * If error is non-409, it throws an error.\n * Conflicts are only solved in the downstream, never in the upstream.\n */\nexport async function resolveConflictError<RxDocType>(\n    conflictHandler: RxConflictHandler<RxDocType>,\n    error: RxStorageBulkWriteError<RxDocType>\n): Promise<RxDocumentData<RxDocType> | undefined> {\n    if (error.status !== 409) {\n        /**\n         * If this ever happens,\n         * make a PR with a unit test to reproduce it.\n         */\n        throw new Error('Non conflict error');\n    }\n    const documentInDb = ensureNotFalsy(error.documentInDb);\n    if (documentInDb._rev === error.writeRow.document._rev) {\n        /**\n         * Documents are equal,\n         * so this is not a conflict -> do nothing.\n         */\n        return undefined;\n    } else {\n        /**\n         * We have a conflict, resolve it!\n         */\n        const resolved = await conflictHandler({\n            documentStateAtForkTime: error.writeRow.previous,\n            newDocumentStateInMaster: error.writeRow.document,\n            currentForkDocumentState: documentInDb\n        });\n\n        const resolvedDoc = flatCloneDocWithMeta(resolved.resolvedDocumentState);\n        resolvedDoc._meta.lwt = now();\n        resolvedDoc._rev = createRevision(resolvedDoc, documentInDb);\n        return resolvedDoc;\n    }\n}\n\n\nexport async function setCheckpoint<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection,\n    checkpointDoc?: RxDocumentData<InternalStoreDocType>\n) {\n    const checkpoint = state.lastCheckpoint[direction];\n    if (\n        checkpoint &&\n        state.input.checkPointInstance &&\n        /**\n         * If the replication is already canceled,\n         * we do not write a checkpoint\n         * because that could mean we write a checkpoint\n         * for data that has been fetched from the master\n         * but not been written to the child.\n         */\n        !state.canceled.getValue() &&\n        /**\n         * Only write checkpoint if it is different from before\n         * to have less writes to the storage.\n         */\n        (\n            !checkpointDoc ||\n            JSON.stringify(checkpointDoc.data) !== JSON.stringify(checkpoint)\n        )\n    ) {\n        const checkpointKeyWithDirection = state.checkpointKey + '-' + direction;\n        const newDoc: RxDocumentData<InternalStoreDocType<any>> = {\n            key: checkpointKeyWithDirection,\n            id: getPrimaryKeyOfInternalDocument(\n                checkpointKeyWithDirection,\n                'OTHER'\n            ),\n            context: 'OTHER',\n            _deleted: false,\n            _attachments: {},\n            data: checkpoint,\n            _meta: {\n                lwt: now()\n            },\n            _rev: ''\n        };\n        newDoc._rev = createRevision(newDoc, checkpointDoc);\n        await state.input.checkPointInstance.bulkWrite([{\n            previous: checkpointDoc,\n            document: newDoc\n        }]);\n    }\n}\n\n\nexport async function awaitRxStorageReplicationFirstInSync(\n    state: RxStorageInstanceReplicationState<any>\n) {\n    return firstValueFrom(\n        combineLatest([\n            state.firstSyncDone.down.pipe(\n                filter(v => !!v)\n            ),\n            state.firstSyncDone.up.pipe(\n                filter(v => !!v)\n            )\n        ])\n    );\n}\n\nexport async function awaitRxStorageReplicationIdle(\n    state: RxStorageInstanceReplicationState<any>\n) {\n    await awaitRxStorageReplicationFirstInSync(state);\n    while (true) {\n        const { down, up } = state.streamQueue;\n        await Promise.all([\n            up,\n            down\n        ]);\n        /**\n         * If the Promises have not been reasigned\n         * after awaiting them, we know that the replication\n         * is in idle state at this point in time.\n         */\n        if (\n            down === state.streamQueue.down &&\n            up === state.streamQueue.up\n        ) {\n            return;\n        }\n    }\n}\n\nexport function isDocumentStateFromDownstream<RxDocType>(\n    state: RxStorageInstanceReplicationState<any>,\n    docData: RxDocumentData<RxDocType>\n): boolean {\n    const latestMasterDocState: RxDocumentData<RxDocType> | undefined = docData._meta[state.checkpointKey + MASTER_CURRENT_STATE_FLAG_SUFFIX] as any;\n    if (latestMasterDocState && latestMasterDocState._rev === docData._rev) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport function isDocumentStateFromUpstream<RxDocType>(\n    state: RxStorageInstanceReplicationState<any>,\n    docData: RxDocumentData<RxDocType>\n): boolean {\n    const upstreamRev = docData._meta[state.checkpointKey + FROM_FORK_FLAG_SUFFIX];\n    if (\n        (upstreamRev && upstreamRev === docData._rev) ||\n        (\n            docData._meta[state.checkpointKey + UPSTREAM_MARKING_WRITE_FLAG_SUFFIX] === docData._rev\n        )\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n"],"mappings":"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"}