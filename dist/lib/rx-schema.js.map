{"version":3,"sources":["../../src/rx-schema.ts"],"names":[],"mappings":"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","file":"rx-schema.js","sourcesContent":["import deepEqual from 'deep-equal';\nimport objectPath from 'object-path';\n\nimport {\n    clone,\n    hash,\n    sortObject,\n    pluginMissing,\n    overwriteGetterForCaching,\n    flatClone\n} from './util';\nimport {\n    newRxError,\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport {\n    defineGetterSetter\n} from './rx-document';\n\nimport type {\n    CompositePrimaryKey,\n    PrimaryKey,\n    RxJsonSchema\n} from './types';\n\nexport class RxSchema<T = any> {\n    public indexes: string[][];\n    public primaryPath: keyof T;\n    public finalFields: string[];\n\n    constructor(\n        public readonly jsonSchema: RxJsonSchema<T>\n    ) {\n        this.indexes = getIndexes(this.jsonSchema);\n\n        // primary is always required\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.jsonSchema.primaryKey);\n\n        // final fields are always required\n        this.finalFields = getFinalFields(this.jsonSchema);\n\n        this.jsonSchema.required = (this.jsonSchema as any).required\n            .concat(this.finalFields)\n            .filter((field: string) => !field.includes('.'))\n            .filter((elem: any, pos: any, arr: any) => arr.indexOf(elem) === pos); // unique;\n    }\n\n    public get version(): number {\n        return this.jsonSchema.version;\n    }\n\n    get normalized(): RxJsonSchema<T> {\n        return overwriteGetterForCaching(\n            this,\n            'normalized',\n            normalize(this.jsonSchema)\n        );\n    }\n\n    public get topLevelFields(): (keyof T)[] {\n        return Object.keys(this.normalized.properties) as (keyof T)[];\n    }\n\n    public get defaultValues(): { [P in keyof T]: T[P] } {\n        const values = {} as { [P in keyof T]: T[P] };\n        Object\n            .entries(this.normalized.properties)\n            .filter(([, v]) => (v as any).hasOwnProperty('default'))\n            .forEach(([k, v]) => (values as any)[k] = (v as any).default);\n        return overwriteGetterForCaching(\n            this,\n            'defaultValues',\n            values\n        );\n    }\n\n    /**\n        * true if schema contains at least one encrypted path\n        */\n    get crypt(): boolean {\n        if (\n            !!this.jsonSchema.encrypted && this.jsonSchema.encrypted.length > 0 ||\n            this.jsonSchema.attachments && this.jsonSchema.attachments.encrypted\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * get all encrypted paths\n     */\n    get encryptedPaths(): string[] {\n        return this.jsonSchema.encrypted || [];\n    }\n\n    /**\n     * @overrides itself on the first call\n     */\n    public get hash(): string {\n        return overwriteGetterForCaching(\n            this,\n            'hash',\n            hash(this.normalized)\n        );\n    }\n\n    /**\n     * checks if a given change on a document is allowed\n     * Ensures that:\n     * - primary is not modified\n     * - final fields are not modified\n     * @throws {Error} if not valid\n     */\n    validateChange(dataBefore: any, dataAfter: any): void {\n        this.finalFields.forEach(fieldName => {\n            if (!deepEqual(dataBefore[fieldName], dataAfter[fieldName])) {\n                throw newRxError('DOC9', {\n                    dataBefore,\n                    dataAfter,\n                    fieldName,\n                    schema: this.jsonSchema\n                });\n            }\n        });\n    }\n\n    /**\n     * validate if the obj matches the schema\n     * @overwritten by plugin (required)\n     * @param schemaPath if given, validates agains deep-path of schema\n     * @throws {Error} if not valid\n     * @param obj equal to input-obj\n     */\n    public validate(_obj: any, _schemaPath?: string): void {\n        throw pluginMissing('validate');\n    }\n\n    /**\n     * fills all unset fields with default-values if set\n     */\n    fillObjectWithDefaults(obj: any): any {\n        obj = clone(obj);\n        Object\n            .entries(this.defaultValues)\n            .filter(([k]) => !obj.hasOwnProperty(k) || typeof obj[k] === 'undefined')\n            .forEach(([k, v]) => obj[k] = v);\n        return obj;\n    }\n\n    /**\n     * creates the schema-based document-prototype,\n     * see RxCollection.getDocumentPrototype()\n     */\n    public getDocumentPrototype(): any {\n        const proto = {};\n        defineGetterSetter(this, proto, '');\n        overwriteGetterForCaching(\n            this,\n            'getDocumentPrototype',\n            () => proto\n        );\n        return proto;\n    }\n\n\n    getPrimaryOfDocumentData(\n        documentData: Partial<T>\n    ): string {\n        return getComposedPrimaryKeyOfDocumentData(\n            this.jsonSchema,\n            documentData\n        );\n    }\n\n    fillPrimaryKey(\n        documentData: T\n    ): T {\n        const cloned = flatClone(documentData);\n\n        const newPrimary = getComposedPrimaryKeyOfDocumentData<T>(\n            this.jsonSchema,\n            documentData\n        );\n\n        const existingPrimary: string | undefined = documentData[this.primaryPath] as any;\n        if (\n            existingPrimary &&\n            existingPrimary !== newPrimary\n        ) {\n            throw newRxError(\n                'DOC19',\n                {\n                    args: {\n                        documentData,\n                        existingPrimary,\n                        newPrimary,\n                    },\n                    schema: this.jsonSchema\n                });\n        }\n\n        (cloned as any)[this.primaryPath] = newPrimary;\n        return cloned;\n    }\n\n}\n\nexport function getIndexes<T = any>(\n    jsonSchema: RxJsonSchema<T>\n): string[][] {\n    return (jsonSchema.indexes || []).map(index => Array.isArray(index) ? index : [index]);\n}\n\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\n    primaryKey: PrimaryKey<RxDocType>\n): keyof RxDocType {\n    if (typeof primaryKey === 'string') {\n        return primaryKey as any;\n    } else {\n        return (primaryKey as CompositePrimaryKey<RxDocType>).key;\n    }\n}\n\n/**\n * Returns the composed primaryKey of a document by its data.\n */\nexport function getComposedPrimaryKeyOfDocumentData<RxDocType>(\n    jsonSchema: RxJsonSchema<RxDocType>,\n    documentData: Partial<RxDocType>\n): string {\n    if (typeof jsonSchema.primaryKey === 'string') {\n        return (documentData as any)[jsonSchema.primaryKey];\n    }\n\n    const compositePrimary: CompositePrimaryKey<RxDocType> = jsonSchema.primaryKey as any;\n    return compositePrimary.fields.map(field => {\n        const value = objectPath.get(documentData as any, field as string);\n        if (typeof value === 'undefined') {\n            throw newRxError('DOC18', { args: { field, documentData } });\n        }\n        return value;\n    }).join(compositePrimary.separator);\n}\n\n/**\n * array with previous version-numbers\n */\nexport function getPreviousVersions(schema: RxJsonSchema<any>): number[] {\n    const version = schema.version ? schema.version : 0;\n    let c = 0;\n    return new Array(version)\n        .fill(0)\n        .map(() => c++);\n}\n\n/**\n * returns the final-fields of the schema\n * @return field-names of the final-fields\n */\nexport function getFinalFields<T = any>(\n    jsonSchema: RxJsonSchema<T>\n): string[] {\n    const ret = Object.keys(jsonSchema.properties)\n        .filter(key => (jsonSchema as any).properties[key].final);\n\n    // primary is also final\n    const primaryPath = getPrimaryFieldOfPrimaryKey(jsonSchema.primaryKey);\n    ret.push(primaryPath as string);\n\n    // fields of composite primary are final\n    if (typeof jsonSchema.primaryKey !== 'string') {\n        (jsonSchema.primaryKey as CompositePrimaryKey<T>).fields\n            .forEach(field => ret.push(field as string));\n    }\n\n    return ret;\n}\n\n/**\n * orders the schemas attributes by alphabetical order\n * @return jsonSchema - ordered\n */\nexport function normalize<T>(jsonSchema: RxJsonSchema<T>): RxJsonSchema<T> {\n    const normalizedSchema: RxJsonSchema<T> = sortObject(clone(jsonSchema));\n    if (jsonSchema.indexes) {\n        normalizedSchema.indexes = Array.from(jsonSchema.indexes); // indexes should remain unsorted\n    }\n    return normalizedSchema;\n}\n\n/**\n * fills the schema-json with default-settings\n * @return cloned schemaObj\n */\nexport function fillWithDefaultSettings<T = any>(\n    schemaObj: RxJsonSchema<T>\n): RxJsonSchema<T> {\n    schemaObj = clone(schemaObj);\n\n    // additionalProperties is always false\n    schemaObj.additionalProperties = false;\n\n    // fill with key-compression-state ()\n    if (!schemaObj.hasOwnProperty('keyCompression')) {\n        schemaObj.keyCompression = false;\n    }\n\n    // indexes must be array\n    schemaObj.indexes = schemaObj.indexes || [];\n\n    // required must be array\n    schemaObj.required = schemaObj.required || [];\n\n    // encrypted must be array\n    schemaObj.encrypted = schemaObj.encrypted || [];\n\n\n\n    /**\n     * TODO we should not need to added the internal fields to the schema.\n     * Better remove the before validation.\n     */\n    // add _rev\n    (schemaObj.properties as any)._rev = {\n        type: 'string',\n        minLength: 1\n    };\n\n    // add attachments\n    (schemaObj.properties as any)._attachments = {\n        type: 'object'\n    };\n\n    // add deleted flag\n    (schemaObj.properties as any)._deleted = {\n        type: 'boolean'\n    };\n\n\n    // version is 0 by default\n    schemaObj.version = schemaObj.version || 0;\n\n    return schemaObj;\n}\n\nexport function createRxSchema<T>(\n    jsonSchema: RxJsonSchema<T>,\n    runPreCreateHooks = true\n): RxSchema<T> {\n    if (runPreCreateHooks) {\n        runPluginHooks('preCreateRxSchema', jsonSchema);\n    }\n    const schema = new RxSchema(fillWithDefaultSettings(jsonSchema));\n    runPluginHooks('createRxSchema', schema);\n    return schema;\n}\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxSchema;\n}\n"]}