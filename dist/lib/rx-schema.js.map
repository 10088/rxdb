{"version":3,"file":"rx-schema.js","names":["RxSchema","jsonSchema","indexes","getIndexes","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","finalFields","getFinalFields","validateChange","dataBefore","dataAfter","forEach","fieldName","deepEqual","newRxError","schema","validate","obj","schemaPath","validateFullDocumentData","fullDocData","fillObjectDataBeforeInsert","_docData","_schemaPath","fillObjectWithDefaults","flatClone","Object","entries","defaultValues","filter","k","hasOwnProperty","v","getDocumentPrototype","proto","defineGetterSetter","overwriteGetterForCaching","getPrimaryOfDocumentData","documentData","getComposedPrimaryKeyOfDocumentData","version","values","properties","encrypted","length","attachments","hash","map","index","isMaybeReadonlyArray","getPreviousVersions","c","Array","fill","createRxSchema","runPreCreateHooks","runPluginHooks","useJsonSchema","fillWithDefaultSettings","normalizeRxJsonSchema","overwritable","deepFreezeWhenDevMode","isInstanceOf","toTypedRxJsonSchema"],"sources":["../../src/rx-schema.ts"],"sourcesContent":["import deepEqual from 'fast-deep-equal';\n\nimport {\n    hash,\n    overwriteGetterForCaching,\n    flatClone,\n    isMaybeReadonlyArray\n} from './util';\nimport {\n    newRxError,\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport {\n    defineGetterSetter\n} from './rx-document';\n\nimport type {\n    DeepMutable,\n    DeepReadonly, MaybeReadonly,\n    RxDocumentData,\n    RxJsonSchema,\n    StringKeys\n} from './types';\nimport {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData,\n    getFinalFields,\n    getPrimaryFieldOfPrimaryKey,\n    normalizeRxJsonSchema\n} from './rx-schema-helper';\nimport { overwritable } from './overwritable';\nimport { fillObjectDataBeforeInsert } from './rx-collection-helper';\n\nexport class RxSchema<RxDocType = any> {\n    public indexes: MaybeReadonly<string[]>[];\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public finalFields: string[];\n\n    constructor(\n        public readonly jsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n    ) {\n        this.indexes = getIndexes(this.jsonSchema);\n\n        // primary is always required\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.jsonSchema.primaryKey);\n\n        this.finalFields = getFinalFields(this.jsonSchema);\n    }\n\n    public get version(): number {\n        return this.jsonSchema.version;\n    }\n\n    public get defaultValues(): { [P in keyof RxDocType]: RxDocType[P] } {\n        const values = {} as { [P in keyof RxDocType]: RxDocType[P] };\n        Object\n            .entries(this.jsonSchema.properties)\n            .filter(([, v]) => (v as any).hasOwnProperty('default'))\n            .forEach(([k, v]) => (values as any)[k] = (v as any).default);\n        return overwriteGetterForCaching(\n            this,\n            'defaultValues',\n            values\n        );\n    }\n\n    /**\n        * true if schema contains at least one encrypted path\n        */\n    get crypt(): boolean {\n        if (\n            !!this.jsonSchema.encrypted && this.jsonSchema.encrypted.length > 0 ||\n            this.jsonSchema.attachments && this.jsonSchema.attachments.encrypted\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @overrides itself on the first call\n     */\n    public get hash(): string {\n        return overwriteGetterForCaching(\n            this,\n            'hash',\n            hash(this.jsonSchema)\n        );\n    }\n\n    /**\n     * checks if a given change on a document is allowed\n     * Ensures that:\n     * - primary is not modified\n     * - final fields are not modified\n     * @throws {Error} if not valid\n     */\n    validateChange(dataBefore: any, dataAfter: any): void {\n        this.finalFields.forEach(fieldName => {\n            if (!deepEqual(dataBefore[fieldName], dataAfter[fieldName])) {\n                throw newRxError('DOC9', {\n                    dataBefore,\n                    dataAfter,\n                    fieldName,\n                    schema: this.jsonSchema\n                });\n            }\n        });\n    }\n\n    /**\n     * validate if the given document data matches the schema\n     * @param schemaPath if given, validates against deep-path of schema\n     * @throws {Error} if not valid\n     * @param obj equal to input-obj\n     *\n     */\n    public validate(obj: Partial<RxDocType> | any, schemaPath?: string): void {\n        if (!this.validateFullDocumentData) {\n            return;\n        } else {\n            const fullDocData = fillObjectDataBeforeInsert(this, obj);\n            return this.validateFullDocumentData(fullDocData, schemaPath);\n        }\n    }\n\n    /**\n     * @overwritten by the given validation plugin\n     */\n    public validateFullDocumentData(\n        _docData: RxDocumentData<RxDocType>,\n        _schemaPath?: string\n    ) {\n        /**\n         * This method might be overwritten by a validation plugin,\n         * otherwise do nothing, because if not validation plugin\n         * was added to RxDB, we assume all given data is valid.\n         */\n    }\n\n    /**\n     * fills all unset fields with default-values if set\n     */\n    fillObjectWithDefaults(obj: any): any {\n        obj = flatClone(obj);\n        Object\n            .entries(this.defaultValues)\n            .filter(([k]) => !obj.hasOwnProperty(k) || typeof obj[k] === 'undefined')\n            .forEach(([k, v]) => obj[k] = v);\n        return obj;\n    }\n\n    /**\n     * creates the schema-based document-prototype,\n     * see RxCollection.getDocumentPrototype()\n     */\n    public getDocumentPrototype(): any {\n        const proto = {};\n        defineGetterSetter(this, proto, '');\n        overwriteGetterForCaching(\n            this,\n            'getDocumentPrototype',\n            () => proto\n        );\n        return proto;\n    }\n\n\n    getPrimaryOfDocumentData(\n        documentData: Partial<RxDocType>\n    ): string {\n        return getComposedPrimaryKeyOfDocumentData(\n            this.jsonSchema,\n            documentData\n        );\n    }\n}\n\nexport function getIndexes<RxDocType = any>(\n    jsonSchema: RxJsonSchema<RxDocType>\n): MaybeReadonly<string[]>[] {\n    return (jsonSchema.indexes || []).map(index => isMaybeReadonlyArray(index) ? index : [index]);\n}\n\n/**\n * array with previous version-numbers\n */\nexport function getPreviousVersions(schema: RxJsonSchema<any>): number[] {\n    const version = schema.version ? schema.version : 0;\n    let c = 0;\n    return new Array(version)\n        .fill(0)\n        .map(() => c++);\n}\n\nexport function createRxSchema<T>(\n    jsonSchema: RxJsonSchema<T>,\n    runPreCreateHooks = true\n): RxSchema<T> {\n    if (runPreCreateHooks) {\n        runPluginHooks('preCreateRxSchema', jsonSchema);\n    }\n\n    let useJsonSchema = fillWithDefaultSettings(jsonSchema);\n    useJsonSchema = normalizeRxJsonSchema(useJsonSchema);\n    overwritable.deepFreezeWhenDevMode(useJsonSchema);\n\n    const schema = new RxSchema(useJsonSchema);\n    runPluginHooks('createRxSchema', schema);\n    return schema;\n}\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxSchema;\n}\n\n/**\n * Used as helper function the generate the document type out of the schema via typescript.\n * @link https://github.com/pubkey/rxdb/discussions/3467\n */\nexport function toTypedRxJsonSchema<T extends DeepReadonly<RxJsonSchema<any>>>(schema: T): DeepMutable<T> {\n    return schema as any;\n}\n"],"mappings":"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"}