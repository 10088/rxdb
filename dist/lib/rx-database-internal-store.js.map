{"version":3,"file":"rx-database-internal-store.js","names":["body","recover","result","e","then","pact","state","value","s","v","o","bind","observer","prototype","onFulfilled","onRejected","callback","_this","thenable","test","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","addConnectedStorageToCollection","collection","storageCollectionName","schema","collectionNameWithVersion","_collectionNamePrimary","name","jsonSchema","collectionDocId","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","getSingleDocument","database","internalStore","collectionDoc","saveData","clone","ensureNotFalsy","data","connectedStorages","alreadyThere","find","row","collectionName","version","push","writeSingle","previous","document","err","isBulkWriteConflictError","ensureStorageTokenDocumentExists","rxDatabase","storageToken","randomCouchString","passwordHash","password","fastUnsecureHash","undefined","docData","id","STORAGE_TOKEN_DOCUMENT_ID","context","INTERNAL_CONTEXT_STORAGE_TOKEN","key","STORAGE_TOKEN_DOCUMENT_KEY","token","instanceToken","_deleted","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","bulkWrite","writeResult","success","error","isError","status","conflictError","documentInDb","newRxError","existingPasswordHash","storageTokenDocInDb","getAllCollectionDocuments","storageStatics","storageInstance","getAllQueryPrepared","prepareQuery","selector","sort","skip","query","queryResult","allDocs","documents","INTERNAL_STORE_SCHEMA_TITLE","INTERNAL_STORE_SCHEMA","fillWithDefaultSettings","title","primaryKey","fields","separator","type","properties","maxLength","additionalProperties","indexes","required","sharding","shards","mode","getComposedPrimaryKeyOfDocumentData"],"sources":["../../src/rx-database-internal-store.ts"],"sourcesContent":["import { isBulkWriteConflictError, newRxError } from './rx-error';\nimport {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData\n} from './rx-schema-helper';\nimport { getSingleDocument, writeSingle } from './rx-storage-helper';\nimport type {\n    CollectionsOfDatabase,\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageInstance,\n    RxStorageStatics\n} from './types';\nimport {\n    clone,\n    ensureNotFalsy,\n    fastUnsecureHash,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    randomCouchString\n} from './util';\n\nexport const INTERNAL_CONTEXT_COLLECTION = 'collection';\nexport const INTERNAL_CONTEXT_STORAGE_TOKEN = 'storage-token';\n\n/**\n * Do not change the title,\n * we have to flag the internal schema so that\n * some RxStorage implementations are able\n * to detect if the created RxStorageInstance\n * is from the internals or not,\n * to do some optimizations in some cases.\n */\nexport const INTERNAL_STORE_SCHEMA_TITLE = 'RxInternalDocument';\n\nexport const INTERNAL_STORE_SCHEMA: RxJsonSchema<RxDocumentData<InternalStoreDocType<any>>> = fillWithDefaultSettings({\n    version: 0,\n    title: INTERNAL_STORE_SCHEMA_TITLE,\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'context',\n            'key'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string',\n            maxLength: 200\n        },\n        key: {\n            type: 'string'\n        },\n        context: {\n            type: 'string',\n            enum: [\n                INTERNAL_CONTEXT_COLLECTION,\n                INTERNAL_CONTEXT_STORAGE_TOKEN,\n                'OTHER'\n            ]\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        }\n    },\n    indexes: [],\n    required: [\n        'key',\n        'context',\n        'data'\n    ],\n    additionalProperties: false,\n    /**\n     * If the sharding plugin is used,\n     * it must not shard on the internal RxStorageInstance\n     * because that one anyway has only a small amount of documents\n     * and also its creation is in the hot path of the initial page load,\n     * so we should spend less time creating multiple RxStorageInstances.\n     */\n    sharding: {\n        shards: 1,\n        mode: 'collection'\n    }\n});\n\n\nexport function getPrimaryKeyOfInternalDocument(\n    key: string,\n    context: string\n): string {\n    return getComposedPrimaryKeyOfDocumentData<InternalStoreDocType>(\n        INTERNAL_STORE_SCHEMA,\n        {\n            key,\n            context\n        }\n    )\n}\n\n/**\n * Returns all internal documents\n * with context 'collection'\n */\nexport async function getAllCollectionDocuments(\n    storageStatics: RxStorageStatics,\n    storageInstance: RxStorageInstance<InternalStoreDocType<any>, any, any>\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const getAllQueryPrepared = storageStatics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {\n                context: INTERNAL_CONTEXT_COLLECTION\n            },\n            sort: [{ id: 'asc' }],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport const STORAGE_TOKEN_DOCUMENT_KEY = 'storageToken';\n\nexport const STORAGE_TOKEN_DOCUMENT_ID = getPrimaryKeyOfInternalDocument(\n    STORAGE_TOKEN_DOCUMENT_KEY,\n    INTERNAL_CONTEXT_STORAGE_TOKEN\n);\n\nexport async function ensureStorageTokenDocumentExists<Collections extends CollectionsOfDatabase = any>(\n    rxDatabase: RxDatabase<Collections>\n): Promise<RxDocumentData<InternalStoreStorageTokenDocType>> {\n\n    /**\n     * To have less read-write cycles,\n     * we just try to insert a new document\n     * and only fetch the existing one if a conflict happened.\n     */\n    const storageToken = randomCouchString(10);\n\n    const passwordHash = rxDatabase.password ? fastUnsecureHash(rxDatabase.password) : undefined;\n\n    const docData: RxDocumentData<InternalStoreStorageTokenDocType> = {\n        id: STORAGE_TOKEN_DOCUMENT_ID,\n        context: INTERNAL_CONTEXT_STORAGE_TOKEN,\n        key: STORAGE_TOKEN_DOCUMENT_KEY,\n        data: {\n            token: storageToken,\n            /**\n             * We add the instance token here\n             * to be able to detect if a given RxDatabase instance\n             * is the first instance that was ever created\n             * or if databases have existed earlier on that storage\n             * with the same database name.\n             */\n            instanceToken: rxDatabase.token,\n            passwordHash\n        },\n        _deleted: false,\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n    };\n\n    const writeResult = await rxDatabase.internalStore.bulkWrite(\n        [{ document: docData }],\n        'internal-add-storage-token'\n    );\n    if (writeResult.success[STORAGE_TOKEN_DOCUMENT_ID]) {\n        return writeResult.success[STORAGE_TOKEN_DOCUMENT_ID];\n    }\n\n    /**\n     * If we get a 409 error,\n     * it means another instance already inserted the storage token.\n     * So we get that token from the database and return that one.\n     */\n    const error = ensureNotFalsy(writeResult.error[STORAGE_TOKEN_DOCUMENT_ID]);\n    if (\n        error.isError &&\n        (error as RxStorageBulkWriteError<InternalStoreStorageTokenDocType>).status === 409\n    ) {\n        const conflictError = (error as RxStorageBulkWriteError<InternalStoreStorageTokenDocType>);\n\n\n        if (\n            passwordHash &&\n            passwordHash !== ensureNotFalsy(conflictError.documentInDb).data.passwordHash\n        ) {\n            throw newRxError('DB1', {\n                passwordHash,\n                existingPasswordHash: ensureNotFalsy(conflictError.documentInDb).data.passwordHash\n            });\n        }\n\n        const storageTokenDocInDb = conflictError.documentInDb;\n        return ensureNotFalsy(storageTokenDocInDb);\n    }\n    throw error;\n}\n\n\n\n\n\nexport async function addConnectedStorageToCollection(\n    collection: RxCollection<any>,\n    storageCollectionName: string,\n    schema: RxJsonSchema<any>\n) {\n    const collectionNameWithVersion = _collectionNamePrimary(collection.name, collection.schema.jsonSchema);\n    const collectionDocId = getPrimaryKeyOfInternalDocument(\n        collectionNameWithVersion,\n        INTERNAL_CONTEXT_COLLECTION\n    );\n\n    while (true) {\n        const collectionDoc = await getSingleDocument(\n            collection.database.internalStore,\n            collectionDocId\n        );\n        const saveData: RxDocumentData<InternalStoreCollectionDocType> = clone(ensureNotFalsy(collectionDoc));\n        /**\n         * Add array if not exist for backwards compatibility\n         * TODO remove this in 2023\n         */\n        if (!saveData.data.connectedStorages) {\n            saveData.data.connectedStorages = [];\n        }\n\n        // do nothing if already in array\n        const alreadyThere = saveData.data.connectedStorages\n            .find(row => row.collectionName === storageCollectionName && row.schema.version === schema.version);\n        if (alreadyThere) {\n            return;\n        }\n\n        // otherwise add to array and save\n        saveData.data.connectedStorages.push({\n            collectionName: storageCollectionName,\n            schema\n        });\n        try {\n            await writeSingle(\n                collection.database.internalStore,\n                {\n                    previous: ensureNotFalsy(collectionDoc),\n                    document: saveData\n                },\n                'add-connected-storage-to-collection'\n            );\n        } catch (err) {\n            if (!isBulkWriteConflictError(err)) {\n                throw err;\n            }\n            // retry on conflict\n        }\n    }\n}\n\n\n/**\n * returns the primary for a given collection-data\n * used in the internal store of a RxDatabase\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n"],"mappings":"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"}