{"version":3,"file":"rx-database-internal-store.js","names":["body","recover","result","e","then","ensureStorageTokenDocumentExists","rxDatabase","storageTokenDocumentId","getPrimaryKeyOfInternalDocument","STORAGE_TOKEN_DOCUMENT_KEY","INTERNAL_CONTEXT_STORAGE_TOKEN","storageToken","randomCouchString","docData","id","context","key","data","token","instanceToken","_deleted","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","createRevision","writeSingle","internalStore","document","err","isError","status","storageTokenDocInDb","documentInDb","ensureNotFalsy","getAllCollectionDocuments","storageInstance","storage","getAllQueryPrepared","statics","prepareQuery","schema","selector","INTERNAL_CONTEXT_COLLECTION","sort","skip","query","queryResult","allDocs","documents","INTERNAL_CONTEXT_ENCRYPTION","INTERNAL_CONTEXT_REPLICATION_PRIMITIVES","INTERNAL_STORE_SCHEMA","fillWithDefaultSettings","version","title","primaryKey","fields","separator","type","properties","maxLength","additionalProperties","indexes","required","sharding","shards","mode","getComposedPrimaryKeyOfDocumentData"],"sources":["../../src/rx-database-internal-store.ts"],"sourcesContent":["import { fillWithDefaultSettings, getComposedPrimaryKeyOfDocumentData } from './rx-schema-helper';\nimport { writeSingle } from './rx-storage-helper';\nimport type {\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageInstance\n} from './types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    randomCouchString\n} from './util';\n\nexport const INTERNAL_CONTEXT_COLLECTION = 'collection';\nexport const INTERNAL_CONTEXT_STORAGE_TOKEN = 'storage-token';\nexport const INTERNAL_CONTEXT_ENCRYPTION = 'plugin-encryption';\nexport const INTERNAL_CONTEXT_REPLICATION_PRIMITIVES = 'plugin-replication-primitives';\n\nexport const INTERNAL_STORE_SCHEMA: RxJsonSchema<RxDocumentData<InternalStoreDocType<any>>> = fillWithDefaultSettings({\n    version: 0,\n    /**\n     * Do not change the title,\n     * we have to flag this schema so that\n     * some RxStorage implementations are able\n     * to detect if the created RxStorageInstance\n     * is from the internals or not,\n     * to do some optimizations in some cases.\n     */\n    title: 'RxInternalDocument',\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'context',\n            'key'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string',\n            maxLength: 200\n        },\n        key: {\n            type: 'string'\n        },\n        context: {\n            type: 'string',\n            enum: [\n                INTERNAL_CONTEXT_COLLECTION,\n                INTERNAL_CONTEXT_STORAGE_TOKEN,\n                INTERNAL_CONTEXT_ENCRYPTION,\n                INTERNAL_CONTEXT_REPLICATION_PRIMITIVES,\n                'OTHER'\n            ]\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        }\n    },\n    indexes: [],\n    required: [\n        'key',\n        'context',\n        'data'\n    ],\n    additionalProperties: false,\n    /**\n     * If the sharding plugin is used,\n     * it must not shard on the internal RxStorageInstance\n     * because that one anyway has only a small amount of documents\n     * and also its creation is in the hot path of the initial page load,\n     * so we should spend less time creating multiple RxStorageInstances.\n     */\n    sharding: {\n        shards: 1,\n        mode: 'collection'\n    }\n});\n\nexport type InternalStoreDocType<Data = any> = {\n    id: string;\n    key: string;\n    context: string;\n    data: Data;\n}\n\n/**\n * Stores information about the collections.\n * The collection.name is the 'key' value.\n */\nexport type InternalStoreStorageTokenDocType = InternalStoreDocType<{\n    token: string;\n    instanceToken: string;\n}>;\n\n/**\n * Stores information about the collections.\n * The collection.name is the 'key' value.\n */\nexport type InternalStoreCollectionDocType = InternalStoreDocType<{\n    /**\n     * Plain name of the collection\n     */\n    name: string;\n    schema: RxJsonSchema<any>;\n    schemaHash: string;\n    version: number;\n}>;\n\n\nexport function getPrimaryKeyOfInternalDocument(\n    key: string,\n    context: string\n): string {\n    return getComposedPrimaryKeyOfDocumentData<InternalStoreDocType>(\n        INTERNAL_STORE_SCHEMA,\n        {\n            key,\n            context\n        }\n    )\n}\n\n/**\n * Returns all internal documents\n * with context 'collection'\n */\nexport async function getAllCollectionDocuments(\n    storageInstance: RxStorageInstance<InternalStoreDocType<any>, any, any>,\n    storage: RxStorage<any, any>\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {\n                context: INTERNAL_CONTEXT_COLLECTION\n            },\n            sort: [{ id: 'asc' }],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport const STORAGE_TOKEN_DOCUMENT_KEY = 'storageToken';\nexport async function ensureStorageTokenDocumentExists<Collections = any>(\n    rxDatabase: RxDatabase<Collections>\n): Promise<RxDocumentData<InternalStoreStorageTokenDocType>> {\n    const storageTokenDocumentId = getPrimaryKeyOfInternalDocument(\n        STORAGE_TOKEN_DOCUMENT_KEY,\n        INTERNAL_CONTEXT_STORAGE_TOKEN\n    );\n\n    /**\n     * To have less read-write cycles,\n     * we just try to insert a new document\n     * and only fetch the existing one if a conflict happened.\n     */\n    const storageToken = randomCouchString(10);\n    try {\n        const docData: RxDocumentData<InternalStoreStorageTokenDocType> = {\n            id: storageTokenDocumentId,\n            context: INTERNAL_CONTEXT_STORAGE_TOKEN,\n            key: STORAGE_TOKEN_DOCUMENT_KEY,\n            data: {\n                token: storageToken,\n                /**\n                 * We add the instance token here\n                 * to be able to detect if a given RxDatabase instance\n                 * is the first instance that was ever created\n                 * or if databases have existed earlier.\n                 */\n                instanceToken: rxDatabase.token\n            },\n            _deleted: false,\n            _meta: getDefaultRxDocumentMeta(),\n            _rev: getDefaultRevision(),\n            _attachments: {}\n        };\n        docData._rev = createRevision(docData);\n        await writeSingle<InternalStoreStorageTokenDocType>(\n            rxDatabase.internalStore,\n            {\n                document: docData\n            }\n        );\n        return docData;\n    } catch (err: RxStorageBulkWriteError<InternalStoreStorageTokenDocType> | any) {\n        /**\n         * If we get a 409 error,\n         * it means another instance already inserted the storage token.\n         * So we get that token from the database and return that one.\n         */\n        if (\n            err.isError &&\n            (err as RxStorageBulkWriteError<InternalStoreStorageTokenDocType>).status === 409\n        ) {\n            const storageTokenDocInDb = (err as RxStorageBulkWriteError<InternalStoreStorageTokenDocType>).documentInDb;\n            return ensureNotFalsy(storageTokenDocInDb);\n        }\n        throw err;\n    }\n}\n"],"mappings":"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"}