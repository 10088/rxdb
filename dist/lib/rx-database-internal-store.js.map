{"version":3,"file":"rx-database-internal-store.js","names":["body","recover","result","e","then","pact","state","value","s","v","o","bind","observer","prototype","onFulfilled","onRejected","callback","_this","thenable","test","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","addConnectedStorageToCollection","collection","storageCollectionName","schema","collectionNameWithVersion","_collectionNamePrimary","name","jsonSchema","collectionDocId","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","getSingleDocument","database","internalStore","collectionDoc","saveData","clone","ensureNotFalsy","data","connectedStorages","alreadyThere","find","row","collectionName","version","push","writeSingle","previous","document","err","isBulkWriteConflictError","ensureStorageTokenDocumentExists","rxDatabase","storageToken","randomCouchString","passwordHash","password","fastUnsecureHash","undefined","docData","id","STORAGE_TOKEN_DOCUMENT_ID","context","INTERNAL_CONTEXT_STORAGE_TOKEN","key","STORAGE_TOKEN_DOCUMENT_KEY","token","instanceToken","_deleted","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","bulkWrite","writeResult","success","error","isError","status","conflictError","documentInDb","newRxError","existingPasswordHash","storageTokenDocInDb","getAllCollectionDocuments","storageStatics","storageInstance","getAllQueryPrepared","prepareQuery","selector","sort","skip","query","queryResult","allDocs","documents","INTERNAL_STORE_SCHEMA_TITLE","INTERNAL_STORE_SCHEMA","fillWithDefaultSettings","title","primaryKey","fields","separator","type","properties","maxLength","additionalProperties","indexes","required","sharding","shards","mode","getComposedPrimaryKeyOfDocumentData"],"sources":["../../src/rx-database-internal-store.ts"],"sourcesContent":["import { isBulkWriteConflictError, newRxError } from './rx-error';\nimport {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData\n} from './rx-schema-helper';\nimport { getSingleDocument, writeSingle } from './rx-storage-helper';\nimport type {\n    CollectionsOfDatabase,\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageInstance,\n    RxStorageStatics\n} from './types';\nimport {\n    clone,\n    ensureNotFalsy,\n    fastUnsecureHash,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    randomCouchString\n} from './util';\n\nexport const INTERNAL_CONTEXT_COLLECTION = 'collection';\nexport const INTERNAL_CONTEXT_STORAGE_TOKEN = 'storage-token';\n\n/**\n * Do not change the title,\n * we have to flag the internal schema so that\n * some RxStorage implementations are able\n * to detect if the created RxStorageInstance\n * is from the internals or not,\n * to do some optimizations in some cases.\n */\nexport const INTERNAL_STORE_SCHEMA_TITLE = 'RxInternalDocument';\n\nexport const INTERNAL_STORE_SCHEMA: RxJsonSchema<RxDocumentData<InternalStoreDocType<any>>> = fillWithDefaultSettings({\n    version: 0,\n    title: INTERNAL_STORE_SCHEMA_TITLE,\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'context',\n            'key'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    properties: {\n        id: {\n            type: 'string',\n            maxLength: 200\n        },\n        key: {\n            type: 'string'\n        },\n        context: {\n            type: 'string',\n            enum: [\n                INTERNAL_CONTEXT_COLLECTION,\n                INTERNAL_CONTEXT_STORAGE_TOKEN,\n                'OTHER'\n            ]\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        }\n    },\n    indexes: [],\n    required: [\n        'key',\n        'context',\n        'data'\n    ],\n    additionalProperties: false,\n    /**\n     * If the sharding plugin is used,\n     * it must not shard on the internal RxStorageInstance\n     * because that one anyway has only a small amount of documents\n     * and also its creation is in the hot path of the initial page load,\n     * so we should spend less time creating multiple RxStorageInstances.\n     */\n    sharding: {\n        shards: 1,\n        mode: 'collection'\n    }\n});\n\n\nexport function getPrimaryKeyOfInternalDocument(\n    key: string,\n    context: string\n): string {\n    return getComposedPrimaryKeyOfDocumentData<InternalStoreDocType>(\n        INTERNAL_STORE_SCHEMA,\n        {\n            key,\n            context\n        }\n    )\n}\n\n/**\n * Returns all internal documents\n * with context 'collection'\n */\nexport async function getAllCollectionDocuments(\n    storageStatics: RxStorageStatics,\n    storageInstance: RxStorageInstance<InternalStoreDocType<any>, any, any>\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const getAllQueryPrepared = storageStatics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {\n                context: INTERNAL_CONTEXT_COLLECTION\n            },\n            sort: [{ id: 'asc' }],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport const STORAGE_TOKEN_DOCUMENT_KEY = 'storageToken';\n\nexport const STORAGE_TOKEN_DOCUMENT_ID = getPrimaryKeyOfInternalDocument(\n    STORAGE_TOKEN_DOCUMENT_KEY,\n    INTERNAL_CONTEXT_STORAGE_TOKEN\n);\n\nexport async function ensureStorageTokenDocumentExists<Collections extends CollectionsOfDatabase = any>(\n    rxDatabase: RxDatabase<Collections>\n): Promise<RxDocumentData<InternalStoreStorageTokenDocType>> {\n\n    /**\n     * To have less read-write cycles,\n     * we just try to insert a new document\n     * and only fetch the existing one if a conflict happened.\n     */\n    const storageToken = randomCouchString(10);\n\n    const passwordHash = rxDatabase.password ? fastUnsecureHash(rxDatabase.password) : undefined;\n\n    const docData: RxDocumentData<InternalStoreStorageTokenDocType> = {\n        id: STORAGE_TOKEN_DOCUMENT_ID,\n        context: INTERNAL_CONTEXT_STORAGE_TOKEN,\n        key: STORAGE_TOKEN_DOCUMENT_KEY,\n        data: {\n            token: storageToken,\n            /**\n             * We add the instance token here\n             * to be able to detect if a given RxDatabase instance\n             * is the first instance that was ever created\n             * or if databases have existed earlier on that storage\n             * with the same database name.\n             */\n            instanceToken: rxDatabase.token,\n            passwordHash\n        },\n        _deleted: false,\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n    };\n\n    const writeResult = await rxDatabase.internalStore.bulkWrite(\n        [{ document: docData }],\n        'internal-add-storage-token'\n    );\n    if (writeResult.success[STORAGE_TOKEN_DOCUMENT_ID]) {\n        return writeResult.success[STORAGE_TOKEN_DOCUMENT_ID];\n    }\n\n    /**\n     * If we get a 409 error,\n     * it means another instance already inserted the storage token.\n     * So we get that token from the database and return that one.\n     */\n    const error = ensureNotFalsy(writeResult.error[STORAGE_TOKEN_DOCUMENT_ID]);\n    if (\n        error.isError &&\n        (error as RxStorageBulkWriteError<InternalStoreStorageTokenDocType>).status === 409\n    ) {\n        const conflictError = (error as RxStorageBulkWriteError<InternalStoreStorageTokenDocType>);\n\n\n        if (\n            passwordHash &&\n            passwordHash !== ensureNotFalsy(conflictError.documentInDb).data.passwordHash\n        ) {\n            throw newRxError('DB1', {\n                passwordHash,\n                existingPasswordHash: ensureNotFalsy(conflictError.documentInDb).data.passwordHash\n            });\n        }\n\n        const storageTokenDocInDb = conflictError.documentInDb;\n        return ensureNotFalsy(storageTokenDocInDb);\n    }\n    throw error;\n}\n\n\n\n\n\nexport async function addConnectedStorageToCollection(\n    collection: RxCollection<any>,\n    storageCollectionName: string,\n    schema: RxJsonSchema<any>\n) {\n    const collectionNameWithVersion = _collectionNamePrimary(collection.name, collection.schema.jsonSchema);\n    const collectionDocId = getPrimaryKeyOfInternalDocument(\n        collectionNameWithVersion,\n        INTERNAL_CONTEXT_COLLECTION\n    );\n\n    while (true) {\n        const collectionDoc = await getSingleDocument(\n            collection.database.internalStore,\n            collectionDocId\n        );\n        const saveData: RxDocumentData<InternalStoreCollectionDocType> = clone(ensureNotFalsy(collectionDoc));\n        /**\n         * Add array if not exist for backwards compatibility\n         * TODO remove this in 2023\n         */\n        if (!saveData.data.connectedStorages) {\n            saveData.data.connectedStorages = [];\n        }\n\n        // do nothing if already in array\n        const alreadyThere = saveData.data.connectedStorages\n            .find(row => row.collectionName === storageCollectionName && row.schema.version === schema.version);\n        if (alreadyThere) {\n            return;\n        }\n\n        // otherwise add to array and save\n        saveData.data.connectedStorages.push({\n            collectionName: storageCollectionName,\n            schema\n        });\n        try {\n            await writeSingle(\n                collection.database.internalStore,\n                {\n                    previous: ensureNotFalsy(collectionDoc),\n                    document: saveData\n                },\n                'add-connected-storage-to-collection'\n            );\n        } catch (err) {\n            if (!isBulkWriteConflictError(err)) {\n                throw err;\n            }\n            // retry on conflict\n        }\n    }\n}\n\n\n/**\n * returns the primary for a given collection-data\n * used in the internal store of a RxDatabase\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n"],"mappings":"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"}