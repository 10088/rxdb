{"version":3,"file":"rx-query-helper.js","names":["normalizeMangoQuery","schema","mangoQuery","primaryKey","skip","selector","sort","isPrimaryInSort","find","p","slice","push","index","indexAr","Array","isArray","includes"],"sources":["../../src/rx-query-helper.ts"],"sourcesContent":["import { getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport type {\n    FilledMangoQuery,\n    MangoQuery,\n    RxDocumentData,\n    RxJsonSchema\n} from './types';\nimport {\n    firstPropertyNameOfObject,\n    flatClone\n} from './util';\n\n/**\n * Normalize the query to ensure we have all fields set\n * and queries that represent the same query logic are detected as equal by the caching.\n */\nexport function normalizeMangoQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    mangoQuery: MangoQuery<RxDocType>\n): FilledMangoQuery<RxDocType> {\n    const primaryKey: string = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    mangoQuery = flatClone(mangoQuery);\n\n    if (typeof mangoQuery.skip !== 'number') {\n        mangoQuery.skip = 0;\n    }\n\n    if (!mangoQuery.selector) {\n        mangoQuery.selector = {};\n    }\n\n    /**\n     * To ensure a deterministic sorting,\n     * we have to ensure the primary key is always part\n     * of the sort query.\n     * Primary sorting is added as last sort parameter,\n     * similiar to how we add the primary key to indexes that do not have it.\n     */\n    if (!mangoQuery.sort) {\n        mangoQuery.sort = [{ [primaryKey]: 'asc' }] as any;\n    } else {\n        const isPrimaryInSort = mangoQuery.sort\n            .find(p => firstPropertyNameOfObject(p) === primaryKey);\n        if (!isPrimaryInSort) {\n            mangoQuery.sort = mangoQuery.sort.slice(0);\n            mangoQuery.sort.push({ [primaryKey]: 'asc' } as any);\n        }\n    }\n\n    /**\n     * Ensure that if an index is specified,\n     * the primaryKey is inside of it.\n     */\n    if (mangoQuery.index) {\n        const indexAr = Array.isArray(mangoQuery.index) ? mangoQuery.index.slice(0) : [mangoQuery.index];\n        if (!indexAr.includes(primaryKey)) {\n            indexAr.push(primaryKey);\n        }\n        mangoQuery.index = indexAr;\n    }\n\n    return mangoQuery as any;\n}\n"],"mappings":";;;;;;;AAAA;;AAOA;;AAKA;AACA;AACA;AACA;AACO,SAASA,mBAAT,CACHC,MADG,EAEHC,UAFG,EAGwB;EAC3B,IAAMC,UAAkB,GAAG,iDAA4BF,MAAM,CAACE,UAAnC,CAA3B;EACAD,UAAU,GAAG,qBAAUA,UAAV,CAAb;;EAEA,IAAI,OAAOA,UAAU,CAACE,IAAlB,KAA2B,QAA/B,EAAyC;IACrCF,UAAU,CAACE,IAAX,GAAkB,CAAlB;EACH;;EAED,IAAI,CAACF,UAAU,CAACG,QAAhB,EAA0B;IACtBH,UAAU,CAACG,QAAX,GAAsB,EAAtB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI,IAAI,CAACH,UAAU,CAACI,IAAhB,EAAsB;IAAA;;IAClBJ,UAAU,CAACI,IAAX,GAAkB,kBAAIH,UAAJ,IAAiB,KAAjB,QAAlB;EACH,CAFD,MAEO;IACH,IAAMI,eAAe,GAAGL,UAAU,CAACI,IAAX,CACnBE,IADmB,CACd,UAAAC,CAAC;MAAA,OAAI,qCAA0BA,CAA1B,MAAiCN,UAArC;IAAA,CADa,CAAxB;;IAEA,IAAI,CAACI,eAAL,EAAsB;MAAA;;MAClBL,UAAU,CAACI,IAAX,GAAkBJ,UAAU,CAACI,IAAX,CAAgBI,KAAhB,CAAsB,CAAtB,CAAlB;MACAR,UAAU,CAACI,IAAX,CAAgBK,IAAhB,oDAAwBR,UAAxB,IAAqC,KAArC;IACH;EACJ;EAED;AACJ;AACA;AACA;;;EACI,IAAID,UAAU,CAACU,KAAf,EAAsB;IAClB,IAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcb,UAAU,CAACU,KAAzB,IAAkCV,UAAU,CAACU,KAAX,CAAiBF,KAAjB,CAAuB,CAAvB,CAAlC,GAA8D,CAACR,UAAU,CAACU,KAAZ,CAA9E;;IACA,IAAI,CAACC,OAAO,CAACG,QAAR,CAAiBb,UAAjB,CAAL,EAAmC;MAC/BU,OAAO,CAACF,IAAR,CAAaR,UAAb;IACH;;IACDD,UAAU,CAACU,KAAX,GAAmBC,OAAnB;EACH;;EAED,OAAOX,UAAP;AACH"}