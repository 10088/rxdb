{"version":3,"sources":["../../src/rx-query.ts"],"names":["_queryCount","newQueryID","RxQueryBase","op","mangoQuery","collection","id","_execOverDatabaseCount","_creationTime","_lastEnsureEqual","other","uncached","refCount$","BehaviorSubject","_result","_latestChangeEvent","_lastExecStart","_lastExecEnd","_ensureEqualQueue","PROMISE_RESOLVE_FALSE","_getDefaultQuery","isFindOneByIdQuery","schema","primaryPath","_setResultData","newResultData","docs","primPath","docsDataMap","Map","docsData","map","doc","docData","_dataSync$","getValue","set","time","_execOverDatabase","docsPromise","_queryStorageInstance","name","then","exec","throwIfMissing","query","_ensureEqual","$","result","toString","stringObj","value","JSON","stringify","stringifyFilter","getPreparedQuery","hookInput","rxQuery","database","storage","statics","prepareQuery","storageInstance","doesDocumentDataMatch","_deleted","queryMatcher","remove","ret","Array","isArray","Promise","all","update","_updateObj","where","_queryObj","sort","_params","skip","_amount","limit","_$","results$","pipe","changeEvent","isLocal","RXJS_SHARE_REPLAY_DEFAULTS","prev","curr","useResult","length","slice","getQueryMatcher","selector","tunnelQueryCache","_queryCache","getByQuery","createRxQuery","queryObj","_isResultsInSync","currentLatestEventNumber","asRxQuery","_changeEventBuffer","counter","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","eventReduceResult","runFullQueryAgain","changed","newResults","latestAfter","resolve","Object","keys","$eq","isInstanceOf","obj"],"mappings":"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","sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    merge\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    startWith,\n    distinctUntilChanged,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    stringifyFilter,\n    pluginMissing,\n    clone,\n    overwriteGetterForCaching,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    ensureNotFalsy,\n    RXJS_SHARE_REPLAY_DEFAULTS\n} from './util';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxChangeEvent,\n    RxDocumentWriteData,\n    RxDocumentData\n} from './types';\n\nimport {\n    createRxDocuments\n} from './rx-document-prototype-merge';\nimport { calculateNewResults } from './event-reduce';\nimport { triggerCacheReplacement } from './query-cache';\nimport type { QueryMatcher } from 'event-reduce-js';\nimport { _handleToStorageInstance } from './rx-collection-helper';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocumentType = any,\n    // TODO also pass DocMethods here\n    RxQueryResult = RxDocument<RxDocumentType[]> | RxDocument<RxDocumentType>\n    > {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n\n    // used in the query-cache to determine if the RxQuery can be cleaned up.\n    public _lastEnsureEqual = 0;\n\n    // used by some plugins\n    public other: any = {};\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string;\n\n\n    /**\n     * Contains the current result state\n     * or null if query has not run yet.\n     */\n    public _result: {\n        docsData: RxDocumentType[];\n        // A key->document map, used in the event reduce optimization.\n        docsDataMap: Map<string, RxDocumentType>;\n        docs: RxDocument<RxDocumentType>[];\n        /**\n         * Time at which the current _result state was created.\n         * Used to determine if the result set has changed since X\n         * so that we do not emit the same result multiple times on subscription.\n         */\n        time: number;\n    } | null = null;\n\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery>,\n        public collection: RxCollection<RxDocumentType>\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n\n            const results$ = this.collection.$.pipe(\n                /**\n                 * Performance shortcut.\n                 * Changes to local documents are not relevant for the query.\n                 */\n                filter(changeEvent => !changeEvent.isLocal),\n                /**\n                 * Start once to ensure the querying also starts\n                 * when there where no changes.\n                 */\n                startWith(null),\n                // ensure query results are up to date.\n                mergeMap(() => _ensureEqual(this as any)),\n                // use the current result set, written by _ensureEqual().\n                map(() => this._result),\n                // do not run stuff above for each new subscriber, only once.\n                shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n                // do not proceed if result set has not changed.\n                distinctUntilChanged((prev, curr) => {\n                    if (prev && prev.time === ensureNotFalsy(curr).time) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n                /**\n                 * Map the result set to a single RxDocument or an array,\n                 * depending on query type\n                 */\n                map((result) => {\n                    const useResult = ensureNotFalsy(result);\n                    if (this.op === 'findOne') {\n                        // findOne()-queries emit RxDocument or null\n                        return useResult.docs.length === 0 ? null : useResult.docs[0];\n                    } else {\n                        // find()-queries emit RxDocument[]\n                        // Flat copy the array so it wont matter if the user modifies it.\n                        return useResult.docs.slice(0);\n                    }\n                })\n            );\n\n            this._$ = merge<any>(\n                results$,\n                /**\n                 * Also add the refCount$ to the query observable\n                 * to allow us to count the amount of subscribers.\n                 */\n                this.refCount$.pipe(\n                    filter(() => false)\n                )\n            );\n        }\n        return this._$ as any;\n    }\n\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: Observable<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from pouchdb\n     */\n    _setResultData(newResultData: RxDocumentData<RxDocumentType[]>): void {\n        const docs = createRxDocuments<RxDocumentType, {}>(\n            this.collection,\n            newResultData\n        );\n\n        /**\n         * Instead of using the newResultData in the result cache,\n         * we directly use the objects that are stored in the RxDocument\n         * to ensure we do not store the same data twice and fill up the memory.\n         */\n        const primPath = this.collection.schema.primaryPath;\n        const docsDataMap = new Map();\n        const docsData = docs.map(doc => {\n            const docData: RxDocumentType = doc._dataSync$.getValue() as any;\n            const id: string = docData[primPath] as any;\n            docsDataMap.set(id, docData);\n            return docData;\n        });\n\n        this._result = {\n            docsData,\n            docsDataMap,\n            docs,\n            time: now()\n        }\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    _execOverDatabase(): Promise<RxDocumentData<RxDocumentType>[]> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n        let docsPromise;\n        switch (this.op) {\n            case 'find':\n                docsPromise = this.collection._queryStorageInstance(this as any);\n                break;\n            case 'findOne':\n                docsPromise = this.collection._queryStorageInstance(this as any, 1);\n                break;\n            default:\n                throw newRxError('QU1', {\n                    collection: this.collection.name,\n                    op: this.op\n                });\n        }\n\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocumentType>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        // TODO this should be ensured by typescript\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of the RxStorage,\n         * will be thrown at this execution context and not in the background.\n         */\n        return _ensureEqual(this)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocumentType>> {\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            this.collection.database.storage.statics.getQueryMatcher(\n                this.collection.storageInstance.schema,\n                this.getPreparedQuery()\n            )\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj, stringifyFilter);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocumentType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: clone(this.mangoQuery)\n        };\n        runPluginHooks('prePrepareQuery', hookInput);\n        const value = this.collection.database.storage.statics.prepareQuery(\n            this.collection.storageInstance.schema,\n            hookInput.mangoQuery\n        );\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     */\n    doesDocumentDataMatch(docData: RxDocumentType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(\n            _handleToStorageInstance(this.collection, docData)\n        );\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        let ret: any;\n        return this\n            .exec()\n            .then(docs => {\n                ret = docs;\n                if (Array.isArray(docs)) {\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            })\n            .then(() => ret);\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocumentType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocumentType> | keyof RxDocumentType | string): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocumentType>): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n}\n\nexport function _getDefaultQuery(): MangoQuery {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery(\n    op: RxQueryOP,\n    queryObj: MangoQuery,\n    collection: RxCollection\n) {\n    // checks\n    if (queryObj && typeof queryObj !== 'object') {\n        throw newRxTypeError('QU7', {\n            queryObj\n        });\n    }\n    if (Array.isArray(queryObj)) {\n        throw newRxTypeError('QU8', {\n            queryObj\n        });\n    }\n\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection\n    });\n\n    let ret = new RxQueryBase(op, queryObj, collection);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n\n    runPluginHooks('createRxQuery', ret);\n\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual(rxQuery: RxQueryBase): Promise<boolean> {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happend since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use EventReduce to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            const runChangeEvents: RxChangeEvent<any>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            const eventReduceResult = calculateNewResults(\n                rxQuery as any,\n                runChangeEvents\n            );\n            if (eventReduceResult.runFullQueryAgain) {\n                // could not calculate the new results, execute must be done\n                mustReExec = true;\n            } else if (eventReduceResult.changed) {\n                // we got the new results, we do not have to re-execute, mustReExec stays false\n                ret = true; // true because results changed\n                rxQuery._setResultData(eventReduceResult.newResults as any);\n            }\n        }\n    }\n\n\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        // counter can change while _execOverDatabase() is running so we save it here\n        const latestAfter: number = (rxQuery as any).collection._changeEventBuffer.counter;\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n                rxQuery._latestChangeEvent = latestAfter;\n                if (!rxQuery._result || !deepEqual(newResultData, rxQuery._result.docsData)) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData as any);\n                }\n                return ret;\n            });\n    }\n    return Promise.resolve(ret); // true if results have changed\n}\n\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string {\n    if (\n        query.limit === 1 &&\n        !query.skip &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        if (typeof query.selector[primaryPath] === 'string') {\n            return query.selector[primaryPath];\n        } else if (\n            Object.keys(query.selector[primaryPath]).length === 1 &&\n            typeof query.selector[primaryPath].$eq === 'string'\n        ) {\n            return query.selector[primaryPath].$eq;\n        }\n    }\n    return false;\n}\n\n\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"file":"rx-query.js"}