{"version":3,"sources":["../../src/rx-query.ts"],"names":["_queryCount","newQueryID","RxQueryBase","op","mangoQuery","collection","id","_execOverDatabaseCount","_creationTime","_lastEnsureEqual","other","uncached","refCount$","BehaviorSubject","_latestChangeEvent","_resultsData","_resultsDataMap","Map","_lastExecStart","_lastExecEnd","_resultsDocs$","_ensureEqualQueue","PROMISE_RESOLVE_FALSE","_getDefaultQuery","_setResultData","newResultData","docs","primPath","schema","primaryPath","map","doc","docData","_dataSync$","getValue","set","next","_execOverDatabase","docsPromise","_queryStorageInstance","name","then","exec","throwIfMissing","query","_ensureEqual","$","result","toString","stringObj","value","JSON","stringify","stringifyFilter","getPreparedQuery","hookInput","rxQuery","storageInstance","prepareQuery","doesDocumentDataMatch","_deleted","queryMatcher","remove","ret","Array","isArray","Promise","all","update","_updateObj","where","_queryObj","sort","_params","skip","_amount","limit","_$","results$","pipe","hasChanged","length","slice","asObservable","changeEvents$","getQueryMatcher","selector","tunnelQueryCache","_queryCache","getByQuery","createRxQuery","queryObj","_isResultsInSync","currentLatestEventNumber","asRxQuery","_changeEventBuffer","counter","database","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","filter","cE","startTime","endTime","runChangeEvents","reduceByLastOfDoc","eventReduceResult","runFullQueryAgain","changed","newResults","latestAfter","isInstanceOf","obj"],"mappings":"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","sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport {\n    merge,\n    BehaviorSubject,\n    firstValueFrom\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    tap\n} from 'rxjs/operators';\nimport {\n    sortObject,\n    stringifyFilter,\n    pluginMissing,\n    clone,\n    overwriteGetterForCaching,\n    now,\n    promiseWait,\n    PROMISE_RESOLVE_FALSE,\n    flatClone\n} from './util';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxQueryOP,\n    RxQuery,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySelector,\n    PreparedQuery,\n    RxChangeEvent,\n    RxDocumentWriteData\n} from './types';\n\nimport {\n    createRxDocuments\n} from './rx-document-prototype-merge';\nimport { calculateNewResults } from './event-reduce';\nimport { triggerCacheReplacement } from './query-cache';\nimport { getStateSet, QueryMatcher } from 'event-reduce-js';\nimport { _handleToStorageInstance } from './rx-collection-helper';\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\nexport class RxQueryBase<\n    RxDocumentType = any,\n    // TODO also pass DocMethods here\n    RxQueryResult = RxDocument<RxDocumentType[]> | RxDocument<RxDocumentType>\n    > {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n    public _lastEnsureEqual = 0;\n\n    // used by some plugins\n    public other: any = {};\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery>,\n        public collection: RxCollection<RxDocumentType>\n    ) {\n        if (!mangoQuery) {\n            mangoQuery = _getDefaultQuery();\n        }\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n            /**\n             * We use _resultsDocs$ to emit new results\n             * This also ensures that there is a reemit on subscribe\n             */\n            const results$ = (this._resultsDocs$ as any)\n                .pipe(\n                    mergeMap((docs: any[]) => {\n                        return _ensureEqual(this as any)\n                            .then((hasChanged: any) => {\n                                if (hasChanged) {\n                                    // wait for next emit\n                                    return false;\n                                } else {\n                                    return docs;\n                                }\n                            });\n                    }),\n                    filter((docs: any[]) => !!docs), // not if previous returned false\n                    map((docs: any[]) => {\n                        if (this.op === 'findOne') {\n                            // findOne()-queries emit document or null\n                            const doc = docs.length === 0 ? null : docs[0];\n                            return doc;\n                        } else {\n                            // find()-queries emit RxDocument[]\n                            return docs;\n                        }\n                    }),\n                    map(docs => {\n                        // copy the array so it wont matter if the user modifies it\n                        const ret = Array.isArray(docs) ? docs.slice() : docs;\n                        return ret;\n                    })\n                ).asObservable();\n\n            /**\n             * subscribe to the changeEvent-stream so it detects changes if it has subscribers\n             */\n            const changeEvents$ = this.collection.$\n                .pipe(\n                    tap(() => _ensureEqual(this)),\n                    filter(() => false)\n                );\n\n            this._$ =\n                // tslint:disable-next-line\n                merge(\n                    results$,\n                    changeEvents$,\n                    this.refCount$.pipe(\n                        filter(() => false)\n                    )\n                ) as any;\n        }\n        return this._$ as any;\n    }\n\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // contains the results as plain json-data\n    public _resultsData: any = null;\n    public _resultsDataMap: Map<string, RxDocumentType> = new Map();\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    // contains the results as RxDocument[]\n    public _resultsDocs$: BehaviorSubject<any> = new BehaviorSubject(null);\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: BehaviorSubject<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from pouchdb\n     */\n    _setResultData(newResultData: any[]): RxDocument[] {\n        const docs = createRxDocuments(\n            this.collection,\n            newResultData\n        );\n\n        /**\n         * Instead of using the newResultData in the result cache,\n         * we directly use the objects that are stored in the RxDocument\n         * to ensure we do not store the same data twice and fill up the memory.\n         */\n        const primPath = this.collection.schema.primaryPath;\n        this._resultsDataMap = new Map();\n        this._resultsData = docs.map(doc => {\n            const docData: RxDocumentType = doc._dataSync$.getValue() as any;\n            const id: string = docData[primPath] as any;\n            this._resultsDataMap.set(id, docData);\n            return docData;\n        });\n\n\n        this._resultsDocs$.next(docs);\n        return docs as any;\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    _execOverDatabase(): Promise<any[]> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n        let docsPromise;\n        switch (this.op) {\n            case 'find':\n                docsPromise = this.collection._queryStorageInstance(this as any);\n                break;\n            case 'findOne':\n                docsPromise = this.collection._queryStorageInstance(this as any, 1);\n                break;\n            default:\n                throw newRxError('QU1', {\n                    collection: this.collection.name,\n                    op: this.op\n                });\n        }\n\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocumentType>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        // TODO this should be ensured by typescript\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of pouchdb,\n         * will be thrown at this execution context\n         */\n        return _ensureEqual(this)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocumentType>> {\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            this.collection.storageInstance.getQueryMatcher(\n                this.getPreparedQuery()\n            )\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj, stringifyFilter);\n        this.toString = () => value;\n        return value;\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocumentType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: clone(this.mangoQuery)\n        };\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = this.collection.storageInstance.prepareQuery(\n            hookInput.mangoQuery\n        );\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     * // TODO this was moved to rx-storage\n     */\n    doesDocumentDataMatch(docData: RxDocumentType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(\n            _handleToStorageInstance(this.collection, docData)\n        );\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        let ret: any;\n        return this\n            .exec()\n            .then(docs => {\n                ret = docs;\n                if (Array.isArray(docs)) {\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            })\n            .then(() => ret);\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocumentType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocumentType> | keyof RxDocumentType | string): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocumentType>): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocumentType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n}\n\nexport function _getDefaultQuery(): MangoQuery {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery(\n    op: RxQueryOP,\n    queryObj: MangoQuery,\n    collection: RxCollection\n) {\n    // checks\n    if (queryObj && typeof queryObj !== 'object') {\n        throw newRxTypeError('QU7', {\n            queryObj\n        });\n    }\n    if (Array.isArray(queryObj)) {\n        throw newRxTypeError('QU8', {\n            queryObj\n        });\n    }\n\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection\n    });\n\n    let ret = new RxQueryBase(op, queryObj, collection);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n\n    runPluginHooks('createRxQuery', ret);\n\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nfunction __ensureEqual(rxQuery: RxQueryBase): Promise<boolean> | boolean {\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happend since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use the queryChangeDetector to calculate the new results\n     */\n    if (!mustReExec) {\n        let missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            /**\n             * because pouchdb prefers writes over reads,\n             * we have to filter out the events that happend before the read has started\n             * so that we do not fill event-reduce with the wrong data\n             */\n            missedChangeEvents = missedChangeEvents.filter((cE: RxChangeEvent<any>) => {\n                return (\n                    !cE.startTime ||\n                    rxQuery._lastExecStart < cE.startTime &&\n                    (\n                        !cE.endTime ||\n                        rxQuery._lastExecEnd < cE.endTime\n                    )\n                );\n            });\n            const runChangeEvents: RxChangeEvent<any>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            const eventReduceResult = calculateNewResults(\n                rxQuery as any,\n                runChangeEvents\n            );\n\n            if (eventReduceResult.runFullQueryAgain) {\n                // could not calculate the new results, execute must be done\n                mustReExec = true;\n            } else if (eventReduceResult.changed) {\n                // we got the new results, we do not have to re-execute, mustReExec stays false\n                ret = true; // true because results changed\n                rxQuery._setResultData(eventReduceResult.newResults);\n            }\n        }\n    }\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        // counter can change while _execOverDatabase() is running so we save it here\n        const latestAfter: number = (rxQuery as any).collection._changeEventBuffer.counter;\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n                rxQuery._latestChangeEvent = latestAfter;\n                if (!deepEqual(newResultData, rxQuery._resultsData)) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData);\n                }\n                return ret;\n            });\n    }\n\n    return ret; // true if results have changed\n}\n\n\n\nexport function isInstanceOf(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"file":"rx-query.js"}