{"version":3,"sources":["../../src/rx-change-event.ts"],"names":[],"mappings":";;;;;;;;;AAQA;;AARA;AACA;AACA;AACA;AAgBO,SAAS,8BAAT,CACH,aADG,EAEF;AACD,MAAK,aAAD,CAAuB,YAA3B,EAAyC;AACrC,WAAQ,aAAD,CAAuB,YAA9B;AACH,GAFD,MAEO;AACH,WAAQ,aAAD,CAAuB,oBAA9B;AACH;AAEJ;;AAEM,SAAS,qBAAT,CACH,aADG,EAEI;AACP,MAAI,aAAa,CAAC,cAAd,IAAgC,aAAa,CAAC,cAAd,CAA6B,MAA7B,CAAoC,CAApC,MAA2C,GAA/E,EAAoF;AAChF,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ;;AAGM,SAAS,qCAAT,CACH,aADG,EAE4B;AAC/B,UAAQ,aAAa,CAAC,SAAtB;AACI,SAAK,QAAL;AACI,aAAO;AACH,QAAA,SAAS,EAAE,aAAa,CAAC,SADtB;AAEH,QAAA,EAAE,EAAE,aAAa,CAAC,UAFf;AAGH,QAAA,GAAG,EAAE,aAAa,CAAC,YAHhB;AAIH,QAAA,QAAQ,EAAE;AAJP,OAAP;;AAMJ,SAAK,QAAL;AACI,aAAO;AACH,QAAA,SAAS,EAAE,aAAa,CAAC,SADtB;AAEH,QAAA,EAAE,EAAE,aAAa,CAAC,UAFf;AAGH,QAAA,GAAG,EAAE,2BAAa,qBAAb,CAAmC,aAAa,CAAC,YAAjD,CAHF;AAIH,QAAA,QAAQ,EAAE,aAAa,CAAC,oBAAd,GAAqC,aAAa,CAAC,oBAAnD,GAAiF;AAJxF,OAAP;;AAMJ,SAAK,QAAL;AACI,aAAO;AACH,QAAA,SAAS,EAAE,aAAa,CAAC,SADtB;AAEH,QAAA,EAAE,EAAE,aAAa,CAAC,UAFf;AAGH,QAAA,GAAG,EAAE,IAHF;AAIH,QAAA,QAAQ,EAAE,aAAa,CAAC;AAJrB,OAAP;AAhBR;AAuBH","file":"rx-change-event.js","sourcesContent":["/**\n * RxChangeEvents a emitted when something in the database changes\n * they can be grabbed by the observables of database, collection and document\n */\n\nimport {\n    ChangeEvent as EventReduceChangeEvent,\n} from 'event-reduce-js';\nimport { overwritable } from './overwritable';\n\nimport type {\n    RxChangeEvent\n} from './types';\n\nexport type RxChangeEventBroadcastChannelData = {\n    cE: RxChangeEvent<any>,\n    storageToken: string\n};\n\nexport function getDocumentDataOfRxChangeEvent<T>(\n    rxChangeEvent: RxChangeEvent<T>\n): T {\n    if ((rxChangeEvent as any).documentData) {\n        return (rxChangeEvent as any).documentData;\n    } else {\n        return (rxChangeEvent as any).previousDocumentData;\n    }\n\n}\n\nexport function isRxChangeEventIntern(\n    rxChangeEvent: RxChangeEvent<any>\n): boolean {\n    if (rxChangeEvent.collectionName && rxChangeEvent.collectionName.charAt(0) === '_') {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\nexport function rxChangeEventToEventReduceChangeEvent<DocType>(\n    rxChangeEvent: RxChangeEvent<DocType>\n): EventReduceChangeEvent<DocType> {\n    switch (rxChangeEvent.operation) {\n        case 'INSERT':\n            return {\n                operation: rxChangeEvent.operation,\n                id: rxChangeEvent.documentId,\n                doc: rxChangeEvent.documentData as any,\n                previous: null\n            };\n        case 'UPDATE':\n            return {\n                operation: rxChangeEvent.operation,\n                id: rxChangeEvent.documentId,\n                doc: overwritable.deepFreezeWhenDevMode(rxChangeEvent.documentData) as any,\n                previous: rxChangeEvent.previousDocumentData ? rxChangeEvent.previousDocumentData as any : 'UNKNOWN'\n            };\n        case 'DELETE':\n            return {\n                operation: rxChangeEvent.operation,\n                id: rxChangeEvent.documentId,\n                doc: null,\n                previous: rxChangeEvent.previousDocumentData as DocType\n            };\n    }\n}\n"]}