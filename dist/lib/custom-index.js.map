{"version":3,"file":"custom-index.js","names":["getIndexableStringMonad","schema","index","fieldNameProperties","forEach","fieldName","schemaPart","type","parsedLengths","getStringLengthOfIndexNumber","ret","docData","str","fieldValue","objectPath","get","maxLength","padStart","boolToStr","getNumberIndexString","Error","minimum","Math","floor","maximum","ceil","multipleOf","valueSpan","nonDecimals","toString","length","multipleOfParts","split","decimals","roundedMinimum","nonDecimalsValueAsString","splittedByDecimalPoint","decimalValueAsString","padEnd","getStartIndexStringFromLowerBound","lowerBound","idx","bound","repeat","MAX_CHAR","String","fromCharCode","getStartIndexStringFromUpperBound","upperBound"],"sources":["../../src/custom-index.ts"],"sourcesContent":["/**\n * For some RxStorage implementations,\n * we need to use our custom crafted indexes\n * so we can easily iterate over them. And sort plain arrays of document data.\n */\n\nimport { getSchemaByObjectPath } from './rx-schema-helper';\nimport { JsonSchema, RxDocumentData, RxJsonSchema } from './types';\nimport objectPath from 'object-path';\nimport { ensureNotFalsy } from './util';\n\n\n/**\n * Crafts an indexable string that can be used\n * to check if a document would be sorted below or above \n * another documents, dependent on the index values.\n * @monad for better performance\n */\nexport function getIndexableStringMonad<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    index: string[]\n): (docData: RxDocumentData<RxDocType>) => string {\n\n    /**\n     * Prepare all relevant information\n     * outside of the returned function\n     * to save performance when the returned\n     * function is called many times.\n     */\n    const fieldNameProperties: {\n        [k: string]: {\n            schemaPart: JsonSchema;\n            /*\n             * Only in number fields.\n             */\n            parsedLengths?: ParsedLengths\n        }\n    } = {};\n    index.forEach(fieldName => {\n        const schemaPart = getSchemaByObjectPath(\n            schema,\n            fieldName\n        );\n        fieldNameProperties[fieldName] = {\n            schemaPart\n        };\n        const type = schemaPart.type;\n        if (type === 'number' || type === 'integer') {\n            const parsedLengths = getStringLengthOfIndexNumber(\n                schemaPart\n            );\n            fieldNameProperties[fieldName].parsedLengths = parsedLengths;\n        }\n    });\n\n    const ret = function (docData: RxDocumentData<RxDocType>): string {\n        let str = '';\n        index.forEach(fieldName => {\n            const schemaPart = fieldNameProperties[fieldName].schemaPart;\n            let fieldValue = objectPath.get(docData, fieldName);\n            const type = schemaPart.type;\n            switch (type) {\n                case 'string':\n                    const maxLength = schemaPart.maxLength as number;\n                    if (!fieldValue) {\n                        fieldValue = '';\n                    }\n                    str += fieldValue.padStart(maxLength, ' ');\n                    break;\n                case 'boolean':\n                    const boolToStr = fieldValue ? '1' : '0';\n                    str += boolToStr;\n                    break;\n                case 'number':\n                case 'integer':\n                    const parsedLengths = ensureNotFalsy(fieldNameProperties[fieldName].parsedLengths);\n                    if (!fieldValue) {\n                        fieldValue = 0;\n                    }\n                    str += getNumberIndexString(\n                        parsedLengths,\n                        fieldValue\n                    );\n                    break;\n                default:\n                    throw new Error('unknown index type ' + type);\n            }\n        });\n        return str;\n    }\n    return ret;\n}\n\ndeclare type ParsedLengths = {\n    nonDecimals: number;\n    decimals: number;\n    roundedMinimum: number;\n};\nexport function getStringLengthOfIndexNumber(\n    schemaPart: JsonSchema\n): ParsedLengths {\n    const minimum = Math.floor(schemaPart.minimum as number);\n    const maximum = Math.ceil(schemaPart.maximum as number);\n    const multipleOf: number = schemaPart.multipleOf as number;\n\n    const valueSpan = maximum - minimum;\n    const nonDecimals = valueSpan.toString().length;\n\n    const multipleOfParts = multipleOf.toString().split('.');\n    let decimals = 0;\n    if (multipleOfParts.length > 1) {\n        decimals = multipleOfParts[1].length;\n    }\n    return {\n        nonDecimals,\n        decimals,\n        roundedMinimum: minimum\n    };\n}\n\n\nexport function getNumberIndexString(\n    parsedLengths: ParsedLengths,\n    fieldValue: number\n): string {\n    let str: string = '';\n    const nonDecimalsValueAsString = (Math.floor(fieldValue) - parsedLengths.roundedMinimum).toString();\n    str += nonDecimalsValueAsString.padStart(parsedLengths.nonDecimals, '0');\n\n    const splittedByDecimalPoint = fieldValue.toString().split('.');\n    const decimalValueAsString = splittedByDecimalPoint.length > 1 ? splittedByDecimalPoint[1] : '0';\n\n    str += decimalValueAsString.padEnd(parsedLengths.decimals, '0');\n    return str;\n}\n\nexport function getStartIndexStringFromLowerBound(\n    schema: RxJsonSchema<any>,\n    index: string[],\n    lowerBound: (string | boolean | number | null | undefined)[]\n): string {\n    let str = '';\n    index.forEach((fieldName, idx) => {\n        const schemaPart = getSchemaByObjectPath(\n            schema,\n            fieldName\n        );\n        const bound = lowerBound[idx];\n        const type = schemaPart.type;\n\n        switch (type) {\n            case 'string':\n                const maxLength = ensureNotFalsy(schemaPart.maxLength);\n                if (typeof bound === 'string') {\n                    str += (bound as string).padStart(maxLength, ' ');\n                } else {\n                    str += ''.padStart(maxLength, ' ');\n                }\n                break;\n            case 'boolean':\n                if (bound === null) {\n                    str += '0';\n                } else {\n                    const boolToStr = bound ? '1' : '0';\n                    str += boolToStr;\n                }\n                break;\n            case 'number':\n            case 'integer':\n                const parsedLengths = getStringLengthOfIndexNumber(\n                    schemaPart\n                );\n                if (bound === null) {\n                    str += '0'.repeat(parsedLengths.nonDecimals + parsedLengths.decimals);\n                } else {\n                    str += getNumberIndexString(\n                        parsedLengths,\n                        bound as number\n                    );\n                }\n                break;\n            default:\n                throw new Error('unknown index type ' + type);\n        }\n    });\n    return str;\n}\n\nexport const MAX_CHAR = String.fromCharCode(65535);\n\nexport function getStartIndexStringFromUpperBound(\n    schema: RxJsonSchema<any>,\n    index: string[],\n    upperBound: (string | boolean | number | null | undefined)[]\n): string {\n    let str = '';\n\n    index.forEach((fieldName, idx) => {\n        const schemaPart = getSchemaByObjectPath(\n            schema,\n            fieldName\n        );\n        const bound = upperBound[idx];\n        const type = schemaPart.type;\n\n        switch (type) {\n            case 'string':\n                const maxLength = ensureNotFalsy(schemaPart.maxLength);\n                if (typeof bound === 'string') {\n                    str += (bound as string).padStart(maxLength, MAX_CHAR);\n                } else {\n                    str += ''.padStart(maxLength, MAX_CHAR);\n                }\n                break;\n            case 'boolean':\n                if (bound === null) {\n                    str += '1';\n                } else {\n                    const boolToStr = bound ? '1' : '0';\n                    str += boolToStr;\n                }\n                break;\n            case 'number':\n            case 'integer':\n                const parsedLengths = getStringLengthOfIndexNumber(\n                    schemaPart\n                );\n                if (bound === null || bound === MAX_CHAR) {\n                    str += '9'.repeat(parsedLengths.nonDecimals + parsedLengths.decimals);\n                } else {\n                    str += getNumberIndexString(\n                        parsedLengths,\n                        bound as number\n                    );\n                }\n                break;\n            default:\n                throw new Error('unknown index type ' + type);\n        }\n    });\n    return str;\n}\n"],"mappings":"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"}