{"version":3,"file":"plugin-helpers.js","names":["VALIDATOR_CACHE_BY_VALIDATOR_KEY","Map","wrappedValidateStorageFactory","getValidator","validatorKey","has","set","VALIDATOR_CACHE","getFromMapOrThrow","initValidator","schema","hash","fastUnsecureHash","JSON","stringify","validator","args","Object","assign","storage","createStorageInstance","params","instance","validatorCached","requestIdleCallbackIfAvailable","oldBulkWrite","bulkWrite","bind","documentWrites","context","forEach","row","document","wrapRxStorageInstance","modifyToStorage","modifyFromStorage","errorFromStorage","error","fromStorage","ret","writeRow","previous","flatClone","documentInDb","docData","toStorage","modifyAttachmentFromStorage","v","useRows","Promise","all","map","undefined","push","writeResult","success","promises","entries","k","then","v2","err","oldQuery","query","preparedQuery","queryResult","documents","doc","oldGetAttachmentData","getAttachmentData","documentId","attachmentId","data","oldFindDocumentsById","findDocumentsById","ids","deleted","findResult","key","oldGetChangedDocumentsSince","getChangedDocumentsSince","limit","checkpoint","result","d","oldChangeStream","changeStream","pipe","mergeMap","eventBulk","events","event","documentData","previousDocumentData","ev","operation","eventId","endTime","startTime","isLocal","useEvents","id","oldConflictResultionTasks","conflictResultionTasks","task","input","assumedMasterState","newDocumentState","realMasterState","oldResolveConflictResultionTask","resolveConflictResultionTask","taskSolution","output","isEqual","useSolution"],"sources":["../../src/plugin-helpers.ts"],"sourcesContent":["import { mergeMap } from 'rxjs/operators';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxChangeEvent,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from './types';\nimport {\n    fastUnsecureHash,\n    flatClone,\n    getFromMapOrThrow,\n    requestIdleCallbackIfAvailable\n} from './util';\n\n\ntype WrappedStorageFunction = <Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n    }\n) => RxStorage<Internals, InstanceCreationOptions>;\n\ntype ValidatorFunction = (docData: RxDocumentData<any>) => void;\n\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\nconst VALIDATOR_CACHE_BY_VALIDATOR_KEY: Map<string, Map<string, ValidatorFunction>> = new Map();\n\n/**\n * This factory is used in the validation plugins\n * so that we can reuse the basic storage wrapping code.\n */\nexport function wrappedValidateStorageFactory(\n    /**\n     * Returns a method that can be used to validate\n     * documents and throws when the document is not valid.\n     */\n    getValidator: (schema: RxJsonSchema<any>) => ValidatorFunction,\n    /**\n     * A string to identify the validation library.\n     */\n    validatorKey: string\n): WrappedStorageFunction {\n    if (!VALIDATOR_CACHE_BY_VALIDATOR_KEY.has(validatorKey)) {\n        VALIDATOR_CACHE_BY_VALIDATOR_KEY.set(validatorKey, new Map());\n    }\n    const VALIDATOR_CACHE = getFromMapOrThrow(VALIDATOR_CACHE_BY_VALIDATOR_KEY, validatorKey);\n\n    function initValidator(\n        schema: RxJsonSchema<any>\n    ): ValidatorFunction {\n        const hash = fastUnsecureHash(JSON.stringify(schema));\n        if (!VALIDATOR_CACHE.has(hash)) {\n            const validator = getValidator(schema);\n            VALIDATOR_CACHE.set(hash, validator);\n            return validator;\n        }\n        return getFromMapOrThrow(VALIDATOR_CACHE, hash);\n    }\n\n    return (args) => {\n        return Object.assign(\n            {},\n            args.storage,\n            {\n                async createStorageInstance<RxDocType>(\n                    params: RxStorageInstanceCreationParams<RxDocType, any>\n                ) {\n                    const instance = await args.storage.createStorageInstance(params);\n                    /**\n                     * Lazy initialize the validator\n                     * to save initial page load performance.\n                     * Some libraries take really long to initialize the validator\n                     * from the schema.\n                     */\n                    let validatorCached: ValidatorFunction;\n                    requestIdleCallbackIfAvailable(() => validatorCached = initValidator(params.schema));\n\n                    const oldBulkWrite = instance.bulkWrite.bind(instance);\n                    instance.bulkWrite = (\n                        documentWrites: BulkWriteRow<RxDocType>[],\n                        context: string\n                    ) => {\n                        if (!validatorCached) {\n                            validatorCached = initValidator(params.schema);\n                        }\n                        documentWrites.forEach(row => {\n                            validatorCached(row.document);\n                        });\n                        return oldBulkWrite(documentWrites, context);\n                    };\n\n                    return instance;\n                }\n            }\n        );\n    };\n\n}\n\n\n\n/**\n * Used in plugins to easily modify all in- and outgoing\n * data of that storage instance.\n */\nexport function wrapRxStorageInstance<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    modifyToStorage: (docData: RxDocumentWriteData<RxDocType>) => Promise<RxDocumentData<any>> | RxDocumentData<any>,\n    modifyFromStorage: (docData: RxDocumentData<any>) => Promise<RxDocumentData<RxDocType>> | RxDocumentData<RxDocType>,\n    modifyAttachmentFromStorage: (attachmentData: string) => Promise<string> | string = (v) => v\n) {\n    async function toStorage(docData: RxDocumentWriteData<RxDocType>): Promise<RxDocumentData<any>> {\n        if (!docData) {\n            return docData;\n        }\n        return await modifyToStorage(docData);\n    }\n    async function fromStorage(docData: RxDocumentData<any> | null): Promise<RxDocumentData<RxDocType>> {\n        if (!docData) {\n            return docData;\n        }\n        return await modifyFromStorage(docData);\n    }\n    async function errorFromStorage(\n        error: RxStorageBulkWriteError<any>\n    ): Promise<RxStorageBulkWriteError<RxDocType>> {\n        const ret = flatClone(error);\n        ret.writeRow = flatClone(ret.writeRow);\n        if (ret.documentInDb) {\n            ret.documentInDb = await fromStorage(ret.documentInDb);\n        }\n        if (ret.writeRow.previous) {\n            ret.writeRow.previous = await fromStorage(ret.writeRow.previous);\n        }\n        ret.writeRow.document = await fromStorage(ret.writeRow.document);\n        return ret;\n    }\n\n    const oldBulkWrite = instance.bulkWrite.bind(instance);\n    instance.bulkWrite = async (\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ) => {\n        const useRows: BulkWriteRow<any>[] = [];\n        await Promise.all(\n            documentWrites.map(async (row) => {\n                const [previous, document] = await Promise.all([\n                    row.previous ? toStorage(row.previous) : undefined,\n                    toStorage(row.document)\n                ]);\n                useRows.push({ previous, document });\n            })\n        );\n\n        const writeResult = await oldBulkWrite(useRows, context);\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const promises: Promise<any>[] = [];\n        Object.entries(writeResult.success).forEach(([k, v]) => {\n            promises.push(\n                fromStorage(v).then(v2 => ret.success[k] = v2)\n            );\n        });\n        Object.entries(writeResult.error).forEach(([k, error]) => {\n            promises.push(\n                errorFromStorage(error).then(err => ret.error[k] = err)\n            );\n        });\n        await Promise.all(promises);\n        return ret;\n    };\n\n    const oldQuery = instance.query.bind(instance);\n    instance.query = (preparedQuery) => {\n        return oldQuery(preparedQuery)\n            .then(queryResult => {\n                return Promise.all(queryResult.documents.map(doc => fromStorage(doc)));\n            })\n            .then(documents => ({ documents: documents as any }));\n    };\n\n    const oldGetAttachmentData = instance.getAttachmentData.bind(instance);\n    instance.getAttachmentData = async (\n        documentId: string,\n        attachmentId: string\n    ) => {\n        let data = await oldGetAttachmentData(documentId, attachmentId);\n        data = await modifyAttachmentFromStorage(data);\n        return data;\n    };\n\n    const oldFindDocumentsById = instance.findDocumentsById.bind(instance);\n    instance.findDocumentsById = (ids, deleted) => {\n        return oldFindDocumentsById(ids, deleted).then(async (findResult) => {\n            const ret: RxDocumentDataById<RxDocType> = {};\n            await Promise.all(\n                Object.entries(findResult)\n                    .map(async ([key, doc]) => {\n                        ret[key] = await fromStorage(doc);\n                    })\n            );\n            return ret;\n        });\n    };\n\n    const oldGetChangedDocumentsSince = instance.getChangedDocumentsSince.bind(instance);\n    instance.getChangedDocumentsSince = (limit, checkpoint) => {\n        return oldGetChangedDocumentsSince(limit, checkpoint)\n            .then(async (result) => {\n                return {\n                    checkpoint: result.checkpoint,\n                    documents: await Promise.all(\n                        result.documents.map(d => fromStorage(d))\n                    )\n                };\n            });\n    };\n\n    const oldChangeStream = instance.changeStream.bind(instance);\n    instance.changeStream = () => {\n        return oldChangeStream().pipe(\n            mergeMap(async (eventBulk) => {\n                const useEvents = await Promise.all(\n                    eventBulk.events.map(async (event) => {\n                        const [\n                            documentData,\n                            previousDocumentData\n                        ] = await Promise.all([\n                            fromStorage(event.documentData),\n                            fromStorage(event.previousDocumentData)\n                        ]);\n                        const ev: RxChangeEvent<RxDocType> = {\n                            operation: event.operation,\n                            eventId: event.eventId,\n                            documentId: event.documentId,\n                            endTime: event.endTime,\n                            startTime: event.startTime,\n                            documentData: documentData as any,\n                            previousDocumentData: previousDocumentData as any,\n                            isLocal: false\n                        };\n                        return ev;\n                    })\n                );\n                const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n                    id: eventBulk.id,\n                    events: useEvents,\n                    checkpoint: eventBulk.checkpoint,\n                    context: eventBulk.context\n                };\n                return ret;\n            })\n        );\n    };\n\n    const oldConflictResultionTasks = instance.conflictResultionTasks.bind(instance);\n    instance.conflictResultionTasks = () => {\n        return oldConflictResultionTasks().pipe(\n            mergeMap(async (task) => {\n                const assumedMasterState = await fromStorage(task.input.assumedMasterState);\n                const newDocumentState = await fromStorage(task.input.newDocumentState);\n                const realMasterState = await fromStorage(task.input.realMasterState);\n                return {\n                    id: task.id,\n                    context: task.context,\n                    input: {\n                        assumedMasterState,\n                        realMasterState,\n                        newDocumentState\n                    }\n                };\n            })\n        );\n    };\n\n    const oldResolveConflictResultionTask = instance.resolveConflictResultionTask.bind(instance);\n    instance.resolveConflictResultionTask = (taskSolution) => {\n        if (taskSolution.output.isEqual) {\n            return oldResolveConflictResultionTask(taskSolution);\n        }\n        const useSolution = {\n            id: taskSolution.id,\n            output: {\n                isEqual: false,\n                documentData: taskSolution.output.documentData\n            }\n        };\n        return oldResolveConflictResultionTask(useSolution);\n    };\n\n    return instance;\n}\n"],"mappings":"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"}