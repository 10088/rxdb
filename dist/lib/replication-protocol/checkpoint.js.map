{"version":3,"file":"checkpoint.js","names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","setCheckpoint","direction","checkpoint","previousCheckpointDoc","lastCheckpointDoc","events","canceled","getValue","JSON","stringify","data","newDoc","id","isCheckpoint","itemId","replicationIdentifier","checkpointKey","_deleted","_attachments","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","getComposedPrimaryKeyOfDocumentData","RX_REPLICATION_META_INSTANCE_SCHEMA","stackCheckpoints","lwt","now","createRevision","input","hashFunction","metaInstance","bulkWrite","previous","document","success","getFromObjectOrThrow","error","status","ensureNotFalsy","documentInDb","getLastCheckpointDoc","checkpointDocId","findDocumentsById","checkpointResult","checkpointDoc","undefined","getCheckpointKey","hash","fastUnsecureHash","identifier","forkInstance","databaseName","collectionName","join"],"sources":["../../../src/replication-protocol/checkpoint.ts"],"sourcesContent":["import { getComposedPrimaryKeyOfDocumentData } from '../rx-schema-helper';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    RxDocumentData,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationDirection,\n    RxStorageReplicationMeta\n} from '../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    fastUnsecureHash,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    getFromObjectOrThrow,\n    now\n} from '../util';\nimport { RX_REPLICATION_META_INSTANCE_SCHEMA } from './meta-instance';\n\nexport async function getLastCheckpointDoc<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection\n): Promise<undefined | CheckpointType> {\n    const checkpointDocId = getComposedPrimaryKeyOfDocumentData(\n        RX_REPLICATION_META_INSTANCE_SCHEMA,\n        {\n            isCheckpoint: '1',\n            itemId: direction,\n            replicationIdentifier: state.checkpointKey\n        }\n    );\n    const checkpointResult = await state.input.metaInstance.findDocumentsById(\n        [\n            checkpointDocId\n        ],\n        false\n    );\n\n    const checkpointDoc = checkpointResult[checkpointDocId];\n    state.lastCheckpointDoc[direction] = checkpointDoc;\n    if (checkpointDoc) {\n        return checkpointDoc.data;\n    } else {\n        return undefined;\n    }\n}\n\n\n/**\n * Sets the checkpoint,\n * automatically resolves conflicts that appear.\n */\nexport async function setCheckpoint<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection,\n    checkpoint: CheckpointType\n) {\n    let previousCheckpointDoc = state.lastCheckpointDoc[direction];\n\n    if (\n        checkpoint &&\n        /**\n         * If the replication is already canceled,\n         * we do not write a checkpoint\n         * because that could mean we write a checkpoint\n         * for data that has been fetched from the master\n         * but not been written to the child.\n         */\n        !state.events.canceled.getValue() &&\n        /**\n         * Only write checkpoint if it is different from before\n         * to have less writes to the storage.\n         */\n        (\n            !previousCheckpointDoc ||\n            JSON.stringify(previousCheckpointDoc.data) !== JSON.stringify(checkpoint)\n        )\n    ) {\n        const newDoc: RxDocumentData<RxStorageReplicationMeta> = {\n            id: '',\n            isCheckpoint: '1',\n            itemId: direction,\n            replicationIdentifier: state.checkpointKey,\n            _deleted: false,\n            _attachments: {},\n            data: checkpoint,\n            _meta: getDefaultRxDocumentMeta(),\n            _rev: getDefaultRevision()\n        };\n        newDoc.id = getComposedPrimaryKeyOfDocumentData(\n            RX_REPLICATION_META_INSTANCE_SCHEMA,\n            newDoc\n        );\n        while (true) {\n            /**\n             * Instead of just storign the new checkpoint,\n             * we have to stack up the checkpoint with the previous one.\n             * This is required for plugins like the sharding RxStorage\n             * where the changeStream events only contain a Partial of the\n             * checkpoint.\n             */\n            if (previousCheckpointDoc) {\n                newDoc.data = stackCheckpoints([\n                    previousCheckpointDoc.data,\n                    newDoc.data\n                ]);\n            }\n            newDoc._meta.lwt = now();\n            newDoc._rev = createRevision(\n                state.input.hashFunction,\n                newDoc,\n                previousCheckpointDoc\n            );\n            const result = await state.input.metaInstance.bulkWrite([{\n                previous: previousCheckpointDoc,\n                document: newDoc\n            }], 'replication-set-checkpoint');\n            if (result.success[newDoc.id]) {\n                state.lastCheckpointDoc[direction] = getFromObjectOrThrow(\n                    result.success,\n                    newDoc.id\n                );\n                return;\n            } else {\n                const error = getFromObjectOrThrow(\n                    result.error,\n                    newDoc.id\n                );\n                if (error.status !== 409) {\n                    throw error;\n                } else {\n                    previousCheckpointDoc = ensureNotFalsy(error.documentInDb);\n                    newDoc._rev = createRevision(\n                        state.input.hashFunction,\n                        newDoc,\n                        previousCheckpointDoc\n                    );\n                }\n            }\n        }\n    }\n}\n\nexport function getCheckpointKey<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): string {\n    const hash = fastUnsecureHash([\n        input.identifier,\n        input.forkInstance.databaseName,\n        input.forkInstance.collectionName\n    ].join('||'));\n    return 'rx-storage-replication-' + hash;\n}\n"],"mappings":"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"}