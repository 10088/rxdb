{"version":3,"sources":["../../src/rx-database.ts"],"names":["removeRxDatabase","databaseName","storage","createRxDatabaseStorageInstances","storageInstance","internalStore","docs","Promise","all","map","colDoc","id","collectionName","schema","split","version","parseInt","primaryPath","primaryKey","createStorageInstance","options","multiInstance","createKeyObjectStorageInstance","instance","localInstance","remove","localDocumentsStore","prepare","rxDatabase","internalLocalDocumentsStore","_ensureStorageTokenExists","storageToken","localDocsSub","changeStream","subscribe","eventBulk","changeEventBulk","internal","events","ev","databaseToken","token","$emit","_subs","push","_prepareBroadcastChannel","INTERNAL_STORAGE_NAME","_removeAllOfCollection","lockedRun","relevantDocs","filter","doc","name","writeDoc","_deleted","previous","document","then","storageTokenDocumentId","storageTokenDoc","bulkWrite","_id","value","_meta","_attachments","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","instanceCreationOptions","password","eventReduce","idleQueue","broadcastChannel","destroyed","eventBulks$","Subject","observable$","pipe","emittedEventBulkIds","ObliviousSet","collections","dangerousRemoveCollectionInfo","allDocs","writeData","deletedDoc","has","add","next","writeToSocket","removeCollectionDoc","docId","_collectionNamePrimary","addCollections","collectionCreators","findDocumentsById","Object","keys","collectionDocs","internalDocByCollectionName","entries","forEach","key","schemaHashByName","args","useName","internalDoc","useArgs","hash","database","crypt","schemaHash","previousSchemaHash","previousSchema","hookData","bulkPutDocs","ret","collection","normalized","defineProperty","get","length","removeCollection","destroyPromise","PROMISE_RESOLVE_VOID","destroy","knownVersions","v","storageInstances","fn","wrapCall","requestIdlePromise","exportJSON","_decrypted","_collections","importJSON","_exportedJSON","server","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","PROMISE_RESOLVE_FALSE","sub","unsubscribe","col","close","throwIfDatabaseNameUsed","link","statics","doesBroadcastChangestream","postMessage","addEventListener","createRxDatabase","ignoreDuplicate","overwritable","validatePassword","BroadcastChannel","IdleQueue","isRxDatabase","obj","dbCount"],"mappings":"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","sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\n\nimport type { LeaderElector } from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageKeyObjectInstance,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID,\n    getDefaultRxDocumentMeta\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    findLocalDocument,\n    getAllDocuments,\n    getSingleDocument,\n    getWrappedKeyObjectInstance,\n    INTERNAL_STORAGE_NAME,\n    storageChangeEventToRxChangeEvent,\n    writeSingle\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { getPseudoSchemaForVersion } from './rx-schema-helper';\nimport {\n    createRxCollectionStorageInstances,\n    getCollectionLocalInstanceName\n} from './rx-collection-helper';\nimport { ObliviousSet } from 'oblivious-set';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\n// stores information about the collections\nexport type InternalStoreDocumentData = {\n    // primary\n    collectionName: string;\n    schema: RxJsonSchema<any>;\n    schemaHash: string;\n    version: number;\n};\n\nexport class RxDatabaseBase<\n    Internals, InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n\n    /**\n     * Stores the local documents which are attached to this database.\n     */\n    public localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions> = {} as any;\n\n    constructor(\n        public readonly name: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        public readonly idleQueue: IdleQueue,\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n        public readonly internalLocalDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>,\n        /**\n         * Set if multiInstance: true\n         * This broadcast channel is used to send events to other instances like\n         * other browser tabs or nodejs processes.\n         * We transfer everything in EventBulks because sending many small events has been shown\n         * to be performance expensive.\n         */\n        public readonly broadcastChannel?: BroadcastChannel<RxChangeEventBulk<any>>,\n    ) {\n        this.collections = {} as any;\n        DB_COUNT++;\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public readonly token: string = randomCouchString(10);\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     */\n    public storageToken?: string;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * removes all internal collection-info\n     * only use this if you have to upgrade from a major rxdb-version\n     * do NEVER use this to change the schema of a collection\n     */\n    async dangerousRemoveCollectionInfo(): Promise<void> {\n        const allDocs = await getAllDocuments('collectionName', this.storage, this.internalStore);\n        const writeData: BulkWriteRow<InternalStoreDocumentData>[] = allDocs.map(doc => {\n            const deletedDoc = flatClone(doc);\n            deletedDoc._deleted = true;\n            return {\n                previous: doc,\n                document: deletedDoc\n            };\n        });\n        await this.internalStore.bulkWrite(writeData);\n    }\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n\n        // write to socket to inform other instances about the change\n        writeToSocket(this as any, changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const docId = _collectionNamePrimary(name, schema);\n        const doc = await getSingleDocument(\n            this.internalStore,\n            docId\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        await this.lockedRun(\n            () => this.internalStore.bulkWrite([{\n                document: writeDoc,\n                previous: doc\n            }])\n        );\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        // get local management docs in bulk request\n        const collectionDocs = await this.lockedRun(\n            () => this.internalStore.findDocumentsById(\n                Object\n                    .keys(collectionCreators)\n                    .map(name => {\n                        const schema: RxJsonSchema<any> = (collectionCreators as any)[name].schema;\n                        return _collectionNamePrimary(name, schema);\n                    }),\n                false\n            )\n        );\n\n        const internalDocByCollectionName: any = {};\n        Object.entries(collectionDocs).forEach(([key, doc]) => {\n            internalDocByCollectionName[key] = doc;\n        });\n\n        const schemaHashByName: { [key in keyof CreatedCollections]: string } = {} as any;\n        const collections = await Promise.all(\n            Object.entries(collectionCreators)\n                .map(([name, args]) => {\n                    const useName: keyof CreatedCollections = name as any;\n                    const internalDoc = internalDocByCollectionName[_collectionNamePrimary(name, collectionCreators[useName].schema)];\n                    const useArgs: RxCollectionCreator & { name: keyof CreatedCollections; } = flatClone(args) as any;\n                    useArgs.name = useName;\n                    const schema = createRxSchema((args as RxCollectionCreator).schema);\n                    schemaHashByName[useName] = schema.hash;\n                    (useArgs as any).schema = schema;\n                    (useArgs as any).database = this;\n\n                    // TODO check if already exists and schema hash has changed\n\n                    // crypt=true but no password given\n                    if (\n                        schema.crypt &&\n                        !this.password\n                    ) {\n                        throw newRxError('DB7', {\n                            name: name as string\n                        });\n                    }\n\n                    // collection already exists\n                    if ((this.collections as any)[name]) {\n                        throw newRxError('DB3', {\n                            name\n                        });\n                    }\n\n                    // collection already exists but has different schema\n                    if (internalDoc && internalDoc.schemaHash !== schemaHashByName[useName]) {\n                        throw newRxError('DB6', {\n                            name: name,\n                            previousSchemaHash: internalDoc.schemaHash,\n                            schemaHash: schemaHashByName[useName],\n                            previousSchema: internalDoc.schema,\n                            schema: (args as RxCollectionCreator).schema\n                        });\n                    }\n\n                    // run hooks\n                    const hookData: RxCollectionCreator & { name: string; } = flatClone(args) as any;\n                    (hookData as any).database = this;\n                    hookData.name = name;\n                    runPluginHooks('preCreateRxCollection', hookData);\n\n                    return createRxCollection(useArgs);\n                })\n        );\n\n        const bulkPutDocs: BulkWriteRow<InternalStoreDocumentData>[] = [];\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        collections.forEach(collection => {\n            const name: keyof CreatedCollections = collection.name as any;\n            ret[name] = collection;\n\n            // add to bulk-docs list\n            const collectionName = _collectionNamePrimary(name as any, collectionCreators[name].schema);\n            if (!internalDocByCollectionName[collectionName]) {\n                bulkPutDocs.push({\n                    document: {\n                        collectionName,\n                        schemaHash: schemaHashByName[name],\n                        schema: collection.schema.normalized,\n                        version: collection.schema.version,\n                        _deleted: false,\n                        _meta: getDefaultRxDocumentMeta(),\n                        _attachments: {}\n                    }\n                });\n            }\n\n            // set as getter to the database\n            (this.collections as any)[name] = collection;\n            if (!(this as any)[name]) {\n                Object.defineProperty(this, name, {\n                    get: () => (this.collections as any)[name]\n                });\n            }\n        });\n\n        // make a single write call to the storage instance\n        if (bulkPutDocs.length > 0) {\n            await this.lockedRun(\n                () => this.internalStore.bulkWrite(bulkPutDocs)\n            );\n        }\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        let destroyPromise = PROMISE_RESOLVE_VOID;\n        if ((this.collections as any)[collectionName]) {\n            destroyPromise = (this.collections as any)[collectionName].destroy();\n        }\n\n        // remove schemas from internal db\n        return destroyPromise\n            .then(() => _removeAllOfCollection(this as any, collectionName))\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(v => {\n                            return createRxCollectionStorageInstances<any, any, any>(\n                                collectionName,\n                                this as any,\n                                {\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: getPseudoSchemaForVersion<InternalStoreDocumentData>(v, 'collectionName'),\n                                    options: this.instanceCreationOptions,\n                                    multiInstance: this.multiInstance\n                                },\n                                {}\n                            );\n                        })\n                );\n            })\n            // remove normal and local documents\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => Promise.all([\n                            instance.storageInstance.remove(),\n                            instance.localDocumentsStore.remove()\n                        ])\n                    )\n                );\n            })\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_decrypted: boolean, _collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_decrypted?: false, _collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_decrypted: boolean = false, _collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        runPluginHooks('preDestroyRxDatabase', this);\n        DB_COUNT--;\n\n        this._subs.map(sub => sub.unsubscribe());\n\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // first wait until db is idle\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            .then(() => this.localDocumentsStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data\n     */\n    remove(): Promise<void> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport async function _ensureStorageTokenExists<Collections = any>(rxDatabase: RxDatabase<Collections>): Promise<string> {\n    const storageTokenDocumentId = 'storageToken';\n    const storageTokenDoc = await findLocalDocument<{ value: string }>(rxDatabase.localDocumentsStore, storageTokenDocumentId, false);\n    if (!storageTokenDoc) {\n        const storageToken = randomCouchString(10);\n        await rxDatabase.localDocumentsStore.bulkWrite([{\n            document: {\n                _id: storageTokenDocumentId,\n                value: storageToken,\n                _deleted: false,\n                _meta: getDefaultRxDocumentMeta(),\n                _attachments: {}\n\n            }\n        }]);\n        return storageToken;\n    } else {\n        return storageTokenDoc.value;\n    }\n}\n\n/**\n * writes the changeEvent to the broadcastChannel\n */\nexport function writeToSocket(\n    rxDatabase: RxDatabase,\n    changeEventBulk: RxChangeEventBulk<any>\n): Promise<boolean> {\n    if (rxDatabase.destroyed) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    if (\n        !rxDatabase.storage.statics.doesBroadcastChangestream() &&\n        rxDatabase.multiInstance &&\n        rxDatabase.broadcastChannel &&\n        !changeEventBulk.internal &&\n        rxDatabase.token === changeEventBulk.databaseToken &&\n        rxDatabase.storageToken === changeEventBulk.storageToken\n\n    ) {\n        return rxDatabase.broadcastChannel\n            .postMessage(changeEventBulk)\n            .then(() => true);\n    } else {\n        return PROMISE_RESOLVE_FALSE;\n    }\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<number[]> {\n    const docs = await rxDatabase.lockedRun(\n        () => getAllDocuments('collectionName', rxDatabase.storage, rxDatabase.internalStore)\n    );\n    const relevantDocs = docs\n        .filter((doc) => {\n            const name = doc.collectionName.split('-')[0];\n            return name === collectionName;\n        });\n    return Promise.all(\n        relevantDocs\n            .map(\n                doc => {\n                    const writeDoc = flatClone(doc);\n                    writeDoc._deleted = true;\n                    return rxDatabase.lockedRun(\n                        () => writeSingle(\n                            rxDatabase.internalStore,\n                            {\n                                previous: doc,\n                                document: writeDoc\n                            }\n                        )\n                    );\n                }\n            )\n    ).then(() => relevantDocs.map((doc: any) => doc.version));\n}\n\nfunction _prepareBroadcastChannel<Collections>(rxDatabase: RxDatabase<Collections>): void {\n    // listen to changes from other instances that come over the BroadcastChannel\n    ensureNotFalsy(rxDatabase.broadcastChannel)\n        .addEventListener('message', (changeEventBulk: RxChangeEventBulk<any>) => {\n            if (\n                // not same storage-state\n                changeEventBulk.storageToken !== rxDatabase.storageToken ||\n                // this db instance was sender\n                changeEventBulk.databaseToken === rxDatabase.token\n            ) {\n                return;\n            }\n            rxDatabase.$emit(changeEventBulk);\n        });\n}\n\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nasync function createRxDatabaseStorageInstances<Internals, InstanceCreationOptions>(\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean\n): Promise<{\n    internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n    localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>\n}> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocumentData>(\n        {\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: getPseudoSchemaForVersion(0, 'collectionName'),\n            options,\n            multiInstance\n        }\n    );\n\n    const localDocumentsStore = await storage.createKeyObjectStorageInstance({\n        databaseName,\n        collectionName: '',\n        options,\n        multiInstance\n    });\n\n    return {\n        internalStore,\n        localDocumentsStore\n    };\n}\n\n/**\n * do the async things for this database\n */\nasync function prepare<Internals, InstanceCreationOptions, Collections>(\n    rxDatabase: RxDatabaseBase<Internals, InstanceCreationOptions, Collections>\n): Promise<void> {\n    rxDatabase.localDocumentsStore = getWrappedKeyObjectInstance(rxDatabase as any, rxDatabase.internalLocalDocumentsStore);\n    rxDatabase.storageToken = await _ensureStorageTokenExists<Collections>(rxDatabase as any);\n    const localDocsSub = rxDatabase.localDocumentsStore.changeStream()\n        .subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<any> = {\n                id: eventBulk.id,\n                internal: false,\n                storageToken: ensureNotFalsy(rxDatabase.storageToken),\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    true,\n                    ev\n                )),\n                databaseToken: rxDatabase.token\n            };\n            rxDatabase.$emit(changeEventBulk);\n        });\n    rxDatabase._subs.push(localDocsSub);\n    if (rxDatabase.multiInstance) {\n        _prepareBroadcastChannel<Collections>(rxDatabase as any);\n    }\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {}\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options\n    });\n\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    let broadcastChannel: BroadcastChannel | undefined;\n    if (multiInstance) {\n        broadcastChannel = new BroadcastChannel(\n            'RxDB:' +\n            name + ':' +\n            'socket'\n        );\n    }\n\n    const idleQueue = new IdleQueue();\n\n    return createRxDatabaseStorageInstances<\n        Internals,\n        InstanceCreationOptions\n    >(\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance\n    ).then(storageInstances => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            idleQueue,\n            storageInstances.internalStore,\n            storageInstances.localDocumentsStore,\n            broadcastChannel\n        ) as any;\n        return prepare(rxDatabase)\n            .then(() => runAsyncPluginHooks('createRxDatabase', rxDatabase))\n            .then(() => rxDatabase);\n    });\n}\n\n/**\n * removes the database and all its known data\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<any> {\n    const storageInstance = await createRxDatabaseStorageInstances(\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const docs = await getAllDocuments('collectionName', storage, storageInstance.internalStore);\n    await Promise.all(\n        docs\n            .map(async (colDoc) => {\n                const id = colDoc.collectionName;\n                const schema = colDoc.schema;\n                const split = id.split('-');\n                const collectionName = split[0];\n                const version = parseInt(split[1], 10);\n                const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n                const [instance, localInstance] = await Promise.all([\n                    storage.createStorageInstance<InternalStoreDocumentData>(\n                        {\n                            databaseName,\n                            collectionName,\n                            schema: getPseudoSchemaForVersion(version, primaryPath as any),\n                            options: {},\n                            multiInstance: false\n                        }\n                    ),\n                    storage.createKeyObjectStorageInstance({\n                        databaseName,\n                        collectionName: getCollectionLocalInstanceName(collectionName),\n                        options: {},\n                        multiInstance: false\n                    })\n                ]);\n                await Promise.all([instance.remove(), localInstance.remove()]);\n            })\n    );\n\n    return Promise.all([\n        storageInstance.internalStore.remove(),\n        storageInstance.localDocumentsStore.remove()\n    ]);\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n"],"file":"rx-database.js"}