{"version":3,"file":"rx-database.js","names":["removeRxDatabase","databaseName","storage","databaseInstanceToken","randomCouchString","createRxDatabaseStorageInstance","dbInternalsStorageInstance","getAllCollectionDocuments","collectionDocs","removedCollectionNames","Promise","all","map","colDoc","schema","data","collectionName","name","push","createStorageInstance","options","multiInstance","storageInstance","remove","runAsyncPluginHooks","INTERNAL_STORAGE_NAME","INTERNAL_STORE_SCHEMA","_removeAllOfCollection","rxDatabase","internalStore","docs","relevantDocs","filter","writeRows","doc","writeDoc","flatClone","_deleted","_rev","createRevision","_meta","Object","assign","lwt","now","previous","document","bulkWrite","then","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","token","instanceCreationOptions","password","eventReduce","idleQueue","cleanupPolicy","_subs","destroyed","collections","eventBulks$","Subject","observable$","pipe","mergeMap","changeEventBulk","events","storageToken","PROMISE_RESOLVE_FALSE","emittedEventBulkIds","ObliviousSet","getWrappedStorageInstance","asRxDatabase","ensureStorageTokenExists","$emit","has","id","add","next","removeCollectionDoc","getSingleDocument","getPrimaryKeyOfInternalDocument","_collectionNamePrimary","INTERNAL_CONTEXT_COLLECTION","newRxError","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","entries","forEach","args","rxJsonSchema","createRxSchema","crypt","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","getDefaultRevision","_attachments","useArgs","database","hookData","runPluginHooks","putDocsResult","error","_id","docInDb","ensureNotFalsy","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","createRxCollection","defineProperty","get","removeCollection","destroyPromise","PROMISE_RESOLVE_VOID","destroy","knownVersions","knownVersionDoc","createRxCollectionStorageInstance","storageInstances","instance","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","pluginMissing","importJSON","_exportedJSON","server","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","complete","sub","unsubscribe","col","close","broadcastChannel","bcState","BROADCAST_CHANNEL_BY_TOKEN","bc","throwIfDatabaseNameUsed","link","createRxDatabase","ignoreDuplicate","localDocuments","overwritable","validatePassword","IdleQueue","creator","isRxDatabase","obj","dbCount"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector,\n    BroadcastChannel\n} from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID,\n    getDefaultRevision,\n    createRevision,\n    now\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema, RxSchema\n} from './rx-schema';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport {\n    createRxCollectionStorageInstance\n} from './rx-collection-helper';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    InternalStoreCollectionDocType,\n    InternalStoreDocType,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA\n} from './rx-database-internal-store';\nimport { BROADCAST_CHANNEL_BY_TOKEN } from './rx-storage-multiinstance';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals, InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n    constructor(\n        public readonly name: string,\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        public readonly idleQueue: IdleQueue,\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             */\n            this.storageToken = ensureStorageTokenExists(this.asRxDatabase);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n\n    /**\n     * Set if multiInstance: true\n     * This broadcast channel is used to send events to other instances like\n     * other browser tabs or nodejs processes.\n     * We transfer everything in EventBulks because sending many small events has been shown\n     * to be performance expensive.\n     * \n     * @deprecated The broadcast channel has been moved out of the RxDatabase and is part of the\n     * RxStorage but only if it is needed there.\n     * @see ./rx-storage-multiinstance.ts\n     * \n     */\n    get broadcastChannel(): BroadcastChannel<RxChangeEventBulk<any>> | undefined {\n        const bcState = BROADCAST_CHANNEL_BY_TOKEN.get(this.token);\n        if (bcState) {\n            return bcState.bc as any;\n        }\n    }\n\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     * \n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * TODO instead of having this here, we should add a test to ensure each RxStorage\n     * behaves equal and does never emit duplicate eventBulks.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        writeDoc._rev = createRevision(writeDoc, doc);\n        writeDoc._meta = { lwt: now() };\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }]);\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema);\n            schemas[collectionName] = schema;\n\n            // crypt=true but no password given\n            if (\n                schema.crypt &&\n                !this.password\n            ) {\n                throw newRxError('DB7', {\n                    name: name as string\n                });\n            }\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version,\n                },\n                _deleted: false,\n                _meta: {\n                    lwt: now()\n                },\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            collectionDocData._rev = createRevision(collectionDocData);\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this,\n\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(bulkPutDocs);\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    database: this.name,\n                    collection: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        let destroyPromise = PROMISE_RESOLVE_VOID;\n        if ((this.collections as any)[collectionName]) {\n            destroyPromise = (this.collections as any)[collectionName].destroy();\n        }\n        // remove schemas from internal db\n        return destroyPromise\n            .then(() => _removeAllOfCollection(this as any, collectionName))\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(knownVersionDoc => {\n                            return createRxCollectionStorageInstance(\n                                this.asRxDatabase,\n                                {\n                                    databaseInstanceToken: this.token,\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: knownVersionDoc.data.schema,\n                                    options: this.instanceCreationOptions,\n                                    multiInstance: this.multiInstance\n                                }\n                            );\n                        })\n                );\n            })\n            // remove the storage instance\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => instance.remove()\n                    )\n                );\n            })\n            .then(() => runAsyncPluginHooks('postRemoveRxCollection', {\n                storage: this.storage,\n                databaseName: this.name,\n                collectionName\n            }))\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const docs = await getAllCollectionDocuments(rxDatabase.internalStore, rxDatabase.storage);\n    const relevantDocs = docs\n        .filter((colDoc) => colDoc.data.name === collectionName);\n    const writeRows = relevantDocs.map(doc => {\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        writeDoc._rev = createRevision(writeDoc, doc);\n        writeDoc._meta = Object.assign(\n            {},\n            doc._meta,\n            { lwt: now() }\n        );\n        return {\n            previous: doc,\n            document: writeDoc\n        };\n    });\n    return rxDatabase.internalStore\n        .bulkWrite(writeRows)\n        .then(() => relevantDocs);\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nasync function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        localDocuments = false\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    const idleQueue = new IdleQueue();\n\n    const databaseInstanceToken = randomCouchString(10);\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        databaseInstanceToken,\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance\n    ).then(storageInstance => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            databaseInstanceToken,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            idleQueue,\n            storageInstance,\n            cleanupPolicy\n        ) as any;\n        return runAsyncPluginHooks('createRxDatabase', {\n            database: rxDatabase,\n            creator: {\n                storage,\n                instanceCreationOptions,\n                name,\n                password,\n                multiInstance,\n                eventReduce,\n                ignoreDuplicate,\n                options,\n                localDocuments\n            }\n        }).then(() => rxDatabase);\n    });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n * \n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<string[]> {\n    const databaseInstanceToken = randomCouchString(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        dbInternalsStorageInstance,\n        storage\n    );\n\n    const removedCollectionNames: string[] = [];\n    await Promise.all(\n        collectionDocs\n            .map(async (colDoc) => {\n                const schema = colDoc.data.schema;\n                const collectionName = colDoc.data.name;\n                removedCollectionNames.push(collectionName);\n                const storageInstance = await storage.createStorageInstance<any>(\n                    {\n                        databaseInstanceToken,\n                        databaseName,\n                        collectionName,\n                        schema,\n                        options: {},\n                        multiInstance: false\n                    }\n                );\n                await storageInstance.remove();\n            })\n    );\n\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n"],"mappings":"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"}