{"version":3,"file":"rx-database.js","names":["isRxDatabaseFirstTimeInstantiated","database","storageTokenDocument","tokenDoc","data","instanceToken","token","removeRxDatabase","databaseName","storage","databaseInstanceToken","randomCouchString","createRxDatabaseStorageInstance","dbInternalsStorageInstance","getAllCollectionDocuments","collectionDocs","removedCollectionNames","Promise","all","map","colDoc","schema","collectionName","name","push","createStorageInstance","options","multiInstance","storageInstance","remove","runAsyncPluginHooks","INTERNAL_STORAGE_NAME","INTERNAL_STORE_SCHEMA","_removeAllOfCollection","rxDatabase","internalStore","docs","relevantDocs","filter","writeRows","doc","writeDoc","flatCloneDocWithMeta","_deleted","_rev","createRevision","previous","document","bulkWrite","then","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","instanceCreationOptions","password","eventReduce","cleanupPolicy","idleQueue","IdleQueue","_subs","destroyed","collections","eventBulks$","Subject","observable$","pipe","mergeMap","changeEventBulk","events","storageToken","PROMISE_RESOLVE_FALSE","emittedEventBulkIds","ObliviousSet","getWrappedStorageInstance","asRxDatabase","ensureStorageTokenDocumentExists","$emit","has","id","add","next","removeCollectionDoc","getSingleDocument","getPrimaryKeyOfInternalDocument","_collectionNamePrimary","INTERNAL_CONTEXT_COLLECTION","newRxError","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Object","entries","forEach","args","rxJsonSchema","createRxSchema","crypt","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","_meta","getDefaultRxDocumentMeta","getDefaultRevision","_attachments","useArgs","assign","hookData","flatClone","runPluginHooks","putDocsResult","error","_id","docInDb","ensureNotFalsy","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","createRxCollection","defineProperty","get","removeCollection","destroyPromise","PROMISE_RESOLVE_VOID","destroy","knownVersions","knownVersionDoc","createRxCollectionStorageInstance","storageInstances","instance","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","pluginMissing","importJSON","_exportedJSON","server","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","complete","sub","unsubscribe","col","close","broadcastChannel","bcState","BROADCAST_CHANNEL_BY_TOKEN","bc","throwIfDatabaseNameUsed","link","createRxDatabase","ignoreDuplicate","localDocuments","overwritable","validatePassword","creator","isRxDatabase","obj","dbCount"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector,\n    BroadcastChannel\n} from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    InternalStoreCollectionDocType\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID,\n    getDefaultRevision,\n    createRevision,\n    getDefaultRxDocumentMeta\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    RxSchema\n} from './rx-schema';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    flatCloneDocWithMeta,\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport {\n    createRxCollectionStorageInstance\n} from './rx-collection-helper';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenDocumentExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA\n} from './rx-database-internal-store';\nimport { BROADCAST_CHANNEL_BY_TOKEN } from './rx-storage-multiinstance';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals,\n    InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n\n    public readonly idleQueue: IdleQueue = new IdleQueue();\n\n    constructor(\n        public readonly name: string,\n        /**\n         * Uniquely identifies the instance\n         * of this RxDatabase.\n         */\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         * \n         * TODO this is ugly, we should use a different way in the dev-mode\n         * so that all non-dev-mode code can be cleaner.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             */\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase);\n            this.storageToken = this.storageTokenDocument.then(doc => doc.data.token);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n\n    /**\n     * Set if multiInstance: true\n     * This broadcast channel is used to send events to other instances like\n     * other browser tabs or nodejs processes.\n     * We transfer everything in EventBulks because sending many small events has been shown\n     * to be performance expensive.\n     * \n     * @deprecated The broadcast channel has been moved out of the RxDatabase and is part of the\n     * RxStorage but only if it is needed there.\n     * @see ./rx-storage-multiinstance.ts\n     * \n     */\n    get broadcastChannel(): BroadcastChannel<RxChangeEventBulk<any>> | undefined {\n        const bcState = BROADCAST_CHANNEL_BY_TOKEN.get(this.token);\n        if (bcState) {\n            return bcState.bc as any;\n        }\n    }\n\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     * \n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n    /**\n     * Stores the whole state of the internal storage token document.\n     * We need this in some plugins.\n     */\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * TODO instead of having this here, we should add a test to ensure each RxStorage\n     * behaves equal and does never emit duplicate eventBulks.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n        writeDoc._rev = createRevision(writeDoc, doc);\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }], 'rx-database-remove-collection');\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema);\n            schemas[collectionName] = schema;\n\n            // crypt=true but no password given\n            if (\n                schema.crypt &&\n                !this.password\n            ) {\n                throw newRxError('DB7', {\n                    name: name as string\n                });\n            }\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version\n                },\n                _deleted: false,\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            collectionDocData._rev = createRevision(collectionDocData);\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this,\n\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(\n            bulkPutDocs,\n            'rx-database-add-collection'\n        );\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    database: this.name,\n                    collection: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        let destroyPromise = PROMISE_RESOLVE_VOID;\n        if ((this.collections as any)[collectionName]) {\n            destroyPromise = (this.collections as any)[collectionName].destroy();\n        }\n        // remove schemas from internal db\n        return destroyPromise\n            .then(() => _removeAllOfCollection(this as any, collectionName))\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(knownVersionDoc => {\n                            return createRxCollectionStorageInstance(\n                                this.asRxDatabase,\n                                {\n                                    databaseInstanceToken: this.token,\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: knownVersionDoc.data.schema,\n                                    options: this.instanceCreationOptions,\n                                    multiInstance: this.multiInstance\n                                }\n                            );\n                        })\n                );\n            })\n            // remove the storage instance\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => instance.remove()\n                    )\n                );\n            })\n            .then(() => runAsyncPluginHooks('postRemoveRxCollection', {\n                storage: this.storage,\n                databaseName: this.name,\n                collectionName\n            }))\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n    const docs = await getAllCollectionDocuments(rxDatabase.internalStore);\n    const relevantDocs = docs\n        .filter((colDoc) => colDoc.data.name === collectionName);\n    const writeRows = relevantDocs.map(doc => {\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n        writeDoc._rev = createRevision(writeDoc, doc);\n        return {\n            previous: doc,\n            document: writeDoc\n        };\n    });\n    return rxDatabase.internalStore\n        .bulkWrite(\n            writeRows,\n            'rx-database-remove-collection-all'\n        )\n        .then(() => relevantDocs);\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        localDocuments = false\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    const databaseInstanceToken = randomCouchString(10);\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        databaseInstanceToken,\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance\n    ).then(storageInstance => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            databaseInstanceToken,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            storageInstance,\n            cleanupPolicy\n        ) as any;\n        return runAsyncPluginHooks('createRxDatabase', {\n            database: rxDatabase,\n            creator: {\n                storage,\n                instanceCreationOptions,\n                name,\n                password,\n                multiInstance,\n                eventReduce,\n                ignoreDuplicate,\n                options,\n                localDocuments\n            }\n        }).then(() => rxDatabase);\n    });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n * \n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<string[]> {\n    const databaseInstanceToken = randomCouchString(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        dbInternalsStorageInstance\n    );\n\n    const removedCollectionNames: string[] = [];\n    await Promise.all(\n        collectionDocs\n            .map(async (colDoc) => {\n                const schema = colDoc.data.schema;\n                const collectionName = colDoc.data.name;\n                removedCollectionNames.push(collectionName);\n                const storageInstance = await storage.createStorageInstance<any>(\n                    {\n                        databaseInstanceToken,\n                        databaseName,\n                        collectionName,\n                        schema,\n                        options: {},\n                        multiInstance: false\n                    }\n                );\n                await storageInstance.remove();\n            })\n    );\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n\n\n/**\n * Returns true if the given RxDatabase was the first\n * instance that was created on the storage with this name.\n * \n * Can be used for some optimizations because on the first instantiation,\n * we can assume that no data was written before.\n */\nexport async function isRxDatabaseFirstTimeInstantiated(\n    database: RxDatabase\n): Promise<boolean> {\n    const tokenDoc = await database.storageTokenDocument;\n    return tokenDoc.data.instanceToken === database.token;\n}\n"],"mappings":"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"}