{"version":3,"sources":["../../src/rx-database.ts"],"names":[],"mappings":"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","file":"rx-database.js","sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\n\nimport type { LeaderElector } from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageKeyObjectInstance,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema';\nimport {\n    isRxChangeEventIntern,\n    RxChangeEventBroadcastChannelData\n} from './rx-change-event';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    findLocalDocument,\n    getAllDocuments,\n    getSingleDocument,\n    INTERNAL_STORAGE_NAME,\n    storageChangeEventToRxChangeEvent,\n    writeSingle\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { getPseudoSchemaForVersion } from './rx-schema-helper';\nimport {\n    createRxCollectionStorageInstances,\n    getCollectionLocalInstanceName\n} from './rx-collection-helper';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\n// stores information about the collections\nexport type InternalStoreDocumentData = {\n    // primary\n    collectionName: string;\n    schema: RxJsonSchema<any>;\n    schemaHash: string;\n    version: number;\n};\n\nexport class RxDatabaseBase<\n    Internals, InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n    constructor(\n        public readonly name: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n        /**\n         * Stores the local documents which are attached to this database.\n         */\n        public readonly localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>,\n        /**\n         * If multiInstance: true\n         * we need the broadcast channel for the database.\n         */\n        public readonly broadcastChannel?: BroadcastChannel\n    ) {\n        this.collections = {} as any;\n        DB_COUNT++;\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public idleQueue: IdleQueue = new IdleQueue();\n    public readonly token: string = randomCouchString(10);\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections;\n    private subject: Subject<RxChangeEvent> = new Subject();\n    private observable$: Observable<RxChangeEvent> = this.subject.asObservable();\n    public storageToken?: string;\n    public broadcastChannel$?: Subject<RxChangeEvent>;\n\n    /**\n     * removes all internal collection-info\n     * only use this if you have to upgrade from a major rxdb-version\n     * do NEVER use this to change the schema of a collection\n     */\n    async dangerousRemoveCollectionInfo(): Promise<void> {\n        const allDocs = await getAllDocuments(this.internalStore);\n        const writeData: BulkWriteRow<InternalStoreDocumentData>[] = allDocs.map(doc => {\n            const deletedDoc = flatClone(doc);\n            deletedDoc._deleted = true;\n            return {\n                previous: doc,\n                document: deletedDoc\n            };\n        });\n        await this.internalStore.bulkWrite(writeData);\n    }\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEvent: RxChangeEvent) {\n\n        // emit into own stream\n        this.subject.next(changeEvent);\n\n        // write to socket if event was created by this instance\n        if (changeEvent.databaseToken === this.token) {\n            writeToSocket(this as any, changeEvent);\n        }\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const docId = _collectionNamePrimary(name, schema);\n        const doc = await getSingleDocument(\n            this.internalStore,\n            docId\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        await this.lockedRun(\n            () => this.internalStore.bulkWrite([{\n                document: writeDoc,\n                previous: doc\n            }])\n        );\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        // get local management docs in bulk request\n        const collectionDocs = await this.internalStore.findDocumentsById(\n            Object\n                .keys(collectionCreators)\n                .map(name => {\n                    const schema: RxJsonSchema<any> = (collectionCreators as any)[name].schema;\n                    return _collectionNamePrimary(name, schema);\n                }),\n            false\n        );\n\n        const internalDocByCollectionName: any = {};\n        Array.from(collectionDocs.entries()).forEach(([key, doc]) => {\n            internalDocByCollectionName[key] = doc;\n        });\n\n        const schemaHashByName: { [key in keyof CreatedCollections]: string } = {} as any;\n        const collections = await Promise.all(\n            Object.entries(collectionCreators)\n                .map(([name, args]) => {\n                    const useName: keyof CreatedCollections = name as any;\n                    const internalDoc = internalDocByCollectionName[_collectionNamePrimary(name, collectionCreators[useName].schema)];\n                    const useArgs: RxCollectionCreator & { name: keyof CreatedCollections; } = flatClone(args) as any;\n                    useArgs.name = useName;\n                    const schema = createRxSchema((args as RxCollectionCreator).schema);\n                    schemaHashByName[useName] = schema.hash;\n                    (useArgs as any).schema = schema;\n                    (useArgs as any).database = this;\n\n                    // TODO check if already exists and schema hash has changed\n\n                    // crypt=true but no password given\n                    if (\n                        schema.crypt &&\n                        !this.password\n                    ) {\n                        throw newRxError('DB7', {\n                            name: name as string\n                        });\n                    }\n\n                    // collection already exists\n                    if ((this.collections as any)[name]) {\n                        throw newRxError('DB3', {\n                            name\n                        });\n                    }\n\n                    // collection already exists but has different schema\n                    if (internalDoc && internalDoc.schemaHash !== schemaHashByName[useName]) {\n                        throw newRxError('DB6', {\n                            name: name,\n                            previousSchemaHash: internalDoc.schemaHash,\n                            schemaHash: schemaHashByName[useName]\n                        });\n                    }\n\n                    // run hooks\n                    const hookData: RxCollectionCreator & { name: string; } = flatClone(args) as any;\n                    (hookData as any).database = this;\n                    hookData.name = name;\n                    runPluginHooks('preCreateRxCollection', hookData);\n\n                    return createRxCollection(useArgs, !!internalDoc);\n                })\n        );\n\n        const bulkPutDocs: BulkWriteRow<InternalStoreDocumentData>[] = [];\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        collections.forEach(collection => {\n            const name: keyof CreatedCollections = collection.name as any;\n            ret[name] = collection;\n\n            // add to bulk-docs list\n            if (!internalDocByCollectionName[name]) {\n                bulkPutDocs.push({\n                    document: {\n                        collectionName: _collectionNamePrimary(name as any, collectionCreators[name].schema),\n                        schemaHash: schemaHashByName[name],\n                        schema: collection.schema.normalized,\n                        version: collection.schema.version,\n                        _attachments: {}\n                    }\n                });\n            }\n\n            // set as getter to the database\n            (this.collections as any)[name] = collection;\n            if (!(this as any)[name]) {\n                Object.defineProperty(this, name, {\n                    get: () => (this.collections as any)[name]\n                });\n            }\n        });\n\n        // make a single call to the pouchdb instance\n        if (bulkPutDocs.length > 0) {\n            await this.internalStore.bulkWrite(bulkPutDocs);\n        }\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        if ((this.collections as any)[collectionName]) {\n            (this.collections as any)[collectionName].destroy();\n        }\n\n        // remove schemas from internal db\n        return _removeAllOfCollection(this as any, collectionName)\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(v => {\n                            return createRxCollectionStorageInstances<any, any, any>(\n                                collectionName,\n                                this as any,\n                                {\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: getPseudoSchemaForVersion<InternalStoreDocumentData>(v, 'collectionName'),\n                                    options: this.instanceCreationOptions\n                                },\n                                {}\n                            );\n                        })\n                );\n            })\n            // remove normal and local documents\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => this.lockedRun(\n                            () => Promise.all([\n                                instance.storageInstance.remove(),\n                                instance.localDocumentsStore.remove()\n                            ])\n                        )\n                    )\n                );\n            })\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_decrypted: boolean, _collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_decrypted?: false, _collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_decrypted: boolean = false, _collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        runPluginHooks('preDestroyRxDatabase', this);\n        DB_COUNT--;\n        this.destroyed = true;\n\n        this._subs.map(sub => sub.unsubscribe());\n\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // first wait until db is idle\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            .then(() => this.localDocumentsStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data\n     */\n    remove(): Promise<void> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport async function _ensureStorageTokenExists<Collections = any>(rxDatabase: RxDatabase<Collections>): Promise<string> {\n    const storageTokenDocumentId = 'storageToken';\n    const storageTokenDoc = await findLocalDocument<{ value: string }>(rxDatabase.localDocumentsStore, storageTokenDocumentId);\n    if (!storageTokenDoc) {\n        const storageToken = randomCouchString(10);\n        await rxDatabase.localDocumentsStore.bulkWrite([{\n            document: {\n                _id: storageTokenDocumentId,\n                value: storageToken,\n                _attachments: {}\n\n            }\n        }]);\n        return storageToken;\n    } else {\n        return storageTokenDoc.value;\n    }\n}\n\n/**\n * writes the changeEvent to the broadcastChannel\n */\nexport function writeToSocket(\n    rxDatabase: RxDatabase,\n    changeEvent: RxChangeEvent\n): Promise<boolean> {\n    if (rxDatabase.destroyed) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    if (\n        rxDatabase.multiInstance &&\n        !isRxChangeEventIntern(changeEvent) &&\n        rxDatabase.broadcastChannel\n    ) {\n        const sendOverChannel: RxChangeEventBroadcastChannelData = {\n            cE: changeEvent,\n            storageToken: rxDatabase.storageToken as string\n        };\n        return rxDatabase.broadcastChannel\n            .postMessage(sendOverChannel)\n            .then(() => true);\n    } else {\n        return PROMISE_RESOLVE_FALSE;\n    }\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<number[]> {\n    const docs = await rxDatabase.lockedRun(\n        () => getAllDocuments(rxDatabase.internalStore)\n    );\n    const relevantDocs = docs\n        .filter((doc) => {\n            const name = doc.collectionName.split('-')[0];\n            return name === collectionName;\n        });\n    return Promise.all(\n        relevantDocs\n            .map(\n                doc => {\n                    const writeDoc = flatClone(doc);\n                    writeDoc._deleted = true;\n                    return rxDatabase.lockedRun(\n                        () => writeSingle(\n                            rxDatabase.internalStore,\n                            {\n                                previous: doc,\n                                document: writeDoc\n                            }\n                        )\n                    );\n                }\n            )\n    ).then(() => relevantDocs.map((doc: any) => doc.version));\n}\n\nfunction _prepareBroadcastChannel<Collections>(rxDatabase: RxDatabase<Collections>): void {\n    if (!rxDatabase.broadcastChannel) {\n        return;\n    }\n    rxDatabase.broadcastChannel$ = new Subject();\n\n    rxDatabase.broadcastChannel.addEventListener('message', (msg: RxChangeEventBroadcastChannelData) => {\n        if (msg.storageToken !== rxDatabase.storageToken) {\n            // not same storage-state\n            return;\n        }\n        if (msg.cE.databaseToken === rxDatabase.token) {\n            // this db was sender\n            return;\n        }\n        const changeEvent = msg.cE;\n\n        (rxDatabase.broadcastChannel$ as any).next(changeEvent);\n    });\n\n    rxDatabase._subs.push(\n        rxDatabase.broadcastChannel$.subscribe((cE: RxChangeEvent) => {\n            rxDatabase.$emit(cE);\n        })\n    );\n}\n\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nasync function createRxDatabaseStorageInstances<Internals, InstanceCreationOptions>(\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    broadcastChannel?: BroadcastChannel\n): Promise<{\n    internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n    localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>\n}> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocumentData>(\n        {\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: getPseudoSchemaForVersion(0, 'collectionName'),\n            options,\n            broadcastChannel\n        }\n    );\n\n    const localDocumentsStore = await storage.createKeyObjectStorageInstance({\n        databaseName,\n        collectionName: '',\n        options,\n        broadcastChannel\n    });\n\n    return {\n        internalStore,\n        localDocumentsStore\n    };\n}\n\n/**\n * do the async things for this database\n */\nasync function prepare<Internals, InstanceCreationOptions, Collections>(\n    rxDatabase: RxDatabaseBase<Internals, InstanceCreationOptions, Collections>\n): Promise<void> {\n    const localDocsSub = rxDatabase.localDocumentsStore.changeStream().subscribe(\n        rxStorageChangeEvent => {\n            rxDatabase.$emit(\n                storageChangeEventToRxChangeEvent(\n                    true,\n                    rxStorageChangeEvent,\n                    rxDatabase as any\n                )\n            );\n        }\n    );\n    rxDatabase._subs.push(localDocsSub);\n\n    rxDatabase.storageToken = await _ensureStorageTokenExists<Collections>(rxDatabase as any);\n    if (rxDatabase.multiInstance) {\n        _prepareBroadcastChannel<Collections>(rxDatabase as any);\n    }\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {}\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options\n    });\n\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    let broadcastChannel: BroadcastChannel | undefined;\n    if (multiInstance) {\n        broadcastChannel = new BroadcastChannel(\n            'RxDB:' +\n            name + ':' +\n            'socket'\n        );\n    }\n\n    return createRxDatabaseStorageInstances<\n        Internals,\n        InstanceCreationOptions\n    >(\n        storage,\n        name,\n        instanceCreationOptions as any,\n        broadcastChannel\n    ).then(storageInstances => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            storageInstances.internalStore,\n            storageInstances.localDocumentsStore,\n            broadcastChannel\n        ) as any;\n        return prepare(rxDatabase)\n            .then(() => runAsyncPluginHooks('createRxDatabase', rxDatabase))\n            .then(() => rxDatabase);\n    });\n}\n\n/**\n * removes the database and all its known data\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<any> {\n\n    const storageInstance = await createRxDatabaseStorageInstances(\n        storage,\n        databaseName,\n        {}\n    );\n\n    const docs = await getAllDocuments(storageInstance.internalStore);\n    await Promise.all(\n        docs\n            .map(async (colDoc) => {\n                const id = colDoc.collectionName;\n                const schema = colDoc.schema;\n                const split = id.split('-');\n                const collectionName = split[0];\n                const version = parseInt(split[1], 10);\n                const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n                const [instance, localInstance] = await Promise.all([\n                    storage.createStorageInstance<InternalStoreDocumentData>(\n                        {\n                            databaseName,\n                            collectionName,\n                            schema: getPseudoSchemaForVersion(version, primaryPath as any),\n                            options: {}\n                        }\n                    ),\n                    storage.createKeyObjectStorageInstance({\n                        databaseName,\n                        collectionName: getCollectionLocalInstanceName(collectionName),\n                        options: {}\n                    })\n                ]);\n                await Promise.all([instance.remove(), localInstance.remove()]);\n            })\n    );\n\n    return Promise.all([\n        storageInstance.internalStore.remove(),\n        storageInstance.localDocumentsStore.remove()\n    ]);\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n"]}