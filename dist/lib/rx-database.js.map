{"version":3,"file":"rx-database.js","names":["ensureNoStartupErrors","rxDatabase","storageToken","startupErrors","isRxDatabaseFirstTimeInstantiated","database","storageTokenDocument","tokenDoc","data","instanceToken","token","removeRxDatabase","databaseName","storage","databaseInstanceToken","randomCouchString","createRxDatabaseStorageInstance","dbInternalsStorageInstance","getAllCollectionDocuments","statics","collectionDocs","collectionNames","Set","forEach","doc","add","name","removedCollectionNames","Array","from","Promise","all","map","collectionName","removeCollectionStorages","runAsyncPluginHooks","remove","options","multiInstance","password","createStorageInstance","INTERNAL_STORAGE_NAME","schema","INTERNAL_STORE_SCHEMA","USED_DATABASE_NAMES","DB_COUNT","RxDatabaseBase","instanceCreationOptions","eventReduce","internalStore","hashFunction","cleanupPolicy","idleQueue","IdleQueue","_subs","onDestroy","destroyed","collections","eventBulks$","Subject","observable$","pipe","mergeMap","changeEventBulk","events","PROMISE_RESOLVE_FALSE","emittedEventBulkIds","ObliviousSet","getWrappedStorageInstance","asRxDatabase","ensureStorageTokenDocumentExists","err","push","then","$emit","has","id","next","removeCollectionDoc","getSingleDocument","getPrimaryKeyOfInternalDocument","_collectionNamePrimary","INTERNAL_CONTEXT_COLLECTION","newRxError","writeDoc","flatCloneDocWithMeta","_deleted","bulkWrite","document","previous","addCollections","collectionCreators","jsonSchemas","schemas","bulkPutDocs","useArgsByCollectionName","Object","entries","args","rxJsonSchema","createRxSchema","collectionNameWithVersion","collectionDocData","key","context","schemaHash","hash","jsonSchema","version","connectedStorages","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","useArgs","assign","hookData","flatClone","runPluginHooks","putDocsResult","error","_id","docInDb","ensureNotFalsy","documentInDb","collection","previousSchemaHash","previousSchema","ret","keys","createRxCollection","defineProperty","get","lockedRun","fn","wrapCall","requestIdlePromise","exportJSON","_collections","pluginMissing","importJSON","_exportedJSON","serverCouchDB","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","destroy","complete","sub","unsubscribe","col","close","throwIfDatabaseNameUsed","link","createRxDatabase","ignoreDuplicate","localDocuments","defaultHashFunction","storageInstance","creator","isRxDatabase","obj","dbCount"],"sources":["../../src/rx-database.ts"],"sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport type {\n    LeaderElector\n} from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    CouchDBServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    CouchDBServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    RxChangeEventBulk,\n    RxDocumentData,\n    RxCleanupPolicy,\n    InternalStoreDocType,\n    InternalStoreStorageTokenDocType,\n    InternalStoreCollectionDocType,\n    RxTypeError,\n    RxError,\n    HashFunction,\n    MaybePromise\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    defaultHashFunction\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    RxSchema\n} from './rx-schema';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    flatCloneDocWithMeta,\n    getSingleDocument,\n    getWrappedStorageInstance,\n    INTERNAL_STORAGE_NAME\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    ensureStorageTokenDocumentExists,\n    getAllCollectionDocuments,\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION,\n    INTERNAL_STORE_SCHEMA,\n    _collectionNamePrimary\n} from './rx-database-internal-store';\nimport { removeCollectionStorages } from './rx-collection-helper';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\nexport class RxDatabaseBase<\n    Internals,\n    InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n\n    public readonly idleQueue: IdleQueue = new IdleQueue();\n\n    constructor(\n        public readonly name: string,\n        /**\n         * Uniquely identifies the instance\n         * of this RxDatabase.\n         */\n        public readonly token: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>,\n        public readonly hashFunction: HashFunction,\n        public readonly cleanupPolicy?: Partial<RxCleanupPolicy>\n    ) {\n        DB_COUNT++;\n\n        /**\n         * In the dev-mode, we create a pseudoInstance\n         * to get all properties of RxDatabase and ensure they do not\n         * conflict with the collection names etc.\n         * So only if it is not pseudoInstance,\n         * we have all values to prepare a real RxDatabase.\n         * \n         * TODO this is ugly, we should use a different way in the dev-mode\n         * so that all non-dev-mode code can be cleaner.\n         */\n        if (this.name !== 'pseudoInstance') {\n            /**\n             * Wrap the internal store\n             * to ensure that calls to it also end up in\n             * calculation of the idle state and the hooks.\n             */\n            this.internalStore = getWrappedStorageInstance(\n                this.asRxDatabase,\n                internalStore,\n                INTERNAL_STORE_SCHEMA\n            );\n\n            /**\n             * Start writing the storage token.\n             * Do not await the creation because it would run\n             * in a critical path that increases startup time.\n             * \n             * Writing the token takes about 20 milliseconds\n             * even on a fast adapter, so this is worth it.\n             */\n            this.storageTokenDocument = ensureStorageTokenDocumentExists(this.asRxDatabase)\n                .catch(err => this.startupErrors.push(err) as any);\n            this.storageToken = this.storageTokenDocument\n                .then(doc => doc.data.token)\n                .catch(err => this.startupErrors.push(err) as any);\n        }\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public _subs: Subscription[] = [];\n\n    /**\n     * Beceause having unhandled exceptions would fail,\n     * we have to store the async errors of the constructor here\n     * so we can throw them later.\n     */\n    public startupErrors: (RxError | RxTypeError)[] = [];\n\n    /**\n     * When the database is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections = {} as any;\n    public readonly eventBulks$: Subject<RxChangeEventBulk<any>> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     * \n     * Because reading and writing the storageToken runs in the hot path\n     * of database creation, we do not await the storageWrites but instead\n     * work with the promise when we need the value.\n     */\n    public storageToken: Promise<string> = PROMISE_RESOLVE_FALSE as any;\n    /**\n     * Stores the whole state of the internal storage token document.\n     * We need this in some plugins.\n     */\n    public storageTokenDocument: Promise<RxDocumentData<InternalStoreStorageTokenDocType>> = PROMISE_RESOLVE_FALSE as any;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     * TODO instead of having this here, we should add a test to ensure each RxStorage\n     * behaves equal and does never emit duplicate eventBulks.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk<any>) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const doc = await getSingleDocument(\n            this.internalStore,\n            getPrimaryKeyOfInternalDocument(\n                _collectionNamePrimary(name, schema),\n                INTERNAL_CONTEXT_COLLECTION\n            )\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatCloneDocWithMeta(doc);\n        writeDoc._deleted = true;\n\n        await this.internalStore.bulkWrite([{\n            document: writeDoc,\n            previous: doc\n        }], 'rx-database-remove-collection');\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator<any>\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        const jsonSchemas: { [key in keyof CreatedCollections]: RxJsonSchema<any> } = {} as any;\n        const schemas: { [key in keyof CreatedCollections]: RxSchema<any> } = {} as any;\n        const bulkPutDocs: BulkWriteRow<InternalStoreCollectionDocType>[] = [];\n        const useArgsByCollectionName: any = {};\n\n        Object.entries(collectionCreators).forEach(([name, args]) => {\n            const collectionName: keyof CreatedCollections = name as any;\n            const rxJsonSchema = (args as RxCollectionCreator<any>).schema;\n            jsonSchemas[collectionName] = rxJsonSchema;\n            const schema = createRxSchema(rxJsonSchema);\n            schemas[collectionName] = schema;\n\n            // collection already exists\n            if ((this.collections as any)[name]) {\n                throw newRxError('DB3', {\n                    name\n                });\n            }\n\n            const collectionNameWithVersion = _collectionNamePrimary(name, rxJsonSchema);\n            const collectionDocData: RxDocumentData<InternalStoreCollectionDocType> = {\n                id: getPrimaryKeyOfInternalDocument(\n                    collectionNameWithVersion,\n                    INTERNAL_CONTEXT_COLLECTION\n                ),\n                key: collectionNameWithVersion,\n                context: INTERNAL_CONTEXT_COLLECTION,\n                data: {\n                    name: collectionName as any,\n                    schemaHash: schema.hash,\n                    schema: schema.jsonSchema,\n                    version: schema.version,\n                    connectedStorages: []\n                },\n                _deleted: false,\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _attachments: {}\n            };\n            bulkPutDocs.push({\n                document: collectionDocData\n            });\n\n            const useArgs = Object.assign(\n                {},\n                args,\n                {\n                    name: collectionName,\n                    schema,\n                    database: this,\n\n                }\n            );\n\n            // run hooks\n            const hookData: RxCollectionCreator<any> & { name: string; } = flatClone(args) as any;\n            (hookData as any).database = this;\n            hookData.name = name;\n            runPluginHooks('preCreateRxCollection', hookData);\n\n            useArgsByCollectionName[collectionName] = useArgs;\n        });\n\n        const putDocsResult = await this.internalStore.bulkWrite(\n            bulkPutDocs,\n            'rx-database-add-collection'\n        );\n\n        await ensureNoStartupErrors(this);\n\n        Object.entries(putDocsResult.error).forEach(([_id, error]) => {\n            const docInDb: RxDocumentData<InternalStoreCollectionDocType> = ensureNotFalsy(error.documentInDb);\n            const collectionName = docInDb.data.name;\n            const schema = (schemas as any)[collectionName];\n            // collection already exists but has different schema\n            if (docInDb.data.schemaHash !== schema.hash) {\n                throw newRxError('DB6', {\n                    database: this.name,\n                    collection: collectionName,\n                    previousSchemaHash: docInDb.data.schemaHash,\n                    schemaHash: schema.hash,\n                    previousSchema: docInDb.data.schema,\n                    schema: ensureNotFalsy((jsonSchemas as any)[collectionName])\n                });\n            }\n        });\n\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        await Promise.all(\n            Object.keys(collectionCreators).map(async (collectionName) => {\n                const useArgs = useArgsByCollectionName[collectionName];\n                const collection = await createRxCollection(useArgs);\n                (ret as any)[collectionName] = collection;\n\n                // set as getter to the database\n                (this.collections as any)[collectionName] = collection;\n                if (!(this as any)[collectionName]) {\n                    Object.defineProperty(this, collectionName, {\n                        get: () => (this.collections as any)[collectionName]\n                    });\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     */\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    serverCouchDB(_options?: CouchDBServerOptions): Promise<CouchDBServerResponse> {\n        throw pluginMissing('server-couchdb');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public async destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // settings destroyed = true must be the first thing to do.\n        this.destroyed = true;\n\n        await runAsyncPluginHooks('preDestroyRxDatabase', this);\n        /**\n         * Complete the event stream\n         * to stop all subscribers who forgot to unsubscribe.\n         */\n        this.eventBulks$.complete();\n\n        DB_COUNT--;\n        this._subs.map(sub => sub.unsubscribe());\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * First wait until the database is idle\n         */\n        return this.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections as any)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data.\n     * Returns the names of all removed collections.\n     */\n    remove(): Promise<string[]> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n\n    get asRxDatabase(): RxDatabase<\n        {},\n        Internals,\n        InstanceCreationOptions\n    > {\n        return this as any;\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nexport async function createRxDatabaseStorageInstance<Internals, InstanceCreationOptions>(\n    databaseInstanceToken: string,\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean,\n    password?: string\n): Promise<RxStorageInstance<InternalStoreDocType, Internals, InstanceCreationOptions>> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocType>(\n        {\n            databaseInstanceToken,\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: INTERNAL_STORE_SCHEMA,\n            options,\n            multiInstance,\n            password\n        }\n    );\n    return internalStore;\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {},\n        cleanupPolicy,\n        localDocuments = false,\n        hashFunction = defaultHashFunction\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options,\n        localDocuments\n    });\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    const databaseInstanceToken = randomCouchString(10);\n\n    return createRxDatabaseStorageInstance<\n        Internals,\n        InstanceCreationOptions\n    >(\n        databaseInstanceToken,\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance,\n        password\n    )\n        /**\n         * Creating the internal store might fail\n         * if some RxStorage wrapper is used that does some checks\n         * and then throw.\n         * In that case we have to properly clean up the database.\n         */\n        .catch(err => {\n            USED_DATABASE_NAMES.delete(name);\n            throw err;\n        })\n        .then(storageInstance => {\n            const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n                name,\n                databaseInstanceToken,\n                storage,\n                instanceCreationOptions,\n                password,\n                multiInstance,\n                eventReduce,\n                options,\n                storageInstance,\n                hashFunction,\n                cleanupPolicy\n            ) as any;\n\n            return runAsyncPluginHooks('createRxDatabase', {\n                database: rxDatabase,\n                creator: {\n                    storage,\n                    instanceCreationOptions,\n                    name,\n                    password,\n                    multiInstance,\n                    eventReduce,\n                    ignoreDuplicate,\n                    options,\n                    localDocuments\n                }\n            }).then(() => rxDatabase);\n        });\n}\n\n/**\n * Removes the database and all its known data\n * with all known collections and all internal meta data.\n * \n * Returns the names of the removed collections.\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<string[]> {\n    const databaseInstanceToken = randomCouchString(10);\n    const dbInternalsStorageInstance = await createRxDatabaseStorageInstance(\n        databaseInstanceToken,\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const collectionDocs = await getAllCollectionDocuments(\n        storage.statics,\n        dbInternalsStorageInstance\n    );\n\n    const collectionNames = new Set<string>();\n    collectionDocs.forEach(doc => collectionNames.add(doc.data.name));\n    const removedCollectionNames: string[] = Array.from(collectionNames);\n\n    await Promise.all(\n        removedCollectionNames.map(collectionName => removeCollectionStorages(\n            storage,\n            dbInternalsStorageInstance,\n            databaseInstanceToken,\n            databaseName,\n            collectionName\n        ))\n    );\n\n    await runAsyncPluginHooks('postRemoveRxDatabase', {\n        databaseName,\n        storage\n    });\n\n    await dbInternalsStorageInstance.remove();\n    return removedCollectionNames;\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n\n\n/**\n * Returns true if the given RxDatabase was the first\n * instance that was created on the storage with this name.\n * \n * Can be used for some optimizations because on the first instantiation,\n * we can assume that no data was written before.\n */\nexport async function isRxDatabaseFirstTimeInstantiated(\n    database: RxDatabase\n): Promise<boolean> {\n    const tokenDoc = await database.storageTokenDocument;\n    return tokenDoc.data.instanceToken === database.token;\n}\n\n\n/**\n * For better performance some tasks run async\n * and are awaited later.\n * But we still have to ensure that there have been no errors\n * on database creation.\n */\nexport async function ensureNoStartupErrors(\n    rxDatabase: RxDatabaseBase<any, any, any>\n) {\n    await rxDatabase.storageToken;\n    if (rxDatabase.startupErrors[0]) {\n        throw rxDatabase.startupErrors[0];\n    }\n}\n"],"mappings":"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"}