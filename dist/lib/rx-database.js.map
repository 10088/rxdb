{"version":3,"sources":["../../src/rx-database.ts"],"names":["USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","name","storage","instanceCreationOptions","password","multiInstance","eventReduce","options","idleQueue","internalStore","localDocumentsStore","broadcastChannel","token","_subs","destroyed","eventBulks$","Subject","observable$","pipe","changeEventBulk","events","emittedEventBulkIds","ObliviousSet","collections","dangerousRemoveCollectionInfo","allDocs","writeData","map","doc","deletedDoc","_deleted","previous","document","bulkWrite","$emit","has","id","add","next","writeToSocket","removeCollectionDoc","schema","docId","_collectionNamePrimary","writeDoc","lockedRun","addCollections","collectionCreators","findDocumentsById","Object","keys","collectionDocs","internalDocByCollectionName","entries","forEach","key","schemaHashByName","Promise","all","args","useName","internalDoc","useArgs","hash","database","crypt","schemaHash","previousSchemaHash","previousSchema","hookData","bulkPutDocs","ret","collection","collectionName","push","normalized","version","_attachments","defineProperty","get","length","removeCollection","destroyPromise","PROMISE_RESOLVE_VOID","destroy","then","_removeAllOfCollection","knownVersions","v","databaseName","storageInstances","instance","storageInstance","remove","fn","wrapCall","requestIdlePromise","exportJSON","_decrypted","_collections","importJSON","_exportedJSON","server","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","PROMISE_RESOLVE_FALSE","sub","unsubscribe","col","close","removeRxDatabase","throwIfDatabaseNameUsed","link","_ensureStorageTokenExists","rxDatabase","storageTokenDocumentId","storageTokenDoc","storageToken","_id","value","internal","databaseToken","postMessage","docs","relevantDocs","filter","split","_prepareBroadcastChannel","addEventListener","createRxDatabaseStorageInstances","createStorageInstance","INTERNAL_STORAGE_NAME","createKeyObjectStorageInstance","prepare","localDocsSub","changeStream","subscribe","eventBulk","ev","createRxDatabase","ignoreDuplicate","overwritable","validatePassword","BroadcastChannel","IdleQueue","colDoc","parseInt","primaryPath","primaryKey","localInstance","isRxDatabase","obj","dbCount"],"mappings":"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","sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\n\nimport type { LeaderElector } from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageKeyObjectInstance,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    EventBulk,\n    RxChangeEventBulk\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    findLocalDocument,\n    getAllDocuments,\n    getSingleDocument,\n    INTERNAL_STORAGE_NAME,\n    storageChangeEventToRxChangeEvent,\n    writeSingle\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { getPseudoSchemaForVersion } from './rx-schema-helper';\nimport {\n    createRxCollectionStorageInstances,\n    getCollectionLocalInstanceName\n} from './rx-collection-helper';\nimport { ObliviousSet } from 'oblivious-set';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\n// stores information about the collections\nexport type InternalStoreDocumentData = {\n    // primary\n    collectionName: string;\n    schema: RxJsonSchema<any>;\n    schemaHash: string;\n    version: number;\n};\n\nexport class RxDatabaseBase<\n    Internals, InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n    constructor(\n        public readonly name: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        public readonly idleQueue: IdleQueue,\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n        /**\n         * Stores the local documents which are attached to this database.\n         */\n        public readonly localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>,\n        /**\n         * Set if multiInstance: true\n         * This broadcast channel is used to send events to other instances like\n         * other browser tabs or nodejs processes.\n         * We transfer everything in EventBulks because sending many small events has been shown\n         * to be performance expensive.\n         */\n        public readonly broadcastChannel?: BroadcastChannel<RxChangeEventBulk>,\n    ) {\n        this.collections = {} as any;\n        DB_COUNT++;\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public readonly token: string = randomCouchString(10);\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections;\n    public readonly eventBulks$: Subject<RxChangeEventBulk> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     */\n    public storageToken?: string;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * removes all internal collection-info\n     * only use this if you have to upgrade from a major rxdb-version\n     * do NEVER use this to change the schema of a collection\n     */\n    async dangerousRemoveCollectionInfo(): Promise<void> {\n        const allDocs = await getAllDocuments(this.storage, this.internalStore);\n        const writeData: BulkWriteRow<InternalStoreDocumentData>[] = allDocs.map(doc => {\n            const deletedDoc = flatClone(doc);\n            deletedDoc._deleted = true;\n            return {\n                previous: doc,\n                document: deletedDoc\n            };\n        });\n        await this.internalStore.bulkWrite(writeData);\n    }\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n\n        // write to socket to inform other instances about the change\n        writeToSocket(this as any, changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const docId = _collectionNamePrimary(name, schema);\n        const doc = await getSingleDocument(\n            this.internalStore,\n            docId\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        await this.lockedRun(\n            () => this.internalStore.bulkWrite([{\n                document: writeDoc,\n                previous: doc\n            }])\n        );\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        // get local management docs in bulk request\n        const collectionDocs = await this.lockedRun(\n            () => this.internalStore.findDocumentsById(\n                Object\n                    .keys(collectionCreators)\n                    .map(name => {\n                        const schema: RxJsonSchema<any> = (collectionCreators as any)[name].schema;\n                        return _collectionNamePrimary(name, schema);\n                    }),\n                false\n            )\n        );\n\n        const internalDocByCollectionName: any = {};\n        Object.entries(collectionDocs).forEach(([key, doc]) => {\n            internalDocByCollectionName[key] = doc;\n        });\n\n        const schemaHashByName: { [key in keyof CreatedCollections]: string } = {} as any;\n        const collections = await Promise.all(\n            Object.entries(collectionCreators)\n                .map(([name, args]) => {\n                    const useName: keyof CreatedCollections = name as any;\n                    const internalDoc = internalDocByCollectionName[_collectionNamePrimary(name, collectionCreators[useName].schema)];\n                    const useArgs: RxCollectionCreator & { name: keyof CreatedCollections; } = flatClone(args) as any;\n                    useArgs.name = useName;\n                    const schema = createRxSchema((args as RxCollectionCreator).schema);\n                    schemaHashByName[useName] = schema.hash;\n                    (useArgs as any).schema = schema;\n                    (useArgs as any).database = this;\n\n                    // TODO check if already exists and schema hash has changed\n\n                    // crypt=true but no password given\n                    if (\n                        schema.crypt &&\n                        !this.password\n                    ) {\n                        throw newRxError('DB7', {\n                            name: name as string\n                        });\n                    }\n\n                    // collection already exists\n                    if ((this.collections as any)[name]) {\n                        throw newRxError('DB3', {\n                            name\n                        });\n                    }\n\n                    // collection already exists but has different schema\n                    if (internalDoc && internalDoc.schemaHash !== schemaHashByName[useName]) {\n                        throw newRxError('DB6', {\n                            name: name,\n                            previousSchemaHash: internalDoc.schemaHash,\n                            schemaHash: schemaHashByName[useName],\n                            previousSchema: internalDoc.schema,\n                            schema: (args as RxCollectionCreator).schema\n                        });\n                    }\n\n                    // run hooks\n                    const hookData: RxCollectionCreator & { name: string; } = flatClone(args) as any;\n                    (hookData as any).database = this;\n                    hookData.name = name;\n                    runPluginHooks('preCreateRxCollection', hookData);\n\n                    return createRxCollection(useArgs, !!internalDoc);\n                })\n        );\n\n        const bulkPutDocs: BulkWriteRow<InternalStoreDocumentData>[] = [];\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        collections.forEach(collection => {\n            const name: keyof CreatedCollections = collection.name as any;\n            ret[name] = collection;\n\n            // add to bulk-docs list\n            const collectionName = _collectionNamePrimary(name as any, collectionCreators[name].schema);\n            if (!internalDocByCollectionName[collectionName]) {\n                bulkPutDocs.push({\n                    document: {\n                        collectionName,\n                        schemaHash: schemaHashByName[name],\n                        schema: collection.schema.normalized,\n                        version: collection.schema.version,\n                        _attachments: {}\n                    }\n                });\n            }\n\n            // set as getter to the database\n            (this.collections as any)[name] = collection;\n            if (!(this as any)[name]) {\n                Object.defineProperty(this, name, {\n                    get: () => (this.collections as any)[name]\n                });\n            }\n        });\n\n        // make a single write call to the storage instance\n        if (bulkPutDocs.length > 0) {\n            await this.lockedRun(\n                () => this.internalStore.bulkWrite(bulkPutDocs)\n            );\n        }\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        let destroyPromise = PROMISE_RESOLVE_VOID;\n        if ((this.collections as any)[collectionName]) {\n            destroyPromise = (this.collections as any)[collectionName].destroy();\n        }\n\n        // remove schemas from internal db\n        return destroyPromise\n            .then(() => _removeAllOfCollection(this as any, collectionName))\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(v => {\n                            return createRxCollectionStorageInstances<any, any, any>(\n                                collectionName,\n                                this as any,\n                                {\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: getPseudoSchemaForVersion<InternalStoreDocumentData>(v, 'collectionName'),\n                                    options: this.instanceCreationOptions,\n                                    multiInstance: this.multiInstance\n                                },\n                                {}\n                            );\n                        })\n                );\n            })\n            // remove normal and local documents\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => this.lockedRun(\n                            () => Promise.all([\n                                instance.storageInstance.remove(),\n                                instance.localDocumentsStore.remove()\n                            ])\n                        )\n                    )\n                );\n            })\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_decrypted: boolean, _collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_decrypted?: false, _collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_decrypted: boolean = false, _collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        runPluginHooks('preDestroyRxDatabase', this);\n        DB_COUNT--;\n        this.destroyed = true;\n\n        this._subs.map(sub => sub.unsubscribe());\n\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // first wait until db is idle\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            .then(() => this.localDocumentsStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data\n     */\n    remove(): Promise<void> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport async function _ensureStorageTokenExists<Collections = any>(rxDatabase: RxDatabase<Collections>): Promise<string> {\n    const storageTokenDocumentId = 'storageToken';\n    const storageTokenDoc = await findLocalDocument<{ value: string }>(rxDatabase.localDocumentsStore, storageTokenDocumentId);\n    if (!storageTokenDoc) {\n        const storageToken = randomCouchString(10);\n        await rxDatabase.localDocumentsStore.bulkWrite([{\n            document: {\n                _id: storageTokenDocumentId,\n                value: storageToken,\n                _attachments: {}\n\n            }\n        }]);\n        return storageToken;\n    } else {\n        return storageTokenDoc.value;\n    }\n}\n\n/**\n * writes the changeEvent to the broadcastChannel\n */\nexport function writeToSocket(\n    rxDatabase: RxDatabase,\n    changeEventBulk: RxChangeEventBulk\n): Promise<boolean> {\n    if (rxDatabase.destroyed) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    if (\n        rxDatabase.multiInstance &&\n        rxDatabase.broadcastChannel &&\n        !changeEventBulk.internal &&\n        rxDatabase.token === changeEventBulk.databaseToken &&\n        rxDatabase.storageToken === changeEventBulk.storageToken\n\n    ) {\n        return rxDatabase.broadcastChannel\n            .postMessage(changeEventBulk)\n            .then(() => true);\n    } else {\n        return PROMISE_RESOLVE_FALSE;\n    }\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<number[]> {\n    const docs = await rxDatabase.lockedRun(\n        () => getAllDocuments(rxDatabase.storage, rxDatabase.internalStore)\n    );\n    const relevantDocs = docs\n        .filter((doc) => {\n            const name = doc.collectionName.split('-')[0];\n            return name === collectionName;\n        });\n    return Promise.all(\n        relevantDocs\n            .map(\n                doc => {\n                    const writeDoc = flatClone(doc);\n                    writeDoc._deleted = true;\n                    return rxDatabase.lockedRun(\n                        () => writeSingle(\n                            rxDatabase.internalStore,\n                            {\n                                previous: doc,\n                                document: writeDoc\n                            }\n                        )\n                    );\n                }\n            )\n    ).then(() => relevantDocs.map((doc: any) => doc.version));\n}\n\nfunction _prepareBroadcastChannel<Collections>(rxDatabase: RxDatabase<Collections>): void {\n    // listen to changes from other instances that come over the BroadcastChannel\n    ensureNotFalsy(rxDatabase.broadcastChannel)\n        .addEventListener('message', (changeEventBulk: RxChangeEventBulk) => {\n            if (\n                // not same storage-state\n                changeEventBulk.storageToken !== rxDatabase.storageToken ||\n                // this db instance was sender\n                changeEventBulk.databaseToken === rxDatabase.token\n            ) {\n                return;\n            }\n            rxDatabase.$emit(changeEventBulk);\n        });\n}\n\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nasync function createRxDatabaseStorageInstances<Internals, InstanceCreationOptions>(\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean\n): Promise<{\n    internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n    localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>\n}> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocumentData>(\n        {\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: getPseudoSchemaForVersion(0, 'collectionName'),\n            options,\n            multiInstance\n        }\n    );\n\n    const localDocumentsStore = await storage.createKeyObjectStorageInstance({\n        databaseName,\n        collectionName: '',\n        options,\n        multiInstance\n    });\n\n    return {\n        internalStore,\n        localDocumentsStore\n    };\n}\n\n/**\n * do the async things for this database\n */\nasync function prepare<Internals, InstanceCreationOptions, Collections>(\n    rxDatabase: RxDatabaseBase<Internals, InstanceCreationOptions, Collections>\n): Promise<void> {\n    rxDatabase.storageToken = await _ensureStorageTokenExists<Collections>(rxDatabase as any);\n    const localDocsSub = rxDatabase.localDocumentsStore.changeStream()\n        .subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk = {\n                id: eventBulk.id,\n                internal: false,\n                storageToken: ensureNotFalsy(rxDatabase.storageToken),\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    true,\n                    ev\n                )),\n                databaseToken: rxDatabase.token\n            };\n            rxDatabase.$emit(changeEventBulk);\n        });\n    rxDatabase._subs.push(localDocsSub);\n    if (rxDatabase.multiInstance) {\n        _prepareBroadcastChannel<Collections>(rxDatabase as any);\n    }\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {}\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options\n    });\n\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    let broadcastChannel: BroadcastChannel | undefined;\n    if (multiInstance) {\n        broadcastChannel = new BroadcastChannel(\n            'RxDB:' +\n            name + ':' +\n            'socket'\n        );\n    }\n\n    const idleQueue = new IdleQueue();\n\n    return createRxDatabaseStorageInstances<\n        Internals,\n        InstanceCreationOptions\n    >(\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance\n    ).then(storageInstances => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            idleQueue,\n            storageInstances.internalStore,\n            storageInstances.localDocumentsStore,\n            broadcastChannel\n        ) as any;\n        return prepare(rxDatabase)\n            .then(() => runAsyncPluginHooks('createRxDatabase', rxDatabase))\n            .then(() => rxDatabase);\n    });\n}\n\n/**\n * removes the database and all its known data\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<any> {\n    const idleQueue = new IdleQueue();\n\n    const storageInstance = await createRxDatabaseStorageInstances(\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const docs = await getAllDocuments(storage, storageInstance.internalStore);\n    await Promise.all(\n        docs\n            .map(async (colDoc) => {\n                const id = colDoc.collectionName;\n                const schema = colDoc.schema;\n                const split = id.split('-');\n                const collectionName = split[0];\n                const version = parseInt(split[1], 10);\n                const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n                const [instance, localInstance] = await Promise.all([\n                    storage.createStorageInstance<InternalStoreDocumentData>(\n                        {\n                            databaseName,\n                            collectionName,\n                            schema: getPseudoSchemaForVersion(version, primaryPath as any),\n                            options: {},\n                            multiInstance: false\n                        }\n                    ),\n                    storage.createKeyObjectStorageInstance({\n                        databaseName,\n                        collectionName: getCollectionLocalInstanceName(collectionName),\n                        options: {},\n                        multiInstance: false\n                    })\n                ]);\n                await Promise.all([instance.remove(), localInstance.remove()]);\n            })\n    );\n\n    return Promise.all([\n        storageInstance.internalStore.remove(),\n        storageInstance.localDocumentsStore.remove()\n    ]);\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n"],"file":"rx-database.js"}