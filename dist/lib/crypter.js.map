{"version":3,"sources":["../../src/crypter.ts"],"names":["Crypter","password","schema","_encryptString","_value","_decryptString","encrypt","obj","attachments","_attachments","clonedObj","encryptedPaths","forEach","path","value","objectPath","get","stringValue","JSON","stringify","encrypted","set","decrypt","decrypted","decryptedParsed","parse","createCrypter"],"mappings":";;;;;;;;;;AAOA;;AACA;;AARA;AACA;AACA;AACA;AACA;AACA;IAaaA,O;AACT,mBACWC,QADX,EAEWC,MAFX,EAGE;AAAA,SAFSD,QAET,GAFSA,QAET;AAAA,SADSC,MACT,GADSA,MACT;AAAG;AAEL;AACJ;AACA;AACA;;;;;SACWC,c,GAAP,wBAAsBC,MAAtB,EAA8C;AAC1C,UAAM,yBAAc,YAAd,CAAN;AACH;AAED;AACJ;AACA;AACA;;;SACWC,c,GAAP,wBAAsBD,MAAtB,EAA8C;AAC1C,UAAM,yBAAc,YAAd,CAAN;AACH,G;;SAEDE,O,GAAA,iBAAQC,GAAR,EAAkB;AAAA;;AACd,QAAI,CAAC,KAAKN,QAAV,EAAoB;AAChB,aAAOM,GAAP;AACH;;AAEDA,IAAAA,GAAG,GAAG,qBAAUA,GAAV,CAAN;AAGA;AACR;AACA;AACA;;AACQ,QAAMC,WAAW,GAAGD,GAAG,CAACE,YAAxB;AACA,WAAOF,GAAG,CAACE,YAAX;AAEA,QAAMC,SAAS,GAAG,iBAAMH,GAAN,CAAlB;;AACA,QAAIC,WAAJ,EAAiB;AACbE,MAAAA,SAAS,CAACD,YAAV,GAAyBD,WAAzB;AACH;;AAED,SAAKN,MAAL,CAAYS,cAAZ,CACKC,OADL,CACa,UAAAC,IAAI,EAAI;AACb,UAAMC,KAAK,GAAGC,uBAAWC,GAAX,CAAeN,SAAf,EAA0BG,IAA1B,CAAd;;AACA,UAAI,OAAOC,KAAP,KAAiB,WAArB,EAAkC;AAC9B;AACH;;AAED,UAAMG,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAApB;;AACA,UAAMM,SAAS,GAAG,KAAI,CAACjB,cAAL,CAAoBc,WAApB,CAAlB;;AACAF,6BAAWM,GAAX,CAAeX,SAAf,EAA0BG,IAA1B,EAAgCO,SAAhC;AACH,KAVL;AAWA,WAAOV,SAAP;AACH,G;;SAEDY,O,GAAA,iBAAQf,GAAR,EAAkB;AAAA;;AACd,QAAI,CAAC,KAAKN,QAAV,EAAoB,OAAOM,GAAP;AAEpBA,IAAAA,GAAG,GAAG,qBAAUA,GAAV,CAAN;AAGA;AACR;AACA;AACA;;AACQ,QAAMC,WAAW,GAAGD,GAAG,CAACE,YAAxB;AACA,WAAOF,GAAG,CAACE,YAAX;AAEA,QAAMC,SAAS,GAAG,iBAAMH,GAAN,CAAlB;;AACA,QAAIC,WAAJ,EAAiB;AACbE,MAAAA,SAAS,CAACD,YAAV,GAAyBD,WAAzB;AACH;;AAED,SAAKN,MAAL,CAAYS,cAAZ,CACKC,OADL,CACa,UAAAC,IAAI,EAAI;AACb,UAAMC,KAAK,GAAGC,uBAAWC,GAAX,CAAeN,SAAf,EAA0BG,IAA1B,CAAd;;AACA,UAAI,OAAOC,KAAP,KAAiB,WAArB,EAAkC;AAC9B;AACH;;AACD,UAAMS,SAAS,GAAG,MAAI,CAAClB,cAAL,CAAoBS,KAApB,CAAlB;;AACA,UAAMU,eAAe,GAAGN,IAAI,CAACO,KAAL,CAAWF,SAAX,CAAxB;;AACAR,6BAAWM,GAAX,CAAeX,SAAf,EAA0BG,IAA1B,EAAgCW,eAAhC;AACH,KATL;AAUA,WAAOd,SAAP;AACH,G;;;;;;;AAGE,SAASgB,aAAT,CAAuBzB,QAAvB,EAAsCC,MAAtC,EAAiE;AACpE,SAAO,IAAIF,OAAJ,CAAYC,QAAZ,EAAsBC,MAAtB,CAAP;AACH","sourcesContent":["/**\n * handle the en/decryption of documents-data\n * TODO atm we have the crypter inside of rxdb core.\n * Instead all should be moved to the encryption plugin\n * and work via plugin hooks.\n */\n\nimport objectPath from 'object-path';\nimport {\n    clone,\n    flatClone,\n    pluginMissing\n} from './util';\n\nimport {\n    RxSchema\n} from './rx-schema';\n\nexport class Crypter {\n    constructor(\n        public password: any,\n        public schema: RxSchema\n    ) { }\n\n    /**\n     * encrypt a given string.\n     * @overwritten by plugin (optional)\n     */\n    public _encryptString(_value: string): string {\n        throw pluginMissing('encryption');\n    }\n\n    /**\n     * decrypt a given string.\n     * @overwritten by plugin (optional)\n     */\n    public _decryptString(_value: string): string {\n        throw pluginMissing('encryption');\n    }\n\n    encrypt(obj: any) {\n        if (!this.password) {\n            return obj;\n        }\n\n        obj = flatClone(obj);\n\n\n        /**\n         * Extract attachments because deep-cloning\n         * Buffer or Blob does not work\n         */\n        const attachments = obj._attachments;\n        delete obj._attachments;\n\n        const clonedObj = clone(obj);\n        if (attachments) {\n            clonedObj._attachments = attachments;\n        }\n\n        this.schema.encryptedPaths\n            .forEach(path => {\n                const value = objectPath.get(clonedObj, path);\n                if (typeof value === 'undefined') {\n                    return;\n                }\n\n                const stringValue = JSON.stringify(value);\n                const encrypted = this._encryptString(stringValue);\n                objectPath.set(clonedObj, path, encrypted);\n            });\n        return clonedObj;\n    }\n\n    decrypt(obj: any) {\n        if (!this.password) return obj;\n\n        obj = flatClone(obj);\n\n\n        /**\n         * Extract attachments because deep-cloning\n         * Buffer or Blob does not work\n         */\n        const attachments = obj._attachments;\n        delete obj._attachments;\n\n        const clonedObj = clone(obj);\n        if (attachments) {\n            clonedObj._attachments = attachments;\n        }\n\n        this.schema.encryptedPaths\n            .forEach(path => {\n                const value = objectPath.get(clonedObj, path);\n                if (typeof value === 'undefined') {\n                    return;\n                }\n                const decrypted = this._decryptString(value);\n                const decryptedParsed = JSON.parse(decrypted);\n                objectPath.set(clonedObj, path, decryptedParsed);\n            });\n        return clonedObj;\n    }\n}\n\nexport function createCrypter(password: any, schema: RxSchema): Crypter {\n    return new Crypter(password, schema);\n}\n"],"file":"crypter.js"}