{"version":3,"sources":["../../src/crypter.ts"],"names":[],"mappings":";;;;;;;;;;AAOA;;AACA;;AARA;AACA;AACA;AACA;AACA;AACA;IAaa,O;AACT,mBACW,QADX,EAEW,MAFX,EAGE;AAAA,SAFS,QAET,GAFS,QAET;AAAA,SADS,MACT,GADS,MACT;AAAG;AAEL;AACJ;AACA;AACA;;;;;SACW,c,GAAP,wBAAsB,MAAtB,EAA8C;AAC1C,UAAM,yBAAc,YAAd,CAAN;AACH;AAED;AACJ;AACA;AACA;;;SACW,c,GAAP,wBAAsB,MAAtB,EAA8C;AAC1C,UAAM,yBAAc,YAAd,CAAN;AACH,G;;SAED,O,GAAA,iBAAQ,GAAR,EAAkB;AAAA;;AACd,QAAI,CAAC,KAAK,QAAV,EAAoB;AAChB,aAAO,GAAP;AACH;;AAED,IAAA,GAAG,GAAG,qBAAU,GAAV,CAAN;AAGA;AACR;AACA;AACA;;AACQ,QAAM,WAAW,GAAG,GAAG,CAAC,YAAxB;AACA,WAAO,GAAG,CAAC,YAAX;AAEA,QAAM,SAAS,GAAG,iBAAM,GAAN,CAAlB;;AACA,QAAI,WAAJ,EAAiB;AACb,MAAA,SAAS,CAAC,YAAV,GAAyB,WAAzB;AACH;;AAED,SAAK,MAAL,CAAY,cAAZ,CACK,OADL,CACa,UAAA,IAAI,EAAI;AACb,UAAM,KAAK,GAAG,uBAAW,GAAX,CAAe,SAAf,EAA0B,IAA1B,CAAd;;AACA,UAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC;AAC9B;AACH;;AAED,UAAM,WAAW,GAAG,IAAI,CAAC,SAAL,CAAe,KAAf,CAApB;;AACA,UAAM,SAAS,GAAG,KAAI,CAAC,cAAL,CAAoB,WAApB,CAAlB;;AACA,6BAAW,GAAX,CAAe,SAAf,EAA0B,IAA1B,EAAgC,SAAhC;AACH,KAVL;AAWA,WAAO,SAAP;AACH,G;;SAED,O,GAAA,iBAAQ,GAAR,EAAkB;AAAA;;AACd,QAAI,CAAC,KAAK,QAAV,EAAoB,OAAO,GAAP;AAEpB,IAAA,GAAG,GAAG,qBAAU,GAAV,CAAN;AAGA;AACR;AACA;AACA;;AACQ,QAAM,WAAW,GAAG,GAAG,CAAC,YAAxB;AACA,WAAO,GAAG,CAAC,YAAX;AAEA,QAAM,SAAS,GAAG,iBAAM,GAAN,CAAlB;;AACA,QAAI,WAAJ,EAAiB;AACb,MAAA,SAAS,CAAC,YAAV,GAAyB,WAAzB;AACH;;AAED,SAAK,MAAL,CAAY,cAAZ,CACK,OADL,CACa,UAAA,IAAI,EAAI;AACb,UAAM,KAAK,GAAG,uBAAW,GAAX,CAAe,SAAf,EAA0B,IAA1B,CAAd;;AACA,UAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC;AAC9B;AACH;;AACD,UAAM,SAAS,GAAG,MAAI,CAAC,cAAL,CAAoB,KAApB,CAAlB;;AACA,UAAM,eAAe,GAAG,IAAI,CAAC,KAAL,CAAW,SAAX,CAAxB;;AACA,6BAAW,GAAX,CAAe,SAAf,EAA0B,IAA1B,EAAgC,eAAhC;AACH,KATL;AAUA,WAAO,SAAP;AACH,G;;;;;;;AAGE,SAAS,aAAT,CAAuB,QAAvB,EAAsC,MAAtC,EAAiE;AACpE,SAAO,IAAI,OAAJ,CAAY,QAAZ,EAAsB,MAAtB,CAAP;AACH","file":"crypter.js","sourcesContent":["/**\n * handle the en/decryption of documents-data\n * TODO atm we have the crypter inside of rxdb core.\n * Instead all should be moved to the encryption plugin\n * and work via plugin hooks.\n */\n\nimport objectPath from 'object-path';\nimport {\n    clone,\n    flatClone,\n    pluginMissing\n} from './util';\n\nimport {\n    RxSchema\n} from './rx-schema';\n\nexport class Crypter {\n    constructor(\n        public password: any,\n        public schema: RxSchema\n    ) { }\n\n    /**\n     * encrypt a given string.\n     * @overwritten by plugin (optional)\n     */\n    public _encryptString(_value: string): string {\n        throw pluginMissing('encryption');\n    }\n\n    /**\n     * decrypt a given string.\n     * @overwritten by plugin (optional)\n     */\n    public _decryptString(_value: string): string {\n        throw pluginMissing('encryption');\n    }\n\n    encrypt(obj: any) {\n        if (!this.password) {\n            return obj;\n        }\n\n        obj = flatClone(obj);\n\n\n        /**\n         * Extract attachments because deep-cloning\n         * Buffer or Blob does not work\n         */\n        const attachments = obj._attachments;\n        delete obj._attachments;\n\n        const clonedObj = clone(obj);\n        if (attachments) {\n            clonedObj._attachments = attachments;\n        }\n\n        this.schema.encryptedPaths\n            .forEach(path => {\n                const value = objectPath.get(clonedObj, path);\n                if (typeof value === 'undefined') {\n                    return;\n                }\n\n                const stringValue = JSON.stringify(value);\n                const encrypted = this._encryptString(stringValue);\n                objectPath.set(clonedObj, path, encrypted);\n            });\n        return clonedObj;\n    }\n\n    decrypt(obj: any) {\n        if (!this.password) return obj;\n\n        obj = flatClone(obj);\n\n\n        /**\n         * Extract attachments because deep-cloning\n         * Buffer or Blob does not work\n         */\n        const attachments = obj._attachments;\n        delete obj._attachments;\n\n        const clonedObj = clone(obj);\n        if (attachments) {\n            clonedObj._attachments = attachments;\n        }\n\n        this.schema.encryptedPaths\n            .forEach(path => {\n                const value = objectPath.get(clonedObj, path);\n                if (typeof value === 'undefined') {\n                    return;\n                }\n                const decrypted = this._decryptString(value);\n                const decryptedParsed = JSON.parse(decrypted);\n                objectPath.set(clonedObj, path, decryptedParsed);\n            });\n        return clonedObj;\n    }\n}\n\nexport function createCrypter(password: any, schema: RxSchema): Crypter {\n    return new Crypter(password, schema);\n}\n"]}