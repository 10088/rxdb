{"version":3,"file":"rx-storage-replication.js","names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","getAssumedMasterState","docIds","input","metaInstance","findDocumentsById","map","docId","useId","getComposedPrimaryKeyOfDocumentData","RX_REPLICATION_META_INSTANCE_SCHEMA","itemId","replicationIdentifier","checkpointKey","isCheckpoint","metaDocs","ret","Object","values","forEach","metaDoc","docData","data","metaDocument","awaitRxStorageReplicationIdle","awaitRxStorageReplicationFirstInSync","streamQueue","down","up","Promise","all","firstValueFrom","combineLatest","firstSyncDone","pipe","filter","setCheckpoint","direction","checkpointDoc","checkpoint","lastCheckpoint","canceled","getValue","JSON","stringify","newDoc","id","_deleted","_attachments","_meta","lwt","now","_rev","getDefaultRevision","createRevision","bulkWrite","previous","document","resolveConflictError","conflictHandler","error","status","Error","documentInDb","ensureNotFalsy","writeRow","undefined","assumedMasterState","newDocumentState","realMasterState","conflictHandlerOutput","resolvedDoc","assign","documentData","flatClone","getLastCheckpointDoc","checkpointDocId","checkpointResult","FROM_FORK_FLAG_SUFFIX","fillWithDefaultSettings","primaryKey","key","fields","separator","type","version","additionalProperties","properties","minLength","maxLength","required","replicateRxStorageInstance","primaryPath","getPrimaryFieldOfPrimaryKey","masterInstance","schema","getCheckpointKey","BehaviorSubject","PROMISE_RESOLVE_VOID","startReplicationDownstream","startReplicationUpstream","downstreamSyncOnce","checkpointState","writeToChildQueue","next","lastCheckpointDoc","done","getChangedDocumentsSince","bulkSize","downResult","length","useDownDocs","r","lastOfArray","downDocsById","d","forkInstance","currentForkState","useMetaWriteRows","writeRowsToFork","writeRowsToMeta","forkState","masterState","assumedMaster","push","getMetaWriteRow","forkWriteResult","keys","success","inQueueCount","addRunAgain","sub","changeStream","subscribe","unsubscribe","upstreamSyncOnce","writeToMasterQueue","hadConflictWrites","upResult","useUpDocs","writeRowsToMaster","doc","useDoc","flatCloneDocWithMeta","assumedMasterDoc","parseRevision","height","masterWriteResult","conflictWriteFork","conflictWriteMeta","entries","resolved","useMetaWrites","useWriteRowsToMeta","waitBeforePersist","hash","fastUnsecureHash","identifier","storage","name","databaseName","collectionName","join","newMasterDocState","newMeta","defaultConflictHandler","i","_context"],"sources":["../../src/rx-storage-replication.ts"],"sourcesContent":["/**\n * Replicates two RxStorageInstances\n * with each other.\n * \n * Compared to the 'normal' replication plugins,\n * this one is made for internal use where:\n * - No permission handling is needed.\n * - It is made so that the write amount on the master is less but might increase on the child.\n * - It does not have to be easy to implement a compatible backend.\n *   Here we use another RxStorageImplementation as replication goal\n *   so it has to exactly behave like the RxStorage interface defines.\n * \n * This is made to be used internally by plugins\n * to get a really fast replication performance.\n * \n * The replication works like git, where the fork contains all new writes\n * and must be merged with the master before it can push it's new state to the master.\n */\n\nimport {\n    BehaviorSubject,\n    combineLatest,\n    filter,\n    firstValueFrom\n} from 'rxjs';\nimport {\n    fillWithDefaultSettings,\n    getComposedPrimaryKeyOfDocumentData,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper';\nimport { flatCloneDocWithMeta } from './rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowById,\n    RxConflictHandler,\n    RxConflictHandlerInput,\n    RxConflictHandlerOutput,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationDirection,\n    RxStorageReplicationMeta\n} from './types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    fastUnsecureHash,\n    flatClone,\n    getDefaultRevision,\n    lastOfArray,\n    now,\n    parseRevision,\n    PROMISE_RESOLVE_VOID\n} from './util';\n\n\n/**\n * Flags that a document state was written to the master\n * by the upstream from the fork.\n * Used in the ._meta of the document data that is stored at the master\n * and contains only the revision.\n * We need this to detect if the document state was written from the upstream\n * so that it is not again replicated to the downstream.\n * TODO instead of doing that, we should have a way to 'mark' bulkWrite()\n * calls so that the emitted events can be detected as being from the upstream.\n */\nconst FROM_FORK_FLAG_SUFFIX = '-fork';\n\n\nexport const RX_REPLICATION_META_INSTANCE_SCHEMA: RxJsonSchema<RxDocumentData<RxStorageReplicationMeta>> = fillWithDefaultSettings({\n    primaryKey: {\n        key: 'id',\n        fields: [\n            'replicationIdentifier',\n            'itemId',\n            'isCheckpoint'\n        ],\n        separator: '|'\n    },\n    type: 'object',\n    version: 0,\n    additionalProperties: false,\n    properties: {\n        id: {\n            type: 'string',\n            minLength: 1,\n            maxLength: 100\n        },\n        replicationIdentifier: {\n            type: 'string'\n        },\n        isCheckpoint: {\n            type: 'string',\n            enum: [\n                '0',\n                '1'\n            ],\n            maxLength: 1\n        },\n        itemId: {\n            type: 'string'\n        },\n        data: {\n            type: 'object',\n            additionalProperties: true\n        }\n    },\n    required: [\n        'id',\n        'replicationIdentifier',\n        'isCheckpoint',\n        'itemId',\n        'data'\n    ]\n});\n\nexport function replicateRxStorageInstance<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): RxStorageInstanceReplicationState<RxDocType> {\n    const state: RxStorageInstanceReplicationState<RxDocType> = {\n        primaryPath: getPrimaryFieldOfPrimaryKey(input.masterInstance.schema.primaryKey),\n        input,\n        checkpointKey: getCheckpointKey(input),\n        canceled: new BehaviorSubject<boolean>(false),\n        firstSyncDone: {\n            down: new BehaviorSubject<boolean>(false),\n            up: new BehaviorSubject<boolean>(false)\n        },\n        lastCheckpoint: {},\n        streamQueue: {\n            down: PROMISE_RESOLVE_VOID,\n            up: PROMISE_RESOLVE_VOID\n        }\n    };\n\n    startReplicationDownstream(state);\n    startReplicationUpstream(state);\n    return state;\n}\n\n\n/**\n * Writes all documents from the master to the fork.\n */\nexport function startReplicationDownstream<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    let inQueueCount = 0;\n    state.streamQueue.down = state.streamQueue.down.then(() => downstreamSyncOnce());\n\n    function addRunAgain() {\n        if (inQueueCount > 2) {\n            return;\n        }\n        inQueueCount = inQueueCount + 1;\n        state.streamQueue.down = state.streamQueue.down\n            .then(() => downstreamSyncOnce())\n            .catch(() => { })\n            .then(() => inQueueCount = inQueueCount - 1);\n    }\n\n    /**\n     * If a write on the master happens, we have to trigger the downstream.\n     */\n    const sub = state.input.masterInstance.changeStream().subscribe(() => {\n        addRunAgain();\n    });\n    firstValueFrom(\n        state.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    /**\n     * For faster performance, we directly start each write\n     * and then await all writes at the end.\n     */\n    let writeToChildQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n\n    async function downstreamSyncOnce() {\n        if (state.canceled.getValue()) {\n            return;\n        }\n        const checkpointState = await getLastCheckpointDoc(state, 'down');\n        const lastCheckpointDoc = checkpointState ? checkpointState.checkpointDoc : undefined;\n\n        let done = false;\n        while (!done && !state.canceled.getValue()) {\n            const downResult = await state.input.masterInstance.getChangedDocumentsSince(\n                state.input.bulkSize,\n                state.lastCheckpoint.down\n            );\n            if (downResult.length === 0) {\n                done = true;\n                continue;\n            }\n\n            const useDownDocs = downResult.map(r => r.document);\n            state.lastCheckpoint.down = lastOfArray(downResult).checkpoint;\n            writeToChildQueue = writeToChildQueue.then((async () => {\n                const downDocsById: RxDocumentDataById<RxDocType> = {};\n                const docIds = useDownDocs\n                    .map(d => {\n                        const id = (d as any)[state.primaryPath];\n                        downDocsById[id] = d;\n                        return id;\n                    });\n\n                const [\n                    currentForkState,\n                    assumedMasterState\n                ] = await Promise.all([\n                    state.input.forkInstance.findDocumentsById(docIds, true),\n                    getAssumedMasterState(\n                        state,\n                        docIds\n                    )\n                ]);\n\n                const writeRowsToFork: BulkWriteRow<RxDocType>[] = [];\n                const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n                const useMetaWriteRows: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n                docIds.forEach(docId => {\n                    const forkState: RxDocumentData<RxDocType> | undefined = currentForkState[docId];\n                    const masterState = downDocsById[docId];\n                    const assumedMaster = assumedMasterState[docId];\n\n                    if (\n                        (\n                            forkState && assumedMaster &&\n                            assumedMaster.docData._rev !== forkState._rev\n                        ) ||\n                        (\n                            forkState && !assumedMaster\n                        )\n                    ) {\n                        /**\n                         * We have a non-upstream-replicated\n                         * local write to the fork.\n                         * This means we ignore the downstream of this document\n                         * because anyway the upstream will first resolve the conflict.\n                         */\n                        return;\n                    }\n\n                    if (\n                        forkState &&\n                        forkState._rev === masterState._rev\n                    ) {\n                        /**\n                         * Document states are exactly equal.\n                         * This can happen when the replication is shut down\n                         * unexpected like when the user goes offline.\n                         * \n                         * Only when the assumedMaster is differnt from the forkState,\n                         * we have to patch the document in the meta instance.\n                         */\n                        if (\n                            !assumedMaster ||\n                            assumedMaster.docData._rev !== forkState._rev\n                        ) {\n                            useMetaWriteRows.push(\n                                getMetaWriteRow(\n                                    state,\n                                    forkState,\n                                    assumedMaster ? assumedMaster.metaDocument : undefined\n                                )\n                            );\n                        }\n                        return;\n                    }\n\n                    /**\n                     * All other master states need to be written to the forkInstance\n                     * and metaInstance.\n                     */\n                    writeRowsToFork.push({\n                        previous: forkState,\n                        document: masterState\n                    });\n                    writeRowsToMeta[docId] = getMetaWriteRow(\n                        state,\n                        masterState,\n                        assumedMaster ? assumedMaster.metaDocument : undefined\n                    );\n                });\n\n                if (writeRowsToFork.length > 0) {\n                    const forkWriteResult = await state.input.forkInstance.bulkWrite(writeRowsToFork);\n                    Object.keys(forkWriteResult.success).forEach((docId) => {\n                        useMetaWriteRows.push(writeRowsToMeta[docId]);\n                    });\n                }\n                if (useMetaWriteRows.length > 0) {\n                    await state.input.metaInstance.bulkWrite(useMetaWriteRows);\n                }\n            }));\n        }\n        await writeToChildQueue;\n\n        if (!state.firstSyncDone.down.getValue()) {\n            state.firstSyncDone.down.next(true);\n        }\n\n        /**\n         * Write the new checkpoint\n         */\n        await setCheckpoint(\n            state,\n            'down',\n            lastCheckpointDoc\n        );\n    }\n}\n\n\n/**\n * Writes all document changes from the client to the master.\n */\nexport function startReplicationUpstream<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    let writeToMasterQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n    let inQueueCount = 0;\n    state.streamQueue.up = state.streamQueue.up.then(() => upstreamSyncOnce());\n\n    function addRunAgain() {\n        if (inQueueCount > 2) {\n            return state.streamQueue.up;\n        }\n        inQueueCount = inQueueCount + 1;\n        state.streamQueue.up = state.streamQueue.up\n            .then(() => upstreamSyncOnce())\n            .catch(() => { })\n            .then(() => inQueueCount = inQueueCount - 1);\n        return state.streamQueue.up;\n    }\n    const sub = state.input.forkInstance.changeStream().subscribe(async () => {\n        if (state.input.waitBeforePersist) {\n            await state.input.waitBeforePersist();\n        }\n        addRunAgain();\n    });\n    firstValueFrom(\n        state.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    async function upstreamSyncOnce() {\n        if (state.canceled.getValue()) {\n            return;\n        }\n\n        const checkpointState = await getLastCheckpointDoc(state, 'up');\n        const lastCheckpointDoc = checkpointState ? checkpointState.checkpointDoc : undefined;\n\n        /**\n         * If this goes to true,\n         * it means that we have to do a new write to the\n         * fork instance to resolve a conflict.\n         * In that case, state.firstSyncDone.up\n         * must not be set to true, because\n         * an additional upstream cycle must be used\n         * to push the resolved conflict state.\n         */\n        let hadConflictWrites = false;\n\n        let done = false;\n        while (!done && !state.canceled.getValue()) {\n            const upResult = await state.input.forkInstance.getChangedDocumentsSince(\n                state.input.bulkSize,\n                state.lastCheckpoint.up\n            );\n            if (\n                upResult.length === 0 ||\n                state.canceled.getValue()\n            ) {\n                done = true;\n                continue;\n            }\n\n            state.lastCheckpoint.up = lastOfArray(upResult).checkpoint;\n            writeToMasterQueue = writeToMasterQueue.then((async () => {\n\n                // used to not have infinity loop during development\n                // that cannot be exited via Ctrl+C\n                // await promiseWait(0);\n\n                if (state.canceled.getValue()) {\n                    return;\n                }\n\n                const useUpDocs = upResult.map(r => r.document);\n                if (useUpDocs.length === 0) {\n                    return;\n                }\n\n                const assumedMasterState = await getAssumedMasterState(\n                    state,\n                    useUpDocs.map(d => (d as any)[state.primaryPath])\n                );\n                const writeRowsToMaster: BulkWriteRow<RxDocType>[] = [];\n                const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n\n                useUpDocs.forEach(doc => {\n                    const docId: string = (doc as any)[state.primaryPath];\n                    const useDoc = flatCloneDocWithMeta(doc);\n                    useDoc._meta[state.checkpointKey + FROM_FORK_FLAG_SUFFIX] = useDoc._rev;\n                    useDoc._meta.lwt = now();\n\n                    const assumedMasterDoc = assumedMasterState[docId];\n\n                    /**\n                     * If the master state is equal to the\n                     * fork state, we can assume that the document state is already\n                     * replicated.\n                     */\n                    if (\n                        assumedMasterDoc &&\n                        assumedMasterDoc.docData._rev === useDoc._rev\n                    ) {\n                        return;\n                    }\n\n                    /**\n                     * If the assumed master state has a heigher revision height\n                     * then the current document state,\n                     * we can assume that a downstream replication has happend in between\n                     * and we can drop this upstream replication.\n                     * \n                     * TODO there is no real reason why this should ever happen,\n                     * however the replication did not work on the PouchDB RxStorage\n                     * without this fix.\n                     */\n                    if (\n                        assumedMasterDoc &&\n                        parseRevision(assumedMasterDoc.docData._rev).height >= parseRevision(useDoc._rev).height\n                    ) {\n                        return;\n                    }\n\n                    writeRowsToMaster.push({\n                        previous: assumedMasterDoc ? assumedMasterDoc.docData : undefined,\n                        document: useDoc\n                    });\n                    writeRowsToMeta[docId] = getMetaWriteRow(\n                        state,\n                        useDoc,\n                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\n                    );\n                });\n\n                if (writeRowsToMaster.length === 0) {\n                    return;\n                }\n                const masterWriteResult = await state.input.masterInstance.bulkWrite(writeRowsToMaster);\n\n                const useWriteRowsToMeta: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n                Object.keys(masterWriteResult.success).forEach(docId => {\n                    useWriteRowsToMeta.push(writeRowsToMeta[docId]);\n                });\n                if (useWriteRowsToMeta.length > 0) {\n                    await state.input.metaInstance.bulkWrite(useWriteRowsToMeta);\n                    // TODO what happens when we have conflicts here?\n                }\n\n                /**\n                 * Resolve conflicts by writing a new document\n                 * state to the fork instance and the 'real' master state\n                 * to the meta instance.\n                 * Non-409 errors will be detected by resolveConflictError()\n                 */\n                if (Object.keys(masterWriteResult.error).length > 0) {\n                    const conflictWriteFork: BulkWriteRow<RxDocType>[] = [];\n                    const conflictWriteMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n                    await Promise.all(\n                        Object\n                            .entries(masterWriteResult.error)\n                            .map(async ([docId, error]) => {\n                                const resolved = await resolveConflictError(\n                                    state.input.conflictHandler,\n                                    error\n                                );\n                                if (resolved) {\n                                    conflictWriteFork.push({\n                                        previous: error.writeRow.document,\n                                        document: resolved\n                                    });\n                                }\n                                const assumedMasterDoc = assumedMasterState[docId];\n                                conflictWriteMeta[docId] = getMetaWriteRow(\n                                    state,\n                                    ensureNotFalsy(error.documentInDb),\n                                    assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\n                                );\n                            })\n                    );\n\n                    if (conflictWriteFork.length > 0) {\n                        hadConflictWrites = true;\n\n                        const forkWriteResult = await state.input.forkInstance.bulkWrite(conflictWriteFork);\n                        /**\n                         * Errors in the forkWriteResult must not be handled\n                         * because they have been caused by a write to the forkInstance\n                         * in between which will anyway trigger a new upstream cycle\n                         * that will then resolved the conflict again.\n                         */\n                        const useMetaWrites: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n                        Object\n                            .keys(forkWriteResult.success)\n                            .forEach((docId) => {\n                                useMetaWrites.push(\n                                    conflictWriteMeta[docId]\n                                );\n                            });\n                        if (useMetaWrites.length > 0) {\n                            await state.input.metaInstance.bulkWrite(useMetaWrites);\n                        }\n                        // TODO what to do with conflicts while writing to the metaInstance?\n                    }\n                }\n            }));\n        }\n\n        await writeToMasterQueue;\n\n        await setCheckpoint(\n            state,\n            'up',\n            lastCheckpointDoc\n        );\n        if (\n            !hadConflictWrites &&\n            !state.firstSyncDone.up.getValue()\n        ) {\n            state.firstSyncDone.up.next(true);\n        }\n    }\n}\n\n\nexport async function getLastCheckpointDoc<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection\n): Promise<undefined | {\n    checkpoint: any;\n    checkpointDoc?: RxDocumentData<RxStorageReplicationMeta>;\n}> {\n    const checkpointDocId = getComposedPrimaryKeyOfDocumentData(\n        RX_REPLICATION_META_INSTANCE_SCHEMA,\n        {\n            isCheckpoint: '1',\n            itemId: direction,\n            replicationIdentifier: state.checkpointKey\n        }\n    );\n    const checkpointResult = await state.input.metaInstance.findDocumentsById(\n        [\n            checkpointDocId\n        ],\n        false\n    );\n\n    const checkpointDoc = checkpointResult[checkpointDocId];\n    if (checkpointDoc) {\n        return {\n            checkpoint: checkpointDoc.data,\n            checkpointDoc\n        };\n    } else {\n        return undefined;\n    }\n}\n\n\nexport function getCheckpointKey<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): string {\n    const hash = fastUnsecureHash([\n        input.identifier,\n        input.masterInstance.storage.name,\n        input.masterInstance.databaseName,\n        input.masterInstance.collectionName,\n        input.forkInstance.storage.name,\n        input.forkInstance.databaseName,\n        input.forkInstance.collectionName\n    ].join('||'));\n    return 'rx-storage-replication-' + hash;\n}\n\n\n/**\n * Resolves a conflict error.\n * Returns the resolved document that must be written to the fork.\n * Then the new document state can be pushed upstream.\n * If document is not in conflict, returns undefined.\n * If error is non-409, it throws an error.\n * Conflicts are only solved in the upstream, never in the downstream.\n */\nexport async function resolveConflictError<RxDocType>(\n    conflictHandler: RxConflictHandler<RxDocType>,\n    error: RxStorageBulkWriteError<RxDocType>\n): Promise<RxDocumentData<RxDocType> | undefined> {\n    if (error.status !== 409) {\n        /**\n         * If this ever happens,\n         * make a PR with a unit test to reproduce it.\n         */\n        throw new Error('Non conflict error');\n    }\n    const documentInDb = ensureNotFalsy(error.documentInDb);\n    if (documentInDb._rev === error.writeRow.document._rev) {\n        /**\n         * Documents are equal,\n         * so this is not a conflict -> do nothing.\n         */\n        return undefined;\n    } else {\n        /**\n         * We have a conflict, resolve it!\n         */\n        const conflictHandlerOutput = await conflictHandler({\n            assumedMasterState: error.writeRow.previous,\n            newDocumentState: error.writeRow.document,\n            realMasterState: documentInDb\n        }, 'rx-storage-replication');\n\n        const resolvedDoc: RxDocumentData<RxDocType> = Object.assign(\n            {},\n            conflictHandlerOutput.documentData,\n            {\n                /**\n                 * Because the resolved conflict is written to the fork,\n                 * we have to keep/update the forks _meta data, not the masters.\n                 */\n                _meta: flatClone(error.writeRow.document._meta),\n                _rev: getDefaultRevision(),\n                _attachments: flatClone(error.writeRow.document._attachments)\n            }\n        );\n        resolvedDoc._meta.lwt = now();\n        resolvedDoc._rev = createRevision(resolvedDoc, error.writeRow.document);\n        return resolvedDoc;\n    }\n}\n\n\nexport async function setCheckpoint<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    direction: RxStorageReplicationDirection,\n    checkpointDoc?: RxDocumentData<RxStorageReplicationMeta>\n) {\n    const checkpoint = state.lastCheckpoint[direction];\n    if (\n        checkpoint &&\n        /**\n         * If the replication is already canceled,\n         * we do not write a checkpoint\n         * because that could mean we write a checkpoint\n         * for data that has been fetched from the master\n         * but not been written to the child.\n         */\n        !state.canceled.getValue() &&\n        /**\n         * Only write checkpoint if it is different from before\n         * to have less writes to the storage.\n         */\n        (\n            !checkpointDoc ||\n            JSON.stringify(checkpointDoc.data) !== JSON.stringify(checkpoint)\n        )\n    ) {\n        const newDoc: RxDocumentData<RxStorageReplicationMeta> = {\n            id: '',\n            isCheckpoint: '1',\n            itemId: direction,\n            replicationIdentifier: state.checkpointKey,\n            _deleted: false,\n            _attachments: {},\n            data: checkpoint,\n            _meta: {\n                lwt: now()\n            },\n            _rev: getDefaultRevision()\n        };\n        newDoc.id = getComposedPrimaryKeyOfDocumentData(\n            RX_REPLICATION_META_INSTANCE_SCHEMA,\n            newDoc\n        );\n        newDoc._rev = createRevision(newDoc, checkpointDoc);\n        await state.input.metaInstance.bulkWrite([{\n            previous: checkpointDoc,\n            document: newDoc\n        }]);\n    }\n}\n\n\nexport async function awaitRxStorageReplicationFirstInSync(\n    state: RxStorageInstanceReplicationState<any>\n) {\n    return firstValueFrom(\n        combineLatest([\n            state.firstSyncDone.down.pipe(\n                filter(v => !!v)\n            ),\n            state.firstSyncDone.up.pipe(\n                filter(v => !!v)\n            )\n        ])\n    );\n}\n\nexport async function awaitRxStorageReplicationIdle(\n    state: RxStorageInstanceReplicationState<any>\n) {\n    await awaitRxStorageReplicationFirstInSync(state);\n    while (true) {\n        const { down, up } = state.streamQueue;\n        await Promise.all([\n            up,\n            down\n        ]);\n        /**\n         * If the Promises have not been reasigned\n         * after awaiting them, we know that the replication\n         * is in idle state at this point in time.\n         */\n        if (\n            down === state.streamQueue.down &&\n            up === state.streamQueue.up\n        ) {\n            return;\n        }\n    }\n}\n\nexport async function getAssumedMasterState<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    docIds: string[]\n): Promise<{\n    [docId: string]: {\n        docData: RxDocumentData<RxDocType>;\n        metaDocument: RxDocumentData<RxStorageReplicationMeta>\n    }\n}> {\n    const metaDocs = await state.input.metaInstance.findDocumentsById(\n        docIds.map(docId => {\n            const useId = getComposedPrimaryKeyOfDocumentData(\n                RX_REPLICATION_META_INSTANCE_SCHEMA,\n                {\n                    itemId: docId,\n                    replicationIdentifier: state.checkpointKey,\n                    isCheckpoint: '0'\n                }\n            );\n            return useId;\n        }),\n        true\n    );\n\n    const ret: {\n        [docId: string]: {\n            docData: RxDocumentData<RxDocType>;\n            metaDocument: RxDocumentData<RxStorageReplicationMeta>\n        }\n    } = {};\n    Object\n        .values(metaDocs)\n        .forEach((metaDoc) => {\n            ret[metaDoc.itemId] = {\n                docData: metaDoc.data,\n                metaDocument: metaDoc\n            };\n        });\n\n    return ret;\n}\n\n\nexport function getMetaWriteRow<RxDocType>(\n    state: RxStorageInstanceReplicationState<RxDocType>,\n    newMasterDocState: RxDocumentData<RxDocType>,\n    previous?: RxDocumentData<RxStorageReplicationMeta>\n): BulkWriteRow<RxStorageReplicationMeta> {\n    const docId: string = (newMasterDocState as any)[state.primaryPath];\n    const newMeta: RxDocumentData<RxStorageReplicationMeta> = previous ? flatCloneDocWithMeta(\n        previous\n    ) : {\n        id: '',\n        replicationIdentifier: state.checkpointKey,\n        isCheckpoint: '0',\n        itemId: docId,\n        data: newMasterDocState,\n        _attachments: {},\n        _deleted: false,\n        _rev: getDefaultRevision(),\n        _meta: {\n            lwt: 0\n        }\n    };\n    newMeta.data = newMasterDocState;\n    newMeta._rev = createRevision(newMeta, previous);\n    newMeta._meta.lwt = now();\n    newMeta.id = getComposedPrimaryKeyOfDocumentData(\n        RX_REPLICATION_META_INSTANCE_SCHEMA,\n        newMeta\n    );\n    return {\n        previous,\n        document: newMeta\n    };\n}\n\nexport const defaultConflictHandler: RxConflictHandler<any> = async function (\n    i: RxConflictHandlerInput<any>,\n    _context: string\n): Promise<RxConflictHandlerOutput<any>> {\n    /**\n     * The default conflict handler will always\n     * drop the fork state and use the master state instead.\n     */\n    return {\n        documentData: i.assumedMasterState\n    };\n}\n"],"mappings":"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"}