{"version":3,"file":"non-worker.js","names":["removeWorkerRef","instance","workerState","getFromMapOrThrow","WORKER_BY_INSTANCE","storage","refs","size","workerPromise","then","worker","Thread","terminate","Map","RxStorageWorker","settings","statics","name","createStorageInstance","params","get","spawn","Worker","workerInput","Set","set","instanceId","RxStorageInstanceWorker","databaseName","collectionName","schema","rxStorage","options","add","internals","changes$","Subject","subs","closed","push","changeStream","subscribe","ev","next","bulkWrite","documentWrites","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","asObservable","cleanup","minDeletedTime","close","forEach","sub","unsubscribe","remove","getRxStorageWorker"],"sources":["../../../../src/plugins/worker/non-worker.ts"],"sourcesContent":["import { Observable, Subject, Subscription } from 'rxjs';\nimport {\n    spawn,\n    Worker,\n    Thread\n} from 'threads';\nimport type {\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxDocumentData,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageQueryResult,\n    EventBulk,\n    RxStorageStatics,\n    RxDocumentDataById\n} from '../../types';\nimport { getFromMapOrThrow } from '../../util';\nimport { InWorkerStorage } from './in-worker';\n\ndeclare type WorkerStorageInternals = {\n    rxStorage: RxStorageWorker;\n    instanceId: number;\n    worker: InWorkerStorage;\n}\ndeclare type RxStorageWorkerSettings = {\n    statics: RxStorageStatics;\n    workerInput: any;\n}\n\n\n/**\n * We have no way to detect if a worker is no longer needed.\n * So we create the worker process on the first RxStorageInstance\n * and have to close it again of no more RxStorageInstances are non-closed.\n */\nconst WORKER_BY_INSTANCE: Map<RxStorageWorker, {\n    workerPromise: Promise<InWorkerStorage>;\n    refs: Set<RxStorageInstanceWorker<any>>;\n}> = new Map();\nexport class RxStorageWorker implements RxStorage<WorkerStorageInternals, any> {\n    public name = 'worker';\n\n    constructor(\n        public readonly settings: RxStorageWorkerSettings,\n        public readonly statics: RxStorageStatics\n    ) { }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceWorker<RxDocType>> {\n\n\n        let workerState = WORKER_BY_INSTANCE.get(this);\n        if (!workerState) {\n            workerState = {\n                workerPromise: spawn<InWorkerStorage>(new Worker(this.settings.workerInput)) as any,\n                refs: new Set()\n            };\n            WORKER_BY_INSTANCE.set(this, workerState);\n        }\n\n\n        const worker = await workerState.workerPromise;\n        const instanceId = await worker.createStorageInstance(params);\n        const instance = new RxStorageInstanceWorker(\n            this,\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                rxStorage: this,\n                instanceId,\n                worker\n            },\n            params.options\n        );\n        workerState.refs.add(instance);\n\n        return instance;\n    }\n}\n\n\nexport class RxStorageInstanceWorker<RxDocType> implements RxStorageInstance<RxDocType, WorkerStorageInternals, any> {\n\n    /**\n     * threads.js uses observable-fns instead of rxjs\n     * so we have to transform it.\n     */\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private subs: Subscription[] = [];\n\n    private closed: boolean = false;\n\n    constructor(\n        public readonly storage: RxStorageWorker,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: WorkerStorageInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.subs.push(\n            this.internals.worker.changeStream(\n                this.internals.instanceId\n            ).subscribe(ev => this.changes$.next(ev as any))\n        );\n\n    }\n\n    bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.internals.worker.bulkWrite(\n            this.internals.instanceId,\n            documentWrites\n        );\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        return this.internals.worker.findDocumentsById(\n            this.internals.instanceId,\n            ids,\n            deleted\n        );\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.internals.worker.query(\n            this.internals.instanceId,\n            preparedQuery\n        );\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        return this.internals.worker.getAttachmentData(\n            this.internals.instanceId,\n            documentId,\n            attachmentId\n        );\n    }\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: any;\n    }[]> {\n        return this.internals.worker.getChangedDocumentsSince(\n            this.internals.instanceId,\n            limit,\n            checkpoint\n        );\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number) {\n        return this.internals.worker.cleanup(\n            this.internals.instanceId,\n            minDeletedTime\n        );\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        await this.internals.worker.close(\n            this.internals.instanceId\n        );\n        await removeWorkerRef(this);\n    }\n    async remove(): Promise<void> {\n        await this.internals.worker.remove(\n            this.internals.instanceId\n        );\n        this.closed = true;\n        await removeWorkerRef(this);\n    }\n}\n\nexport function getRxStorageWorker(\n    settings: RxStorageWorkerSettings\n): RxStorageWorker {\n    const storage = new RxStorageWorker(settings, settings.statics);\n    return storage;\n}\n\n\nexport async function removeWorkerRef(\n    instance: RxStorageInstanceWorker<any>\n) {\n    const workerState = getFromMapOrThrow(WORKER_BY_INSTANCE, instance.storage);\n    workerState.refs.delete(instance);\n    if (workerState.refs.size === 0) {\n        WORKER_BY_INSTANCE.delete(instance.storage);\n        await workerState.workerPromise\n            .then(worker => Thread.terminate(worker as any));\n    }\n}\n"],"mappings":"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"}