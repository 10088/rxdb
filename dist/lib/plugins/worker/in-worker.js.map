{"version":3,"file":"in-worker.js","names":["wrappedWorkerRxStorage","args","nextId","instanceById","Map","exposeMe","createStorageInstance","params","instanceId","storage","instance","set","bulkWrite","documentWrites","context","getFromMapOrThrow","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","changeStream","cleanup","minDeletedTime","close","remove","conflictResultionTasks","resolveConflictResultionTask","taskSolution","expose"],"sources":["../../../../src/plugins/worker/in-worker.ts"],"sourcesContent":["/**\n * This file contains everything\n * that is supposed to run inside of the worker.\n */\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult\n} from '../../types';\nimport { expose } from 'threads/worker';\nimport { getFromMapOrThrow } from '../../util';\nimport { Observable } from 'rxjs';\n\n\nexport type InWorkerStorage<RxDocType, CheckpointType> = {\n    createStorageInstance(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<number>;\n    bulkWrite(\n        instanceId: number,\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>>;\n    findDocumentsById(\n        instanceId: number,\n        ids: string[], deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>>;\n    query(\n        instanceId: number,\n        preparedQuery: any\n    ): Promise<RxStorageQueryResult<RxDocType>>;\n    getAttachmentData(\n        instanceId: number,\n        documentId: string,\n        attachmentId: string\n    ): Promise<string>;\n    getChangedDocumentsSince(\n        instanceId: number,\n        limit: number,\n        checkpoint?: CheckpointType\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: any;\n    }>;\n    changeStream(\n        instanceById: number\n    ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, CheckpointType>>;\n    cleanup(instanceId: number, minDeletedTime: number): Promise<boolean>;\n    close(instanceId: number): Promise<void>;\n    remove(instanceId: number): Promise<void>;\n\n    conflictResultionTasks(\n        instanceById: number\n    ): Observable<RxConflictResultionTask<RxDocType>>;\n    resolveConflictResultionTask(\n        instanceById: number,\n        taskSolution: RxConflictResultionTaskSolution<RxDocType>\n    ): Promise<void>;\n}\n\nexport function wrappedWorkerRxStorage<T, D, CheckpointType = any>(\n    args: {\n        storage: RxStorage<T, D>\n    }\n) {\n    let nextId = 0;\n    const instanceById: Map<number, any> = new Map();\n\n    const exposeMe: InWorkerStorage<any, CheckpointType> = {\n        /**\n         * RxStorageInstance\n         */\n        async createStorageInstance(params) {\n            const instanceId = nextId++;\n            const instance = await args.storage.createStorageInstance(params);\n            instanceById.set(instanceId, instance);\n            return instanceId;\n        },\n        bulkWrite<DocumentData>(\n            instanceId: number,\n            documentWrites: BulkWriteRow<DocumentData>[],\n            context: string\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.bulkWrite(documentWrites, context);\n        },\n        findDocumentsById<DocumentData>(\n            instanceId: number,\n            ids: string[],\n            deleted: boolean\n        ): Promise<RxDocumentDataById<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.findDocumentsById(ids, deleted);\n        },\n        query<DocumentData>(\n            instanceId: number,\n            preparedQuery: any\n        ): Promise<RxStorageQueryResult<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.query(preparedQuery);\n        },\n        getAttachmentData(\n            instanceId: number,\n            documentId: string,\n            attachmentId: string\n        ): Promise<string> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getAttachmentData(\n                documentId,\n                attachmentId\n            );\n        },\n        getChangedDocumentsSince<RxDocType>(\n            instanceId: number,\n            limit: number,\n            checkpoint: any\n        ): Promise<{\n            documents: RxDocumentData<RxDocType>[];\n            checkpoint: any;\n        }> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getChangedDocumentsSince(\n                limit,\n                checkpoint\n            );\n        },\n        changeStream<DocumentData>(\n            instanceId: number\n        ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>, CheckpointType>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.changeStream();\n        },\n        cleanup(\n            instanceId: number,\n            minDeletedTime: number\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.cleanup(minDeletedTime);\n        },\n        close(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.close();\n        },\n        remove(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.remove();\n        },\n\n        conflictResultionTasks<RxDocType>(\n            instanceId: number\n        ): Observable<RxConflictResultionTask<RxDocType>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask<RxDocType>(\n            instanceId: number,\n            taskSolution: RxConflictResultionTaskSolution<RxDocType>\n        ): Promise<void> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.resolveConflictResultionTask(taskSolution);\n        }\n    }\n    expose(exposeMe);\n}\n"],"mappings":"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"}