{"version":3,"file":"in-worker.js","names":["wrappedWorkerRxStorage","args","nextId","instanceById","Map","exposeMe","createStorageInstance","params","instanceId","storage","instance","set","bulkWrite","documentWrites","getFromMapOrThrow","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","changeStream","cleanup","minDeletedTime","close","remove","conflictResultionTasks","resolveConflictResultionTask","taskSolution","expose"],"sources":["../../../../src/plugins/worker/in-worker.ts"],"sourcesContent":["/**\n * This file contains everything\n * that is supposed to run inside of the worker.\n */\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult\n} from '../../types';\nimport { expose } from 'threads/worker';\nimport { getFromMapOrThrow } from '../../util';\nimport { Observable } from 'rxjs';\n\n\nexport type InWorkerStorage<RxDocType> = {\n    createStorageInstance(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<number>;\n    bulkWrite(\n        instanceId: number,\n        documentWrites: BulkWriteRow<RxDocType>[]\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>>;\n    findDocumentsById(\n        instanceId: number,\n        ids: string[], deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>>;\n    query(\n        instanceId: number,\n        preparedQuery: any\n    ): Promise<RxStorageQueryResult<RxDocType>>;\n    getAttachmentData(\n        instanceId: number,\n        documentId: string,\n        attachmentId: string\n    ): Promise<string>;\n    getChangedDocumentsSince(\n        instanceId: number,\n        limit: number,\n        checkpoint: any\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: any;\n    }[]>;\n    changeStream(\n        instanceById: number\n    ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>>;\n    cleanup(instanceId: number, minDeletedTime: number): Promise<boolean>;\n    close(instanceId: number): Promise<void>;\n    remove(instanceId: number): Promise<void>;\n\n    conflictResultionTasks(\n        instanceById: number\n    ): Observable<RxConflictResultionTask<RxDocType>>;\n    resolveConflictResultionTask(\n        instanceById: number,\n        taskSolution: RxConflictResultionTaskSolution<RxDocType>\n    ): Promise<void>;\n}\n\nexport function wrappedWorkerRxStorage<T, D>(\n    args: {\n        storage: RxStorage<T, D>\n    }\n) {\n    let nextId = 0;\n    const instanceById: Map<number, any> = new Map();\n\n    const exposeMe: InWorkerStorage<any> = {\n        /**\n         * RxStorageInstance\n         */\n        async createStorageInstance(params) {\n            const instanceId = nextId++;\n            const instance = await args.storage.createStorageInstance(params);\n            instanceById.set(instanceId, instance);\n            return instanceId;\n        },\n        bulkWrite<DocumentData>(\n            instanceId: number,\n            documentWrites: BulkWriteRow<DocumentData>[]\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.bulkWrite(documentWrites);\n        },\n        findDocumentsById<DocumentData>(\n            instanceId: number,\n            ids: string[],\n            deleted: boolean\n        ): Promise<RxDocumentDataById<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.findDocumentsById(ids, deleted);\n        },\n        query<DocumentData>(\n            instanceId: number,\n            preparedQuery: any\n        ): Promise<RxStorageQueryResult<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.query(preparedQuery);\n        },\n        getAttachmentData(\n            instanceId: number,\n            documentId: string,\n            attachmentId: string\n        ): Promise<string> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getAttachmentData(\n                documentId,\n                attachmentId\n            );\n        },\n        getChangedDocumentsSince<RxDocType>(\n            instanceId: number,\n            limit: number,\n            checkpoint: any\n        ): Promise<{\n            document: RxDocumentData<RxDocType>;\n            checkpoint: any;\n        }[]> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getChangedDocumentsSince(\n                limit,\n                checkpoint\n            );\n        },\n        changeStream<DocumentData>(\n            instanceId: number\n        ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.changeStream();\n        },\n        cleanup(\n            instanceId: number,\n            minDeletedTime: number\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.cleanup(minDeletedTime);\n        },\n        close(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.close();\n        },\n        remove(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.remove();\n        },\n\n        conflictResultionTasks<RxDocType>(\n            instanceId: number\n        ): Observable<RxConflictResultionTask<RxDocType>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask<RxDocType>(\n            instanceId: number,\n            taskSolution: RxConflictResultionTaskSolution<RxDocType>\n        ): Promise<void> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.resolveConflictResultionTask(taskSolution);\n        }\n    }\n    expose(exposeMe);\n}\n"],"mappings":"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"}