{"version":3,"file":"in-worker.js","names":["wrappedWorkerRxStorage","args","nextId","instanceById","Map","exposeMe","createStorageInstance","params","instanceId","storage","instance","set","bulkWrite","documentWrites","getFromMapOrThrow","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","changeStream","cleanup","minDeletedTime","close","remove","expose"],"sources":["../../../../src/plugins/worker/in-worker.ts"],"sourcesContent":["/**\n * This file contains everything\n * that is supposed to run inside of the worker.\n */\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult\n} from '../../types';\nimport { expose } from 'threads/worker';\nimport { getFromMapOrThrow } from '../../util';\nimport { Observable } from 'rxjs';\n\n\nexport type InWorkerStorage = {\n    createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<number>;\n    bulkWrite<DocumentData>(\n        instanceId: number,\n        documentWrites: BulkWriteRow<DocumentData>[]\n    ): Promise<RxStorageBulkWriteResponse<DocumentData>>;\n    findDocumentsById<DocumentData>(\n        instanceId: number,\n        ids: string[], deleted: boolean\n    ): Promise<RxDocumentDataById<DocumentData>>;\n    query<DocumentData>(\n        instanceId: number,\n        preparedQuery: any\n    ): Promise<RxStorageQueryResult<DocumentData>>;\n    getAttachmentData(\n        instanceId: number,\n        documentId: string,\n        attachmentId: string\n    ): Promise<string>;\n    getChangedDocumentsSince<RxDocType>(\n        instanceId: number,\n        limit: number,\n        checkpoint: any\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: any;\n    }[]>;\n    changeStream<DocumentData>(\n        instanceById: number\n    ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>>>;\n    cleanup(instanceId: number, minDeletedTime: number): Promise<boolean>;\n    close(instanceId: number): Promise<void>;\n    remove(instanceId: number): Promise<void>;\n}\n\nexport function wrappedWorkerRxStorage<T, D>(\n    args: {\n        storage: RxStorage<T, D>\n    }\n) {\n    let nextId = 0;\n    const instanceById: Map<number, any> = new Map();\n\n    const exposeMe: InWorkerStorage = {\n        /**\n         * RxStorageInstance\n         */\n        async createStorageInstance(params) {\n            const instanceId = nextId++;\n            const instance = await args.storage.createStorageInstance(params);\n            instanceById.set(instanceId, instance);\n            return instanceId;\n        },\n        bulkWrite<DocumentData>(\n            instanceId: number,\n            documentWrites: BulkWriteRow<DocumentData>[]\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.bulkWrite(documentWrites);\n        },\n        findDocumentsById<DocumentData>(\n            instanceId: number,\n            ids: string[],\n            deleted: boolean\n        ): Promise<RxDocumentDataById<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.findDocumentsById(ids, deleted);\n        },\n        query<DocumentData>(\n            instanceId: number,\n            preparedQuery: any\n        ): Promise<RxStorageQueryResult<DocumentData>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.query(preparedQuery);\n        },\n        getAttachmentData(\n            instanceId: number,\n            documentId: string,\n            attachmentId: string\n        ): Promise<string> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getAttachmentData(\n                documentId,\n                attachmentId\n            );\n        },\n        getChangedDocumentsSince<RxDocType>(\n            instanceId: number,\n            limit: number,\n            checkpoint: any\n        ): Promise<{\n            document: RxDocumentData<RxDocType>;\n            checkpoint: any;\n        }[]> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.getChangedDocumentsSince(\n                limit,\n                checkpoint\n            );\n        },\n        changeStream<DocumentData>(\n            instanceId: number\n        ): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>>> {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.changeStream();\n        },\n        cleanup(\n            instanceId: number,\n            minDeletedTime: number\n        ) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.cleanup(minDeletedTime);\n        },\n        close(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.close();\n        },\n        remove(instanceId: number) {\n            const instance = getFromMapOrThrow(instanceById, instanceId);\n            return instance.remove();\n        }\n    }\n    expose(exposeMe);\n}\n"],"mappings":"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"}