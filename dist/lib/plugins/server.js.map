{"version":3,"sources":["../../../src/plugins/server.ts"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["import * as os from 'os';\nimport * as nodePath from 'path';\n\nimport express from 'express';\nimport type { Express } from 'express';\nimport corsFn from 'cors';\n\nimport {\n    addPouchPlugin,\n    PouchDB,\n    RxStoragePouch\n} from '../plugins/pouchdb';\nimport {\n    newRxError\n} from '../rx-error';\nimport type {\n    PouchDBExpressServerOptions,\n    RxDatabase,\n    RxPlugin,\n    ServerResponse\n} from '../types';\n\nimport {\n    addRxPlugin,\n    flatClone,\n    PROMISE_RESOLVE_VOID\n} from '../core';\nimport { RxDBReplicationCouchDBPlugin } from './replication-couchdb';\naddRxPlugin(RxDBReplicationCouchDBPlugin);\n\nimport PouchAdapterHttp from 'pouchdb-adapter-http';\naddPouchPlugin(PouchAdapterHttp);\n\nlet ExpressPouchDB: any;\ntry {\n    ExpressPouchDB = require('express-pouchdb');\n} catch (error) {\n    console.error(\n        'Since version 8.4.0 the module \\'express-pouchdb\\' is not longer delivered with RxDB.\\n' +\n        'You can install it with \\'npm install express-pouchdb\\''\n    );\n}\n\n// we have to clean up after tests so there is no stupid logging\n// @link https://github.com/pouchdb/pouchdb-server/issues/226\nconst PouchdbAllDbs = require('pouchdb-all-dbs');\nPouchdbAllDbs(PouchDB);\n\nconst APP_OF_DB: WeakMap<RxDatabase, Express> = new WeakMap();\nconst SERVERS_OF_DB = new WeakMap();\nconst DBS_WITH_SERVER = new WeakSet();\n\n\nconst normalizeDbName = function (db: RxDatabase) {\n    const splitted = db.name.split('/').filter((str: string) => str !== '');\n    return splitted.pop();\n};\n\nconst getPrefix = function (db: RxDatabase) {\n    const splitted = db.name.split('/').filter((str: string) => str !== '');\n    splitted.pop(); // last was the name\n    if (splitted.length === 0) {\n        return '';\n    }\n    let ret = splitted.join('/') + '/';\n    if (db.name.startsWith('/')) {\n        ret = '/' + ret;\n    }\n    return ret;\n};\n\n/**\n * tunnel requests so collection-names can be used as paths\n */\nfunction tunnelCollectionPath(\n    db: RxDatabase,\n    path: string,\n    app: Express,\n    colName: string\n) {\n    const pathWithSlash = path.endsWith('/') ? path : path + '/';\n    const collectionPath = pathWithSlash + colName;\n    app.use(collectionPath, async function (req: any, res: any, next: any) {\n        if (req.baseUrl.endsWith(collectionPath)) {\n\n            while (!db[colName]) {\n                // if the collection is migrated,\n                // it can happen that it does not exist at this moment\n                await new Promise(res1 => setTimeout(res1, 50));\n            }\n            const to = normalizeDbName(db) + '-rxdb-' + db[colName].schema.version + '-' + colName;\n            const toFull = req.originalUrl.replace(collectionPath, pathWithSlash + to);\n            req.originalUrl = toFull;\n        }\n        next();\n    });\n}\n\nexport async function spawnServer(\n    this: RxDatabase,\n    {\n        path = '/db',\n        port = 3000,\n        cors = false,\n        startServer = true,\n        pouchdbExpressOptions = {}\n    }\n): Promise<ServerResponse> {\n    const db: RxDatabase = this;\n    const collectionsPath = startServer ? path : '/';\n    if (!SERVERS_OF_DB.has(db)) {\n        SERVERS_OF_DB.set(db, []);\n    }\n\n    const storage: RxStoragePouch = db.storage as any;\n    if (!storage.adapter) {\n        throw new Error('The RxDB server plugin only works with pouchdb storage.');\n    }\n\n\n    const pseudo = PouchDB.defaults({\n        adapter: storage.adapter,\n        prefix: getPrefix(db),\n        log: false\n    });\n\n    const app = express();\n    APP_OF_DB.set(db, app);\n\n    Object.keys(db.collections).forEach(colName => {\n        // tunnel requests so collection-names can be used as paths\n        tunnelCollectionPath(db, collectionsPath, app, colName);\n    });\n\n\n\n    // remember to throw error if collection is created after the server is already there\n    DBS_WITH_SERVER.add(db);\n\n    if (cors) {\n        app.use(corsFn({\n            'origin': function (origin, callback) {\n                const originToSend: any = origin || '*';\n                callback(null, originToSend);\n            },\n            'credentials': true,\n            'methods': 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT',\n        }));\n    }\n\n    /**\n     * Overwrite the defaults of PouchDBExpressServerOptions.\n     * In RxDB the defaults should not polute anything with folders so we store the config in memory\n     * and the logs in the tmp folder of the os.\n     */\n    const usePouchExpressOptions: PouchDBExpressServerOptions = flatClone(pouchdbExpressOptions);\n    if (typeof usePouchExpressOptions.inMemoryConfig === 'undefined') {\n        usePouchExpressOptions.inMemoryConfig = true;\n    }\n    if (typeof usePouchExpressOptions.logPath === 'undefined') {\n        usePouchExpressOptions.logPath = nodePath.join(\n            os.tmpdir(),\n            'rxdb-server-log.txt'\n        );\n    }\n\n    const pouchApp = ExpressPouchDB(pseudo, usePouchExpressOptions);\n    app.use(collectionsPath, pouchApp);\n\n    let server = null;\n    let startupPromise: Promise<void> = PROMISE_RESOLVE_VOID;\n    if (startServer) {\n        /**\n         * Listen for errors on server startup.\n         * and properly handle the error instead of returning a startupPromise\n         */\n        startupPromise = new Promise((res, rej) => {\n            let answered = false;\n            server = app.listen(port, () => {\n                if (!answered) {\n                    answered = true;\n                    res();\n                }\n            });\n            server.on('error', (err) => {\n                if (!answered) {\n                    answered = true;\n                    rej(err);\n                }\n            });\n        });\n        SERVERS_OF_DB.get(db).push(server);\n\n        /**\n         * When the database has no documents, there is no db file\n         * and so the replication would not work.\n         * This is a hack which ensures that the couchdb instance exists\n         * and we can replicate even if there is no document in the beginning.\n         */\n        Promise.all(\n            Object.values(db.collections).map(async (collection) => {\n                const url = 'http://localhost:' + port + collectionsPath + '/' + collection.name;\n                try {\n                    const pingDb = new PouchDB(url);\n                    await pingDb.info();\n                    await pingDb.close();\n                } catch (_err) { }\n            })\n        );\n    }\n\n\n    await startupPromise;\n    const response: ServerResponse = {\n        app,\n        pouchApp,\n        server\n    };\n    return response;\n}\n\n/**\n * when a server is created, no more collections can be spawned\n */\nfunction ensureNoMoreCollections(args: any) {\n    if (DBS_WITH_SERVER.has(args.database)) {\n        const err = newRxError(\n            'S1', {\n            collection: args.name,\n            database: args.database.name\n        }\n        );\n        throw err;\n    }\n}\n\n/**\n * runs when the database gets destroyed\n */\nexport function onDestroy(db: RxDatabase) {\n    if (SERVERS_OF_DB.has(db)) {\n        SERVERS_OF_DB.get(db).forEach((server: any) => server.close());\n    }\n}\n\nexport const RxDBServerPlugin: RxPlugin = {\n    name: 'server',\n    rxdb: true,\n    prototypes: {\n        RxDatabase: (proto: any) => {\n            proto.server = spawnServer;\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preDestroyRxDatabase: onDestroy,\n        preCreateRxCollection: ensureNoMoreCollections\n    }\n};\n"]}