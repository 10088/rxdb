{"version":3,"sources":["../../../../src/plugins/lokijs/lokijs-helper.ts"],"names":["CHANGES_COLLECTION_SUFFIX","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","stripLokiKey","docData","$loki","cloned","$lastWriteAt","getLokiEventKey","isLocal","primary","revision","prefix","eventKey","OPEN_LOKIJS_STORAGE_INSTANCES","Set","LOKIJS_COLLECTION_DEFAULT_OPTIONS","disableChangesApi","disableMeta","disableDeltaChangesApi","disableFreeze","cloneMethod","clone","transactional","autoupdate","LOKI_DATABASE_STATE_BY_NAME","Map","getLokiDatabase","databaseName","databaseSettings","databaseState","get","hasPersistence","adapter","persistenceMethod","useSettings","Object","assign","autoload","verbose","autosave","throttledSaves","database","lokijs","lokiSaveQueue","LokiSaveQueue","loadDatabasePromise","Promise","res","rej","loadDatabase","err","autoloadCallback","saveQueue","then","unloads","push","run","state","collections","set","closeLokiCollections","forEach","collection","collectionName","name","keys","length","u","remove","close","getLokiSortComparator","schema","query","primaryKey","sortOptions","sort","fun","a","b","compareResult","find","sortPart","fieldName","direction","values","directionMultiplier","valueA","valueB","args","getLokiLeaderElector","storage","electorState","leaderElectorByLokiDbName","channelName","channel","BroadcastChannel","elector","leaderElector","intancesCount","removeLokiLeaderElectorReference","broadcastChannel"],"mappings":"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","sourcesContent":["import type { RxStorageInstanceLoki } from './rx-storage-instance-loki';\nimport type { RxStorageKeyObjectInstanceLoki } from './rx-storage-key-object-instance-loki';\nimport lokijs, { Collection } from 'lokijs';\nimport type {\n    LokiDatabaseSettings,\n    LokiDatabaseState,\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    RxJsonSchema\n} from '../../types';\nimport {\n    add as unloadAdd, AddReturn\n} from 'unload';\nimport { flatClone } from '../../util';\nimport { LokiSaveQueue } from './loki-save-queue';\nimport type { DeterministicSortComparator } from 'event-reduce-js';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport { newRxError } from '../../rx-error';\nimport { BroadcastChannel, createLeaderElection, LeaderElector } from 'broadcast-channel';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\n\nexport const CHANGES_COLLECTION_SUFFIX = '-rxdb-changes';\nexport const LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request';\nexport const LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request-key-object';\n\n\n/**\n * Loki attaches a $loki property to all data\n * which must be removed before returning the data back to RxDB.\n */\nexport function stripLokiKey<T>(docData: T & { $loki?: number; $lastWriteAt?: number; }): T {\n    if (!docData.$loki) {\n        return docData;\n    }\n    const cloned = flatClone(docData);\n    delete cloned.$loki;\n    delete cloned.$lastWriteAt;\n    return cloned;\n}\n\nexport function getLokiEventKey(\n    isLocal: boolean,\n    primary: string,\n    revision: string\n): string {\n    const prefix = isLocal ? 'local' : 'non-local';\n    const eventKey = prefix + '|' + primary + '|' + revision;\n    return eventKey;\n}\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_LOKIJS_STORAGE_INSTANCES: Set<RxStorageKeyObjectInstanceLoki | RxStorageInstanceLoki<any>> = new Set();\n\n\nexport const LOKIJS_COLLECTION_DEFAULT_OPTIONS: Partial<CollectionOptions<any>> = {\n    disableChangesApi: true,\n    disableMeta: true,\n    disableDeltaChangesApi: true,\n    disableFreeze: true,\n    // TODO use 'immutable' like WatermelonDB does it\n    cloneMethod: 'shallow-assign',\n    clone: false,\n    transactional: false,\n    autoupdate: false\n}\n\nconst LOKI_DATABASE_STATE_BY_NAME: Map<string, Promise<LokiDatabaseState>> = new Map();\nexport function getLokiDatabase(\n    databaseName: string,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiDatabaseState> {\n    let databaseState: Promise<LokiDatabaseState> | undefined = LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        /**\n         * We assume that as soon as an adapter is passed,\n         * the database has to be persistend.\n         */\n        const hasPersistence: boolean = !!databaseSettings.adapter;\n        databaseState = (async () => {\n\n            let persistenceMethod = hasPersistence ? 'adapter' : 'memory';\n            if (databaseSettings.persistenceMethod) {\n                persistenceMethod = databaseSettings.persistenceMethod;\n            }\n            const useSettings = Object.assign(\n                // defaults\n                {\n                    autoload: hasPersistence,\n                    persistenceMethod,\n                    verbose: true\n                },\n                databaseSettings,\n                // overwrites\n                {\n                    /**\n                     * RxDB uses its custom load and save handling\n                     * so we disable the LokiJS save/load handlers.\n                     */\n                    autoload: false,\n                    autosave: false,\n                    throttledSaves: false\n                }\n            );\n            const database = new lokijs(\n                databaseName + '.db',\n                flatClone(useSettings)\n            );\n            const lokiSaveQueue = new LokiSaveQueue(\n                database,\n                useSettings\n            );\n\n            /**\n             * Wait until all data is loaded from persistence adapter.\n             * Wrap the loading into the saveQueue to ensure that when many\n             * collections are created a the same time, the load-calls do not interfer\n             * with each other and cause error logs.\n             */\n            if (hasPersistence) {\n                const loadDatabasePromise = new Promise<void>((res, rej) => {\n                    database.loadDatabase({}, (err) => {\n                        if (useSettings.autoloadCallback) {\n                            useSettings.autoloadCallback(err);\n                        }\n                        err ? rej(err) : res();\n                    });\n                });\n                lokiSaveQueue.saveQueue = lokiSaveQueue.saveQueue.then(() => loadDatabasePromise);\n                await loadDatabasePromise;\n            }\n\n            /**\n             * Autosave database on process end\n             */\n            const unloads: AddReturn[] = [];\n            if (hasPersistence) {\n                unloads.push(\n                    unloadAdd(() => lokiSaveQueue.run())\n                );\n            }\n\n            const state: LokiDatabaseState = {\n                database,\n                databaseSettings: useSettings,\n                saveQueue: lokiSaveQueue,\n                collections: {},\n                unloads\n            };\n\n            return state;\n        })();\n        LOKI_DATABASE_STATE_BY_NAME.set(databaseName, databaseState);\n    }\n    return databaseState;\n}\n\nexport async function closeLokiCollections(\n    databaseName: string,\n    collections: Collection[]\n) {\n    const databaseState = await LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        // already closed\n        return;\n    }\n    await databaseState.saveQueue.run();\n    collections.forEach(collection => {\n        const collectionName = collection.name;\n        delete databaseState.collections[collectionName];\n    });\n    if (Object.keys(databaseState.collections).length === 0) {\n        // all collections closed -> also close database\n        LOKI_DATABASE_STATE_BY_NAME.delete(databaseName);\n        databaseState.unloads.forEach(u => u.remove());\n        await new Promise<void>((res, rej) => {\n            databaseState.database.close(err => {\n                err ? rej(err) : res();\n            });\n        });\n    }\n}\n\n/**\n * This function is at lokijs-helper\n * because we need it in multiple places.\n */\nexport function getLokiSortComparator<RxDocType>(\n    schema: RxJsonSchema<RxDocType>,\n    query: MangoQuery<RxDocType>\n): DeterministicSortComparator<RxDocType> {\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    // TODO if no sort is given, use sort by primary.\n    // This should be done inside of RxDB and not in the storage implementations.\n    const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort ? (query.sort as any) : [{\n        [primaryKey]: 'asc'\n    }];\n    const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n        let compareResult: number = 0; // 1 | -1\n        sortOptions.find(sortPart => {\n            const fieldName: string = Object.keys(sortPart)[0];\n            const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\n            const directionMultiplier = direction === 'asc' ? 1 : -1;\n            const valueA: any = (a as any)[fieldName];\n            const valueB: any = (b as any)[fieldName];\n            if (valueA === valueB) {\n                return false;\n            } else {\n                if (valueA > valueB) {\n                    compareResult = 1 * directionMultiplier;\n                    return true;\n                } else {\n                    compareResult = -1 * directionMultiplier;\n                    return true;\n                }\n            }\n        });\n\n        /**\n         * Two different objects should never have the same sort position.\n         * We ensure this by having the unique primaryKey in the sort params\n         * at this.prepareQuery()\n         */\n        if (!compareResult) {\n            throw newRxError('SNH', { args: { query, a, b } });\n        }\n\n        return compareResult as any;\n    }\n    return fun;\n}\n\n\nexport function getLokiLeaderElector(\n    storage: RxStorageLoki,\n    databaseName: string\n): LeaderElector {\n    let electorState = storage.leaderElectorByLokiDbName.get(databaseName);\n    if (!electorState) {\n        const channelName = 'rxdb-lokijs-' + databaseName;\n        const channel = new BroadcastChannel(channelName);\n        const elector = createLeaderElection(channel);\n        electorState = {\n            leaderElector: elector,\n            intancesCount: 1\n        }\n        storage.leaderElectorByLokiDbName.set(databaseName, electorState);\n    } else {\n        electorState.intancesCount = electorState.intancesCount + 1;\n    }\n    return electorState.leaderElector;\n}\n\nexport function removeLokiLeaderElectorReference(\n    storage: RxStorageLoki,\n    databaseName: string\n) {\n    const electorState = storage.leaderElectorByLokiDbName.get(databaseName);\n    if (electorState) {\n        electorState.intancesCount = electorState.intancesCount - 1;\n        if (electorState.intancesCount === 0) {\n            electorState.leaderElector.broadcastChannel.close();\n            storage.leaderElectorByLokiDbName.delete(databaseName);\n        }\n    }\n}\n"],"file":"lokijs-helper.js"}