{"version":3,"sources":["../../../../src/plugins/lokijs/lokijs-helper.ts"],"names":[],"mappings":"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","file":"lokijs-helper.js","sourcesContent":["import type { RxStorageInstanceLoki } from './rx-storage-instance-loki';\nimport type { RxStorageKeyObjectInstanceLoki } from './rx-storage-key-object-instance-loki';\nimport lokijs, { Collection } from 'lokijs';\nimport type {\n    LokiDatabaseSettings,\n    LokiDatabaseState,\n    LokiLocalDatabaseState\n} from '../../types';\nimport {\n    add as unloadAdd, AddReturn\n} from 'unload';\nimport { flatClone } from '../../util';\nimport { LokiSaveQueue } from './loki-save-queue';\nimport type { IdleQueue } from 'custom-idle-queue';\n\nexport const CHANGES_COLLECTION_SUFFIX = '-rxdb-changes';\nexport const LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request';\nexport const LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request-key-object';\n\n\n/**\n * Loki attaches a $loki property to all data\n * which must be removed before returning the data back to RxDB.\n */\nexport function stripLokiKey<T>(docData: T & { $loki?: number }): T {\n    if (!docData.$loki) {\n        return docData;\n    }\n    const cloned = flatClone(docData);\n    delete cloned.$loki;\n    return cloned;\n}\n\nexport function getLokiEventKey(\n    isLocal: boolean,\n    primary: string,\n    revision: string\n): string {\n    const prefix = isLocal ? 'local' : 'non-local';\n    const eventKey = prefix + '|' + primary + '|' + revision;\n    return eventKey;\n}\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_LOKIJS_STORAGE_INSTANCES: Set<RxStorageKeyObjectInstanceLoki | RxStorageInstanceLoki<any>> = new Set();\n\n\nexport const LOKIJS_COLLECTION_DEFAULT_OPTIONS: Partial<CollectionOptions<any>> = {\n    disableChangesApi: true,\n    disableMeta: true,\n    disableDeltaChangesApi: true,\n    disableFreeze: true,\n    // TODO use 'immutable' like WatermelonDB does it\n    cloneMethod: 'shallow-assign',\n    clone: false,\n    transactional: false,\n    autoupdate: false\n}\n\nconst LOKI_DATABASE_STATE_BY_NAME: Map<string, Promise<LokiDatabaseState>> = new Map();\nexport function getLokiDatabase(\n    databaseName: string,\n    databaseSettings: LokiDatabaseSettings,\n    rxDatabaseIdleQueue: IdleQueue\n): Promise<LokiDatabaseState> {\n    let databaseState: Promise<LokiDatabaseState> | undefined = LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        /**\n         * We assume that as soon as an adapter is passed,\n         * the database has to be persistend.\n         */\n        const hasPersistence: boolean = !!databaseSettings.adapter;\n        databaseState = (async () => {\n\n            let persistenceMethod = hasPersistence ? 'adapter' : 'memory';\n            if (databaseSettings.persistenceMethod) {\n                persistenceMethod = databaseSettings.persistenceMethod;\n            }\n            const useSettings = Object.assign(\n                // defaults\n                {\n                    autoload: hasPersistence,\n                    persistenceMethod,\n                    verbose: true\n                },\n                databaseSettings,\n                // overwrites\n                {\n                    autosave: false,\n                    throttledSaves: false\n                }\n            );\n            const database = new lokijs(\n                databaseName + '.db',\n                useSettings\n            );\n            const saveQueue = new LokiSaveQueue(\n                database,\n                useSettings,\n                rxDatabaseIdleQueue\n            );\n\n            // Wait until all data is load from persistence adapter.\n            if (hasPersistence) {\n                await new Promise<void>((res, rej) => {\n                    database.loadDatabase({}, (err) => {\n                        err ? rej(err) : res();\n                    });\n                });\n            }\n\n            /**\n             * Autosave database on process end\n             */\n            const unloads: AddReturn[] = [];\n            if (hasPersistence) {\n                unloads.push(\n                    unloadAdd(() => saveQueue.run())\n                );\n            }\n\n            const state: LokiDatabaseState = {\n                database,\n                databaseSettings: useSettings,\n                saveQueue,\n                collections: {},\n                unloads\n            };\n\n            return state;\n        })();\n        LOKI_DATABASE_STATE_BY_NAME.set(databaseName, databaseState);\n    }\n    return databaseState;\n}\n\nexport async function closeLokiCollections(\n    databaseName: string,\n    collections: Collection[]\n) {\n    const databaseState = await LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        // already closed\n        return;\n    }\n    await databaseState.saveQueue.run();\n    collections.forEach(collection => {\n        const collectionName = collection.name;\n        delete databaseState.collections[collectionName];\n    });\n    if (Object.keys(databaseState.collections).length === 0) {\n        // all collections closed -> also close database\n        LOKI_DATABASE_STATE_BY_NAME.delete(databaseName);\n        databaseState.unloads.forEach(u => u.remove());\n        await new Promise<void>((res, rej) => {\n            databaseState.database.close(err => {\n                err ? rej(err) : res();\n            });\n        });\n    }\n}\n"]}