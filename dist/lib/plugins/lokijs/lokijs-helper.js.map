{"version":3,"file":"lokijs-helper.js","names":["body","recover","result","e","then","pact","state","value","s","v","o","bind","observer","prototype","onFulfilled","onRejected","callback","_this","thenable","test","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","mustUseLocalState","instance","closed","newRxError","args","instanceClosed","databaseName","collectionName","internals","localState","leaderElector","ensureNotFalsy","waitUntilHasLeader","isLeader","createLokiLocalState","databaseInstanceToken","options","schema","multiInstance","databaseSettings","hasLeader","applyOnce","promiseWait","handleRemoteRequest","msg","type","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","requestId","response","isError","broadcastChannel","postMessage","operation","params","err","requestRemoteInstance","isRxStorageInstanceLoki","query","messageType","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","whenDeathListener","leaderDeadPromise","Promise","res","context","action","retry","addEventListener","randomCouchString","responseListener","responsePromise","_rej","error","race","firstResolved","removeEventListener","closeLokiCollections","collections","LOKI_DATABASE_STATE_BY_NAME","get","databaseState","saveQueue","run","forEach","collection","name","Object","keys","length","unloads","u","remove","rej","database","close","CHANGES_COLLECTION_SUFFIX","stripLokiKey","docData","$loki","cloned","flatClone","$lastWriteAt","_meta","lwt","OPEN_LOKIJS_STORAGE_INSTANCES","Set","LOKIJS_COLLECTION_DEFAULT_OPTIONS","disableChangesApi","disableMeta","disableDeltaChangesApi","disableFreeze","cloneMethod","clone","transactional","autoupdate","Map","getLokiDatabase","hasPersistence","adapter","push","unloadAdd","lokiSaveQueue","useSettings","persistenceMethod","assign","autoload","verbose","autosave","throttledSaves","lokijs","LokiSaveQueue","loadDatabasePromise","loadDatabase","recursiveWait","autoloadCallback","set","getLokiSortComparator","_schema","sort","sortOptions","fun","a","b","compareResult","find","sortPart","fieldName","direction","values","directionMultiplier","valueA","valueB","getLokiLeaderElector","broadcastChannelRefObject","getBroadcastChannelReference","elector","getLeaderElectorByBroadcastChannel"],"sources":["../../../../src/plugins/lokijs/lokijs-helper.ts"],"sourcesContent":["import { createLokiLocalState, RxStorageInstanceLoki } from './rx-storage-instance-loki';\nimport lokijs, { Collection } from 'lokijs';\nimport type {\n    LokiDatabaseSettings,\n    LokiDatabaseState,\n    LokiLocalDatabaseState,\n    LokiRemoteResponseBroadcastMessage,\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    RxDocumentData,\n    RxJsonSchema\n} from '../../types';\nimport {\n    add as unloadAdd, AddReturn\n} from 'unload';\nimport { ensureNotFalsy, flatClone, promiseWait, randomCouchString } from '../../util';\nimport { LokiSaveQueue } from './loki-save-queue';\nimport type { DeterministicSortComparator } from 'event-reduce-js';\nimport { newRxError } from '../../rx-error';\nimport {\n    LeaderElector,\n    OnMessageHandler\n} from 'broadcast-channel';\nimport { getBroadcastChannelReference } from '../../rx-storage-multiinstance';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election';\n\nexport const CHANGES_COLLECTION_SUFFIX = '-rxdb-changes';\nexport const LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request';\nexport const LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request-key-object';\n\n\n/**\n * Loki attaches a $loki property to all data\n * which must be removed before returning the data back to RxDB.\n */\nexport function stripLokiKey<T>(docData: RxDocumentData<T> & { $loki?: number; }): T {\n    if (!docData.$loki) {\n        return docData;\n    }\n    const cloned = flatClone(docData);\n\n    /**\n     * In RxDB version 12.0.0,\n     * we introduced the _meta field that already contains the last write time.\n     * To be backwards compatible, we have to move the $lastWriteAt to the _meta field.\n     */\n    if ((cloned as any).$lastWriteAt) {\n        cloned._meta = {\n            lwt: (cloned as any).$lastWriteAt\n        };\n        delete (cloned as any).$lastWriteAt;\n    }\n\n    delete cloned.$loki;\n    return cloned;\n}\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_LOKIJS_STORAGE_INSTANCES: Set<RxStorageInstanceLoki<any>> = new Set();\n\n\nexport const LOKIJS_COLLECTION_DEFAULT_OPTIONS: Partial<CollectionOptions<any>> = {\n    disableChangesApi: true,\n    disableMeta: true,\n    disableDeltaChangesApi: true,\n    disableFreeze: true,\n    // TODO use 'immutable' like WatermelonDB does it\n    cloneMethod: 'shallow-assign',\n    clone: false,\n    transactional: false,\n    autoupdate: false\n}\n\nconst LOKI_DATABASE_STATE_BY_NAME: Map<string, Promise<LokiDatabaseState>> = new Map();\nexport function getLokiDatabase(\n    databaseName: string,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiDatabaseState> {\n    let databaseState: Promise<LokiDatabaseState> | undefined = LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        /**\n         * We assume that as soon as an adapter is passed,\n         * the database has to be persistend.\n         */\n        const hasPersistence: boolean = !!databaseSettings.adapter;\n        databaseState = (async () => {\n            let persistenceMethod = hasPersistence ? 'adapter' : 'memory';\n            if (databaseSettings.persistenceMethod) {\n                persistenceMethod = databaseSettings.persistenceMethod;\n            }\n            const useSettings = Object.assign(\n                // defaults\n                {\n                    autoload: hasPersistence,\n                    persistenceMethod,\n                    verbose: true\n                },\n                databaseSettings,\n                // overwrites\n                {\n                    /**\n                     * RxDB uses its custom load and save handling\n                     * so we disable the LokiJS save/load handlers.\n                     */\n                    autoload: false,\n                    autosave: false,\n                    throttledSaves: false\n                }\n            );\n            const database = new lokijs(\n                databaseName + '.db',\n                flatClone(useSettings)\n            );\n            const lokiSaveQueue = new LokiSaveQueue(\n                database,\n                useSettings\n            );\n\n            /**\n             * Wait until all data is loaded from persistence adapter.\n             * Wrap the loading into the saveQueue to ensure that when many\n             * collections are created at the same time, the load-calls do not interfere\n             * with each other and cause error logs.\n             */\n            if (hasPersistence) {\n                const loadDatabasePromise = new Promise<void>((res, rej) => {\n                    try {\n                        database.loadDatabase({\n                            recursiveWait: false\n                        }, (err) => {\n                            if (useSettings.autoloadCallback) {\n                                useSettings.autoloadCallback(err);\n                            }\n                            err ? rej(err) : res();\n                        });\n                    } catch (err) {\n                        rej(err);\n                    }\n                });\n                lokiSaveQueue.saveQueue = lokiSaveQueue.saveQueue.then(() => loadDatabasePromise);\n                await loadDatabasePromise;\n            }\n\n            /**\n             * Autosave database on process end\n             */\n            const unloads: AddReturn[] = [];\n            if (hasPersistence) {\n                unloads.push(\n                    unloadAdd(() => lokiSaveQueue.run())\n                );\n            }\n\n            const state: LokiDatabaseState = {\n                database,\n                databaseSettings: useSettings,\n                saveQueue: lokiSaveQueue,\n                collections: {},\n                unloads\n            };\n\n            return state;\n        })();\n        LOKI_DATABASE_STATE_BY_NAME.set(databaseName, databaseState);\n    }\n    return databaseState;\n}\n\nexport async function closeLokiCollections(\n    databaseName: string,\n    collections: Collection[]\n) {\n    const databaseState = await LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        // already closed\n        return;\n    }\n    await databaseState.saveQueue.run();\n    collections.forEach(collection => {\n        const collectionName = collection.name;\n        delete databaseState.collections[collectionName];\n    });\n    if (Object.keys(databaseState.collections).length === 0) {\n        // all collections closed -> also close database\n        LOKI_DATABASE_STATE_BY_NAME.delete(databaseName);\n        databaseState.unloads.forEach(u => u.remove());\n        await new Promise<void>((res, rej) => {\n            databaseState.database.close(err => {\n                err ? rej(err) : res();\n            });\n        });\n    }\n}\n\n/**\n * This function is at lokijs-helper\n * because we need it in multiple places.\n */\nexport function getLokiSortComparator<RxDocType>(\n    _schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: MangoQuery<RxDocType>\n): DeterministicSortComparator<RxDocType> {\n    if (!query.sort) {\n        throw newRxError('SNH', { query });\n    }\n    const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort;\n\n    const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n        let compareResult: number = 0; // 1 | -1\n        sortOptions.find(sortPart => {\n            const fieldName: string = Object.keys(sortPart)[0];\n            const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\n            const directionMultiplier = direction === 'asc' ? 1 : -1;\n            const valueA: any = (a as any)[fieldName];\n            const valueB: any = (b as any)[fieldName];\n            if (valueA === valueB) {\n                return false;\n            } else {\n                if (valueA > valueB) {\n                    compareResult = 1 * directionMultiplier;\n                    return true;\n                } else {\n                    compareResult = -1 * directionMultiplier;\n                    return true;\n                }\n            }\n        });\n\n        /**\n         * Two different objects should never have the same sort position.\n         * We ensure this by having the unique primaryKey in the sort params\n         * which is added by RxDB if not existing yet.\n         */\n        if (!compareResult) {\n            throw newRxError('SNH', { args: { query, a, b } });\n        }\n\n        return compareResult as any;\n    }\n    return fun;\n}\n\nexport function getLokiLeaderElector(\n    databaseInstanceToken: string,\n    broadcastChannelRefObject: any,\n    databaseName: string\n): LeaderElector {\n    const broadcastChannel = getBroadcastChannelReference(\n        databaseInstanceToken,\n        databaseName,\n        broadcastChannelRefObject\n    );\n    const elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n    return elector;\n}\n\n/**\n * For multi-instance usage, we send requests to the RxStorage\n * to the current leading instance over the BroadcastChannel.\n */\nexport async function requestRemoteInstance(\n    instance: RxStorageInstanceLoki<any>,\n    operation: string,\n    params: any[]\n): Promise<any | any[]> {\n    const isRxStorageInstanceLoki = typeof (instance as any).query === 'function';\n    const messageType = isRxStorageInstanceLoki ? LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE : LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE;\n\n    const leaderElector = ensureNotFalsy(instance.internals.leaderElector);\n    await waitUntilHasLeader(leaderElector);\n    const broadcastChannel = leaderElector.broadcastChannel;\n\n    type WinningPromise = {\n        retry: boolean,\n        result?: any;\n        error?: any;\n    }\n\n    let whenDeathListener: OnMessageHandler<any>;\n    const leaderDeadPromise = new Promise<WinningPromise>(res => {\n        whenDeathListener = (msg: any) => {\n            if (msg.context === 'leader' && msg.action === 'death') {\n                res({\n                    retry: true\n                });\n            }\n        };\n        broadcastChannel.addEventListener('internal', whenDeathListener);\n    });\n    const requestId = randomCouchString(12);\n    let responseListener: OnMessageHandler<any>;\n    const responsePromise = new Promise<WinningPromise>((res, _rej) => {\n        responseListener = (msg: any) => {\n            if (\n                msg.type === messageType &&\n                msg.response === true &&\n                msg.requestId === requestId\n            ) {\n                if (msg.isError) {\n                    res({\n                        retry: false,\n                        error: msg.result\n                    });\n                } else {\n                    res({\n                        retry: false,\n                        result: msg.result\n                    });\n                }\n            }\n        };\n        broadcastChannel.addEventListener('message', responseListener);\n    });\n\n    // send out the request to the other instance\n    broadcastChannel.postMessage({\n        response: false,\n        type: messageType,\n        operation,\n        params,\n        requestId,\n        databaseName: instance.databaseName,\n        collectionName: instance.collectionName\n    });\n\n\n    return Promise.race([\n        leaderDeadPromise,\n        responsePromise\n    ]).then(firstResolved => {\n\n        // clean up listeners\n        broadcastChannel.removeEventListener('message', responseListener);\n        broadcastChannel.removeEventListener('internal', whenDeathListener);\n\n        if (firstResolved.retry) {\n            /**\n             * The leader died while a remote request was running\n             * we re-run the whole operation.\n             * We cannot just re-run requestRemoteInstance()\n             * because the current instance might be the new leader now\n             * and then we have to use the local state instead of requesting the remote.\n             */\n            return (instance as any)[operation](...params);\n        } else {\n            if (firstResolved.error) {\n                throw firstResolved.error;\n            } else {\n                return firstResolved.result;\n            }\n        }\n    });\n}\n\n/**\n * Handles a request that came from a remote instance via requestRemoteInstance()\n * Runs the requested operation over the local db instance and sends back the result.\n */\nexport async function handleRemoteRequest(\n    instance: RxStorageInstanceLoki<any>,\n    msg: any\n) {\n    if (\n        msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n        msg.requestId &&\n        msg.databaseName === instance.databaseName &&\n        msg.collectionName === instance.collectionName &&\n        !msg.response\n    ) {\n        const operation = (msg as any).operation;\n        const params = (msg as any).params;\n        let result: any;\n        let isError = false;\n        try {\n            result = await (instance as any)[operation](...params);\n        } catch (err) {\n            isError = true;\n            result = err;\n        }\n        const response: LokiRemoteResponseBroadcastMessage = {\n            response: true,\n            requestId: msg.requestId,\n            databaseName: instance.databaseName,\n            collectionName: instance.collectionName,\n            result,\n            isError,\n            type: msg.type\n        };\n        ensureNotFalsy(instance.internals.leaderElector).broadcastChannel.postMessage(response);\n    }\n}\n\n\nexport async function waitUntilHasLeader(leaderElector: LeaderElector) {\n    while (\n        !leaderElector.hasLeader\n    ) {\n        await leaderElector.applyOnce();\n        await promiseWait(0);\n    }\n}\n\n/**\n * If the local state must be used, that one is returned.\n * Returns false if a remote instance must be used.\n */\nexport async function mustUseLocalState(\n    instance: RxStorageInstanceLoki<any>\n): Promise<LokiLocalDatabaseState | false> {\n    if (instance.closed) {\n        /**\n         * If this happens, it means that RxDB made a call to an already closed storage instance.\n         * This must never happen because when RxDB closes a collection or database,\n         * all tasks must be cleared so that no more calls are made the the storage.\n         */\n        throw newRxError('SNH', {\n            args: {\n                instanceClosed: instance.closed,\n                databaseName: instance.databaseName,\n                collectionName: instance.collectionName\n            }\n        });\n    }\n\n\n    if (instance.internals.localState) {\n        return instance.internals.localState;\n    }\n    const leaderElector = ensureNotFalsy(instance.internals.leaderElector);\n    await waitUntilHasLeader(leaderElector);\n\n    /**\n     * It might already have a localState after the applying\n     * because another subtask also called mustUSeLocalState()\n     */\n    if (instance.internals.localState) {\n        return instance.internals.localState;\n    }\n\n    if (\n        leaderElector.isLeader &&\n        !instance.internals.localState\n    ) {\n        // own is leader, use local instance\n        instance.internals.localState = createLokiLocalState<any>({\n            databaseInstanceToken: instance.databaseInstanceToken,\n            databaseName: instance.databaseName,\n            collectionName: instance.collectionName,\n            options: instance.options,\n            schema: (instance as RxStorageInstanceLoki<any>).schema,\n            multiInstance: instance.internals.leaderElector ? true : false\n        }, instance.databaseSettings);\n        return ensureNotFalsy(instance.internals.localState);\n    } else {\n        // other is leader, send message to remote leading instance\n        return false;\n    }\n}\n"],"mappings":"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"}