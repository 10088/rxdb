{"version":3,"sources":["../../../../src/plugins/lokijs/lokijs-helper.ts"],"names":["body","recover","result","e","then","pact","state","value","s","v","o","bind","observer","prototype","onFulfilled","onRejected","callback","_this","thenable","test","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","mustUseLocalState","instance","internals","localState","leaderElector","isLeader","isRxStorageInstanceLoki","databaseName","collectionName","options","schema","multiInstance","databaseSettings","closed","query","hasLeader","applyOnce","handleRemoteRequest","msg","messageType","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","type","requestId","response","isError","broadcastChannel","postMessage","operation","params","err","closeLokiCollections","collections","LOKI_DATABASE_STATE_BY_NAME","get","databaseState","saveQueue","run","forEach","collection","name","Object","keys","length","unloads","u","remove","Promise","res","rej","database","close","CHANGES_COLLECTION_SUFFIX","stripLokiKey","docData","$loki","cloned","$lastWriteAt","getLokiEventKey","isLocal","primary","revision","prefix","eventKey","OPEN_LOKIJS_STORAGE_INSTANCES","Set","LOKIJS_COLLECTION_DEFAULT_OPTIONS","disableChangesApi","disableMeta","disableDeltaChangesApi","disableFreeze","cloneMethod","clone","transactional","autoupdate","Map","getLokiDatabase","hasPersistence","adapter","push","lokiSaveQueue","useSettings","persistenceMethod","assign","autoload","verbose","autosave","throttledSaves","lokijs","LokiSaveQueue","loadDatabasePromise","loadDatabase","autoloadCallback","set","getLokiSortComparator","primaryKey","sortOptions","sort","fun","a","b","compareResult","find","sortPart","fieldName","direction","values","directionMultiplier","valueA","valueB","args","getLokiLeaderElector","storage","electorState","leaderElectorByLokiDbName","channelName","channel","BroadcastChannel","elector","intancesCount","removeLokiLeaderElectorReference","requestRemoteInstance","responsePromise","listener","removeEventListener","addEventListener"],"mappings":"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","sourcesContent":["import { createLokiLocalState, RxStorageInstanceLoki } from './rx-storage-instance-loki';\nimport { createLokiKeyValueLocalState, RxStorageKeyObjectInstanceLoki } from './rx-storage-key-object-instance-loki';\nimport lokijs, { Collection } from 'lokijs';\nimport type {\n    LokiDatabaseSettings,\n    LokiDatabaseState,\n    LokiLocalDatabaseState,\n    LokiRemoteResponseBroadcastMessage,\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    RxJsonSchema\n} from '../../types';\nimport {\n    add as unloadAdd, AddReturn\n} from 'unload';\nimport { ensureNotFalsy, flatClone, promiseWait, randomCouchString } from '../../util';\nimport { LokiSaveQueue } from './loki-save-queue';\nimport type { DeterministicSortComparator } from 'event-reduce-js';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport { newRxError } from '../../rx-error';\nimport { BroadcastChannel, createLeaderElection, LeaderElector } from 'broadcast-channel';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\n\nexport const CHANGES_COLLECTION_SUFFIX = '-rxdb-changes';\nexport const LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request';\nexport const LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request-key-object';\n\n\n/**\n * Loki attaches a $loki property to all data\n * which must be removed before returning the data back to RxDB.\n */\nexport function stripLokiKey<T>(docData: T & { $loki?: number; $lastWriteAt?: number; }): T {\n    if (!docData.$loki) {\n        return docData;\n    }\n    const cloned = flatClone(docData);\n    delete cloned.$loki;\n    delete cloned.$lastWriteAt;\n    return cloned;\n}\n\nexport function getLokiEventKey(\n    isLocal: boolean,\n    primary: string,\n    revision: string\n): string {\n    const prefix = isLocal ? 'local' : 'non-local';\n    const eventKey = prefix + '|' + primary + '|' + revision;\n    return eventKey;\n}\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_LOKIJS_STORAGE_INSTANCES: Set<RxStorageKeyObjectInstanceLoki | RxStorageInstanceLoki<any>> = new Set();\n\n\nexport const LOKIJS_COLLECTION_DEFAULT_OPTIONS: Partial<CollectionOptions<any>> = {\n    disableChangesApi: true,\n    disableMeta: true,\n    disableDeltaChangesApi: true,\n    disableFreeze: true,\n    // TODO use 'immutable' like WatermelonDB does it\n    cloneMethod: 'shallow-assign',\n    clone: false,\n    transactional: false,\n    autoupdate: false\n}\n\nconst LOKI_DATABASE_STATE_BY_NAME: Map<string, Promise<LokiDatabaseState>> = new Map();\nexport function getLokiDatabase(\n    databaseName: string,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiDatabaseState> {\n    let databaseState: Promise<LokiDatabaseState> | undefined = LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        /**\n         * We assume that as soon as an adapter is passed,\n         * the database has to be persistend.\n         */\n        const hasPersistence: boolean = !!databaseSettings.adapter;\n        databaseState = (async () => {\n\n            let persistenceMethod = hasPersistence ? 'adapter' : 'memory';\n            if (databaseSettings.persistenceMethod) {\n                persistenceMethod = databaseSettings.persistenceMethod;\n            }\n            const useSettings = Object.assign(\n                // defaults\n                {\n                    autoload: hasPersistence,\n                    persistenceMethod,\n                    verbose: true\n                },\n                databaseSettings,\n                // overwrites\n                {\n                    /**\n                     * RxDB uses its custom load and save handling\n                     * so we disable the LokiJS save/load handlers.\n                     */\n                    autoload: false,\n                    autosave: false,\n                    throttledSaves: false\n                }\n            );\n            const database = new lokijs(\n                databaseName + '.db',\n                flatClone(useSettings)\n            );\n            const lokiSaveQueue = new LokiSaveQueue(\n                database,\n                useSettings\n            );\n\n            /**\n             * Wait until all data is loaded from persistence adapter.\n             * Wrap the loading into the saveQueue to ensure that when many\n             * collections are created a the same time, the load-calls do not interfer\n             * with each other and cause error logs.\n             */\n            if (hasPersistence) {\n                const loadDatabasePromise = new Promise<void>((res, rej) => {\n                    database.loadDatabase({}, (err) => {\n                        if (useSettings.autoloadCallback) {\n                            useSettings.autoloadCallback(err);\n                        }\n                        err ? rej(err) : res();\n                    });\n                });\n                lokiSaveQueue.saveQueue = lokiSaveQueue.saveQueue.then(() => loadDatabasePromise);\n                await loadDatabasePromise;\n            }\n\n            /**\n             * Autosave database on process end\n             */\n            const unloads: AddReturn[] = [];\n            if (hasPersistence) {\n                unloads.push(\n                    unloadAdd(() => lokiSaveQueue.run())\n                );\n            }\n\n            const state: LokiDatabaseState = {\n                database,\n                databaseSettings: useSettings,\n                saveQueue: lokiSaveQueue,\n                collections: {},\n                unloads\n            };\n\n            return state;\n        })();\n        LOKI_DATABASE_STATE_BY_NAME.set(databaseName, databaseState);\n    }\n    return databaseState;\n}\n\nexport async function closeLokiCollections(\n    databaseName: string,\n    collections: Collection[]\n) {\n    const databaseState = await LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        // already closed\n        return;\n    }\n    await databaseState.saveQueue.run();\n    collections.forEach(collection => {\n        const collectionName = collection.name;\n        delete databaseState.collections[collectionName];\n    });\n    if (Object.keys(databaseState.collections).length === 0) {\n        // all collections closed -> also close database\n        LOKI_DATABASE_STATE_BY_NAME.delete(databaseName);\n        databaseState.unloads.forEach(u => u.remove());\n        await new Promise<void>((res, rej) => {\n            databaseState.database.close(err => {\n                err ? rej(err) : res();\n            });\n        });\n    }\n}\n\n/**\n * This function is at lokijs-helper\n * because we need it in multiple places.\n */\nexport function getLokiSortComparator<RxDocType>(\n    schema: RxJsonSchema<RxDocType>,\n    query: MangoQuery<RxDocType>\n): DeterministicSortComparator<RxDocType> {\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    // TODO if no sort is given, use sort by primary.\n    // This should be done inside of RxDB and not in the storage implementations.\n    const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort ? (query.sort as any) : [{\n        [primaryKey]: 'asc'\n    }];\n    const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n        let compareResult: number = 0; // 1 | -1\n        sortOptions.find(sortPart => {\n            const fieldName: string = Object.keys(sortPart)[0];\n            const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\n            const directionMultiplier = direction === 'asc' ? 1 : -1;\n            const valueA: any = (a as any)[fieldName];\n            const valueB: any = (b as any)[fieldName];\n            if (valueA === valueB) {\n                return false;\n            } else {\n                if (valueA > valueB) {\n                    compareResult = 1 * directionMultiplier;\n                    return true;\n                } else {\n                    compareResult = -1 * directionMultiplier;\n                    return true;\n                }\n            }\n        });\n\n        /**\n         * Two different objects should never have the same sort position.\n         * We ensure this by having the unique primaryKey in the sort params\n         * at this.prepareQuery()\n         */\n        if (!compareResult) {\n            throw newRxError('SNH', { args: { query, a, b } });\n        }\n\n        return compareResult as any;\n    }\n    return fun;\n}\n\n\nexport function getLokiLeaderElector(\n    storage: RxStorageLoki,\n    databaseName: string\n): LeaderElector {\n    let electorState = storage.leaderElectorByLokiDbName.get(databaseName);\n    if (!electorState) {\n        const channelName = 'rxdb-lokijs-' + databaseName;\n        const channel = new BroadcastChannel(channelName);\n        const elector = createLeaderElection(channel);\n        electorState = {\n            leaderElector: elector,\n            intancesCount: 1\n        }\n        storage.leaderElectorByLokiDbName.set(databaseName, electorState);\n    } else {\n        electorState.intancesCount = electorState.intancesCount + 1;\n    }\n    return electorState.leaderElector;\n}\n\nexport function removeLokiLeaderElectorReference(\n    storage: RxStorageLoki,\n    databaseName: string\n) {\n    const electorState = storage.leaderElectorByLokiDbName.get(databaseName);\n    if (electorState) {\n        electorState.intancesCount = electorState.intancesCount - 1;\n        if (electorState.intancesCount === 0) {\n            electorState.leaderElector.broadcastChannel.close();\n            storage.leaderElectorByLokiDbName.delete(databaseName);\n        }\n    }\n}\n\n/**\n * For multi-instance usage, we send requests to the RxStorage\n * to the current leading instance over the BroadcastChannel.\n */\nexport function requestRemoteInstance(\n    instance: RxStorageInstanceLoki<any> | RxStorageKeyObjectInstanceLoki,\n    operation: string,\n    params: any[]\n): Promise<any | any[]> {\n    const isRxStorageInstanceLoki = typeof (instance as any).query === 'function';\n    const messageType = isRxStorageInstanceLoki ? LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE : LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE;\n\n    const broadcastChannel = ensureNotFalsy(instance.internals.leaderElector).broadcastChannel;\n    const requestId = randomCouchString(12);\n    const responsePromise = new Promise<any>((res, rej) => {\n        const listener = (msg: any) => {\n            if (\n                msg.type === messageType &&\n                msg.response === true &&\n                msg.requestId === requestId\n            ) {\n                if (msg.isError) {\n                    broadcastChannel.removeEventListener('message', listener);\n                    rej(msg.result);\n                } else {\n                    broadcastChannel.removeEventListener('message', listener);\n                    res(msg.result);\n                }\n            }\n        };\n        broadcastChannel.addEventListener('message', listener);\n    });\n\n    broadcastChannel.postMessage({\n        response: false,\n        type: messageType,\n        operation,\n        params,\n        requestId,\n        databaseName: instance.databaseName,\n        collectionName: instance.collectionName\n    });\n    return responsePromise;\n}\n\n/**\n * Handles a request that came from a remote instance via requestRemoteInstance()\n * Runs the requested operation over the local db instance and sends back the result.\n */\nexport async function handleRemoteRequest(\n    instance: RxStorageInstanceLoki<any> | RxStorageKeyObjectInstanceLoki,\n    msg: any\n) {\n    const isRxStorageInstanceLoki = typeof (instance as any).query === 'function';\n    const messageType = isRxStorageInstanceLoki ? LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE : LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE;\n\n    if (\n        msg.type === messageType &&\n        msg.requestId &&\n        msg.databaseName === instance.databaseName &&\n        msg.collectionName === instance.collectionName &&\n        !msg.response\n    ) {\n        const operation = (msg as any).operation;\n        const params = (msg as any).params;\n        let result: any;\n        let isError = false;\n        try {\n            result = await (instance as any)[operation](...params);\n        } catch (err) {\n            isError = true;\n            result = err;\n        }\n        const response: LokiRemoteResponseBroadcastMessage = {\n            response: true,\n            requestId: msg.requestId,\n            databaseName: instance.databaseName,\n            collectionName: instance.collectionName,\n            result,\n            isError,\n            type: msg.type\n        };\n        ensureNotFalsy(instance.internals.leaderElector).broadcastChannel.postMessage(response);\n    }\n}\n\n/**\n * If the local state must be used, that one is returned.\n * Returns false if a remote instance must be used.\n */\nexport async function mustUseLocalState(\n    instance: RxStorageInstanceLoki<any> | RxStorageKeyObjectInstanceLoki\n): Promise<LokiLocalDatabaseState | false> {\n    if (instance.closed) {\n        return false;\n    }\n\n    const isRxStorageInstanceLoki = typeof (instance as any).query === 'function';\n\n    if (instance.internals.localState) {\n        return instance.internals.localState;\n    }\n    const leaderElector = ensureNotFalsy(instance.internals.leaderElector);\n\n    while (\n        !leaderElector.hasLeader\n    ) {\n        await leaderElector.applyOnce();\n        await promiseWait(0);\n    }\n\n    /**\n     * It might already have a localState after the applying\n     * because another subtask also called mustUSeLocalState()\n     */\n    if (instance.internals.localState) {\n        return instance.internals.localState;\n    }\n\n    if (\n        leaderElector.isLeader &&\n        !instance.internals.localState\n    ) {\n        // own is leader, use local instance\n        if (isRxStorageInstanceLoki) {\n            instance.internals.localState = createLokiLocalState<any>({\n                databaseName: instance.databaseName,\n                collectionName: instance.collectionName,\n                options: instance.options,\n                schema: (instance as RxStorageInstanceLoki<any>).schema,\n                multiInstance: instance.internals.leaderElector ? true : false\n            }, instance.databaseSettings);\n        } else {\n            instance.internals.localState = createLokiKeyValueLocalState({\n                databaseName: instance.databaseName,\n                collectionName: instance.collectionName,\n                options: instance.options,\n                multiInstance: instance.internals.leaderElector ? true : false\n            }, instance.databaseSettings);\n        }\n        return ensureNotFalsy(instance.internals.localState);\n    } else {\n        // other is leader, send message to remote leading instance\n        return false;\n    }\n}\n"],"file":"lokijs-helper.js"}