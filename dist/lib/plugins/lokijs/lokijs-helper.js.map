{"version":3,"file":"lokijs-helper.js","names":["body","recover","result","e","then","pact","state","value","s","v","o","bind","observer","prototype","onFulfilled","onRejected","callback","_this","thenable","test","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","mustUseLocalState","instance","closed","newRxError","args","instanceClosed","databaseName","collectionName","internals","localState","leaderElector","ensureNotFalsy","waitUntilHasLeader","isLeader","createLokiLocalState","databaseInstanceToken","options","schema","multiInstance","databaseSettings","hasLeader","applyOnce","promiseWait","handleRemoteRequest","msg","type","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","requestId","response","isError","broadcastChannel","postMessage","operation","params","err","console","dir","requestRemoteInstance","isRxStorageInstanceLoki","query","messageType","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","whenDeathListener","leaderDeadPromise","Promise","res","context","action","retry","addEventListener","randomCouchString","responseListener","responsePromise","_rej","error","race","firstResolved","removeEventListener","closeLokiCollections","collections","LOKI_DATABASE_STATE_BY_NAME","get","databaseState","saveQueue","run","forEach","collection","name","Object","keys","length","unloads","u","remove","rej","database","close","CHANGES_COLLECTION_SUFFIX","RX_STORAGE_NAME_LOKIJS","stripLokiKey","docData","$loki","cloned","flatClone","$lastWriteAt","_meta","lwt","OPEN_LOKIJS_STORAGE_INSTANCES","Set","LOKIJS_COLLECTION_DEFAULT_OPTIONS","disableChangesApi","disableMeta","disableDeltaChangesApi","disableFreeze","cloneMethod","clone","transactional","autoupdate","Map","getLokiDatabase","hasPersistence","adapter","push","unloadAdd","lokiSaveQueue","useSettings","persistenceMethod","assign","autoload","verbose","autosave","throttledSaves","lokijs","LokiSaveQueue","loadDatabasePromise","loadDatabase","recursiveWait","autoloadCallback","set","getLokiSortComparator","_schema","sort","sortOptions","fun","a","b","compareResult","find","sortPart","fieldName","direction","values","directionMultiplier","valueA","valueB","getLokiLeaderElector","broadcastChannelRefObject","getBroadcastChannelReference","elector","getLeaderElectorByBroadcastChannel"],"sources":["../../../../src/plugins/lokijs/lokijs-helper.ts"],"sourcesContent":["import { createLokiLocalState, RxStorageInstanceLoki } from './rx-storage-instance-loki';\nimport lokijs, { Collection } from 'lokijs';\nimport type {\n    LokiDatabaseSettings,\n    LokiDatabaseState,\n    LokiLocalDatabaseState,\n    LokiRemoteResponseBroadcastMessage,\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    RxDocumentData,\n    RxJsonSchema\n} from '../../types';\nimport {\n    add as unloadAdd,\n    AddReturn\n} from 'unload';\nimport { ensureNotFalsy, flatClone, promiseWait, randomCouchString } from '../../util';\nimport { LokiSaveQueue } from './loki-save-queue';\nimport type { DeterministicSortComparator } from 'event-reduce-js';\nimport { newRxError } from '../../rx-error';\nimport {\n    LeaderElector,\n    OnMessageHandler\n} from 'broadcast-channel';\nimport { getBroadcastChannelReference } from '../../rx-storage-multiinstance';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election';\n\nexport const CHANGES_COLLECTION_SUFFIX = '-rxdb-changes';\nexport const LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request';\nexport const LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE = 'rxdb-lokijs-remote-request-key-object';\nexport const RX_STORAGE_NAME_LOKIJS = 'lokijs';\n\n/**\n * Loki attaches a $loki property to all data\n * which must be removed before returning the data back to RxDB.\n */\nexport function stripLokiKey<T>(docData: RxDocumentData<T> & { $loki?: number; }): T {\n    if (!docData.$loki) {\n        return docData;\n    }\n    const cloned = flatClone(docData);\n\n    /**\n     * In RxDB version 12.0.0,\n     * we introduced the _meta field that already contains the last write time.\n     * To be backwards compatible, we have to move the $lastWriteAt to the _meta field.\n     * TODO remove this in the next major version.\n     */\n    if ((cloned as any).$lastWriteAt) {\n        cloned._meta = {\n            lwt: (cloned as any).$lastWriteAt\n        };\n        delete (cloned as any).$lastWriteAt;\n    }\n\n    delete cloned.$loki;\n    return cloned;\n}\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_LOKIJS_STORAGE_INSTANCES: Set<RxStorageInstanceLoki<any>> = new Set();\n\n\nexport const LOKIJS_COLLECTION_DEFAULT_OPTIONS: Partial<CollectionOptions<any>> = {\n    disableChangesApi: true,\n    disableMeta: true,\n    disableDeltaChangesApi: true,\n    disableFreeze: true,\n    // TODO use 'immutable' like WatermelonDB does it\n    cloneMethod: 'shallow-assign',\n    clone: false,\n    transactional: false,\n    autoupdate: false\n}\n\nconst LOKI_DATABASE_STATE_BY_NAME: Map<string, Promise<LokiDatabaseState>> = new Map();\nexport function getLokiDatabase(\n    databaseName: string,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiDatabaseState> {\n    let databaseState: Promise<LokiDatabaseState> | undefined = LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        /**\n         * We assume that as soon as an adapter is passed,\n         * the database has to be persistend.\n         */\n        const hasPersistence: boolean = !!databaseSettings.adapter;\n        databaseState = (async () => {\n            let persistenceMethod = hasPersistence ? 'adapter' : 'memory';\n            if (databaseSettings.persistenceMethod) {\n                persistenceMethod = databaseSettings.persistenceMethod;\n            }\n            const useSettings = Object.assign(\n                // defaults\n                {\n                    autoload: hasPersistence,\n                    persistenceMethod,\n                    verbose: true\n                },\n                databaseSettings,\n                // overwrites\n                {\n                    /**\n                     * RxDB uses its custom load and save handling\n                     * so we disable the LokiJS save/load handlers.\n                     */\n                    autoload: false,\n                    autosave: false,\n                    throttledSaves: false\n                }\n            );\n            const database = new lokijs(\n                databaseName + '.db',\n                flatClone(useSettings)\n            );\n            const lokiSaveQueue = new LokiSaveQueue(\n                database,\n                useSettings\n            );\n\n            /**\n             * Wait until all data is loaded from persistence adapter.\n             * Wrap the loading into the saveQueue to ensure that when many\n             * collections are created at the same time, the load-calls do not interfere\n             * with each other and cause error logs.\n             */\n            if (hasPersistence) {\n                const loadDatabasePromise = new Promise<void>((res, rej) => {\n                    try {\n                        database.loadDatabase({\n                            recursiveWait: false\n                        }, (err) => {\n                            if (useSettings.autoloadCallback) {\n                                useSettings.autoloadCallback(err);\n                            }\n                            err ? rej(err) : res();\n                        });\n                    } catch (err) {\n                        rej(err);\n                    }\n                });\n                lokiSaveQueue.saveQueue = lokiSaveQueue.saveQueue.then(() => loadDatabasePromise);\n                await loadDatabasePromise;\n            }\n\n            /**\n             * Autosave database on process end\n             */\n            const unloads: AddReturn[] = [];\n            if (hasPersistence) {\n                unloads.push(\n                    unloadAdd(() => lokiSaveQueue.run())\n                );\n            }\n\n            const state: LokiDatabaseState = {\n                database,\n                databaseSettings: useSettings,\n                saveQueue: lokiSaveQueue,\n                collections: {},\n                unloads\n            };\n\n            return state;\n        })();\n        LOKI_DATABASE_STATE_BY_NAME.set(databaseName, databaseState);\n    }\n    return databaseState;\n}\n\nexport async function closeLokiCollections(\n    databaseName: string,\n    collections: Collection[]\n) {\n    const databaseState = await LOKI_DATABASE_STATE_BY_NAME.get(databaseName);\n    if (!databaseState) {\n        // already closed\n        return;\n    }\n    await databaseState.saveQueue.run();\n    collections.forEach(collection => {\n        const collectionName = collection.name;\n        delete databaseState.collections[collectionName];\n    });\n    if (Object.keys(databaseState.collections).length === 0) {\n        // all collections closed -> also close database\n        LOKI_DATABASE_STATE_BY_NAME.delete(databaseName);\n        databaseState.unloads.forEach(u => u.remove());\n        await new Promise<void>((res, rej) => {\n            databaseState.database.close(err => {\n                err ? rej(err) : res();\n            });\n        });\n    }\n}\n\n/**\n * This function is at lokijs-helper\n * because we need it in multiple places.\n */\nexport function getLokiSortComparator<RxDocType>(\n    _schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    query: MangoQuery<RxDocType>\n): DeterministicSortComparator<RxDocType> {\n    if (!query.sort) {\n        throw newRxError('SNH', { query });\n    }\n    const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort;\n\n    const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n        let compareResult: number = 0; // 1 | -1\n        sortOptions.find(sortPart => {\n            const fieldName: string = Object.keys(sortPart)[0];\n            const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\n            const directionMultiplier = direction === 'asc' ? 1 : -1;\n            const valueA: any = (a as any)[fieldName];\n            const valueB: any = (b as any)[fieldName];\n            if (valueA === valueB) {\n                return false;\n            } else {\n                if (valueA > valueB) {\n                    compareResult = 1 * directionMultiplier;\n                    return true;\n                } else {\n                    compareResult = -1 * directionMultiplier;\n                    return true;\n                }\n            }\n        });\n\n        /**\n         * Two different objects should never have the same sort position.\n         * We ensure this by having the unique primaryKey in the sort params\n         * which is added by RxDB if not existing yet.\n         */\n        if (!compareResult) {\n            throw newRxError('SNH', { args: { query, a, b } });\n        }\n\n        return compareResult as any;\n    }\n    return fun;\n}\n\nexport function getLokiLeaderElector(\n    databaseInstanceToken: string,\n    broadcastChannelRefObject: any,\n    databaseName: string\n): LeaderElector {\n    const broadcastChannel = getBroadcastChannelReference(\n        databaseInstanceToken,\n        databaseName,\n        broadcastChannelRefObject\n    );\n    const elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n    return elector;\n}\n\n/**\n * For multi-instance usage, we send requests to the RxStorage\n * to the current leading instance over the BroadcastChannel.\n */\nexport async function requestRemoteInstance(\n    instance: RxStorageInstanceLoki<any>,\n    operation: string,\n    params: any[]\n): Promise<any | any[]> {\n    const isRxStorageInstanceLoki = typeof (instance as any).query === 'function';\n    const messageType = isRxStorageInstanceLoki ? LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE : LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE;\n\n    const leaderElector = ensureNotFalsy(instance.internals.leaderElector);\n    await waitUntilHasLeader(leaderElector);\n    const broadcastChannel = leaderElector.broadcastChannel;\n\n    type WinningPromise = {\n        retry: boolean,\n        result?: any;\n        error?: any;\n    }\n\n    let whenDeathListener: OnMessageHandler<any>;\n    const leaderDeadPromise = new Promise<WinningPromise>(res => {\n        whenDeathListener = (msg: any) => {\n            if (msg.context === 'leader' && msg.action === 'death') {\n                res({\n                    retry: true\n                });\n            }\n        };\n        broadcastChannel.addEventListener('internal', whenDeathListener);\n    });\n    const requestId = randomCouchString(12);\n    let responseListener: OnMessageHandler<any>;\n    const responsePromise = new Promise<WinningPromise>((res, _rej) => {\n        responseListener = (msg: any) => {\n            if (\n                msg.type === messageType &&\n                msg.response === true &&\n                msg.requestId === requestId\n            ) {\n                if (msg.isError) {\n                    res({\n                        retry: false,\n                        error: msg.result\n                    });\n                } else {\n                    res({\n                        retry: false,\n                        result: msg.result\n                    });\n                }\n            }\n        };\n        broadcastChannel.addEventListener('message', responseListener);\n    });\n\n    // send out the request to the other instance\n    broadcastChannel.postMessage({\n        response: false,\n        type: messageType,\n        operation,\n        params,\n        requestId,\n        databaseName: instance.databaseName,\n        collectionName: instance.collectionName\n    });\n\n\n    return Promise.race([\n        leaderDeadPromise,\n        responsePromise\n    ]).then(firstResolved => {\n\n        // clean up listeners\n        broadcastChannel.removeEventListener('message', responseListener);\n        broadcastChannel.removeEventListener('internal', whenDeathListener);\n\n        if (firstResolved.retry) {\n            /**\n             * The leader died while a remote request was running\n             * we re-run the whole operation.\n             * We cannot just re-run requestRemoteInstance()\n             * because the current instance might be the new leader now\n             * and then we have to use the local state instead of requesting the remote.\n             */\n            return (instance as any)[operation](...params);\n        } else {\n            if (firstResolved.error) {\n                throw firstResolved.error;\n            } else {\n                return firstResolved.result;\n            }\n        }\n    });\n}\n\n/**\n * Handles a request that came from a remote instance via requestRemoteInstance()\n * Runs the requested operation over the local db instance and sends back the result.\n */\nexport async function handleRemoteRequest(\n    instance: RxStorageInstanceLoki<any>,\n    msg: any\n) {\n    if (\n        msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n        msg.requestId &&\n        msg.databaseName === instance.databaseName &&\n        msg.collectionName === instance.collectionName &&\n        !msg.response\n    ) {\n        const operation = (msg as any).operation;\n        const params = (msg as any).params;\n        let result: any;\n        let isError = false;\n        try {\n            result = await (instance as any)[operation](...params);\n        } catch (err) {\n            console.dir(err);\n            isError = true;\n            result = err;\n        }\n        const response: LokiRemoteResponseBroadcastMessage = {\n            response: true,\n            requestId: msg.requestId,\n            databaseName: instance.databaseName,\n            collectionName: instance.collectionName,\n            result,\n            isError,\n            type: msg.type\n        };\n        ensureNotFalsy(instance.internals.leaderElector).broadcastChannel.postMessage(response);\n    }\n}\n\n\nexport async function waitUntilHasLeader(leaderElector: LeaderElector) {\n    while (\n        !leaderElector.hasLeader\n    ) {\n        await leaderElector.applyOnce();\n        await promiseWait(0);\n    }\n}\n\n/**\n * If the local state must be used, that one is returned.\n * Returns false if a remote instance must be used.\n */\nexport async function mustUseLocalState(\n    instance: RxStorageInstanceLoki<any>\n): Promise<LokiLocalDatabaseState | false> {\n    if (instance.closed) {\n        /**\n         * If this happens, it means that RxDB made a call to an already closed storage instance.\n         * This must never happen because when RxDB closes a collection or database,\n         * all tasks must be cleared so that no more calls are made the the storage.\n         */\n        throw newRxError('SNH', {\n            args: {\n                instanceClosed: instance.closed,\n                databaseName: instance.databaseName,\n                collectionName: instance.collectionName\n            }\n        });\n    }\n\n\n    if (instance.internals.localState) {\n        return instance.internals.localState;\n    }\n    const leaderElector = ensureNotFalsy(instance.internals.leaderElector);\n    await waitUntilHasLeader(leaderElector);\n\n    /**\n     * It might already have a localState after the applying\n     * because another subtask also called mustUSeLocalState()\n     */\n    if (instance.internals.localState) {\n        return instance.internals.localState;\n    }\n\n    if (\n        leaderElector.isLeader &&\n        !instance.internals.localState\n    ) {\n        // own is leader, use local instance\n        instance.internals.localState = createLokiLocalState<any>({\n            databaseInstanceToken: instance.databaseInstanceToken,\n            databaseName: instance.databaseName,\n            collectionName: instance.collectionName,\n            options: instance.options,\n            schema: (instance as RxStorageInstanceLoki<any>).schema,\n            multiInstance: instance.internals.leaderElector ? true : false\n        }, instance.databaseSettings);\n        return ensureNotFalsy(instance.internals.localState);\n    } else {\n        // other is leader, send message to remote leading instance\n        return false;\n    }\n}\n"],"mappings":"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"}