{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"names":[],"mappings":"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","file":"rx-storage-instance-loki.js","sourcesContent":["import type {\n    SortComparator,\n    QueryMatcher,\n    ChangeEvent\n} from 'event-reduce-js';\nimport lokijs from 'lokijs';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    promiseWait,\n    createRevision,\n    getHeightOfRevision,\n    parseRevision,\n    lastOfArray,\n    flatClone,\n    now,\n    ensureNotFalsy,\n    randomCouchString,\n    firstPropertyNameOfObject\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    BlobBuffer,\n    ChangeStreamOnceOptions,\n    RxJsonSchema,\n    MangoQuery,\n    MangoQuerySortPart,\n    MangoQuerySortDirection,\n    LokiStorageInternals,\n    RxStorageChangedDocumentMeta,\n    RxStorageInstanceCreationParams,\n    LokiRemoteRequestBroadcastMessage,\n    LokiRemoteResponseBroadcastMessage,\n    LokiLocalState,\n    LokiDatabaseSettings\n} from '../../types';\nimport type {\n    CompareFunction\n} from 'array-push-at-sort-position';\nimport {\n    LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE,\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type {\n    BroadcastChannel,\n    LeaderElector\n} from 'broadcast-channel';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election';\n\nlet instanceId = 1;\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings\n> {\n\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = new Subject();\n    private lastChangefeedSequence: number = 0;\n    public readonly instanceId = instanceId++;\n\n    public readonly leaderElector?: LeaderElector;\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings,\n        public readonly broadcastChannel?: BroadcastChannel<LokiRemoteRequestBroadcastMessage | LokiRemoteResponseBroadcastMessage>\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (broadcastChannel) {\n            this.leaderElector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n            this.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.broadcastChannel).addEventListener('message', async (msg) => {\n                    if (\n                        msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                        msg.requestId &&\n                        msg.databaseName === this.databaseName &&\n                        msg.collectionName === this.collectionName &&\n                        !msg.response\n                    ) {\n\n                        const operation = (msg as any).operation;\n                        const params = (msg as any).params;\n                        let result: any;\n                        let isError = false;\n                        try {\n                            result = await (this as any)[operation](...params);\n                        } catch (err) {\n                            result = err;\n                            isError = true;\n                        }\n                        const response: LokiRemoteResponseBroadcastMessage = {\n                            response: true,\n                            requestId: msg.requestId,\n                            databaseName: this.databaseName,\n                            collectionName: this.collectionName,\n                            result,\n                            isError,\n                            type: msg.type\n                        };\n                        ensureNotFalsy(this.broadcastChannel).postMessage(response);\n                    }\n                });\n            });\n        }\n    }\n\n    private getLocalState() {\n        const ret = ensureNotFalsy(this.internals.localState);\n        return ret;\n    }\n\n    /**\n     * If the local state must be used, that one is returned.\n     * Returns false if a remote instance must be used.\n     */\n    private async mustUseLocalState(): Promise<LokiLocalState | false> {\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n        const leaderElector = ensureNotFalsy(this.leaderElector);\n        while (\n            !leaderElector.hasLeader\n        ) {\n            await leaderElector.applyOnce();\n\n            // TODO why do we need this line to pass the tests?\n            // otherwise we somehow do never get a leader.\n            /**\n             * TODO why do we need this line to pass the tests?\n             * Without it, we somehow do never get a leader.\n             * Does applyOnce() fully block the cpu?\n             */\n            await promiseWait(0); // TODO remove this line\n        }\n        if (\n            leaderElector.isLeader &&\n            !this.internals.localState\n        ) {\n            // own is leader, use local instance\n            this.internals.localState = createLokiLocalState({\n                databaseName: this.databaseName,\n                collectionName: this.collectionName,\n                options: this.options,\n                schema: this.schema,\n                broadcastChannel: this.broadcastChannel\n            }, this.databaseSettings);\n            return this.getLocalState();\n        } else {\n            // other is leader, send message to remote leading instance\n            return false;\n        }\n    }\n\n    private async requestRemoteInstance(\n        operation: string,\n        params: any[]\n    ): Promise<any | any[]> {\n        const broadcastChannel = ensureNotFalsy(this.broadcastChannel);\n        const requestId = randomCouchString(12);\n        const responsePromise = new Promise<any>((res, rej) => {\n            const listener = (msg: any) => {\n                if (\n                    msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                    msg.response === true &&\n                    msg.requestId === requestId\n                ) {\n                    if (msg.isError) {\n                        broadcastChannel.removeEventListener('message', listener);\n                        rej(msg.result);\n                    } else {\n                        broadcastChannel.removeEventListener('message', listener);\n                        res(msg.result);\n                    }\n                }\n            };\n            broadcastChannel.addEventListener('message', listener);\n        });\n\n        broadcastChannel.postMessage({\n            response: false,\n            type: LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE,\n            operation,\n            params,\n            requestId,\n            databaseName: this.databaseName,\n            collectionName: this.collectionName\n        });\n        const result = await responsePromise;\n        return result;\n    }\n\n    /**\n     * Adds an entry to the changes feed\n     * that can be queried to check which documents have been\n     * changed since sequence X.\n     */\n    private async addChangeDocumentMeta(id: string) {\n        const localState = await this.getLocalState();\n        if (!this.lastChangefeedSequence) {\n            const lastDoc = localState.changesCollection\n                .chain()\n                .simplesort('sequence', true)\n                .limit(1)\n                .data()[0];\n            if (lastDoc) {\n                this.lastChangefeedSequence = lastDoc.sequence;\n            }\n        }\n\n        const nextFeedSequence = this.lastChangefeedSequence + 1;\n        localState.changesCollection.insert({\n            id,\n            sequence: nextFeedSequence\n        });\n        this.lastChangefeedSequence = nextFeedSequence;\n    }\n\n    prepareQuery(mutateableQuery: MangoQuery<RxDocType>) {\n        mutateableQuery.selector = {\n            $and: [\n                {\n                    _deleted: false\n                },\n                mutateableQuery.selector\n            ]\n        };\n\n        /**\n         * To ensure a deterministic sorting,\n         * we have to ensure the primary key is always part\n         * of the sort query.\n         */\n        if (!mutateableQuery.sort) {\n            mutateableQuery.sort = [{ [this.primaryPath]: 'asc' }] as any;\n        } else {\n            const isPrimaryInSort = mutateableQuery.sort\n                .find(p => firstPropertyNameOfObject(p) === this.primaryPath);\n            if (!isPrimaryInSort) {\n                mutateableQuery.sort.push({ [this.primaryPath]: 'asc' } as any);\n            }\n        }\n\n        return mutateableQuery;\n    }\n\n    getSortComparator(query: MangoQuery<RxDocType>): SortComparator<RxDocType> {\n        // TODO if no sort is given, use sort by primary.\n        // This should be done inside of RxDB and not in the storage implementations.\n        const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort ? (query.sort as any) : [{\n            [this.primaryPath]: 'asc'\n        }];\n        const fun: CompareFunction<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            let compareResult: number = 0; // 1 | -1\n            sortOptions.find(sortPart => {\n                const fieldName: string = Object.keys(sortPart)[0];\n                const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\n                const directionMultiplier = direction === 'asc' ? 1 : -1;\n                const valueA: any = (a as any)[fieldName];\n                const valueB: any = (b as any)[fieldName];\n                if (valueA === valueB) {\n                    return false;\n                } else {\n                    if (valueA > valueB) {\n                        compareResult = 1 * directionMultiplier;\n                        return true;\n                    } else {\n                        compareResult = -1 * directionMultiplier;\n                        return true;\n                    }\n                }\n            });\n\n            /**\n             * Two different objects should never have the same sort position.\n             * We ensure this by having the unique primaryKey in the sort params\n             * at this.prepareQuery()\n             */\n            if (!compareResult) {\n                throw newRxError('SNH', { args: { query } });\n            }\n\n            return compareResult as any;\n        }\n        return fun;\n    }\n\n    /**\n     * Returns a function that determines if a document matches a query selector.\n     * It is important to have the exact same logix as lokijs uses, to be sure\n     * that the event-reduce algorithm works correct.\n     * But LokisJS does not export such a function, the query logic is deep inside of\n     * the Resultset prototype.\n     * Because I am lazy, I do not copy paste and maintain that code.\n     * Instead we create a fake Resultset and apply the prototype method Resultset.prototype.find(),\n     * same with Collection.\n     */\n    getQueryMatcher(query: MangoQuery<RxDocType>): QueryMatcher<RxDocType> {\n        const fun: QueryMatcher<RxDocType> = (doc: RxDocType) => {\n            const fakeCollection = {\n                data: [doc],\n                binaryIndices: {}\n            };\n            Object.setPrototypeOf(fakeCollection, (lokijs as any).Collection.prototype);\n            const fakeResultSet: any = {\n                collection: fakeCollection\n            };\n            Object.setPrototypeOf(fakeResultSet, (lokijs as any).Resultset.prototype);\n            fakeResultSet.find(query.selector, true);\n            const ret = fakeResultSet.filteredrows.length > 0;\n            return ret;\n        }\n        return fun;\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkWrite', [documentWrites]);\n        }\n\n        /**\n         * lokijs is in memory and non-async, so we emulate async behavior\n         * to ensure all RxStorage implementations behave equal.\n         */\n        await promiseWait(0);\n\n        const collection = localState.collection;\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: new Map(),\n            error: new Map()\n        };\n\n        const startTime = now();\n        documentWrites.forEach(writeRow => {\n            const id: string = writeRow.document[this.primaryPath] as any;\n            const documentInDb = collection.by(this.primaryPath, id);\n\n            if (!documentInDb) {\n                // insert new document\n                const newRevision = '1-' + createRevision(writeRow.document, true);\n\n                /**\n                 * It is possible to insert already deleted documents,\n                 * this can happen on replication.\n                 */\n                const insertedIsDeleted = writeRow.document._deleted ? true : false;\n\n                const writeDoc = Object.assign(\n                    {},\n                    writeRow.document,\n                    {\n                        _rev: newRevision,\n                        _deleted: insertedIsDeleted,\n                        // TODO attachments are currently not working with lokijs\n                        _attachments: {} as any\n                    }\n                );\n                collection.insert(writeDoc);\n                if (!insertedIsDeleted) {\n                    this.addChangeDocumentMeta(id);\n                    this.changes$.next({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change: {\n                            doc: writeDoc,\n                            id,\n                            operation: 'INSERT',\n                            previous: null\n                        },\n                        startTime,\n                        endTime: now()\n                    });\n                }\n                ret.success.set(id, writeDoc as any);\n            } else {\n                // update existing document\n                const revInDb: string = documentInDb._rev;\n                if (\n                    !writeRow.previous ||\n                    revInDb !== writeRow.previous._rev\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error.set(id, err);\n                } else {\n                    const newRevHeight = getHeightOfRevision(revInDb) + 1;\n                    const newRevision = newRevHeight + '-' + createRevision(writeRow.document, true);\n                    const writeDoc = Object.assign(\n                        {},\n                        documentInDb,\n                        writeRow.document,\n                        {\n                            _rev: newRevision,\n                            // TODO attachments are currently not working with lokijs\n                            _attachments: {}\n                        }\n                    );\n                    collection.update(writeDoc);\n                    this.addChangeDocumentMeta(id);\n\n\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: writeDoc\n                        };\n                    } else if (!writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: writeRow.previous,\n                            doc: writeDoc\n                        };\n                    } else if (!writeRow.previous._deleted && writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous: writeRow.previous,\n                            doc: null\n                        };\n                    }\n                    if (!change) {\n                        throw newRxError('SNH', { args: { writeRow } });\n                    }\n                    this.changes$.next({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change,\n                        startTime,\n                        endTime: now()\n                    });\n                    ret.success.set(id, writeDoc as any);\n                }\n            }\n        });\n        return ret;\n    }\n\n    async bulkAddRevisions(documents: RxDocumentData<RxDocType>[]): Promise<void> {\n        if (documents.length === 0) {\n            throw newRxError('P3', {\n                args: {\n                    documents\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkAddRevisions', [documents]);\n        }\n\n        /**\n         * lokijs is in memory and non-async, so we emulate async behavior\n         * to ensure all RxStorage implementations behave equal.\n         */\n        await promiseWait(0);\n        const startTime = now();\n        const collection = localState.collection;\n\n        documents.forEach(docData => {\n            const id: string = docData[this.primaryPath] as any;\n            const documentInDb = collection.by(this.primaryPath, id);\n            if (!documentInDb) {\n                // document not here, so we can directly insert\n                collection.insert(docData);\n                this.changes$.next({\n                    documentId: id,\n                    eventId: getLokiEventKey(false, id, docData._rev),\n                    change: {\n                        doc: docData,\n                        id,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n                this.addChangeDocumentMeta(id);\n            } else {\n                const newWriteRevision = parseRevision(docData._rev);\n                const oldRevision = parseRevision(documentInDb._rev);\n\n                let mustUpdate: boolean = false;\n                if (newWriteRevision.height !== oldRevision.height) {\n                    // height not equal, compare base on height\n                    if (newWriteRevision.height > oldRevision.height) {\n                        mustUpdate = true;\n                    }\n                } else if (newWriteRevision.hash > oldRevision.hash) {\n                    // equal height but new write has the 'winning' hash\n                    mustUpdate = true;\n                }\n                if (mustUpdate) {\n                    const storeAtLoki = flatClone(docData) as any;\n                    storeAtLoki.$loki = documentInDb.$loki;\n                    collection.update(storeAtLoki);\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: documentInDb,\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous: documentInDb,\n                            doc: null\n                        };\n                    } else if (documentInDb._deleted && docData._deleted) {\n                        change = null;\n                    }\n                    if (change) {\n                        this.changes$.next({\n                            documentId: id,\n                            eventId: getLokiEventKey(false, id, docData._rev),\n                            change,\n                            startTime,\n                            endTime: now()\n                        });\n                        this.addChangeDocumentMeta(id);\n                    }\n                }\n            }\n        });\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<Map<string, RxDocumentData<RxDocType>>> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('findDocumentsById', [ids, deleted]);\n        }\n\n        const collection = localState.collection;\n\n        const ret: Map<string, RxDocumentData<RxDocType>> = new Map();\n        ids.forEach(id => {\n            const documentInDb = collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret.set(id, documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('query', [preparedQuery]);\n        }\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(this.getSortComparator(preparedQuery));\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n        const foundDocuments = query.data();\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<BlobBuffer> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('getChangedDocuments', [options]);\n        }\n\n        const desc = options.direction === 'before';\n        const operator = options.direction === 'after' ? '$gt' : '$lt';\n\n        let query = localState.changesCollection\n            .chain()\n            .find({\n                sequence: {\n                    [operator]: options.sinceSequence\n                }\n            })\n            .simplesort(\n                'sequence',\n                !desc\n            );\n        if (options.limit) {\n            query = query.limit(options.limit);\n        }\n        const changedDocuments: RxStorageChangedDocumentMeta[] = query\n            .data()\n            .map(result => ({\n                id: result.id,\n                sequence: result.sequence\n            }));\n\n        const useForLastSequence = desc ? lastOfArray(changedDocuments) : changedDocuments[0];\n\n        const ret: {\n            changedDocuments: RxStorageChangedDocumentMeta[];\n            lastSequence: number;\n        } = {\n            changedDocuments,\n            lastSequence: useForLastSequence ? useForLastSequence.sequence : options.sinceSequence\n        }\n\n        return ret;\n    }\n    changeStream(): Observable<RxStorageChangeEvent<RxDocumentData<RxDocType>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n        if (this.internals.localState) {\n            const localState = await this.getLocalState();\n            localState.database.saveDatabase();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection,\n                    localState.changesCollection\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('remove', []);\n        }\n        localState.database.removeCollection(this.collectionName);\n        localState.database.removeCollection(localState.changesCollection.name);\n    }\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(params.databaseName, databaseSettings);\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!Array.isArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    /**\n     * TODO disable stuff we do not need from CollectionOptions\n     */\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions as any\n    );\n    databaseState.openCollections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS)\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.openCollections[changesCollectionName] = changesCollection;\n\n    return {\n        database: databaseState.database,\n        collection,\n        changesCollection\n    }\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n    // optimisation shortcut, directly create db is non multi instance.\n    if (!params.broadcastChannel) {\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings,\n        params.broadcastChannel\n    );\n\n    return instance;\n}\n"]}