{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"names":["instanceId","RxStorageInstanceLoki","storage","databaseName","collectionName","schema","internals","options","databaseSettings","changes$","Subject","lastChangefeedSequence","closed","primaryPath","primaryKey","OPEN_LOKIJS_STORAGE_INSTANCES","add","leaderElector","awaitLeadership","then","broadcastChannel","addEventListener","msg","type","LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE","requestId","response","operation","params","isError","result","postMessage","getLocalState","ret","localState","mustUseLocalState","hasLeader","applyOnce","isLeader","createLokiLocalState","multiInstance","requestRemoteInstance","responsePromise","Promise","res","rej","listener","removeEventListener","addChangeDocumentMeta","id","lastDoc","changesCollection","chain","simplesort","limit","data","sequence","nextFeedSequence","insert","bulkWrite","documentWrites","length","args","success","error","eventBulk","events","forEach","writeRow","startTime","document","documentInDb","collection","by","newRevision","insertedIsDeleted","_deleted","writeDoc","Object","assign","_rev","_attachments","push","eventId","documentId","change","doc","previous","endTime","revInDb","err","status","newRevHeight","isDeleted","$loki","update","databaseState","saveQueue","addWrite","next","bulkAddRevisions","documents","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","storeAtLoki","findDocumentsById","ids","deleted","query","preparedQuery","find","selector","sort","skip","offset","foundDocuments","map","lokiDoc","getAttachmentData","_documentId","_attachmentId","Error","getChangedDocuments","desc","direction","operator","sinceSequence","changedDocuments","useForLastSequence","lastSequence","changeStream","asObservable","close","complete","dbState","run","remove","database","removeCollection","name","indices","indexes","idx","Array","isArray","collectionOptions","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","addCollection","collections","changesCollectionName","CHANGES_COLLECTION_SUFFIX","changesCollectionOptions","createLokiStorageInstance","instance"],"mappings":"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","sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    promiseWait,\n    createRevision,\n    getHeightOfRevision,\n    parseRevision,\n    lastOfArray,\n    flatClone,\n    now,\n    ensureNotFalsy,\n    randomCouchString\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    BlobBuffer,\n    ChangeStreamOnceOptions,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageChangedDocumentMeta,\n    RxStorageInstanceCreationParams,\n    LokiRemoteResponseBroadcastMessage,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk\n} from '../../types';\nimport {\n    LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE,\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    removeLokiLeaderElectorReference\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport { RxStorageLoki } from './rx-storage-lokijs';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings\n> {\n\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private lastChangefeedSequence: number = 0;\n    public readonly instanceId = instanceId++;\n\n    private closed = false;\n\n    constructor(\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel.addEventListener('message', async (msg) => {\n                    if (\n                        msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                        msg.requestId &&\n                        msg.databaseName === this.databaseName &&\n                        msg.collectionName === this.collectionName &&\n                        !msg.response\n                    ) {\n\n                        const operation = (msg as any).operation;\n                        const params = (msg as any).params;\n                        let result: any;\n                        let isError = false;\n                        try {\n                            result = await (this as any)[operation](...params);\n                        } catch (err) {\n                            result = err;\n                            isError = true;\n                        }\n\n                        const response: LokiRemoteResponseBroadcastMessage = {\n                            response: true,\n                            requestId: msg.requestId,\n                            databaseName: this.databaseName,\n                            collectionName: this.collectionName,\n                            result,\n                            isError,\n                            type: msg.type\n                        };\n                        ensureNotFalsy(this.internals.leaderElector).broadcastChannel.postMessage(response);\n                    }\n                });\n            });\n        }\n    }\n\n    private getLocalState() {\n        const ret = ensureNotFalsy(this.internals.localState);\n        return ret;\n    }\n\n    /**\n     * If the local state must be used, that one is returned.\n     * Returns false if a remote instance must be used.\n     */\n    public async mustUseLocalState(): Promise<LokiLocalDatabaseState | false> {\n        if (this.closed) {\n            return false;\n        }\n\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n        const leaderElector = ensureNotFalsy(this.internals.leaderElector);\n\n        while (\n            !leaderElector.hasLeader\n        ) {\n            await leaderElector.applyOnce();\n\n            // TODO why do we need this line to pass the tests?\n            // otherwise we somehow do never get a leader.\n            /**\n             * TODO why do we need this line to pass the tests?\n             * Without it, we somehow do never get a leader.\n             * Does applyOnce() fully block the cpu?\n             */\n            await promiseWait(0); // TODO remove this line\n        }\n\n        /**\n         * It might already have a localState after the applying\n         * because another subtask also called mustUSeLocalState()\n         */\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n\n        if (\n            leaderElector.isLeader &&\n            !this.internals.localState\n        ) {\n\n            // own is leader, use local instance\n            this.internals.localState = createLokiLocalState<any>({\n                databaseName: this.databaseName,\n                collectionName: this.collectionName,\n                options: this.options,\n                schema: this.schema,\n                multiInstance: this.internals.leaderElector ? true : false\n            }, this.databaseSettings);\n            return this.getLocalState();\n        } else {\n            // other is leader, send message to remote leading instance\n            return false;\n        }\n    }\n\n    private async requestRemoteInstance(\n        operation: string,\n        params: any[]\n    ): Promise<any | any[]> {\n        const broadcastChannel = ensureNotFalsy(this.internals.leaderElector).broadcastChannel;\n        const requestId = randomCouchString(12);\n        const responsePromise = new Promise<any>((res, rej) => {\n            const listener = (msg: any) => {\n                if (\n                    msg.type === LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                    msg.response === true &&\n                    msg.requestId === requestId\n                ) {\n                    if (msg.isError) {\n                        broadcastChannel.removeEventListener('message', listener);\n                        rej(msg.result);\n                    } else {\n                        broadcastChannel.removeEventListener('message', listener);\n                        res(msg.result);\n                    }\n                }\n            };\n            broadcastChannel.addEventListener('message', listener);\n        });\n\n        broadcastChannel.postMessage({\n            response: false,\n            type: LOKI_BROADCAST_CHANNEL_MESSAGE_TYPE,\n            operation,\n            params,\n            requestId,\n            databaseName: this.databaseName,\n            collectionName: this.collectionName\n        });\n        const result = await responsePromise;\n        return result;\n    }\n\n    /**\n     * Adds an entry to the changes feed\n     * that can be queried to check which documents have been\n     * changed since sequence X.\n     */\n    private async addChangeDocumentMeta(id: string) {\n        const localState = await this.getLocalState();\n        if (!this.lastChangefeedSequence) {\n            const lastDoc = localState.changesCollection\n                .chain()\n                .simplesort('sequence', true)\n                .limit(1)\n                .data()[0];\n            if (lastDoc) {\n                this.lastChangefeedSequence = lastDoc.sequence;\n            }\n        }\n\n        const nextFeedSequence = this.lastChangefeedSequence + 1;\n        localState.changesCollection.insert({\n            id,\n            sequence: nextFeedSequence\n        });\n        this.lastChangefeedSequence = nextFeedSequence;\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkWrite', [documentWrites]);\n        }\n\n        /**\n         * lokijs is in memory and non-async, so we emulate async behavior\n         * to ensure all RxStorage implementations behave equal.\n         */\n        await promiseWait(0);\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        documentWrites.forEach(writeRow => {\n            const startTime = now();\n            const id: string = writeRow.document[this.primaryPath] as any;\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n\n            if (!documentInDb) {\n                // insert new document\n                const newRevision = '1-' + createRevision(writeRow.document);\n\n                /**\n                 * It is possible to insert already deleted documents,\n                 * this can happen on replication.\n                 */\n                const insertedIsDeleted = writeRow.document._deleted ? true : false;\n\n                const writeDoc = Object.assign(\n                    {},\n                    writeRow.document,\n                    {\n                        _rev: newRevision,\n                        _deleted: insertedIsDeleted,\n                        // TODO attachments are currently not working with lokijs\n                        _attachments: {} as any\n                    }\n                );\n                localState.collection.insert(flatClone(writeDoc));\n                if (!insertedIsDeleted) {\n                    this.addChangeDocumentMeta(id);\n                    eventBulk.events.push({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change: {\n                            doc: writeDoc,\n                            id,\n                            operation: 'INSERT',\n                            previous: null\n                        },\n                        startTime,\n                        endTime: now()\n                    });\n                }\n                ret.success[id] = writeDoc;\n            } else {\n                // update existing document\n                const revInDb: string = documentInDb._rev;\n\n                // inserting a deleted document is possible\n                // without sending the previous data.\n                if (!writeRow.previous && documentInDb._deleted) {\n                    writeRow.previous = documentInDb;\n                }\n\n                if (\n                    (\n                        !writeRow.previous &&\n                        !documentInDb._deleted\n                    ) ||\n                    (\n                        !!writeRow.previous &&\n                        revInDb !== writeRow.previous._rev\n                    )\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error[id] = err;\n                } else {\n                    const newRevHeight = getHeightOfRevision(revInDb) + 1;\n                    const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n                    const isDeleted = !!writeRow.document._deleted;\n                    const writeDoc: any = Object.assign(\n                        {},\n                        writeRow.document,\n                        {\n                            $loki: documentInDb.$loki,\n                            _rev: newRevision,\n                            _deleted: isDeleted,\n                            // TODO attachments are currently not working with lokijs\n                            _attachments: {}\n                        }\n                    );\n                    localState.collection.update(writeDoc);\n                    this.addChangeDocumentMeta(id);\n\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: stripLokiKey(writeDoc)\n                        };\n                    } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: writeRow.previous,\n                            doc: stripLokiKey(writeDoc)\n                        };\n                    } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                        /**\n                         * On delete, we send the 'new' rev in the previous property,\n                         * to have the equal behavior as pouchdb.\n                         */\n                        const previous = flatClone(writeRow.previous);\n                        previous._rev = newRevision;\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous,\n                            doc: null\n                        };\n                    }\n                    if (!change) {\n                        throw newRxError('SNH', { args: { writeRow } });\n                    }\n                    eventBulk.events.push({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change,\n                        startTime,\n                        endTime: now()\n                    });\n                    ret.success[id] = stripLokiKey(writeDoc);\n                }\n            }\n        });\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(eventBulk);\n        return ret;\n    }\n\n    async bulkAddRevisions(documents: RxDocumentData<RxDocType>[]): Promise<void> {\n        if (documents.length === 0) {\n            throw newRxError('P3', {\n                args: {\n                    documents\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkAddRevisions', [documents]);\n        }\n\n        /**\n         * lokijs is in memory and non-async, so we emulate async behavior\n         * to ensure all RxStorage implementations behave equal.\n         */\n        await promiseWait(0);\n\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        documents.forEach(docData => {\n            const startTime = now();\n            const id: string = docData[this.primaryPath] as any;\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (!documentInDb) {\n                // document not here, so we can directly insert\n                localState.collection.insert(flatClone(docData));\n                eventBulk.events.push({\n                    documentId: id,\n                    eventId: getLokiEventKey(false, id, docData._rev),\n                    change: {\n                        doc: docData,\n                        id,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n                this.addChangeDocumentMeta(id);\n            } else {\n                const newWriteRevision = parseRevision(docData._rev);\n                const oldRevision = parseRevision(documentInDb._rev);\n\n                let mustUpdate: boolean = false;\n                if (newWriteRevision.height !== oldRevision.height) {\n                    // height not equal, compare base on height\n                    if (newWriteRevision.height > oldRevision.height) {\n                        mustUpdate = true;\n                    }\n                } else if (newWriteRevision.hash > oldRevision.hash) {\n                    // equal height but new write has the 'winning' hash\n                    mustUpdate = true;\n                }\n                if (mustUpdate) {\n                    const storeAtLoki = flatClone(docData) as any;\n                    storeAtLoki.$loki = documentInDb.$loki;\n                    localState.collection.update(storeAtLoki);\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: stripLokiKey(documentInDb),\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous: stripLokiKey(documentInDb),\n                            doc: null\n                        };\n                    } else if (documentInDb._deleted && docData._deleted) {\n                        change = null;\n                    }\n                    if (change) {\n                        eventBulk.events.push({\n                            documentId: id,\n                            eventId: getLokiEventKey(false, id, docData._rev),\n                            change,\n                            startTime,\n                            endTime: now()\n                        });\n                        this.addChangeDocumentMeta(id);\n                    }\n                }\n            }\n        });\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(eventBulk);\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<BlobBuffer> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('getChangedDocuments', [options]);\n        }\n\n        const desc = options.direction === 'before';\n        const operator = options.direction === 'after' ? '$gt' : '$lt';\n\n        let query = localState.changesCollection\n            .chain()\n            .find({\n                sequence: {\n                    [operator]: options.sinceSequence\n                }\n            })\n            .simplesort(\n                'sequence',\n                desc\n            );\n        if (options.limit) {\n            query = query.limit(options.limit);\n        }\n        const changedDocuments: RxStorageChangedDocumentMeta[] = query\n            .data()\n            .map(result => ({\n                id: result.id,\n                sequence: result.sequence\n            }));\n\n        const useForLastSequence = !desc ? lastOfArray(changedDocuments) : changedDocuments[0];\n\n        const ret: {\n            changedDocuments: RxStorageChangedDocumentMeta[];\n            lastSequence: number;\n        } = {\n            changedDocuments,\n            lastSequence: useForLastSequence ? useForLastSequence.sequence : options.sinceSequence\n        }\n\n        return ret;\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection,\n                    localState.changesCollection\n                ]\n            );\n        }\n        removeLokiLeaderElectorReference(this.storage, this.databaseName);\n    }\n    async remove(): Promise<void> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('remove', []);\n        }\n        localState.databaseState.database.removeCollection(this.collectionName);\n        localState.databaseState.database.removeCollection(localState.changesCollection.name);\n        this.close();\n    }\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!Array.isArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    /**\n     * TODO disable stuff we do not need from CollectionOptions\n     */\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS)\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.collections[params.collectionName] = changesCollection;\n\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection,\n        changesCollection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(storage, params.databaseName);\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    /**\n     * Directly create the localState if the db becomes leader.\n     */\n    if (params.multiInstance) {\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                instance.mustUseLocalState();\n            });\n    }\n\n\n    return instance;\n}\n"],"file":"rx-storage-instance-loki.js"}