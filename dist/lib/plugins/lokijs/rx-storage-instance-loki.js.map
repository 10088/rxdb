{"version":3,"file":"rx-storage-instance-loki.js","names":["createLokiStorageInstance","storage","params","databaseSettings","instance","RxStorageInstanceLoki","databaseInstanceToken","databaseName","collectionName","schema","internals","options","addRxStorageMultiInstanceSupport","leaderElector","broadcastChannel","undefined","multiInstance","closeBefore","close","bind","removeBroadcastChannelReference","broadcastChannelRefObject","removeBefore","remove","ensureNotFalsy","awaitLeadership","then","closed","mustUseLocalState","getLokiLeaderElector","localState","createLokiLocalState","getLokiDatabase","databaseState","indices","indexes","forEach","idx","isMaybeReadonlyArray","push","primaryKey","getPrimaryFieldOfPrimaryKey","lokiCollectionName","version","collectionOptions","Object","assign","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","collection","database","addCollection","collections","ret","instanceId","now","changes$","Subject","lastChangefeedSequence","primaryPath","OPEN_LOKIJS_STORAGE_INSTANCES","add","addEventListener","msg","handleRemoteRequest","bulkWrite","documentWrites","length","newRxError","args","requestRemoteInstance","success","error","docsInDb","Map","docsInDbWithLokiKey","writeRow","id","document","documentInDb","by","set","stripLokiKey","categorized","categorizeBulkWriteRows","bulkInsertDocs","docId","insert","flatClone","bulkUpdateDocs","documentInDbWithLokiKey","getFromMapOrThrow","writeDoc","$loki","update","errors","err","documentId","saveQueue","addWrite","eventBulk","events","next","findDocumentsById","ids","deleted","_deleted","query","preparedQuery","chain","find","selector","sort","getLokiSortComparator","skip","offset","limit","foundDocuments","data","map","lokiDoc","documents","getAttachmentData","_documentId","_attachmentId","Error","getChangedDocumentsSince","checkpoint","sinceLwt","lwt","RX_META_LWT_MINIMUM","$gte","getSortDocumentsByLastWriteTimeComparator","changedDocs","first","_meta","shift","slice","docData","changeStream","asObservable","cleanup","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","complete","dbState","run","closeLokiCollections","removeCollection","name"],"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    getSortDocumentsByLastWriteTimeComparator,\n    RX_META_LWT_MINIMUM\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    LokiChangesCheckpoint,\n    StringKeys,\n    RxDocumentDataById,\n    DeepReadonly\n} from '../../types';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport, removeBroadcastChannelReference } from '../../rx-storage-multiinstance';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private lastChangefeedSequence: number = 0;\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n\n    constructor(\n        public readonly databaseInstanceToken: string,\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', async (msg) => handleRemoteRequest(this, msg));\n            });\n        }\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[StringKeys<RxDocType>],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id as any, documentInDb);\n                docsInDb.set(id as any, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            docsInDb,\n            documentWrites\n        );\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId as any);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.errors.forEach(err => {\n            ret.error[err.documentId] = err;\n        });\n        localState.databaseState.saveQueue.addWrite();\n\n        if (categorized.eventBulk.events.length > 0) {\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: RxDocumentDataById<RxDocType> = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: LokiChangesCheckpoint\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: LokiChangesCheckpoint;\n    }[]> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocumentsSince', [limit, checkpoint]);\n        }\n\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const query = localState.collection\n            .chain()\n            .find({\n                '_meta.lwt': {\n                    $gte: sinceLwt\n                }\n            })\n            .sort(getSortDocumentsByLastWriteTimeComparator(this.primaryPath as any));\n        let changedDocs = query.data();\n\n        const first = changedDocs[0];\n        if (\n            checkpoint &&\n            first &&\n            first[this.primaryPath] === checkpoint.id &&\n            first._meta.lwt === checkpoint.lwt\n        ) {\n            changedDocs.shift();\n        }\n\n        changedDocs = changedDocs.slice(0, limit);\n        return changedDocs.map(docData => ({\n            document: stripLokiKey(docData),\n            checkpoint: {\n                id: docData[this.primaryPath] as any,\n                lwt: docData._meta.lwt\n            }\n        }));\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        await localState.databaseState.saveQueue.run();\n        return this.close();\n    }\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    const broadcastChannelRefObject: DeepReadonly<any> = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(\n            params.databaseInstanceToken,\n            broadcastChannelRefObject,\n            params.databaseName\n        );\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseInstanceToken,\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        params,\n        instance,\n        internals.leaderElector ? internals.leaderElector.broadcastChannel : undefined\n    );\n\n    if (params.multiInstance) {\n        /**\n         * Clean up the broadcast-channel reference on close()\n         */\n        const closeBefore = instance.close.bind(instance);\n        instance.close = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return closeBefore();\n        };\n        const removeBefore = instance.remove.bind(instance);\n        instance.remove = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return removeBefore();\n        };\n\n        /**\n         * Directly create the localState when/if the db becomes leader.\n         */\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance)\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"mappings":"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"}