{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"names":["createLokiStorageInstance","storage","params","databaseSettings","instance","RxStorageInstanceLoki","databaseName","collectionName","schema","internals","options","multiInstance","leaderElector","awaitLeadership","then","closed","localState","createLokiLocalState","databaseState","indices","indexes","forEach","idx","push","primaryKey","collectionOptions","Object","assign","collection","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","database","addCollection","collections","changesCollectionName","CHANGES_COLLECTION_SUFFIX","changesCollectionOptions","changesCollection","ret","instanceId","changes$","Subject","lastChangefeedSequence","primaryPath","OPEN_LOKIJS_STORAGE_INSTANCES","add","broadcastChannel","addEventListener","msg","addChangeDocumentMeta","id","lastDoc","chain","simplesort","limit","data","sequence","nextFeedSequence","insert","bulkWrite","documentWrites","length","args","success","error","eventBulk","events","writeRow","startTime","document","documentInDb","by","newRevision","insertedIsDeleted","_deleted","writeDoc","_rev","_attachments","eventId","documentId","change","doc","operation","previous","endTime","revInDb","err","isError","status","newRevHeight","isDeleted","$loki","update","saveQueue","addWrite","next","bulkAddRevisions","documents","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","storeAtLoki","findDocumentsById","ids","deleted","query","preparedQuery","find","selector","sort","skip","offset","foundDocuments","map","lokiDoc","getAttachmentData","_documentId","_attachmentId","Error","getChangedDocuments","desc","direction","operator","sinceSequence","changedDocuments","result","useForLastSequence","lastSequence","changeStream","asObservable","close","complete","dbState","run","remove","removeCollection","name"],"mappings":"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","sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    createRevision,\n    getHeightOfRevision,\n    parseRevision,\n    lastOfArray,\n    flatClone,\n    now,\n    ensureNotFalsy,\n    randomCouchString, isMaybeReadonlyArray\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    ChangeStreamOnceOptions,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageChangedDocumentMeta,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk\n} from '../../types';\nimport {\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    removeLokiLeaderElectorReference,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings\n> {\n\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private lastChangefeedSequence: number = 0;\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', async (msg) => handleRemoteRequest(this, msg));\n            });\n        }\n    }\n\n    /**\n     * Adds an entry to the changes feed\n     * that can be queried to check which documents have been\n     * changed since sequence X.\n     */\n    private async addChangeDocumentMeta(id: string) {\n        const localState = await ensureNotFalsy(this.internals.localState);\n        if (!this.lastChangefeedSequence) {\n            const lastDoc = localState.changesCollection\n                .chain()\n                .simplesort('sequence', true)\n                .limit(1)\n                .data()[0];\n            if (lastDoc) {\n                this.lastChangefeedSequence = lastDoc.sequence;\n            }\n        }\n\n        const nextFeedSequence = this.lastChangefeedSequence + 1;\n        localState.changesCollection.insert({\n            id,\n            sequence: nextFeedSequence\n        });\n        this.lastChangefeedSequence = nextFeedSequence;\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        documentWrites.forEach(writeRow => {\n            const startTime = now();\n            const id: string = writeRow.document[this.primaryPath] as any;\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n\n            if (!documentInDb) {\n                // insert new document\n                const newRevision = '1-' + createRevision(writeRow.document);\n\n                /**\n                 * It is possible to insert already deleted documents,\n                 * this can happen on replication.\n                 */\n                const insertedIsDeleted = writeRow.document._deleted ? true : false;\n\n                const writeDoc = Object.assign(\n                    {},\n                    writeRow.document,\n                    {\n                        _rev: newRevision,\n                        _deleted: insertedIsDeleted,\n                        // TODO attachments are currently not working with lokijs\n                        _attachments: {} as any\n                    }\n                );\n                localState.collection.insert(flatClone(writeDoc));\n                if (!insertedIsDeleted) {\n                    this.addChangeDocumentMeta(id);\n                    eventBulk.events.push({\n                        eventId: getLokiEventKey(this, id, newRevision),\n                        documentId: id,\n                        change: {\n                            doc: writeDoc,\n                            id,\n                            operation: 'INSERT',\n                            previous: null\n                        },\n                        startTime,\n                        endTime: now()\n                    });\n                }\n                ret.success[id] = writeDoc;\n            } else {\n                // update existing document\n                const revInDb: string = documentInDb._rev;\n\n                // inserting a deleted document is possible\n                // without sending the previous data.\n                if (!writeRow.previous && documentInDb._deleted) {\n                    writeRow.previous = documentInDb;\n                }\n\n                if (\n                    (\n                        !writeRow.previous &&\n                        !documentInDb._deleted\n                    ) ||\n                    (\n                        !!writeRow.previous &&\n                        revInDb !== writeRow.previous._rev\n                    )\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error[id] = err;\n                } else {\n                    const newRevHeight = getHeightOfRevision(revInDb) + 1;\n                    const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n                    const isDeleted = !!writeRow.document._deleted;\n                    const writeDoc: any = Object.assign(\n                        {},\n                        writeRow.document,\n                        {\n                            $loki: documentInDb.$loki,\n                            _rev: newRevision,\n                            _deleted: isDeleted,\n                            // TODO attachments are currently not working with lokijs\n                            _attachments: {}\n                        }\n                    );\n\n                    localState.collection.update(writeDoc);\n                    this.addChangeDocumentMeta(id);\n\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: stripLokiKey(writeDoc)\n                        };\n                    } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: writeRow.previous,\n                            doc: stripLokiKey(writeDoc)\n                        };\n                    } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                        /**\n                         * On delete, we send the 'new' rev in the previous property,\n                         * to have the equal behavior as pouchdb.\n                         */\n                        const previous = flatClone(writeRow.previous);\n                        previous._rev = newRevision;\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous,\n                            doc: null\n                        };\n                    }\n                    if (!change) {\n                        throw newRxError('SNH', { args: { writeRow } });\n                    }\n                    eventBulk.events.push({\n                        eventId: getLokiEventKey(this, id, newRevision),\n                        documentId: id,\n                        change,\n                        startTime,\n                        endTime: now()\n                    });\n                    ret.success[id] = stripLokiKey(writeDoc);\n                }\n            }\n        });\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(eventBulk);\n\n        return ret;\n    }\n\n    async bulkAddRevisions(documents: RxDocumentData<RxDocType>[]): Promise<void> {\n        if (documents.length === 0) {\n            throw newRxError('P3', {\n                args: {\n                    documents\n                }\n            });\n        }\n\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkAddRevisions', [documents]);\n        }\n\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        documents.forEach(docData => {\n            const startTime = now();\n            const id: string = docData[this.primaryPath] as any;\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (!documentInDb) {\n                // document not here, so we can directly insert\n                localState.collection.insert(flatClone(docData));\n                eventBulk.events.push({\n                    documentId: id,\n                    eventId: getLokiEventKey(this, id, docData._rev),\n                    change: {\n                        doc: docData,\n                        id,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n                this.addChangeDocumentMeta(id);\n            } else {\n                const newWriteRevision = parseRevision(docData._rev);\n                const oldRevision = parseRevision(documentInDb._rev);\n\n                let mustUpdate: boolean = false;\n                if (newWriteRevision.height !== oldRevision.height) {\n                    // height not equal, compare base on height\n                    if (newWriteRevision.height > oldRevision.height) {\n                        mustUpdate = true;\n                    }\n                } else if (newWriteRevision.hash > oldRevision.hash) {\n                    // equal height but new write has the 'winning' hash\n                    mustUpdate = true;\n                }\n                if (mustUpdate) {\n                    const storeAtLoki = flatClone(docData) as any;\n                    storeAtLoki.$loki = documentInDb.$loki;\n                    localState.collection.update(storeAtLoki);\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: stripLokiKey(documentInDb),\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous: stripLokiKey(documentInDb),\n                            doc: null\n                        };\n                    } else if (documentInDb._deleted && docData._deleted) {\n                        change = null;\n                    }\n                    if (change) {\n                        eventBulk.events.push({\n                            documentId: id,\n                            eventId: getLokiEventKey(this, id, docData._rev),\n                            change,\n                            startTime,\n                            endTime: now()\n                        });\n                        this.addChangeDocumentMeta(id);\n                    }\n                }\n            }\n        });\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(eventBulk);\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocuments', [options]);\n        }\n\n        const desc = options.direction === 'before';\n        const operator = options.direction === 'after' ? '$gt' : '$lt';\n\n        let query = localState.changesCollection\n            .chain()\n            .find({\n                sequence: {\n                    [operator]: options.sinceSequence\n                }\n            })\n            .simplesort(\n                'sequence',\n                desc\n            );\n        if (options.limit) {\n            query = query.limit(options.limit);\n        }\n        const changedDocuments: RxStorageChangedDocumentMeta[] = query\n            .data()\n            .map(result => ({\n                id: result.id,\n                sequence: result.sequence\n            }));\n\n        const useForLastSequence = !desc ? lastOfArray(changedDocuments) : changedDocuments[0];\n\n        const ret: {\n            changedDocuments: RxStorageChangedDocumentMeta[];\n            lastSequence: number;\n        } = {\n            changedDocuments,\n            lastSequence: useForLastSequence ? useForLastSequence.sequence : options.sinceSequence\n        }\n\n        return ret;\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection,\n                    localState.changesCollection\n                ]\n            );\n        }\n        removeLokiLeaderElectorReference(this.storage, this.databaseName);\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(this.collectionName);\n        localState.databaseState.database.removeCollection(localState.changesCollection.name);\n        return this.close();\n    }\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS)\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.collections[params.collectionName] = changesCollection;\n\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection,\n        changesCollection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(storage, params.databaseName);\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    /**\n     * Directly create the localState if the db becomes leader.\n     */\n    if (params.multiInstance) {\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance)\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"file":"rx-storage-instance-loki.js"}