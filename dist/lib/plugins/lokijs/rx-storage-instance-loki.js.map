{"version":3,"file":"rx-storage-instance-loki.js","names":["createLokiStorageInstance","storage","params","databaseSettings","instance","RxStorageInstanceLoki","databaseName","collectionName","schema","internals","options","multiInstance","leaderElector","awaitLeadership","then","closed","localState","createLokiLocalState","databaseState","indices","indexes","forEach","idx","push","primaryKey","lokiCollectionName","version","collectionOptions","Object","assign","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","collection","database","addCollection","collections","ret","instanceId","changes$","Subject","lastChangefeedSequence","primaryPath","OPEN_LOKIJS_STORAGE_INSTANCES","add","broadcastChannel","addEventListener","msg","bulkWrite","documentWrites","length","args","success","error","docsInDb","Map","docsInDbWithLokiKey","writeRow","id","document","documentInDb","by","set","categorized","bulkInsertDocs","docId","insert","bulkUpdateDocs","documentInDbWithLokiKey","writeDoc","$loki","update","errors","err","documentId","saveQueue","addWrite","next","eventBulk","findDocumentsById","ids","deleted","_deleted","query","preparedQuery","chain","find","selector","sort","skip","offset","limit","foundDocuments","data","map","lokiDoc","documents","getAttachmentData","_documentId","_attachmentId","Error","getChangedDocumentsSince","checkpoint","sinceLwt","lwt","RX_META_LWT_MINIMUM","$gte","changedDocs","first","_meta","shift","slice","docData","changeStream","asObservable","cleanup","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","remove","close","complete","dbState","run","removeCollection","name"],"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    getSortDocumentsByLastWriteTimeComparator,\n    RX_META_LWT_MINIMUM\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    LokiChangesCheckpoint\n} from '../../types';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    removeLokiLeaderElectorReference,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings\n> {\n\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private lastChangefeedSequence: number = 0;\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey) as any;\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', async (msg) => handleRemoteRequest(this, msg));\n            });\n        }\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[keyof RxDocType], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[keyof RxDocType],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id, documentInDb);\n                docsInDb.set(id, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath,\n            docsInDb,\n            documentWrites\n        );\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success[docId as any] = writeRow.document;\n        });\n        categorized.errors.forEach(err => {\n            ret.error[err.documentId] = err;\n        });\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(categorized.eventBulk);\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: LokiChangesCheckpoint\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: LokiChangesCheckpoint;\n    }[]> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocumentsSince', [limit, checkpoint]);\n        }\n\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const query = localState.collection\n            .chain()\n            .find({\n                '_meta.lwt': {\n                    $gte: sinceLwt\n                }\n            })\n            .sort(getSortDocumentsByLastWriteTimeComparator(this.primaryPath as any));\n        let changedDocs = query.data();\n\n        const first = changedDocs[0];\n        if (\n            checkpoint &&\n            first &&\n            first[this.primaryPath] === checkpoint.id &&\n            first._meta.lwt === checkpoint.lwt\n        ) {\n            changedDocs.shift();\n        }\n\n        changedDocs = changedDocs.slice(0, limit);\n        return changedDocs.map(docData => ({\n            document: stripLokiKey(docData),\n            checkpoint: {\n                id: docData[this.primaryPath] as any,\n                lwt: docData._meta.lwt\n            }\n        }));\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection\n                ]\n            );\n        }\n        removeLokiLeaderElectorReference(this.storage, this.databaseName);\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        return this.close();\n    }\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(storage, params.databaseName);\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    /**\n     * Directly create the localState if the db becomes leader.\n     */\n    if (params.multiInstance) {\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance)\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"mappings":"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"}