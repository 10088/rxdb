{"version":3,"file":"loki-save-queue.js","names":["LokiSaveQueue","lokiDatabase","databaseSettings","writesSinceLastRun","saveQueue","PROMISE_RESOLVE_VOID","saveQueueC","addWrite","run","adapter","then","requestIdlePromise","writeAmount","Promise","res","rej","saveDatabase","err","autosaveCallback"],"sources":["../../../../src/plugins/lokijs/loki-save-queue.ts"],"sourcesContent":["import type { LokiDatabaseSettings } from '../../types';\nimport {\n    PROMISE_RESOLVE_VOID,\n    requestIdlePromise\n} from '../../util';\n\n/**\n * The autosave feature of lokijs has strange behaviors\n * and often runs a save in critical moments when other\n * more important tasks are running.\n * So instead we use a custom save queue that ensures we\n * only run loki.saveDatabase() when nothing else is running.\n */\nexport class LokiSaveQueue {\n    public writesSinceLastRun: number = 0;\n\n    /**\n     * Ensures that we do not run multiple saves\n     * in parallel\n     */\n    public saveQueue: Promise<void> = PROMISE_RESOLVE_VOID;\n    // track amount of non-finished save calls in the queue.\n    public saveQueueC = 0;\n\n    constructor(\n        public readonly lokiDatabase: Loki,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n\n    }\n\n    public addWrite() {\n        this.writesSinceLastRun = this.writesSinceLastRun + 1;\n        this.run();\n    }\n\n    public run() {\n        if (\n            // no persistence adapter given, so we do not need to save\n            !this.databaseSettings.adapter ||\n            // do not add more then two pending calls to the queue.\n            this.saveQueueC > 2\n\n        ) {\n            return this.saveQueue;\n        }\n\n        this.saveQueueC = this.saveQueueC + 1;\n        this.saveQueue = this.saveQueue\n            .then(async () => {\n                /**\n                 * Always wait until the JavaScript process is idle.\n                 * This ensures that CPU blocking writes are finished\n                 * before we proceed.\n                 */\n                await requestIdlePromise();\n\n                // no write happened since the last save call\n                if (this.writesSinceLastRun === 0) {\n                    return;\n                }\n\n                /**\n                 * Because LokiJS is a in-memory database,\n                 * we can just wait until the JavaScript process is idle\n                 * via requestIdlePromise(). Then we know that nothing important\n                 * is running at the moment.\n                 */\n                await requestIdlePromise().then(() => requestIdlePromise());\n\n                if (this.writesSinceLastRun === 0) {\n                    return;\n                }\n\n                const writeAmount = this.writesSinceLastRun;\n                this.writesSinceLastRun = 0;\n                return new Promise<void>((res, rej) => {\n                    this.lokiDatabase.saveDatabase(err => {\n                        if (err) {\n                            this.writesSinceLastRun = this.writesSinceLastRun + writeAmount;\n                            rej(err);\n                        } else {\n                            if (this.databaseSettings.autosaveCallback) {\n                                this.databaseSettings.autosaveCallback();\n                            }\n                            res();\n                        }\n                    });\n                });\n            })\n            .catch(() => { })\n            .then(() => {\n                this.saveQueueC = this.saveQueueC - 1;\n            });\n        return this.saveQueue;\n    }\n}\n"],"mappings":";;;;;;;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;IACaA,a;EAGT;AACJ;AACA;AACA;EAEI;EAGA,uBACoBC,YADpB,EAEoBC,gBAFpB,EAGE;IAAA,KAbKC,kBAaL,GAbkC,CAalC;IAAA,KAPKC,SAOL,GAPgCC,0BAOhC;IAAA,KALKC,UAKL,GALkB,CAKlB;IAAA,KAFkBL,YAElB,GAFkBA,YAElB;IAAA,KADkBC,gBAClB,GADkBA,gBAClB;EAED;;;;SAEMK,Q,GAAP,oBAAkB;IACd,KAAKJ,kBAAL,GAA0B,KAAKA,kBAAL,GAA0B,CAApD;IACA,KAAKK,GAAL;EACH,C;;SAEMA,G,GAAP,eAAa;IAAA;;IACT,KACI;IACA,CAAC,KAAKN,gBAAL,CAAsBO,OAAvB,IACA;IACA,KAAKH,UAAL,GAAkB,CAJtB,EAME;MACE,OAAO,KAAKF,SAAZ;IACH;;IAED,KAAKE,UAAL,GAAkB,KAAKA,UAAL,GAAkB,CAApC;IACA,KAAKF,SAAL,GAAiB,KAAKA,SAAL,CACZM,IADY;MAAA,IACK;QACd;AAChB;AACA;AACA;AACA;QAL8B,uBAMR,IAAAC,wBAAA,GANQ;UAQd;UACA,IAAI,KAAI,CAACR,kBAAL,KAA4B,CAAhC,EAAmC;YAC/B;UACH;UAED;AAChB;AACA;AACA;AACA;AACA;;;UAlB8B,uBAmBR,IAAAQ,wBAAA,IAAqBD,IAArB,CAA0B;YAAA,OAAM,IAAAC,wBAAA,GAAN;UAAA,CAA1B,CAnBQ;YAqBd,IAAI,KAAI,CAACR,kBAAL,KAA4B,CAAhC,EAAmC;cAC/B;YACH;;YAED,IAAMS,WAAW,GAAG,KAAI,CAACT,kBAAzB;YACA,KAAI,CAACA,kBAAL,GAA0B,CAA1B;YACA,OAAO,IAAIU,OAAJ,CAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;cACnC,KAAI,CAACd,YAAL,CAAkBe,YAAlB,CAA+B,UAAAC,GAAG,EAAI;gBAClC,IAAIA,GAAJ,EAAS;kBACL,KAAI,CAACd,kBAAL,GAA0B,KAAI,CAACA,kBAAL,GAA0BS,WAApD;kBACAG,GAAG,CAACE,GAAD,CAAH;gBACH,CAHD,MAGO;kBACH,IAAI,KAAI,CAACf,gBAAL,CAAsBgB,gBAA1B,EAA4C;oBACxC,KAAI,CAAChB,gBAAL,CAAsBgB,gBAAtB;kBACH;;kBACDJ,GAAG;gBACN;cACJ,CAVD;YAWH,CAZM,CAAP;UA3Bc;QAAA;MAwCjB,CAzCY;QAAA;MAAA;IAAA,YA0CN,YAAM,CAAG,CA1CH,EA2CZJ,IA3CY,CA2CP,YAAM;MACR,KAAI,CAACJ,UAAL,GAAkB,KAAI,CAACA,UAAL,GAAkB,CAApC;IACH,CA7CY,CAAjB;IA8CA,OAAO,KAAKF,SAAZ;EACH,C"}