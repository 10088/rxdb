{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-lokijs.ts"],"names":["RxStorageLoki","databaseSettings","name","hash","data","Promise","resolve","createStorageInstance","params","createKeyObjectStorageInstance","useParams","collectionName","getRxStorageLoki","storage"],"mappings":";;;;;;;;;;;;;;AAQA;;AACA;;AAIA;;IAKaA,a;AAGT,yBACWC,gBADX,EAEE;AAAA,SAJKC,IAIL,GAJY,QAIZ;AAAA,SADSD,gBACT,GADSA,gBACT;AAAG;;;;SAELE,I,GAAA,cAAKC,IAAL,EAAoD;AAChD,WAAOC,OAAO,CAACC,OAAR,CAAgB,gBAAKF,IAAL,CAAhB,CAAP;AACH,G;;SAEKG,qB;+GAAN,iBACIC,MADJ;AAAA;AAAA;AAAA;AAAA;AAAA,+CAGW,sDAA0BA,MAA1B,EAAkC,KAAKP,gBAAvC,CAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;;;SAMaQ,8B;wHAAb,kBACID,MADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAII;AACME,cAAAA,SALV,GAKsB,qBAAUF,MAAV,CALtB;AAMIE,cAAAA,SAAS,CAACC,cAAV,GAA2BH,MAAM,CAACG,cAAP,GAAwB,aAAnD;AANJ,gDAQW,wEAAmCH,MAAnC,EAA2C,KAAKP,gBAAhD,CARX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;;;;;;;;AAYG,SAASW,gBAAT,GAEU;AAAA,MADbX,gBACa,uEAD4B,EAC5B;AACb,MAAMY,OAAO,GAAG,IAAIb,aAAJ,CAAkBC,gBAAlB,CAAhB;AACA,SAAOY,OAAP;AACH","sourcesContent":["import type {\n    LokiDatabaseSettings,\n    LokiSettings,\n    LokiStorageInternals,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport { flatClone, hash } from '../../util';\nimport {\n    createLokiStorageInstance,\n    RxStorageInstanceLoki\n} from './rx-storage-instance-loki';\nimport {\n    createLokiKeyObjectStorageInstance,\n    RxStorageKeyObjectInstanceLoki\n} from './rx-storage-key-object-instance-loki';\n\nexport class RxStorageLoki implements RxStorage<LokiStorageInternals, LokiSettings> {\n    public name = 'lokijs';\n\n    constructor(\n        public databaseSettings: LokiDatabaseSettings\n    ) { }\n\n    hash(data: Buffer | Blob | string): Promise<string> {\n        return Promise.resolve(hash(data));\n    }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>\n    ): Promise<RxStorageInstanceLoki<RxDocType>> {\n        return createLokiStorageInstance(params, this.databaseSettings);\n    }\n\n    public async createKeyObjectStorageInstance(\n        params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>\n    ): Promise<RxStorageKeyObjectInstanceLoki> {\n\n        // ensure we never mix up key-object data with normal storage documents.\n        const useParams = flatClone(params);\n        useParams.collectionName = params.collectionName + '-key-object';\n\n        return createLokiKeyObjectStorageInstance(params, this.databaseSettings);\n    }\n}\n\nexport function getRxStorageLoki(\n    databaseSettings: LokiDatabaseSettings = {}\n): RxStorageLoki {\n    const storage = new RxStorageLoki(databaseSettings);\n    return storage;\n}\n"],"file":"rx-storage-lokijs.js"}