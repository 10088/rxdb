{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-key-object-instance-loki.ts"],"names":["createLokiKeyObjectStorageInstance","storage","params","databaseSettings","instance","RxStorageKeyObjectInstanceLoki","databaseName","collectionName","internals","options","multiInstance","leaderElector","awaitLeadership","then","localState","createLokiKeyValueLocalState","databaseState","collectionOptions","Object","assign","collection","indices","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","database","addCollection","collections","changesCollectionName","CHANGES_COLLECTION_SUFFIX","changesCollectionOptions","changesCollection","instanceId","changes$","Subject","closed","OPEN_LOKIJS_STORAGE_INSTANCES","add","broadcastChannel","addEventListener","msg","bulkWrite","documentWrites","length","args","startTime","ret","success","error","writeRowById","Map","eventBulk","id","events","forEach","writeRow","document","_id","set","writeDoc","docInDb","by","previous","newRevHeight","_rev","height","newRevision","err","isError","status","documentId","toLoki","$loki","$lastWriteAt","update","insertData","insert","endTime","event","operation","doc","_deleted","previousDoc","eventId","storageChangeEvent","change","push","saveQueue","addWrite","next","findLocalDocumentsById","ids","documentInDb","changeStream","asObservable","close","complete","remove","removeCollection","name"],"mappings":"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","sourcesContent":["import type { ChangeEvent } from 'event-reduce-js';\nimport { Observable, Subject } from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type {\n    BulkWriteLocalRow,\n    EventBulk,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    LokiSettings,\n    LokiStorageInternals,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxStorageBulkWriteLocalError,\n    RxStorageChangeEvent,\n    RxStorageKeyObjectInstance\n} from '../../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    now,\n    parseRevision,\n    randomCouchString\n} from '../../util';\nimport {\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    getLokiLeaderElector,\n    handleRemoteRequest,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    mustUseLocalState,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    removeLokiLeaderElectorReference,\n    requestRemoteInstance,\n    stripLokiKey\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\n\nlet instanceId = 1;\n\nexport class RxStorageKeyObjectInstanceLoki implements RxStorageKeyObjectInstance<LokiStorageInternals, LokiSettings> {\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxLocalDocumentData>>> = new Subject();\n\n    public instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', async (msg) => handleRemoteRequest(this, msg));\n            });\n        }\n    }\n\n    async bulkWrite<RxDocType>(documentWrites: BulkWriteLocalRow<RxDocType>[]): Promise<RxLocalStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const startTime = now();\n        const ret: RxLocalStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const writeRowById: Map<string, BulkWriteLocalRow<RxDocType>> = new Map();\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxLocalDocumentData>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document._id;\n            writeRowById.set(id, writeRow);\n            const writeDoc = flatClone(writeRow.document);\n            const docInDb = localState.collection.by('_id', id);\n\n            // TODO why not use docInDb instead of collection.by() ??\n            const previous = writeRow.previous ? writeRow.previous : localState.collection.by('_id', id);\n\n            const newRevHeight = previous ? parseRevision(previous._rev).height + 1 : 1;\n            const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n            writeDoc._rev = newRevision;\n            if (docInDb) {\n                if (\n                    !writeRow.previous ||\n                    docInDb._rev !== writeRow.previous._rev\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteLocalError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error[id] = err;\n                    return;\n                } else {\n                    const toLoki: any = flatClone(writeDoc);\n                    toLoki.$loki = docInDb.$loki;\n                    toLoki.$lastWriteAt = startTime;\n                    localState.collection.update(toLoki);\n                }\n            } else {\n                const insertData: any = flatClone(writeDoc);\n                insertData.$lastWriteAt = startTime;\n                localState.collection.insert(insertData);\n            }\n\n            ret.success[id] = stripLokiKey(writeDoc);\n\n            const endTime = now();\n\n            let event: ChangeEvent<RxLocalDocumentData<RxDocType>>;\n            if (!writeRow.previous) {\n                // was insert\n                event = {\n                    operation: 'INSERT',\n                    doc: writeDoc,\n                    id: id,\n                    previous: null\n                };\n            } else if (writeRow.document._deleted) {\n                // was delete\n\n                // we need to add the new revision to the previous doc\n                // so that the eventkey is calculated correctly.\n                // Is this a hack? idk.\n                const previousDoc = flatClone(writeRow.previous);\n                previousDoc._rev = newRevision;\n\n                event = {\n                    operation: 'DELETE',\n                    doc: null,\n                    id,\n                    previous: previousDoc\n                };\n            } else {\n                // was update\n                event = {\n                    operation: 'UPDATE',\n                    doc: writeDoc,\n                    id: id,\n                    previous: writeRow.previous\n                };\n            }\n\n            if (\n                writeRow.document._deleted &&\n                (\n                    !writeRow.previous ||\n                    writeRow.previous._deleted\n                )\n            ) {\n                /**\n                 * An already deleted document was added to the storage engine,\n                 * do not emit an event because it does not affect anything.\n                 */\n            } else {\n                const doc: RxLocalDocumentData<RxDocType> = event.operation === 'DELETE' ? event.previous as any : event.doc as any;\n                const eventId = getLokiEventKey(true, doc._id, doc._rev ? doc._rev : '');\n                const storageChangeEvent: RxStorageChangeEvent<RxLocalDocumentData<RxDocType>> = {\n                    eventId,\n                    documentId: id,\n                    change: event,\n                    startTime,\n                    endTime\n                };\n                eventBulk.events.push(storageChangeEvent);\n            }\n        });\n\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(eventBulk);\n        return ret;\n    }\n    async findLocalDocumentsById<RxDocType = any>(ids: string[]): Promise<{ [documentId: string]: RxLocalDocumentData<RxDocType> }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findLocalDocumentsById', [ids]);\n        }\n        const ret: { [documentId: string]: RxLocalDocumentData<RxDocType> } = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by('_id', id);\n            if (\n                documentInDb &&\n                !documentInDb._deleted\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxLocalDocumentData<{ [key: string]: any; }>>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n        if (this.internals.localState) {\n            const localState = await ensureNotFalsy(this.internals.localState);\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    ensureNotFalsy(localState.collection),\n                    ensureNotFalsy(localState.changesCollection)\n                ]\n            );\n        }\n        removeLokiLeaderElectorReference(this.storage, this.databaseName);\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        localState.databaseState.database.removeCollection(localState.changesCollection.name);\n        this.close();\n    }\n}\n\n\nexport async function createLokiKeyValueLocalState(\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    const collectionOptions: Partial<CollectionOptions<RxLocalDocumentData>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: [],\n            unique: ['_id']\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions\n    );\n    databaseState.collections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS);\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.collections[changesCollectionName] = collection;\n\n    return {\n        changesCollection,\n        collection,\n        databaseState\n    }\n}\n\nexport async function createLokiKeyObjectStorageInstance(\n    storage: RxStorageLoki,\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageKeyObjectInstanceLoki> {\n    const internals: LokiStorageInternals = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(storage, params.databaseName);\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiKeyValueLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageKeyObjectInstanceLoki(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    /**\n     * Directly create the localState if the db becomes leader.\n     */\n    if (params.multiInstance) {\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => mustUseLocalState(instance));\n    }\n\n\n    return instance;\n}\n"],"file":"rx-storage-key-object-instance-loki.js"}