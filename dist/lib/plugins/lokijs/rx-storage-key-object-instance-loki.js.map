{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-key-object-instance-loki.ts"],"names":["instanceId","RxStorageKeyObjectInstanceLoki","storage","databaseName","collectionName","internals","options","databaseSettings","changes$","Subject","closed","OPEN_LOKIJS_STORAGE_INSTANCES","add","leaderElector","awaitLeadership","then","broadcastChannel","addEventListener","msg","type","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","requestId","response","operation","params","isError","result","postMessage","getLocalState","ret","localState","mustUseLocalState","hasLeader","applyOnce","isLeader","createLokiKeyValueLocalState","multiInstance","requestRemoteInstance","responsePromise","Promise","res","rej","listener","removeEventListener","bulkWrite","documentWrites","length","args","startTime","success","error","writeRowById","Map","eventBulk","id","events","forEach","writeRow","document","_id","set","writeDoc","docInDb","collection","by","previous","newRevHeight","_rev","height","newRevision","err","status","documentId","toLoki","$loki","$lastWriteAt","update","insertData","insert","endTime","event","doc","_deleted","previousDoc","eventId","storageChangeEvent","change","push","databaseState","saveQueue","addWrite","next","findLocalDocumentsById","ids","documentInDb","changeStream","asObservable","close","complete","changesCollection","remove","database","removeCollection","name","collectionOptions","Object","assign","indices","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","addCollection","collections","changesCollectionName","CHANGES_COLLECTION_SUFFIX","changesCollectionOptions","createLokiKeyObjectStorageInstance","instance"],"mappings":"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","sourcesContent":["import type { ChangeEvent } from 'event-reduce-js';\nimport { Observable, Subject } from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type { BroadcastChannel, LeaderElector } from 'broadcast-channel';\nimport type {\n    BulkWriteLocalRow,\n    EventBulk,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    LokiRemoteRequestBroadcastMessage,\n    LokiRemoteResponseBroadcastMessage,\n    LokiSettings,\n    LokiStorageInternals,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxStorageBulkWriteLocalError,\n    RxStorageChangeEvent,\n    RxStorageKeyObjectInstance\n} from '../../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    now,\n    parseRevision,\n    promiseWait,\n    randomCouchString\n} from '../../util';\nimport {\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    getLokiLeaderElector,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    removeLokiLeaderElectorReference,\n    stripLokiKey\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election';\nimport { IdleQueue } from 'custom-idle-queue';\nimport { RxStorageLoki } from './rx-storage-lokijs';\n\nlet instanceId = 1;\n\nexport class RxStorageKeyObjectInstanceLoki implements RxStorageKeyObjectInstance<LokiStorageInternals, LokiSettings> {\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxLocalDocumentData>>> = new Subject();\n\n    public instanceId = instanceId++;\n    private closed = false;\n\n    constructor(\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel.addEventListener('message', async (msg) => {\n                    if (\n                        msg.type === LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                        msg.requestId &&\n                        msg.databaseName === this.databaseName &&\n                        msg.collectionName === this.collectionName &&\n                        !msg.response\n                    ) {\n                        const operation = (msg as any).operation;\n                        const params = (msg as any).params;\n                        let result: any;\n                        let isError = false;\n                        try {\n                            result = await (this as any)[operation](...params);\n                        } catch (err) {\n                            isError = true;\n                            result = err;\n                        }\n                        const response: LokiRemoteResponseBroadcastMessage = {\n                            response: true,\n                            requestId: msg.requestId,\n                            databaseName: this.databaseName,\n                            collectionName: this.collectionName,\n                            result,\n                            isError,\n                            type: msg.type\n                        };\n                        ensureNotFalsy(this.internals.leaderElector).broadcastChannel.postMessage(response);\n                    }\n                });\n            });\n        }\n    }\n\n    private getLocalState() {\n        const ret = ensureNotFalsy(this.internals.localState);\n        return ret;\n    }\n\n    /**\n     * If the local state must be used, that one is returned.\n     * Returns false if a remote instance must be used.\n     */\n    public async mustUseLocalState(): Promise<LokiLocalDatabaseState | false> {\n        if (this.closed) {\n            return false;\n        }\n\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n        const leaderElector = ensureNotFalsy(this.internals.leaderElector);\n\n        while (\n            !leaderElector.hasLeader\n        ) {\n            await leaderElector.applyOnce();\n\n            // TODO why do we need this line to pass the tests?\n            // otherwise we somehow do never get a leader.\n            /**\n             * TODO why do we need this line to pass the tests?\n             * Without it, we somehow do never get a leader.\n             * Does applyOnce() fully block the cpu?\n             */\n            await promiseWait(0); // TODO remove this line\n        }\n\n        /**\n         * It might already have a localState after the applying\n         * because another subtask also called mustUSeLocalState()\n         */\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n\n        if (\n            leaderElector.isLeader &&\n            !this.internals.localState\n        ) {\n            // own is leader, use local instance\n            this.internals.localState = createLokiKeyValueLocalState({\n                databaseName: this.databaseName,\n                collectionName: this.collectionName,\n                options: this.options,\n                multiInstance: this.internals.leaderElector ? true : false\n            }, this.databaseSettings);\n            return this.getLocalState();\n        } else {\n            // other is leader, send message to remote leading instance\n            return false;\n        }\n    }\n\n    private async requestRemoteInstance(\n        operation: string,\n        params: any[]\n    ): Promise<any | any[]> {\n        const broadcastChannel = ensureNotFalsy(this.internals.leaderElector).broadcastChannel;\n        const requestId = randomCouchString(12);\n        const responsePromise = new Promise<any>((res, rej) => {\n            const listener = (msg: any) => {\n                if (\n                    msg.type === LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                    msg.response === true &&\n                    msg.requestId === requestId\n                ) {\n                    if (msg.isError) {\n                        broadcastChannel.removeEventListener('message', listener);\n                        rej(msg.result);\n                    } else {\n                        broadcastChannel.removeEventListener('message', listener);\n                        res(msg.result);\n                    }\n                }\n            };\n            broadcastChannel.addEventListener('message', listener);\n        });\n        broadcastChannel.postMessage({\n            response: false,\n            type: LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE,\n            operation,\n            params,\n            requestId,\n            databaseName: this.databaseName,\n            collectionName: this.collectionName\n        });\n        const result = await responsePromise;\n        return result;\n    }\n\n    async bulkWrite<RxDocType>(documentWrites: BulkWriteLocalRow<RxDocType>[]): Promise<RxLocalStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkWrite', [documentWrites]);\n        }\n\n        const startTime = now();\n        await promiseWait(0);\n\n        const ret: RxLocalStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const writeRowById: Map<string, BulkWriteLocalRow<RxDocType>> = new Map();\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxLocalDocumentData>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document._id;\n            writeRowById.set(id, writeRow);\n            const writeDoc = flatClone(writeRow.document);\n            const docInDb = localState.collection.by('_id', id);\n            const previous = writeRow.previous ? writeRow.previous : localState.collection.by('_id', id);\n            const newRevHeight = previous ? parseRevision(previous._rev).height + 1 : 1;\n            const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n            writeDoc._rev = newRevision;\n            if (docInDb) {\n                if (\n                    !writeRow.previous ||\n                    docInDb._rev !== writeRow.previous._rev\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteLocalError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error[id] = err;\n                    return;\n                } else {\n                    const toLoki: any = flatClone(writeDoc);\n                    toLoki.$loki = docInDb.$loki;\n                    toLoki.$lastWriteAt = startTime;\n                    localState.collection.update(toLoki);\n                }\n            } else {\n                const insertData: any = flatClone(writeDoc);\n                insertData.$lastWriteAt = startTime;\n                localState.collection.insert(insertData);\n            }\n\n            ret.success[id] = stripLokiKey(writeDoc);\n\n            const endTime = now();\n\n            let event: ChangeEvent<RxLocalDocumentData<RxDocType>>;\n            if (!writeRow.previous) {\n                // was insert\n                event = {\n                    operation: 'INSERT',\n                    doc: writeDoc,\n                    id: id,\n                    previous: null\n                };\n            } else if (writeRow.document._deleted) {\n                // was delete\n\n                // we need to add the new revision to the previous doc\n                // so that the eventkey is calculated correctly.\n                // Is this a hack? idk.\n                const previousDoc = flatClone(writeRow.previous);\n                previousDoc._rev = newRevision;\n\n                event = {\n                    operation: 'DELETE',\n                    doc: null,\n                    id,\n                    previous: previousDoc\n                };\n            } else {\n                // was update\n                event = {\n                    operation: 'UPDATE',\n                    doc: writeDoc,\n                    id: id,\n                    previous: writeRow.previous\n                };\n            }\n\n            if (\n                writeRow.document._deleted &&\n                (\n                    !writeRow.previous ||\n                    writeRow.previous._deleted\n                )\n            ) {\n                /**\n                 * An already deleted document was added to the storage engine,\n                 * do not emit an event because it does not affect anything.\n                 */\n            } else {\n                const doc: RxLocalDocumentData<RxDocType> = event.operation === 'DELETE' ? event.previous as any : event.doc as any;\n                const eventId = getLokiEventKey(true, doc._id, doc._rev ? doc._rev : '');\n                const storageChangeEvent: RxStorageChangeEvent<RxLocalDocumentData<RxDocType>> = {\n                    eventId,\n                    documentId: id,\n                    change: event,\n                    startTime,\n                    endTime\n                };\n                eventBulk.events.push(storageChangeEvent);\n            }\n        });\n\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(eventBulk);\n        return ret;\n    }\n    async findLocalDocumentsById<RxDocType = any>(ids: string[]): Promise<{ [documentId: string]: RxLocalDocumentData<RxDocType> }> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('findLocalDocumentsById', [ids]);\n        }\n\n        await promiseWait(0);\n        const ret: { [documentId: string]: RxLocalDocumentData<RxDocType> } = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by('_id', id);\n            if (\n                documentInDb &&\n                !documentInDb._deleted\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxLocalDocumentData<{ [key: string]: any; }>>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n        if (this.internals.localState) {\n            const localState = await this.getLocalState();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    ensureNotFalsy(localState.collection),\n                    ensureNotFalsy(localState.changesCollection)\n                ]\n            );\n        }\n        removeLokiLeaderElectorReference(this.storage, this.databaseName);\n    }\n    async remove(): Promise<void> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        localState.databaseState.database.removeCollection(localState.changesCollection.name);\n        this.close();\n    }\n}\n\n\nexport async function createLokiKeyValueLocalState(\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    const collectionOptions: Partial<CollectionOptions<RxLocalDocumentData>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: [],\n            unique: ['_id']\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions\n    );\n    databaseState.collections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS);\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.collections[changesCollectionName] = collection;\n\n    return {\n        changesCollection,\n        collection,\n        databaseState\n    }\n}\n\nexport async function createLokiKeyObjectStorageInstance(\n    storage: RxStorageLoki,\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageKeyObjectInstanceLoki> {\n    const internals: LokiStorageInternals = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(storage, params.databaseName);\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiKeyValueLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageKeyObjectInstanceLoki(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    /**\n     * Directly create the localState if the db becomes leader.\n     */\n    if (params.multiInstance) {\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => instance.mustUseLocalState());\n    }\n\n\n    return instance;\n}\n"],"file":"rx-storage-key-object-instance-loki.js"}