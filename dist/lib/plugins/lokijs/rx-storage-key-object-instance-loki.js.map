{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-key-object-instance-loki.ts"],"names":[],"mappings":"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","file":"rx-storage-key-object-instance-loki.js","sourcesContent":["import type { ChangeEvent } from 'event-reduce-js';\nimport { Observable, Subject } from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type { BroadcastChannel, LeaderElector } from 'broadcast-channel';\nimport type {\n    BulkWriteLocalRow,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    LokiRemoteRequestBroadcastMessage,\n    LokiRemoteResponseBroadcastMessage,\n    LokiSettings,\n    LokiStorageInternals,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxStorageBulkWriteLocalError,\n    RxStorageChangeEvent,\n    RxStorageKeyObjectInstance\n} from '../../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    now,\n    parseRevision,\n    promiseWait,\n    randomCouchString\n} from '../../util';\nimport {\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    stripLokiKey\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election';\nimport { IdleQueue } from 'custom-idle-queue';\n\nlet instanceId = 1;\n\nexport class RxStorageKeyObjectInstanceLoki implements RxStorageKeyObjectInstance<LokiStorageInternals, LokiSettings> {\n\n    private changes$: Subject<RxStorageChangeEvent<RxLocalDocumentData>> = new Subject();\n    public readonly leaderElector?: LeaderElector;\n\n    public instanceId = instanceId++;\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings,\n        public readonly idleQueue: IdleQueue,\n        public readonly broadcastChannel?: BroadcastChannel<LokiRemoteRequestBroadcastMessage | LokiRemoteResponseBroadcastMessage>\n    ) {\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (broadcastChannel) {\n            this.leaderElector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n            this.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.broadcastChannel).addEventListener('message', async (msg) => {\n                    if (\n                        msg.type === LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                        msg.requestId &&\n                        msg.databaseName === this.databaseName &&\n                        msg.collectionName === this.collectionName &&\n                        !msg.response\n                    ) {\n                        const operation = (msg as any).operation;\n                        const params = (msg as any).params;\n                        let result: any;\n                        let isError = false;\n                        try {\n                            result = await (this as any)[operation](...params);\n                        } catch (err) {\n                            isError = true;\n                            result = err;\n                        }\n                        const response: LokiRemoteResponseBroadcastMessage = {\n                            response: true,\n                            requestId: msg.requestId,\n                            databaseName: this.databaseName,\n                            collectionName: this.collectionName,\n                            result,\n                            isError,\n                            type: msg.type\n                        };\n                        ensureNotFalsy(this.broadcastChannel).postMessage(response);\n                    }\n                });\n            });\n        }\n    }\n\n    private getLocalState() {\n        const ret = ensureNotFalsy(this.internals.localState);\n        return ret;\n    }\n\n    /**\n     * If the local state must be used, that one is returned.\n     * Returns false if a remote instance must be used.\n     */\n    private async mustUseLocalState(): Promise<LokiLocalDatabaseState | false> {\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n        const leaderElector = ensureNotFalsy(this.leaderElector);\n        while (\n            !leaderElector.hasLeader\n        ) {\n            await leaderElector.applyOnce();\n\n            // TODO why do we need this line to pass the tests?\n            // otherwise we somehow do never get a leader.\n            /**\n             * TODO why do we need this line to pass the tests?\n             * Without it, we somehow do never get a leader.\n             * Does applyOnce() fully block the cpu?\n             */\n            await promiseWait(0); // TODO remove this line\n        }\n\n        if (\n            leaderElector.isLeader &&\n            !this.internals.localState\n        ) {\n            // own is leader, use local instance\n            this.internals.localState = createLokiKeyValueLocalState({\n                databaseName: this.databaseName,\n                collectionName: this.collectionName,\n                options: this.options,\n                idleQueue: this.idleQueue,\n                broadcastChannel: this.broadcastChannel\n            }, this.databaseSettings);\n            return this.getLocalState();\n        } else {\n            // other is leader, send message to remote leading instance\n            return false;\n        }\n    }\n\n    private async requestRemoteInstance(\n        operation: string,\n        params: any[]\n    ): Promise<any | any[]> {\n        const broadcastChannel = ensureNotFalsy(this.broadcastChannel);\n        const requestId = randomCouchString(12);\n        const responsePromise = new Promise<any>((res, rej) => {\n            const listener = (msg: any) => {\n                if (\n                    msg.type === LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                    msg.response === true &&\n                    msg.requestId === requestId\n                ) {\n                    if (msg.isError) {\n                        broadcastChannel.removeEventListener('message', listener);\n                        rej(msg.result);\n                    } else {\n                        broadcastChannel.removeEventListener('message', listener);\n                        res(msg.result);\n                    }\n                }\n            };\n            broadcastChannel.addEventListener('message', listener);\n        });\n        broadcastChannel.postMessage({\n            response: false,\n            type: LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE,\n            operation,\n            params,\n            requestId,\n            databaseName: this.databaseName,\n            collectionName: this.collectionName\n        });\n        const result = await responsePromise;\n        return result;\n    }\n\n    async bulkWrite<RxDocType>(documentWrites: BulkWriteLocalRow<RxDocType>[]): Promise<RxLocalStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkWrite', [documentWrites]);\n        }\n\n        const startTime = now();\n        await promiseWait(0);\n\n        const ret: RxLocalStorageBulkWriteResponse<RxDocType> = {\n            success: new Map(),\n            error: new Map()\n        };\n        const writeRowById: Map<string, BulkWriteLocalRow<RxDocType>> = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document._id;\n            writeRowById.set(id, writeRow);\n            const writeDoc = flatClone(writeRow.document);\n            const docInDb = localState.collection.by('_id', id);\n            const previous = writeRow.previous ? writeRow.previous : localState.collection.by('_id', id);\n            const newRevHeight = previous ? parseRevision(previous._rev).height + 1 : 1;\n            const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n            writeDoc._rev = newRevision;\n            if (docInDb) {\n                if (\n                    !writeRow.previous ||\n                    docInDb._rev !== writeRow.previous._rev\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteLocalError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error.set(id, err);\n                    return;\n                } else {\n                    const toLoki: any = flatClone(writeDoc);\n                    toLoki.$loki = docInDb.$loki;\n                    localState.collection.update(toLoki);\n                }\n            } else {\n                localState.collection.insert(flatClone(writeDoc));\n            }\n\n            ret.success.set(id, stripLokiKey(writeDoc));\n\n            const endTime = now();\n\n            let event: ChangeEvent<RxLocalDocumentData<RxDocType>>;\n            if (!writeRow.previous) {\n                // was insert\n                event = {\n                    operation: 'INSERT',\n                    doc: writeDoc,\n                    id: id,\n                    previous: null\n                };\n            } else if (writeRow.document._deleted) {\n                // was delete\n\n                // we need to add the new revision to the previous doc\n                // so that the eventkey is calculated correctly.\n                // Is this a hack? idk.\n                const previousDoc = flatClone(writeRow.previous);\n                previousDoc._rev = newRevision;\n\n                event = {\n                    operation: 'DELETE',\n                    doc: null,\n                    id,\n                    previous: previousDoc\n                };\n            } else {\n                // was update\n                event = {\n                    operation: 'UPDATE',\n                    doc: writeDoc,\n                    id: id,\n                    previous: writeRow.previous\n                };\n            }\n\n            if (\n                writeRow.document._deleted &&\n                (\n                    !writeRow.previous ||\n                    writeRow.previous._deleted\n                )\n            ) {\n                /**\n                 * An already deleted document was added to the storage engine,\n                 * do not emit an event because it does not affect anything.\n                 */\n            } else {\n                const doc: RxLocalDocumentData<RxDocType> = event.operation === 'DELETE' ? event.previous as any : event.doc as any;\n                const eventId = getLokiEventKey(true, doc._id, doc._rev ? doc._rev : '');\n                const storageChangeEvent: RxStorageChangeEvent<RxLocalDocumentData<RxDocType>> = {\n                    eventId,\n                    documentId: id,\n                    change: event,\n                    startTime,\n                    endTime\n                };\n                this.changes$.next(storageChangeEvent);\n            }\n        });\n\n        localState.databaseState.saveQueue.addWrite();\n\n        return ret;\n    }\n    async findLocalDocumentsById<RxDocType = any>(ids: string[]): Promise<Map<string, RxLocalDocumentData<RxDocType>>> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('findLocalDocumentsById', [ids]);\n        }\n\n        await promiseWait(0);\n        const ret: Map<string, RxLocalDocumentData<RxDocType>> = new Map();\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by('_id', id);\n            if (\n                documentInDb &&\n                !documentInDb._deleted\n            ) {\n                ret.set(id, stripLokiKey(documentInDb));\n            }\n        });\n        return ret;\n    }\n    changeStream(): Observable<RxStorageChangeEvent<RxLocalDocumentData<{ [key: string]: any; }>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n        if (this.internals.localState) {\n            const localState = await this.getLocalState();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    ensureNotFalsy(localState.collection),\n                    ensureNotFalsy(localState.changesCollection)\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        localState.databaseState.database.removeCollection(localState.changesCollection.name);\n    }\n}\n\n\nexport async function createLokiKeyValueLocalState(\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings,\n        params.idleQueue\n    );\n\n    const collectionOptions: Partial<CollectionOptions<RxLocalDocumentData>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: [],\n            unique: ['_id']\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions\n    );\n    databaseState.collections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS);\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.collections[changesCollectionName] = collection;\n\n    return {\n        changesCollection,\n        collection,\n        databaseState\n    }\n}\n\nexport async function createLokiKeyObjectStorageInstance(\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageKeyObjectInstanceLoki> {\n    const internals: LokiStorageInternals = {};\n    // optimisation shortcut, directly create db is non multi instance.\n    if (!params.broadcastChannel) {\n        internals.localState = createLokiKeyValueLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageKeyObjectInstanceLoki(\n        params.databaseName,\n        params.collectionName,\n        internals,\n        params.options,\n        databaseSettings,\n        params.idleQueue,\n        params.broadcastChannel\n    );\n    return instance;\n}\n"]}