{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-key-object-instance-loki.ts"],"names":["instanceId","RxStorageKeyObjectInstanceLoki","databaseName","collectionName","internals","options","databaseSettings","idleQueue","broadcastChannel","changes$","Subject","closed","OPEN_LOKIJS_STORAGE_INSTANCES","add","leaderElector","awaitLeadership","then","addEventListener","msg","type","LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE","requestId","response","operation","params","isError","result","postMessage","getLocalState","ret","localState","mustUseLocalState","hasLeader","applyOnce","isLeader","createLokiKeyValueLocalState","requestRemoteInstance","responsePromise","Promise","res","rej","listener","removeEventListener","bulkWrite","documentWrites","length","args","startTime","success","Map","error","writeRowById","forEach","writeRow","id","document","_id","set","writeDoc","docInDb","collection","by","previous","newRevHeight","_rev","height","newRevision","err","status","documentId","toLoki","$loki","update","insert","endTime","event","doc","_deleted","previousDoc","eventId","storageChangeEvent","change","next","databaseState","saveQueue","addWrite","findLocalDocumentsById","ids","documentInDb","changeStream","asObservable","close","complete","changesCollection","remove","database","removeCollection","name","collectionOptions","Object","assign","indices","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","addCollection","collections","changesCollectionName","CHANGES_COLLECTION_SUFFIX","changesCollectionOptions","createLokiKeyObjectStorageInstance","instance"],"mappings":"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","sourcesContent":["import type { ChangeEvent } from 'event-reduce-js';\nimport { Observable, Subject } from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type { BroadcastChannel, LeaderElector } from 'broadcast-channel';\nimport type {\n    BulkWriteLocalRow,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    LokiRemoteRequestBroadcastMessage,\n    LokiRemoteResponseBroadcastMessage,\n    LokiSettings,\n    LokiStorageInternals,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxStorageBulkWriteLocalError,\n    RxStorageChangeEvent,\n    RxStorageKeyObjectInstance\n} from '../../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    now,\n    parseRevision,\n    promiseWait,\n    randomCouchString\n} from '../../util';\nimport {\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    stripLokiKey\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport { getLeaderElectorByBroadcastChannel } from '../leader-election';\nimport { IdleQueue } from 'custom-idle-queue';\n\nlet instanceId = 1;\n\nexport class RxStorageKeyObjectInstanceLoki implements RxStorageKeyObjectInstance<LokiStorageInternals, LokiSettings> {\n\n    private changes$: Subject<RxStorageChangeEvent<RxLocalDocumentData>> = new Subject();\n    public readonly leaderElector?: LeaderElector;\n\n    public instanceId = instanceId++;\n    private closed = false;\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings,\n        public readonly idleQueue: IdleQueue,\n        public readonly broadcastChannel?: BroadcastChannel<LokiRemoteRequestBroadcastMessage | LokiRemoteResponseBroadcastMessage>\n    ) {\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (broadcastChannel) {\n            this.leaderElector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n            this.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.broadcastChannel).addEventListener('message', async (msg) => {\n                    if (\n                        msg.type === LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                        msg.requestId &&\n                        msg.databaseName === this.databaseName &&\n                        msg.collectionName === this.collectionName &&\n                        !msg.response\n                    ) {\n                        const operation = (msg as any).operation;\n                        const params = (msg as any).params;\n                        let result: any;\n                        let isError = false;\n                        try {\n                            result = await (this as any)[operation](...params);\n                        } catch (err) {\n                            isError = true;\n                            result = err;\n                        }\n                        const response: LokiRemoteResponseBroadcastMessage = {\n                            response: true,\n                            requestId: msg.requestId,\n                            databaseName: this.databaseName,\n                            collectionName: this.collectionName,\n                            result,\n                            isError,\n                            type: msg.type\n                        };\n                        ensureNotFalsy(this.broadcastChannel).postMessage(response);\n                    }\n                });\n            });\n        }\n    }\n\n    private getLocalState() {\n        const ret = ensureNotFalsy(this.internals.localState);\n        return ret;\n    }\n\n    /**\n     * If the local state must be used, that one is returned.\n     * Returns false if a remote instance must be used.\n     */\n    public async mustUseLocalState(): Promise<LokiLocalDatabaseState | false> {\n        if (this.closed) {\n            return false;\n        }\n\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n        const leaderElector = ensureNotFalsy(this.leaderElector);\n\n        while (\n            !leaderElector.hasLeader\n        ) {\n            await leaderElector.applyOnce();\n\n            // TODO why do we need this line to pass the tests?\n            // otherwise we somehow do never get a leader.\n            /**\n             * TODO why do we need this line to pass the tests?\n             * Without it, we somehow do never get a leader.\n             * Does applyOnce() fully block the cpu?\n             */\n            await promiseWait(0); // TODO remove this line\n        }\n\n        /**\n         * It might already have a localState after the applying\n         * because another subtask also called mustUSeLocalState()\n         */\n        if (this.internals.localState) {\n            return this.internals.localState;\n        }\n\n        if (\n            leaderElector.isLeader &&\n            !this.internals.localState\n        ) {\n            // own is leader, use local instance\n            this.internals.localState = createLokiKeyValueLocalState({\n                databaseName: this.databaseName,\n                collectionName: this.collectionName,\n                options: this.options,\n                idleQueue: this.idleQueue,\n                broadcastChannel: this.broadcastChannel\n            }, this.databaseSettings);\n            return this.getLocalState();\n        } else {\n            // other is leader, send message to remote leading instance\n            return false;\n        }\n    }\n\n    private async requestRemoteInstance(\n        operation: string,\n        params: any[]\n    ): Promise<any | any[]> {\n        const broadcastChannel = ensureNotFalsy(this.broadcastChannel);\n        const requestId = randomCouchString(12);\n        const responsePromise = new Promise<any>((res, rej) => {\n            const listener = (msg: any) => {\n                if (\n                    msg.type === LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE &&\n                    msg.response === true &&\n                    msg.requestId === requestId\n                ) {\n                    if (msg.isError) {\n                        broadcastChannel.removeEventListener('message', listener);\n                        rej(msg.result);\n                    } else {\n                        broadcastChannel.removeEventListener('message', listener);\n                        res(msg.result);\n                    }\n                }\n            };\n            broadcastChannel.addEventListener('message', listener);\n        });\n        broadcastChannel.postMessage({\n            response: false,\n            type: LOKI_KEY_OBJECT_BROADCAST_CHANNEL_MESSAGE_TYPE,\n            operation,\n            params,\n            requestId,\n            databaseName: this.databaseName,\n            collectionName: this.collectionName\n        });\n        const result = await responsePromise;\n        return result;\n    }\n\n    async bulkWrite<RxDocType>(documentWrites: BulkWriteLocalRow<RxDocType>[]): Promise<RxLocalStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('bulkWrite', [documentWrites]);\n        }\n\n        const startTime = now();\n        await promiseWait(0);\n\n        const ret: RxLocalStorageBulkWriteResponse<RxDocType> = {\n            success: new Map(),\n            error: new Map()\n        };\n        const writeRowById: Map<string, BulkWriteLocalRow<RxDocType>> = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document._id;\n            writeRowById.set(id, writeRow);\n            const writeDoc = flatClone(writeRow.document);\n            const docInDb = localState.collection.by('_id', id);\n            const previous = writeRow.previous ? writeRow.previous : localState.collection.by('_id', id);\n            const newRevHeight = previous ? parseRevision(previous._rev).height + 1 : 1;\n            const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n            writeDoc._rev = newRevision;\n            if (docInDb) {\n                if (\n                    !writeRow.previous ||\n                    docInDb._rev !== writeRow.previous._rev\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteLocalError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error.set(id, err);\n                    return;\n                } else {\n                    const toLoki: any = flatClone(writeDoc);\n                    toLoki.$loki = docInDb.$loki;\n                    localState.collection.update(toLoki);\n                }\n            } else {\n                localState.collection.insert(flatClone(writeDoc));\n            }\n\n            ret.success.set(id, stripLokiKey(writeDoc));\n\n            const endTime = now();\n\n            let event: ChangeEvent<RxLocalDocumentData<RxDocType>>;\n            if (!writeRow.previous) {\n                // was insert\n                event = {\n                    operation: 'INSERT',\n                    doc: writeDoc,\n                    id: id,\n                    previous: null\n                };\n            } else if (writeRow.document._deleted) {\n                // was delete\n\n                // we need to add the new revision to the previous doc\n                // so that the eventkey is calculated correctly.\n                // Is this a hack? idk.\n                const previousDoc = flatClone(writeRow.previous);\n                previousDoc._rev = newRevision;\n\n                event = {\n                    operation: 'DELETE',\n                    doc: null,\n                    id,\n                    previous: previousDoc\n                };\n            } else {\n                // was update\n                event = {\n                    operation: 'UPDATE',\n                    doc: writeDoc,\n                    id: id,\n                    previous: writeRow.previous\n                };\n            }\n\n            if (\n                writeRow.document._deleted &&\n                (\n                    !writeRow.previous ||\n                    writeRow.previous._deleted\n                )\n            ) {\n                /**\n                 * An already deleted document was added to the storage engine,\n                 * do not emit an event because it does not affect anything.\n                 */\n            } else {\n                const doc: RxLocalDocumentData<RxDocType> = event.operation === 'DELETE' ? event.previous as any : event.doc as any;\n                const eventId = getLokiEventKey(true, doc._id, doc._rev ? doc._rev : '');\n                const storageChangeEvent: RxStorageChangeEvent<RxLocalDocumentData<RxDocType>> = {\n                    eventId,\n                    documentId: id,\n                    change: event,\n                    startTime,\n                    endTime\n                };\n                this.changes$.next(storageChangeEvent);\n            }\n        });\n\n        localState.databaseState.saveQueue.addWrite();\n\n        return ret;\n    }\n    async findLocalDocumentsById<RxDocType = any>(ids: string[]): Promise<Map<string, RxLocalDocumentData<RxDocType>>> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('findLocalDocumentsById', [ids]);\n        }\n\n        await promiseWait(0);\n        const ret: Map<string, RxLocalDocumentData<RxDocType>> = new Map();\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by('_id', id);\n            if (\n                documentInDb &&\n                !documentInDb._deleted\n            ) {\n                ret.set(id, stripLokiKey(documentInDb));\n            }\n        });\n        return ret;\n    }\n    changeStream(): Observable<RxStorageChangeEvent<RxLocalDocumentData<{ [key: string]: any; }>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n        if (this.internals.localState) {\n            const localState = await this.getLocalState();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    ensureNotFalsy(localState.collection),\n                    ensureNotFalsy(localState.changesCollection)\n                ]\n            );\n        }\n    }\n    async remove(): Promise<void> {\n        const localState = await this.mustUseLocalState();\n        if (!localState) {\n            return this.requestRemoteInstance('remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        localState.databaseState.database.removeCollection(localState.changesCollection.name);\n        this.closed = true;\n    }\n}\n\n\nexport async function createLokiKeyValueLocalState(\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings,\n        params.idleQueue\n    );\n\n    const collectionOptions: Partial<CollectionOptions<RxLocalDocumentData>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: [],\n            unique: ['_id']\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions\n    );\n    databaseState.collections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS);\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.collections[changesCollectionName] = collection;\n\n    return {\n        changesCollection,\n        collection,\n        databaseState\n    }\n}\n\nexport async function createLokiKeyObjectStorageInstance(\n    params: RxKeyObjectStorageInstanceCreationParams<LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageKeyObjectInstanceLoki> {\n    const internals: LokiStorageInternals = {};\n    // optimisation shortcut, directly create db is non multi instance.\n    if (!params.broadcastChannel) {\n        internals.localState = createLokiKeyValueLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageKeyObjectInstanceLoki(\n        params.databaseName,\n        params.collectionName,\n        internals,\n        params.options,\n        databaseSettings,\n        params.idleQueue,\n        params.broadcastChannel\n    );\n\n    /**\n     * Directly create the localState if the db becomes leader.\n     */\n    if (params.broadcastChannel) {\n        const leaderElector = getLeaderElectorByBroadcastChannel(params.broadcastChannel);\n        leaderElector.awaitLeadership().then(() => instance.mustUseLocalState());\n    }\n\n\n    return instance;\n}\n"],"file":"rx-storage-key-object-instance-loki.js"}