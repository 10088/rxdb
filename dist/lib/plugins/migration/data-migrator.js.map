{"version":3,"sources":["../../../../src/plugins/migration/data-migrator.ts"],"names":["DataMigrator","newestCollection","migrationStrategies","_migrated","nonMigratedOldCollections","allOldCollections","currentSchema","schema","database","name","migrate","batchSize","state","done","total","handled","success","deleted","percent","stateSubject","Subject","allSubject","allList","getValue","slice","push","asObservable","next","_getOldCollections","then","ret","countAll","Promise","all","map","oldCol","storage","storageInstance","totalCount","reduce","cur","prev","collection","currentCol","shift","currentPromise","PROMISE_RESOLVE_VOID","migrationState$","migrateOldCollection","res","sub","subscribe","subState","type","Math","round","e","unsubscribe","forEach","c","close","error","complete","pipe","withCollection","migratePromise","_migratePromise","mustMigrate","must","PROMISE_RESOLVE_FALSE","rej","state$","err","createOldCollection","version","schemaObj","dataMigrator","storageInstanceCreationParams","databaseName","collectionName","options","instanceCreationOptions","multiInstance","createStorageInstance","_crypter","password","getOldCollectionDocs","jsonSchema","v","internalStore","fun","oldCollectionDocs","filter","d","oldColDocs","colDoc","length","runStrategyIfNotNull","oldCollection","docOrNull","PROMISE_RESOLVE_NULL","retPromise","getBatchOfOldCollection","docs","doc","migrateDocumentData","docData","attachmentsBefore","_attachments","mutateableDocData","nextVersion","resolve","validate","asRxError","fromVersion","toVersion","originalDoc","finalDoc","errors","parameters","isDocumentDataWithoutRevisionEqual","doc1","doc2","doc1NoRev","Object","assign","undefined","_rev","doc2NoRev","_migrateDocuments","documentsData","migratedDocuments","bulkWriteToStorageInput","actions","idx","migratedDocData","action","migrated","newHeight","newRevision","saveData","bulkAddRevisions","bulkDeleteInputData","writeDeleted","_deleted","previous","document","bulkWrite","deleteOldCollection","remove","removeCollectionDoc","_migrate","observer","allBatchesDone","handleOneBatch","batch"],"mappings":"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","sourcesContent":["/**\n * The DataMigrator handles the documents from collections with older schemas\n * and transforms/saves them into the newest collection\n */\n/**\n * TODO this should be completely rewritten because:\n * - The current implemetation does not use bulkDocs which is much faster\n * - This could have been done in much less code which would be easier to uderstand\n *\n */\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport deepEqual from 'fast-deep-equal';\nimport {\n    clone,\n    toPromise,\n    flatClone,\n    getHeightOfRevision,\n    createRevision,\n    PROMISE_RESOLVE_VOID,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_NULL,\n    ensureNotFalsy\n} from '../../util';\nimport {\n    createRxSchema\n} from '../../rx-schema';\nimport {\n    RxError,\n    newRxError\n} from '../../rx-error';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from '../../hooks';\nimport type {\n    RxCollection,\n    RxDatabase,\n    MigrationState,\n    NumberFunctionMap,\n    OldRxCollection,\n    WithAttachmentsData,\n    RxJsonSchema,\n    RxDocumentData,\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport {\n    RxSchema,\n    getPreviousVersions\n} from '../../rx-schema';\nimport {\n    createCrypter\n} from '../../crypter';\nimport {\n    getMigrationStateByDatabase,\n    MigrationStateWithCollection\n} from './migration-state';\nimport { map } from 'rxjs/operators';\nimport {\n    countAllUndeleted,\n    getBatch,\n    getSingleDocument\n} from '../../rx-storage-helper';\nimport { InternalStoreDocumentData } from '../../rx-database';\nimport {\n    _handleFromStorageInstance,\n    _handleToStorageInstance\n} from '../../rx-collection-helper';\nimport { IdleQueue } from 'custom-idle-queue';\n\nexport class DataMigrator {\n\n    constructor(\n        public newestCollection: RxCollection,\n        public migrationStrategies: NumberFunctionMap\n    ) {\n        this.currentSchema = newestCollection.schema;\n        this.database = newestCollection.database;\n        this.name = newestCollection.name;\n    }\n\n    public currentSchema: RxSchema;\n    public database: RxDatabase;\n    public name: string;\n\n\n    private _migrated: boolean = false;\n    private _migratePromise?: Promise<any>;\n    private nonMigratedOldCollections: OldRxCollection[] = [];\n    private allOldCollections: OldRxCollection[] = [];\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        if (this._migrated) {\n            throw newRxError('DM1');\n        }\n        this._migrated = true;\n\n        const state = {\n            done: false, // true if finished\n            total: 0, // will be the doc-count\n            handled: 0, // amount of handled docs\n            success: 0, // handled docs which successed\n            deleted: 0, // handled docs which got deleted\n            percent: 0 // percentage\n        };\n\n        const stateSubject: Subject<MigrationStateWithCollection> = new Subject();\n\n        /**\n         * Add to output of RxDatabase.migrationStates\n         */\n        const allSubject = getMigrationStateByDatabase(this.newestCollection.database);\n        const allList = allSubject.getValue().slice(0);\n        allList.push(stateSubject.asObservable());\n        allSubject.next(allList);\n\n        /**\n         * TODO this is a side-effect which might throw\n         * We did this because it is not possible to create new Observer(async(...))\n         * @link https://github.com/ReactiveX/rxjs/issues/4074\n         * In the future the whole migration plugin should be rewritten without rxjs\n         * so we do not have this problem.\n         */\n        (() => {\n            return _getOldCollections(this)\n                .then(ret => {\n                    this.nonMigratedOldCollections = ret;\n                    this.allOldCollections = this.nonMigratedOldCollections.slice(0);\n                    const countAll: Promise<number[]> = Promise.all(\n                        this.nonMigratedOldCollections.map(oldCol => countAllUndeleted(\n                            this.database.storage,\n                            oldCol.storageInstance\n                            ))\n                    );\n                    return countAll;\n                })\n                .then(countAll => {\n                    const totalCount: number = countAll\n                        .reduce((cur, prev) => prev = cur + prev, 0);\n                    state.total = totalCount;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    let currentCol = this.nonMigratedOldCollections.shift();\n                    let currentPromise = PROMISE_RESOLVE_VOID;\n                    while (currentCol) {\n                        const migrationState$ = migrateOldCollection(\n                            currentCol,\n                            batchSize\n                        );\n                        currentPromise = currentPromise.then(() => {\n                            return new Promise(res => {\n                                const sub = migrationState$.subscribe(\n                                    (subState: any) => {\n                                        state.handled++;\n                                        (state as any)[subState.type] = (state as any)[subState.type] + 1;\n                                        state.percent = Math.round(state.handled / state.total * 100);\n                                        stateSubject.next({\n                                            collection: this.newestCollection,\n                                            state: flatClone(state)\n                                        });\n                                    },\n                                    (e: any) => {\n                                        sub.unsubscribe();\n                                        this.allOldCollections.forEach(c => c.storageInstance.close());\n                                        stateSubject.error(e);\n                                    }, () => {\n                                        if (currentCol) {\n                                            currentCol.storageInstance.close();\n                                        }\n                                        sub.unsubscribe();\n                                        res();\n                                    });\n                            });\n                        });\n                        currentCol = this.nonMigratedOldCollections.shift();\n                    }\n                    return currentPromise;\n                })\n                .then(() => {\n                    state.done = true;\n                    state.percent = 100;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    stateSubject.complete();\n                });\n        })();\n\n\n        return stateSubject.pipe(\n            map(withCollection => withCollection.state)\n        );\n    }\n\n    migratePromise(batchSize: number): Promise<any> {\n        if (!this._migratePromise) {\n            this._migratePromise = mustMigrate(this)\n                .then(must => {\n                    if (!must) {\n                        return PROMISE_RESOLVE_FALSE;\n                    } else {\n                        return new Promise((res, rej) => {\n                            const state$ = this.migrate(batchSize);\n                            (state$ as any).subscribe(null, rej, res);\n                            this.allOldCollections.forEach(c => c.storageInstance.close());\n                        })\n                            .catch(err => {\n                                this.allOldCollections.forEach(c => c.storageInstance.close());\n                                throw err;\n                            });\n                    }\n                });\n        }\n        return this._migratePromise;\n    }\n}\n\nexport async function createOldCollection(\n    version: number,\n    schemaObj: RxJsonSchema<any>,\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection> {\n    const database = dataMigrator.newestCollection.database;\n    const schema = createRxSchema(schemaObj, false);\n\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseName: database.name,\n        collectionName: dataMigrator.newestCollection.name,\n        schema: schemaObj,\n        options: dataMigrator.newestCollection.instanceCreationOptions,\n        multiInstance: database.multiInstance\n    };\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    const storageInstance = await database.storage.createStorageInstance(\n        storageInstanceCreationParams\n    );\n    const ret: OldRxCollection = {\n        version,\n        dataMigrator,\n        newestCollection: dataMigrator.newestCollection,\n        database,\n        schema: createRxSchema(schemaObj, false),\n        storageInstance,\n        _crypter: createCrypter(\n            database.password,\n            schema\n        )\n    };\n\n    return ret;\n}\n\n\nexport async function getOldCollectionDocs(\n    dataMigrator: DataMigrator\n): Promise<RxDocumentData<InternalStoreDocumentData>[]> {\n    return Promise.all(\n        getPreviousVersions(dataMigrator.currentSchema.jsonSchema)\n            .map(v => getSingleDocument<InternalStoreDocumentData>(dataMigrator.database.internalStore, dataMigrator.name + '-' + v))\n            .map(fun => fun.catch(() => null)) // auto-catch so Promise.all continues\n    )\n        .then(oldCollectionDocs => (oldCollectionDocs as any).filter((d: any) => !!d));\n}\n\n/**\n * get an array with OldCollection-instances from all existing old storage-instances\n */\nexport async function _getOldCollections(\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection[]> {\n    const oldColDocs = await getOldCollectionDocs(dataMigrator);\n\n    return Promise.all(\n        oldColDocs\n            .map(colDoc => {\n                if (!colDoc) {\n                    return null as any;\n                }\n                return createOldCollection(\n                    colDoc.schema.version,\n                    colDoc.schema,\n                    dataMigrator\n                );\n            })\n            .filter(colDoc => colDoc !== null)\n    );\n}\n\n\n/**\n * returns true if a migration is needed\n */\nexport function mustMigrate(dataMigrator: DataMigrator): Promise<boolean> {\n    if (dataMigrator.currentSchema.version === 0) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    return getOldCollectionDocs(dataMigrator)\n        .then(oldColDocs => {\n            if (oldColDocs.length === 0) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n}\n\nexport function runStrategyIfNotNull(\n    oldCollection: OldRxCollection,\n    version: number,\n    docOrNull: any | null\n): Promise<any | null> {\n    if (docOrNull === null) {\n        return PROMISE_RESOLVE_NULL;\n    } else {\n        const ret = oldCollection.dataMigrator.migrationStrategies[version](docOrNull, oldCollection);\n        const retPromise = toPromise(ret);\n        return retPromise;\n    }\n}\n\nexport function getBatchOfOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize: number\n): Promise<any[]> {\n    return getBatch(\n        oldCollection.database.storage,\n        oldCollection.storageInstance,\n        batchSize\n    )\n        .then(docs => docs\n            .map(doc => {\n                doc = flatClone(doc);\n                doc = _handleFromStorageInstance(oldCollection as any, doc);\n                return doc;\n            })\n        );\n}\n\n/**\n * runs the doc-data through all following migrationStrategies\n * so it will match the newest schema.\n * @throws Error if final doc does not match final schema or migrationStrategy crashes\n * @return final object or null if migrationStrategy deleted it\n */\nexport function migrateDocumentData(\n    oldCollection: OldRxCollection,\n    docData: any\n): Promise<any | null> {\n    /**\n     * We cannot deep-clone Blob or Buffer\n     * so we just flat clone it here\n     * and attach it to the deep cloned document data.\n     */\n    const attachmentsBefore = flatClone(docData._attachments);\n    const mutateableDocData = clone(docData);\n    mutateableDocData._attachments = attachmentsBefore;\n\n    let nextVersion = oldCollection.version + 1;\n\n    // run the document throught migrationStrategies\n    let currentPromise = Promise.resolve(mutateableDocData);\n    while (nextVersion <= oldCollection.newestCollection.schema.version) {\n        const version = nextVersion;\n        currentPromise = currentPromise.then(docOrNull => runStrategyIfNotNull(\n            oldCollection,\n            version,\n            docOrNull\n        ));\n        nextVersion++;\n    }\n\n    return currentPromise.then(doc => {\n        if (doc === null) {\n            return PROMISE_RESOLVE_NULL;\n        }\n\n        // check final schema\n        try {\n            oldCollection.newestCollection.schema.validate(doc);\n        } catch (err) {\n            const asRxError: RxError = err as any;\n            throw newRxError('DM2', {\n                fromVersion: oldCollection.version,\n                toVersion: oldCollection.newestCollection.schema.version,\n                originalDoc: docData,\n                finalDoc: doc,\n                /**\n                 * pass down data from parent error,\n                 * to make it better understandable what did not work\n                 */\n                errors: asRxError.parameters.errors,\n                schema: asRxError.parameters.schema\n            });\n        }\n        return doc;\n    });\n}\n\n\nexport function isDocumentDataWithoutRevisionEqual<T>(doc1: T, doc2: T): boolean {\n    const doc1NoRev = Object.assign({}, doc1, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    const doc2NoRev = Object.assign({}, doc2, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    return deepEqual(doc1NoRev, doc2NoRev);\n}\n\n/**\n * transform documents data and save them to the new collection\n * @return status-action with status and migrated document\n */\nexport async function _migrateDocuments(\n    oldCollection: OldRxCollection,\n    documentsData: any[]\n): Promise<{ type: string, doc: any }[]> {\n\n    // run hooks that might mutate documentsData\n    await Promise.all(\n        documentsData.map(docData => runAsyncPluginHooks(\n            'preMigrateDocument',\n            {\n                docData,\n                oldCollection\n            }\n        ))\n    );\n    // run the migration strategies on each document\n    const migratedDocuments: (any | null)[] = await Promise.all(\n        documentsData.map(docData => migrateDocumentData(oldCollection, docData))\n    );\n\n\n    const bulkWriteToStorageInput: any[] = [];\n    const actions: any[] = [];\n\n    documentsData.forEach((docData, idx) => {\n        const migratedDocData: any | null = migratedDocuments[idx];\n        const action = {\n            res: null as any,\n            type: '',\n            migrated: migratedDocData,\n            doc: docData,\n            oldCollection,\n            newestCollection: oldCollection.newestCollection\n        };\n        actions.push(action);\n\n        /**\n         * Determiniticly handle the revision\n         * so migrating the same data on multiple instances\n         * will result in the same output.\n         */\n        if (isDocumentDataWithoutRevisionEqual(docData, migratedDocData)) {\n            /**\n             * Data not changed by migration strategies, keep the same revision.\n             * This ensures that other replicated instances that did not migrate already\n             * will still have the same document.\n             */\n            migratedDocData._rev = docData._rev;\n        } else if (migratedDocData !== null) {\n            /**\n             * data changed, increase revision height\n             * so replicating instances use our new document data\n             */\n            const newHeight = getHeightOfRevision(docData._rev) + 1;\n            const newRevision = newHeight + '-' + createRevision(migratedDocData);\n            migratedDocData._rev = newRevision;\n        }\n\n\n        if (migratedDocData) {\n            /**\n             * save to newest collection\n             * notice that this data also contains the attachments data\n             */\n            const attachmentsBefore = migratedDocData._attachments;\n            const saveData: WithAttachmentsData<any> = _handleToStorageInstance(oldCollection.newestCollection, migratedDocData);\n            saveData._attachments = attachmentsBefore;\n            bulkWriteToStorageInput.push(saveData);\n            action.res = saveData;\n            action.type = 'success';\n        } else {\n            /**\n             * Migration strategy returned null\n             * which means we should not migrate this document,\n             * just drop it.\n             */\n            action.type = 'deleted';\n        }\n    });\n\n\n    /**\n     * Write the documents to the newest collection.\n     * We need to add as revision\n     * because we provide the _rev by our own\n     * to have deterministic revisions in case the migration\n     * runs on multiple nodes which must lead to the equal storage state.\n     */\n    if (bulkWriteToStorageInput.length) {\n        await oldCollection.newestCollection.storageInstance.bulkAddRevisions(bulkWriteToStorageInput);\n    }\n\n    // run hooks\n    await Promise.all(\n        actions.map(action => runAsyncPluginHooks(\n            'postMigrateDocument',\n            action\n        ))\n    );\n\n    // remove the documents from the old collection storage instance\n    const bulkDeleteInputData = documentsData.map(docData => {\n        const writeDeleted = flatClone(docData);\n        writeDeleted._deleted = true;\n        return {\n            previous: _handleToStorageInstance(oldCollection as any, docData),\n            document: _handleToStorageInstance(oldCollection as any, writeDeleted)\n        };\n    });\n\n    if (bulkDeleteInputData.length) {\n        await oldCollection.storageInstance.bulkWrite(bulkDeleteInputData);\n    }\n\n    return actions;\n}\n\n\n/**\n * deletes this.storageInstance and removes it from the database.collectionsCollection\n */\nexport function deleteOldCollection(\n    oldCollection: OldRxCollection\n): Promise<void> {\n    return oldCollection.storageInstance.remove()\n        .then(\n            () => oldCollection.database.removeCollectionDoc(\n                oldCollection.dataMigrator.name,\n                oldCollection.schema\n            )\n        );\n}\n\n/**\n * runs the migration on all documents and deletes the storage instance afterwards\n */\nexport function migrateOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize = 10\n): Observable<any> {\n    if (oldCollection._migrate) {\n        // already running\n        throw newRxError('DM3');\n    }\n    oldCollection._migrate = true;\n\n    const observer = new Subject();\n\n    /**\n     * TODO this is a side-effect which might throw\n     * @see DataMigrator.migrate()\n     */\n    (() => {\n        let error: any;\n        const allBatchesDone = () => {\n            // remove this oldCollection\n            return deleteOldCollection(oldCollection)\n                .then(() => observer.complete());\n        };\n        const handleOneBatch = () => {\n            return getBatchOfOldCollection(oldCollection, batchSize)\n                .then(batch => {\n                    if (batch.length === 0) {\n                        allBatchesDone();\n                        return false;\n                    } else {\n                        return _migrateDocuments(oldCollection, batch)\n                            .then((actions: any[]) => actions.forEach(action => observer.next(action)))\n                            .catch(e => error = e)\n                            .then(() => true);\n                    }\n                })\n                .then(next => {\n                    if (!next) {\n                        return;\n                    }\n                    if (error) {\n                        observer.error(error);\n                    } else {\n                        handleOneBatch();\n                    }\n                });\n        };\n        handleOneBatch();\n    })();\n\n    return observer.asObservable();\n}\n\nexport function migratePromise(\n    oldCollection: OldRxCollection,\n    batchSize?: number\n): Promise<any> {\n    if (!oldCollection._migratePromise) {\n        oldCollection._migratePromise = new Promise((res, rej) => {\n            const state$ = migrateOldCollection(oldCollection, batchSize);\n            (state$ as any).subscribe(null, rej, res);\n        });\n    }\n    return oldCollection._migratePromise;\n}\n"],"file":"data-migrator.js"}