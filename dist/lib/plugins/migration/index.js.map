{"version":3,"sources":["../../../../src/plugins/migration/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAIA;;AAUA;;AACA;;AAIA;;AAKO,IAAM,2BAAgE,GAAG,IAAI,OAAJ,EAAzE;;AAEA,IAAM,mBAA6B,GAAG;AACzC,EAAA,IAAI,EAAE,WADmC;AAEzC,EAAA,IAAI,EAAE,IAFmC;AAGzC,EAAA,KAAK,EAAE;AACH,IAAA,oBAAoB,EAAE;AADnB,GAHkC;AAMzC,EAAA,UAAU,EAAE;AACR,IAAA,UAAU,EAAE,oBAAC,KAAD,EAAgB;AACxB,MAAA,KAAK,CAAC,eAAN,GAAwB,YAA4D;AAChF,eAAO,iDAA4B,IAA5B,EAAkC,IAAlC,CACH,0BAAU,UAAA,IAAI;AAAA,iBAAI,yBAAc,IAAd,CAAJ;AAAA,SAAd,CADG,EAEH,4BAAY;AACR,UAAA,UAAU,EAAE,CADJ;AAER,UAAA,QAAQ,EAAE;AAFF,SAAZ,CAFG,CAAP;AAOH,OARD;AASH,KAXO;AAYR,IAAA,YAAY,EAAE,sBAAC,KAAD,EAAgB;AAC1B,MAAA,KAAK,CAAC,eAAN,GAAwB,YAA4C;AAChE,YAAI,CAAC,2BAA2B,CAAC,GAA5B,CAAgC,IAAhC,CAAL,EAA4C;AACxC,UAAA,2BAA2B,CAAC,GAA5B,CACI,IADJ,EAEI,IAAI,0BAAJ,CACI,KAAK,cADT,EAEI,KAAK,mBAFT,CAFJ;AAQH;;AACD,eAAO,2BAA2B,CAAC,GAA5B,CAAgC,IAAhC,CAAP;AACH,OAZD;;AAaA,MAAA,KAAK,CAAC,eAAN,GAAwB,YAA8B;AAClD,YAAI,KAAK,MAAL,CAAY,OAAZ,KAAwB,CAA5B,EAA+B;AAC3B,iBAAO,2BAAP;AACH;;AACD,eAAO,+BAAY,KAAK,eAAL,EAAZ,CAAP;AACH,OALD;AAMH;AAhCO;AAN6B,CAAtC,C,CA2CP","file":"index.js","sourcesContent":["import {\n    combineLatest,\n    Observable\n} from 'rxjs';\nimport {\n    shareReplay,\n    switchMap\n} from 'rxjs/operators';\nimport type {\n    RxPlugin,\n    RxCollection,\n    RxDatabase,\n    AllMigrationStates\n} from '../../types';\nimport { PROMISE_RESOLVE_FALSE } from '../../util';\nimport {\n    mustMigrate,\n    DataMigrator\n} from './data-migrator';\nimport {\n    getMigrationStateByDatabase,\n    onDatabaseDestroy\n} from './migration-state';\n\nexport const DATA_MIGRATOR_BY_COLLECTION: WeakMap<RxCollection, DataMigrator> = new WeakMap();\n\nexport const RxDBMigrationPlugin: RxPlugin = {\n    name: 'migration',\n    rxdb: true,\n    hooks: {\n        preDestroyRxDatabase: onDatabaseDestroy\n    },\n    prototypes: {\n        RxDatabase: (proto: any) => {\n            proto.migrationStates = function (this: RxDatabase): Observable<AllMigrationStates> {\n                return getMigrationStateByDatabase(this).pipe(\n                    switchMap(list => combineLatest(list)),\n                    shareReplay({\n                        bufferSize: 1,\n                        refCount: true\n                    })\n                );\n            };\n        },\n        RxCollection: (proto: any) => {\n            proto.getDataMigrator = function (this: RxCollection): DataMigrator {\n                if (!DATA_MIGRATOR_BY_COLLECTION.has(this)) {\n                    DATA_MIGRATOR_BY_COLLECTION.set(\n                        this,\n                        new DataMigrator(\n                            this.asRxCollection,\n                            this.migrationStrategies\n                        )\n                    );\n\n                }\n                return DATA_MIGRATOR_BY_COLLECTION.get(this) as any;\n            };\n            proto.migrationNeeded = function (this: RxCollection) {\n                if (this.schema.version === 0) {\n                    return PROMISE_RESOLVE_FALSE;\n                }        \n                return mustMigrate(this.getDataMigrator());\n            };\n        }\n    }\n};\n\n\n// used in tests\nexport {\n    _getOldCollections,\n    getBatchOfOldCollection,\n    migrateDocumentData,\n    _migrateDocuments,\n    deleteOldCollection,\n    migrateOldCollection,\n    migratePromise,\n    DataMigrator\n} from './data-migrator';\n"]}