{"version":3,"file":"index.js","names":["DATA_MIGRATOR_BY_COLLECTION","WeakMap","RxDBMigrationPlugin","name","rxdb","hooks","preDestroyRxDatabase","after","onDatabaseDestroy","prototypes","RxDatabase","proto","migrationStates","getMigrationStateByDatabase","pipe","switchMap","list","combineLatest","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","RxCollection","getDataMigrator","has","set","DataMigrator","asRxCollection","migrationStrategies","get","migrationNeeded","schema","version","PROMISE_RESOLVE_FALSE","mustMigrate"],"sources":["../../../../src/plugins/migration/index.ts"],"sourcesContent":["import {\n    combineLatest,\n    Observable\n} from 'rxjs';\nimport {\n    shareReplay,\n    switchMap\n} from 'rxjs/operators';\nimport type {\n    RxPlugin,\n    RxCollection,\n    RxDatabase,\n    AllMigrationStates\n} from '../../types';\nimport { PROMISE_RESOLVE_FALSE, RXJS_SHARE_REPLAY_DEFAULTS } from '../../util';\nimport {\n    mustMigrate,\n    DataMigrator\n} from './data-migrator';\nimport {\n    getMigrationStateByDatabase,\n    onDatabaseDestroy\n} from './migration-state';\n\nexport const DATA_MIGRATOR_BY_COLLECTION: WeakMap<RxCollection, DataMigrator> = new WeakMap();\n\nexport const RxDBMigrationPlugin: RxPlugin = {\n    name: 'migration',\n    rxdb: true,\n    hooks: {\n        preDestroyRxDatabase: {\n            after: onDatabaseDestroy\n        }\n    },\n    prototypes: {\n        RxDatabase: (proto: any) => {\n            proto.migrationStates = function (this: RxDatabase): Observable<AllMigrationStates> {\n                return getMigrationStateByDatabase(this).pipe(\n                    switchMap(list => combineLatest(list)),\n                    shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n                );\n            };\n        },\n        RxCollection: (proto: any) => {\n            proto.getDataMigrator = function (this: RxCollection): DataMigrator {\n                if (!DATA_MIGRATOR_BY_COLLECTION.has(this)) {\n                    DATA_MIGRATOR_BY_COLLECTION.set(\n                        this,\n                        new DataMigrator(\n                            this.asRxCollection,\n                            this.migrationStrategies\n                        )\n                    );\n\n                }\n                return DATA_MIGRATOR_BY_COLLECTION.get(this) as any;\n            };\n            proto.migrationNeeded = function (this: RxCollection) {\n                if (this.schema.version === 0) {\n                    return PROMISE_RESOLVE_FALSE;\n                }        \n                return mustMigrate(this.getDataMigrator());\n            };\n        }\n    }\n};\n\n\n// used in tests\nexport {\n    _getOldCollections,\n    getBatchOfOldCollection,\n    migrateDocumentData,\n    _migrateDocuments,\n    deleteOldCollection,\n    migrateOldCollection,\n    migratePromise,\n    DataMigrator\n} from './data-migrator';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAIA;;AAUA;;AACA;;AAIA;;AAKO,IAAMA,2BAAgE,GAAG,IAAIC,OAAJ,EAAzE;;AAEA,IAAMC,mBAA6B,GAAG;EACzCC,IAAI,EAAE,WADmC;EAEzCC,IAAI,EAAE,IAFmC;EAGzCC,KAAK,EAAE;IACHC,oBAAoB,EAAE;MAClBC,KAAK,EAAEC;IADW;EADnB,CAHkC;EAQzCC,UAAU,EAAE;IACRC,UAAU,EAAE,oBAACC,KAAD,EAAgB;MACxBA,KAAK,CAACC,eAAN,GAAwB,YAA4D;QAChF,OAAO,IAAAC,2CAAA,EAA4B,IAA5B,EAAkCC,IAAlC,CACH,IAAAC,oBAAA,EAAU,UAAAC,IAAI;UAAA,OAAI,IAAAC,mBAAA,EAAcD,IAAd,CAAJ;QAAA,CAAd,CADG,EAEH,IAAAE,sBAAA,EAAYC,gCAAZ,CAFG,CAAP;MAIH,CALD;IAMH,CARO;IASRC,YAAY,EAAE,sBAACT,KAAD,EAAgB;MAC1BA,KAAK,CAACU,eAAN,GAAwB,YAA4C;QAChE,IAAI,CAACrB,2BAA2B,CAACsB,GAA5B,CAAgC,IAAhC,CAAL,EAA4C;UACxCtB,2BAA2B,CAACuB,GAA5B,CACI,IADJ,EAEI,IAAIC,0BAAJ,CACI,KAAKC,cADT,EAEI,KAAKC,mBAFT,CAFJ;QAQH;;QACD,OAAO1B,2BAA2B,CAAC2B,GAA5B,CAAgC,IAAhC,CAAP;MACH,CAZD;;MAaAhB,KAAK,CAACiB,eAAN,GAAwB,YAA8B;QAClD,IAAI,KAAKC,MAAL,CAAYC,OAAZ,KAAwB,CAA5B,EAA+B;UAC3B,OAAOC,2BAAP;QACH;;QACD,OAAO,IAAAC,yBAAA,EAAY,KAAKX,eAAL,EAAZ,CAAP;MACH,CALD;IAMH;EA7BO;AAR6B,CAAtC,C,CA0CP"}