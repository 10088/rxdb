{"version":3,"sources":["../../../src/plugins/ajv-validate.ts"],"names":[],"mappings":";;;;;;;;;;;AAKA;;AACA;;AAGA;;AATA;AACA;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;AACA,IAAM,eAAiC,GAAG,IAAI,GAAJ,EAA1C;AAGA,IAAM,GAAG,GAAG,IAAI,eAAJ,EAAZ;AAEA;AACA;AACA;;AACO,SAAS,aAAT,CACH,QADG,EAEA;AACH,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAtB;;AACA,MAAI,CAAC,eAAe,CAAC,GAAhB,CAAoB,IAApB,CAAL,EAAgC;AAC5B,QAAM,SAAS,GAAG,GAAG,CAAC,OAAJ,CAAY,QAAQ,CAAC,UAArB,CAAlB;AACA,IAAA,eAAe,CAAC,GAAhB,CAAoB,IAApB,EAA0B,SAA1B;AACH;;AACD,SAAO,eAAe,CAAC,GAAhB,CAAoB,IAApB,CAAP;AACH;AAED;AACA;AACA;;;AACA,SAAS,QAAT,CAEI,GAFJ,EAGE;AACE,MAAM,YAAY,GAAG,aAAa,CAAC,IAAD,CAAlC;;AACA,MAAM,OAAO,GAAG,YAAY,CAAC,GAAD,CAA5B;AACA,MAAI,OAAJ,EAAa,OAAO,GAAP,CAAb,KACK;AACD,UAAM,yBAAW,KAAX,EAAkB;AACpB,MAAA,MAAM,EAAE,YAAY,CAAC,MADD;AAEpB,MAAA,GAAG,EAAH,GAFoB;AAGpB,MAAA,MAAM,EAAE,KAAK;AAHO,KAAlB,CAAN;AAKH;AACJ;;AAED,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,CAAC,QAAD,EAAwB;AAClD;AACA,4CAA+B;AAAA,WAAM,aAAa,CAAC,QAAD,CAAnB;AAAA,GAA/B;AACH,CAHD;;AAKO,IAAM,IAAI,GAAG,IAAb;;AACA,IAAM,UAAU,GAAG;AACtB;AACJ;AACA;AACI,EAAA,QAAQ,EAAE,kBAAC,KAAD,EAAgB;AACtB,IAAA,KAAK,CAAC,QAAN,GAAiB,QAAjB;AACH;AANqB,CAAnB;;AAQA,IAAM,KAAK,GAAG;AACjB,EAAA,cAAc,EAAE;AADC,CAAd;;AAIA,IAAM,qBAA+B,GAAG;AAC3C,EAAA,IAAI,EAAE,cADqC;AAE3C,EAAA,IAAI,EAAJ,IAF2C;AAG3C,EAAA,UAAU,EAAV,UAH2C;AAI3C,EAAA,KAAK,EAAL;AAJ2C,CAAxC","file":"ajv-validate.js","sourcesContent":["/**\n * this plugin validates documents before they can be inserted into the RxCollection.\n * It's using ajv as jsonschema-validator\n * @link https://github.com/epoberezkin/ajv\n */\nimport Ajv from 'ajv';\nimport {\n    newRxError\n} from '../rx-error';\nimport {\n    requestIdleCallbackIfAvailable\n} from '../util';\nimport {\n    RxSchema\n} from '../rx-schema';\nimport type { RxPlugin } from '../types';\n\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\nconst VALIDATOR_CACHE: Map<string, any> = new Map();\n\n\nconst ajv = new Ajv();\n\n/**\n * returns the parsed validator from ajv\n */\nexport function _getValidator(\n    rxSchema: RxSchema\n): any {\n    const hash = rxSchema.hash;\n    if (!VALIDATOR_CACHE.has(hash)) {\n        const validator = ajv.compile(rxSchema.jsonSchema);\n        VALIDATOR_CACHE.set(hash, validator);\n    }\n    return VALIDATOR_CACHE.get(hash);\n}\n\n/**\n * validates the given object against the schema\n */\nfunction validate(\n    this: RxSchema,\n    obj: any\n) {\n    const useValidator = _getValidator(this);\n    const isValid = useValidator(obj);\n    if (isValid) return obj;\n    else {\n        throw newRxError('VD2', {\n            errors: useValidator.errors,\n            obj,\n            schema: this.jsonSchema\n        });\n    }\n}\n\nconst runAfterSchemaCreated = (rxSchema: RxSchema) => {\n    // pre-generate validator-function from the schema\n    requestIdleCallbackIfAvailable(() => _getValidator(rxSchema));\n};\n\nexport const rxdb = true;\nexport const prototypes = {\n    /**\n     * set validate-function for the RxSchema.prototype\n     */\n    RxSchema: (proto: any) => {\n        proto.validate = validate;\n    }\n};\nexport const hooks = {\n    createRxSchema: runAfterSchemaCreated\n};\n\nexport const RxDBAjvValidatePlugin: RxPlugin = {\n    name: 'ajv-validate',\n    rxdb,\n    prototypes,\n    hooks\n};\n"]}