{"version":3,"file":"websocket-client.js","names":["replicateWithWebsocketServer","options","getWebSocket","url","socketState","wsClient","socket","messages$","message$","requestCounter","getRequestId","count","collection","database","token","requestFlag","randomCouchString","streamRequest","id","name","method","params","send","JSON","stringify","replicationState","replicateRxCollection","replicationIdentifier","pull","batchSize","stream$","pipe","filter","msg","map","result","handler","lastPulledCheckpoint","requestId","request","firstValueFrom","push","docs","error$","subscribe","err","subjects","error","next","connect$","reSync","has","WEBSOCKET_BY_URL","get","ReconnectingWebSocket","undefined","WebSocket","IsomorphicWebSocket","Subject","openPromise","Promise","res","onopen","onmessage","messageObj","message","parse","data","onerror","emitError","newRxError","errors","Array","isArray","direction","refCount","set","Map","removeWebSocketRef","obj","getFromMapOrThrow","complete","close"],"sources":["../../../../src/plugins/replication-websocket/websocket-client.ts"],"sourcesContent":["import { replicateRxCollection, RxReplicationState } from '../replication';\nimport {\n    WebsocketClientOptions,\n    WebsocketMessageResponseType,\n    WebsocketMessageType\n} from './websocket-types';\n\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport {\n    WebSocket as IsomorphicWebSocket\n} from 'isomorphic-ws';\nimport {\n    getFromMapOrThrow,\n    randomCouchString\n} from '../../util';\nimport {\n    filter,\n    map,\n    Subject,\n    firstValueFrom\n} from 'rxjs';\nimport { RxError, RxReplicationWriteToMasterRow } from '../../types';\nimport { newRxError } from '../../rx-error';\n\nexport type WebsocketWithRefCount = {\n    url: string;\n    socket: ReconnectingWebSocket;\n    refCount: number;\n    openPromise: Promise<void>;\n    connect$: Subject<void>;\n    message$: Subject<WebsocketMessageResponseType>;\n    error$: Subject<RxError>\n};\n\n/**\n * Reuse the same socket even when multiple\n * collection replicate with the same server at once.\n */\nexport const WEBSOCKET_BY_URL: Map<string, WebsocketWithRefCount> = new Map();\nexport async function getWebSocket(\n    url: string\n): Promise<WebsocketWithRefCount> {\n    let has = WEBSOCKET_BY_URL.get(url);\n    if (!has) {\n        const wsClient = new ReconnectingWebSocket(\n            url,\n            undefined,\n            {\n                WebSocket: IsomorphicWebSocket\n            }\n        );\n\n\n        const connect$ = new Subject<void>();\n        const openPromise = new Promise<void>(res => {\n            wsClient.onopen = () => {\n                connect$.next();\n                res();\n            };\n        });\n\n        const message$ = new Subject<WebsocketMessageResponseType>();\n        wsClient.onmessage = (messageObj) => {\n            const message: WebsocketMessageResponseType = JSON.parse(messageObj.data);\n            message$.next(message);\n        };\n\n        const error$ = new Subject<any>();\n        wsClient.onerror = (err) => {\n            const emitError = newRxError('RC_STREAM', {\n                errors: Array.isArray(err) ? err as any : [err],\n                direction: 'pull'\n            });\n            error$.next(emitError);\n        }\n\n\n        has = {\n            url,\n            socket: wsClient,\n            openPromise,\n            refCount: 1,\n            connect$,\n            message$,\n            error$\n        };\n        WEBSOCKET_BY_URL.set(url, has);\n    } else {\n        has.refCount = has.refCount + 1;\n    }\n\n\n    await has.openPromise;\n    return has;\n}\n\nexport function removeWebSocketRef(\n    url: string\n) {\n    const obj = getFromMapOrThrow(WEBSOCKET_BY_URL, url);\n    obj.refCount = obj.refCount - 1;\n    if (obj.refCount === 0) {\n        WEBSOCKET_BY_URL.delete(url);\n        obj.connect$.complete();\n        obj.socket.close();\n    }\n}\n\n\n\nexport async function replicateWithWebsocketServer<RxDocType, CheckpointType>(\n    options: WebsocketClientOptions<RxDocType>\n): Promise<RxReplicationState<RxDocType, CheckpointType>> {\n    const socketState = await getWebSocket(options.url);\n    const wsClient = socketState.socket;\n\n    const messages$ = socketState.message$;\n\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return options.collection.database.token + '|' + requestFlag + '|' + count;\n    }\n\n    const streamRequest: WebsocketMessageType = {\n        id: 'stream',\n        collection: options.collection.name,\n        method: 'masterChangeStream$',\n        params: []\n    }\n    wsClient.send(JSON.stringify(streamRequest));\n\n    const replicationState = replicateRxCollection<RxDocType, CheckpointType>({\n        collection: options.collection,\n        replicationIdentifier: 'websocket-' + options.url,\n        pull: {\n            batchSize: options.batchSize,\n            stream$: messages$.pipe(\n                filter(msg => msg.id === 'stream' && msg.collection === options.collection.name),\n                map(msg => msg.result)\n            ),\n            async handler(lastPulledCheckpoint: CheckpointType, batchSize: number) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterChangesSince',\n                    params: [lastPulledCheckpoint, batchSize]\n                }\n                wsClient.send(JSON.stringify(request));\n                const result = await firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n                return result;\n            }\n        },\n        push: {\n            batchSize: options.batchSize,\n            handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                const requestId = getRequestId();\n                const request: WebsocketMessageType = {\n                    id: requestId,\n                    collection: options.collection.name,\n                    method: 'masterWrite',\n                    params: [docs]\n                }\n                wsClient.send(JSON.stringify(request));\n                return firstValueFrom(\n                    messages$.pipe(\n                        filter(msg => msg.id === requestId),\n                        map(msg => msg.result)\n                    )\n                );\n            }\n        }\n    });\n\n    socketState.error$.subscribe(err => replicationState.subjects.error.next(err));\n\n    /**\n     * When the client goes offline and online again,\n     * we have to send a 'RESYNC' signal because the client\n     * might have missed out events while being offline.\n     */\n    socketState.connect$.subscribe(() => replicationState.reSync());\n\n\n    return replicationState;\n}\n"],"mappings":";;;;;;;;;;;AAAA;;AAOA;;AACA;;AAGA;;AAIA;;AAOA;;IAwFsBA,4B,YAAAA,4B,CAClBC,O;MACsD;IAAA,uBAC5BC,YAAY,CAACD,OAAO,CAACE,GAAT,CADgB,iBAChDC,WADgD;MAEtD,IAAMC,QAAQ,GAAGD,WAAW,CAACE,MAA7B;MAEA,IAAMC,SAAS,GAAGH,WAAW,CAACI,QAA9B;MAEA,IAAIC,cAAc,GAAG,CAArB;;MAEA,SAASC,YAAT,GAAwB;QACpB,IAAMC,KAAK,GAAGF,cAAc,EAA5B;QACA,OAAOR,OAAO,CAACW,UAAR,CAAmBC,QAAnB,CAA4BC,KAA5B,GAAoC,GAApC,GAA0CC,WAA1C,GAAwD,GAAxD,GAA8DJ,KAArE;MACH;;MAJD,IAAMI,WAAW,GAAG,IAAAC,uBAAA,EAAkB,EAAlB,CAApB;MAMA,IAAMC,aAAmC,GAAG;QACxCC,EAAE,EAAE,QADoC;QAExCN,UAAU,EAAEX,OAAO,CAACW,UAAR,CAAmBO,IAFS;QAGxCC,MAAM,EAAE,qBAHgC;QAIxCC,MAAM,EAAE;MAJgC,CAA5C;MAMAhB,QAAQ,CAACiB,IAAT,CAAcC,IAAI,CAACC,SAAL,CAAeP,aAAf,CAAd;MAEA,IAAMQ,gBAAgB,GAAG,IAAAC,kCAAA,EAAiD;QACtEd,UAAU,EAAEX,OAAO,CAACW,UADkD;QAEtEe,qBAAqB,EAAE,eAAe1B,OAAO,CAACE,GAFwB;QAGtEyB,IAAI,EAAE;UACFC,SAAS,EAAE5B,OAAO,CAAC4B,SADjB;UAEFC,OAAO,EAAEvB,SAAS,CAACwB,IAAV,CACL,IAAAC,YAAA,EAAO,UAAAC,GAAG;YAAA,OAAIA,GAAG,CAACf,EAAJ,KAAW,QAAX,IAAuBe,GAAG,CAACrB,UAAJ,KAAmBX,OAAO,CAACW,UAAR,CAAmBO,IAAjE;UAAA,CAAV,CADK,EAEL,IAAAe,SAAA,EAAI,UAAAD,GAAG;YAAA,OAAIA,GAAG,CAACE,MAAR;UAAA,CAAP,CAFK,CAFP;UAMIC,OANJ,mBAMYC,oBANZ,EAMkDR,SANlD;YAAA,IAMqE;cACnE,IAAMS,SAAS,GAAG5B,YAAY,EAA9B;cACA,IAAM6B,OAA6B,GAAG;gBAClCrB,EAAE,EAAEoB,SAD8B;gBAElC1B,UAAU,EAAEX,OAAO,CAACW,UAAR,CAAmBO,IAFG;gBAGlCC,MAAM,EAAE,oBAH0B;gBAIlCC,MAAM,EAAE,CAACgB,oBAAD,EAAuBR,SAAvB;cAJ0B,CAAtC;cAMAxB,QAAQ,CAACiB,IAAT,CAAcC,IAAI,CAACC,SAAL,CAAee,OAAf,CAAd;cARmE,uBAS9C,IAAAC,oBAAA,EACjBjC,SAAS,CAACwB,IAAV,CACI,IAAAC,YAAA,EAAO,UAAAC,GAAG;gBAAA,OAAIA,GAAG,CAACf,EAAJ,KAAWoB,SAAf;cAAA,CAAV,CADJ,EAEI,IAAAJ,SAAA,EAAI,UAAAD,GAAG;gBAAA,OAAIA,GAAG,CAACE,MAAR;cAAA,CAAP,CAFJ,CADiB,CAT8C;YAgBtE,CAtBC;cAAA;YAAA;UAAA;QAAA,CAHgE;QA2BtEM,IAAI,EAAE;UACFZ,SAAS,EAAE5B,OAAO,CAAC4B,SADjB;UAEFO,OAFE,mBAEMM,IAFN,EAEwD;YACtD,IAAMJ,SAAS,GAAG5B,YAAY,EAA9B;YACA,IAAM6B,OAA6B,GAAG;cAClCrB,EAAE,EAAEoB,SAD8B;cAElC1B,UAAU,EAAEX,OAAO,CAACW,UAAR,CAAmBO,IAFG;cAGlCC,MAAM,EAAE,aAH0B;cAIlCC,MAAM,EAAE,CAACqB,IAAD;YAJ0B,CAAtC;YAMArC,QAAQ,CAACiB,IAAT,CAAcC,IAAI,CAACC,SAAL,CAAee,OAAf,CAAd;YACA,OAAO,IAAAC,oBAAA,EACHjC,SAAS,CAACwB,IAAV,CACI,IAAAC,YAAA,EAAO,UAAAC,GAAG;cAAA,OAAIA,GAAG,CAACf,EAAJ,KAAWoB,SAAf;YAAA,CAAV,CADJ,EAEI,IAAAJ,SAAA,EAAI,UAAAD,GAAG;cAAA,OAAIA,GAAG,CAACE,MAAR;YAAA,CAAP,CAFJ,CADG,CAAP;UAMH;QAjBC;MA3BgE,CAAjD,CAAzB;MAgDA/B,WAAW,CAACuC,MAAZ,CAAmBC,SAAnB,CAA6B,UAAAC,GAAG;QAAA,OAAIpB,gBAAgB,CAACqB,QAAjB,CAA0BC,KAA1B,CAAgCC,IAAhC,CAAqCH,GAArC,CAAJ;MAAA,CAAhC;MAEA;AACJ;AACA;AACA;AACA;;MACIzC,WAAW,CAAC6C,QAAZ,CAAqBL,SAArB,CAA+B;QAAA,OAAMnB,gBAAgB,CAACyB,MAAjB,EAAN;MAAA,CAA/B;MAGA,OAAOzB,gBAAP;IA/EsD;EAgFzD,C;;;;;;;IAzJqBvB,Y,YAAAA,Y,CAClBC,G;MAC8B;IAC9B,IAAIgD,GAAG,GAAGC,gBAAgB,CAACC,GAAjB,CAAqBlD,GAArB,CAAV;;IACA,IAAI,CAACgD,GAAL,EAAU;MACN,IAAM9C,QAAQ,GAAG,IAAIiD,iCAAJ,CACbnD,GADa,EAEboD,SAFa,EAGb;QACIC,SAAS,EAAEC;MADf,CAHa,CAAjB;MASA,IAAMR,QAAQ,GAAG,IAAIS,aAAJ,EAAjB;MACA,IAAMC,WAAW,GAAG,IAAIC,OAAJ,CAAkB,UAAAC,GAAG,EAAI;QACzCxD,QAAQ,CAACyD,MAAT,GAAkB,YAAM;UACpBb,QAAQ,CAACD,IAAT;UACAa,GAAG;QACN,CAHD;MAIH,CALmB,CAApB;MAOA,IAAMrD,QAAQ,GAAG,IAAIkD,aAAJ,EAAjB;;MACArD,QAAQ,CAAC0D,SAAT,GAAqB,UAACC,UAAD,EAAgB;QACjC,IAAMC,OAAqC,GAAG1C,IAAI,CAAC2C,KAAL,CAAWF,UAAU,CAACG,IAAtB,CAA9C;QACA3D,QAAQ,CAACwC,IAAT,CAAciB,OAAd;MACH,CAHD;;MAKA,IAAMtB,MAAM,GAAG,IAAIe,aAAJ,EAAf;;MACArD,QAAQ,CAAC+D,OAAT,GAAmB,UAACvB,GAAD,EAAS;QACxB,IAAMwB,SAAS,GAAG,IAAAC,mBAAA,EAAW,WAAX,EAAwB;UACtCC,MAAM,EAAEC,KAAK,CAACC,OAAN,CAAc5B,GAAd,IAAqBA,GAArB,GAAkC,CAACA,GAAD,CADJ;UAEtC6B,SAAS,EAAE;QAF2B,CAAxB,CAAlB;QAIA/B,MAAM,CAACK,IAAP,CAAYqB,SAAZ;MACH,CAND;;MASAlB,GAAG,GAAG;QACFhD,GAAG,EAAHA,GADE;QAEFG,MAAM,EAAED,QAFN;QAGFsD,WAAW,EAAXA,WAHE;QAIFgB,QAAQ,EAAE,CAJR;QAKF1B,QAAQ,EAARA,QALE;QAMFzC,QAAQ,EAARA,QANE;QAOFmC,MAAM,EAANA;MAPE,CAAN;MASAS,gBAAgB,CAACwB,GAAjB,CAAqBzE,GAArB,EAA0BgD,GAA1B;IACH,CA5CD,MA4CO;MACHA,GAAG,CAACwB,QAAJ,GAAexB,GAAG,CAACwB,QAAJ,GAAe,CAA9B;IACH;;IAhD6B,uBAmDxBxB,GAAG,CAACQ,WAnDoB;MAoD9B,OAAOR,GAAP;IApD8B;EAqDjC,C;;;;;;;AA5DD;AACA;AACA;AACA;AACO,IAAMC,gBAAoD,GAAG,IAAIyB,GAAJ,EAA7D;;;AA0DA,SAASC,kBAAT,CACH3E,GADG,EAEL;EACE,IAAM4E,GAAG,GAAG,IAAAC,uBAAA,EAAkB5B,gBAAlB,EAAoCjD,GAApC,CAAZ;EACA4E,GAAG,CAACJ,QAAJ,GAAeI,GAAG,CAACJ,QAAJ,GAAe,CAA9B;;EACA,IAAII,GAAG,CAACJ,QAAJ,KAAiB,CAArB,EAAwB;IACpBvB,gBAAgB,UAAhB,CAAwBjD,GAAxB;IACA4E,GAAG,CAAC9B,QAAJ,CAAagC,QAAb;IACAF,GAAG,CAACzE,MAAJ,CAAW4E,KAAX;EACH;AACJ"}