{"version":3,"file":"websocket-server.js","names":["startWebsocketServer","options","wss","WebSocketServer","port","path","closed","closeServer","PROMISE_RESOLVE_VOID","Promise","res","rej","clients","ws","close","err","database","onDestroy","push","replicationHandlerByCollection","Map","getReplicationHandler","collectionName","collections","Error","handler","get","collection","rxStorageInstanceToReplicationHandler","storageInstance","conflictHandler","hashFunction","set","on","connection","onCloseHandlers","onclose","map","fn","messageString","message","JSON","parse","method","sub","masterChangeStream$","subscribe","ev","streamResponse","id","result","send","stringify","unsubscribe","params","response","server"],"sources":["../../../../src/plugins/replication-websocket/websocket-server.ts"],"sourcesContent":["import type {\n    RxReplicationHandler\n} from '../../types';\n\nimport {\n    WebSocketServer\n} from 'isomorphic-ws';\nimport type {\n    WebsocketMessageResponseType,\n    WebsocketMessageType,\n    WebsocketServerOptions,\n    WebsocketServerState\n} from './websocket-types';\nimport { rxStorageInstanceToReplicationHandler } from '../../replication-protocol';\nimport {\n    PROMISE_RESOLVE_VOID\n} from '../../util';\n\nexport function startWebsocketServer(options: WebsocketServerOptions): WebsocketServerState {\n    const wss = new WebSocketServer({\n        port: options.port,\n        path: options.path\n    });\n    let closed = false;\n    function closeServer() {\n        if (closed) {\n            return PROMISE_RESOLVE_VOID;\n        }\n        closed = true;\n        return new Promise<void>((res, rej) => {\n            /**\n             * We have to close all client connections,\n             * otherwise wss.close() will never call the callback.\n             * @link https://github.com/websockets/ws/issues/1288#issuecomment-360594458\n             */\n            for (const ws of wss.clients) {\n                ws.close();\n            }\n            wss.close((err) => {\n                if (err) {\n                    rej(err);\n                } else {\n                    res();\n                }\n            });\n        });\n    }\n\n    const database = options.database;\n\n    // auto close when the database gets destroyed\n    database.onDestroy.push(() => closeServer());\n\n    const replicationHandlerByCollection: Map<string, RxReplicationHandler<any, any>> = new Map();\n    function getReplicationHandler(collectionName: string): RxReplicationHandler<any, any> {\n        if (!database.collections[collectionName]) {\n            throw new Error('collection ' + collectionName + ' does not exist');\n        }\n        let handler = replicationHandlerByCollection.get(collectionName);\n        if (!handler) {\n            const collection = database.collections[collectionName];\n            handler = rxStorageInstanceToReplicationHandler(\n                collection.storageInstance,\n                collection.conflictHandler,\n                database.hashFunction\n            );\n            replicationHandlerByCollection.set(collectionName, handler);\n        }\n        return handler;\n    }\n\n    wss.on('connection', function connection(ws) {\n        const onCloseHandlers: Function[] = [];\n        ws.onclose = () => {\n            onCloseHandlers.map(fn => fn())\n        }\n        ws.on('message', async (messageString: string) => {\n            const message: WebsocketMessageType = JSON.parse(messageString);\n            const handler = getReplicationHandler(message.collection);\n            const method = handler[message.method];\n\n            /**\n             * If it is not a function,\n             * it means that the client requested the masterChangeStream$\n             */\n            if (typeof method !== 'function') {\n                const sub = handler.masterChangeStream$.subscribe(ev => {\n                    const streamResponse: WebsocketMessageResponseType = {\n                        id: 'stream',\n                        collection: message.collection,\n                        result: ev\n                    };\n                    ws.send(JSON.stringify(streamResponse));\n                });\n                onCloseHandlers.push(() => sub.unsubscribe());\n                return;\n            }\n            const result = await (method as any)(...message.params);\n            const response: WebsocketMessageResponseType = {\n                id: message.id,\n                collection: message.collection,\n                result\n            };\n            ws.send(JSON.stringify(response));\n        });\n    });\n\n    return {\n        server: wss,\n        close: closeServer\n    };\n}\n"],"mappings":"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"}