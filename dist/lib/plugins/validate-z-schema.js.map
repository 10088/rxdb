{"version":3,"sources":["../../../src/plugins/validate-z-schema.ts"],"names":[],"mappings":";;;;;;;;;AAKA;;AACA;;AAGA;;AATA;AACA;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;AACA,IAAM,eAAiC,GAAG,IAAI,GAAJ,EAA1C;AAGA;AACA;AACA;AACA;AACA;;AACA,SAAS,aAAT,CACI,QADJ,EAEE;AACE,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAtB;;AACA,MAAI,CAAC,eAAe,CAAC,GAAhB,CAAoB,IAApB,CAAL,EAAgC;AAC5B,QAAM,SAAS,GAAG,IAAK,mBAAL,EAAlB;;AACA,QAAM,YAAY,GAAG,SAAf,YAAe,CAAC,GAAD,EAAc;AAC/B,MAAA,SAAS,CAAC,QAAV,CAAmB,GAAnB,EAAwB,QAAQ,CAAC,UAAjC;AACA,aAAO,SAAP;AACH,KAHD;;AAIA,IAAA,eAAe,CAAC,GAAhB,CAAoB,IAApB,EAA0B,YAA1B;AACH;;AACD,SAAO,eAAe,CAAC,GAAhB,CAAoB,IAApB,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,IAAM,QAAQ,GAAG,SAAX,QAAW,CAEb,GAFa,EAGV;AACH,MAAM,SAAS,GAAG,aAAa,CAAC,IAAD,CAA/B;;AACA,MAAM,YAAY,GAAG,SAAS,CAAC,GAAD,CAA9B;AACA,MAAM,MAAmC,GAAG,YAAY,CAAC,aAAb,EAA5C;AACA,MAAI,CAAC,MAAL,EAAa,OAAO,GAAP,CAAb,KACK;AACD,QAAM,sBAAsB,GAAI,MAAD,CAAgB,GAAhB,CAAoB;AAAA,UAC/C,KAD+C,QAC/C,KAD+C;AAAA,UAE/C,WAF+C,QAE/C,WAF+C;AAAA,UAG/C,OAH+C,QAG/C,OAH+C;AAAA,aAIvC;AACR,QAAA,KAAK,EAAL,KADQ;AAER,QAAA,WAAW,EAAX,WAFQ;AAGR,QAAA,OAAO,EAAP;AAHQ,OAJuC;AAAA,KAApB,CAA/B;AASA,UAAM,yBAAW,KAAX,EAAkB;AACpB,MAAA,MAAM,EAAE,sBADY;AAEpB,MAAA,GAAG,EAAH,GAFoB;AAGpB,MAAA,MAAM,EAAE,KAAK;AAHO,KAAlB,CAAN;AAKH;AACJ,CAxBD;;AA0BA,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,CAAC,QAAD,EAAwB;AAClD;AACA,4CAA+B;AAAA,WAAM,aAAa,CAAC,IAAd,CAAmB,QAAnB,EAA6B,QAA7B,CAAN;AAAA,GAA/B;AACH,CAHD;;AAKO,IAAM,IAAI,GAAG,IAAb;;AACA,IAAM,UAAU,GAAG;AACtB;AACJ;AACA;AACI,EAAA,QAAQ,EAAE,kBAAC,KAAD,EAAgB;AACtB,IAAA,KAAK,CAAC,aAAN,GAAsB,aAAtB;AACA,IAAA,KAAK,CAAC,QAAN,GAAiB,QAAjB;AACH;AAPqB,CAAnB;;AASA,IAAM,KAAK,GAAG;AACjB,EAAA,cAAc,EAAE;AADC,CAAd;;AAIA,IAAM,yBAAmC,GAAG;AAC/C,EAAA,IAAI,EAAE,mBADyC;AAE/C,EAAA,IAAI,EAAJ,IAF+C;AAG/C,EAAA,UAAU,EAAV,UAH+C;AAI/C,EAAA,KAAK,EAAL;AAJ+C,CAA5C","file":"validate-z-schema.js","sourcesContent":["/**\n * this plugin validates documents before they can be inserted into the RxCollection.\n * It's using z-schema as jsonschema-validator\n * @link https://github.com/zaggino/z-schema\n */\nimport ZSchema from 'z-schema';\nimport {\n    newRxError\n} from '../rx-error';\nimport {\n    requestIdleCallbackIfAvailable\n} from '../util';\nimport {\n    RxSchema\n} from '../rx-schema';\nimport type { RxPlugin } from '../types';\n\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\nconst VALIDATOR_CACHE: Map<string, any> = new Map();\n\n\n/**\n * returns the parsed validator from z-schema\n * @param schemaPath if given, the schema for the sub-path is used\n * @\n */\nfunction _getValidator(\n    rxSchema: RxSchema\n) {\n    const hash = rxSchema.hash;\n    if (!VALIDATOR_CACHE.has(hash)) {\n        const validator = new (ZSchema as any)();\n        const validatorFun = (obj: any) => {\n            validator.validate(obj, rxSchema.jsonSchema);\n            return validator;\n        };\n        VALIDATOR_CACHE.set(hash, validatorFun);\n    }\n    return VALIDATOR_CACHE.get(hash);\n}\n\n/**\n * validates the given object against the schema\n * @param  schemaPath if given, the sub-schema will be validated\n * @throws {RxError} if not valid\n */\nconst validate = function (\n    this: RxSchema,\n    obj: any\n): any {\n    const validator = _getValidator(this);\n    const useValidator = validator(obj);\n    const errors: ZSchema.SchemaErrorDetail[] = useValidator.getLastErrors();\n    if (!errors) return obj;\n    else {\n        const formattedZSchemaErrors = (errors as any).map(({\n            title,\n            description,\n            message\n        }: any) => ({\n            title,\n            description,\n            message\n        }));\n        throw newRxError('VD2', {\n            errors: formattedZSchemaErrors,\n            obj,\n            schema: this.jsonSchema\n        });\n    }\n};\n\nconst runAfterSchemaCreated = (rxSchema: RxSchema) => {\n    // pre-generate the validator-z-schema from the schema\n    requestIdleCallbackIfAvailable(() => _getValidator.bind(rxSchema, rxSchema));\n};\n\nexport const rxdb = true;\nexport const prototypes = {\n    /**\n     * set validate-function for the RxSchema.prototype\n     */\n    RxSchema: (proto: any) => {\n        proto._getValidator = _getValidator;\n        proto.validate = validate;\n    }\n};\nexport const hooks = {\n    createRxSchema: runAfterSchemaCreated\n};\n\nexport const RxDBValidateZSchemaPlugin: RxPlugin = {\n    name: 'validate-z-schema',\n    rxdb,\n    prototypes,\n    hooks\n};\n"]}