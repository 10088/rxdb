{"version":3,"sources":["../../../src/plugins/validate.ts"],"names":[],"mappings":";;;;;;;;;AAKA;;AACA;;AAGA;;AATA;AACA;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;AACA,IAAM,eAAiC,GAAG,IAAI,GAAJ,EAA1C;AAGA;AACA;AACA;;AACA,SAAS,aAAT,CACI,QADJ,EAEE;AACE,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAtB;;AACA,MAAI,CAAC,eAAe,CAAC,GAAhB,CAAoB,IAApB,CAAL,EAAgC;AAC5B,QAAM,SAAS,GAAG,+BAAc,QAAQ,CAAC,UAAvB,CAAlB;AACA,IAAA,eAAe,CAAC,GAAhB,CAAoB,IAApB,EAA0B,SAA1B;AACH;;AACD,SAAO,eAAe,CAAC,GAAhB,CAAoB,IAApB,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,IAAM,QAAQ,GAAG,SAAX,QAAW,CAEb,GAFa,EAGV;AACH,MAAM,YAAY,GAAG,aAAa,CAAC,IAAD,CAAlC;;AACA,MAAM,OAAO,GAAG,YAAY,CAAC,GAAD,CAA5B;AACA,MAAI,OAAJ,EAAa,OAAO,GAAP,CAAb,KACK;AACD,UAAM,yBAAW,KAAX,EAAkB;AACpB,MAAA,MAAM,EAAE,YAAY,CAAC,MADD;AAEpB,MAAA,GAAG,EAAH,GAFoB;AAGpB,MAAA,MAAM,EAAE,KAAK;AAHO,KAAlB,CAAN;AAKH;AACJ,CAdD;;AAgBA,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,CAAC,QAAD,EAAwB;AAClD;AACA,4CAA+B,YAAM;AACjC,IAAA,aAAa,CAAC,QAAD,CAAb;AACH,GAFD;AAGH,CALD;;AAOO,IAAM,IAAI,GAAG,IAAb;;AACA,IAAM,UAAU,GAAG;AACtB;AACJ;AACA;AACA;AACI,EAAA,QAAQ,EAAE,kBAAC,KAAD,EAAgB;AACtB,IAAA,KAAK,CAAC,aAAN,GAAsB,aAAtB;AACA,IAAA,KAAK,CAAC,QAAN,GAAiB,QAAjB;AACH;AARqB,CAAnB;;AAUA,IAAM,KAAK,GAAG;AACjB,EAAA,cAAc,EAAE;AADC,CAAd;;AAIA,IAAM,kBAA4B,GAAG;AACxC,EAAA,IAAI,EAAE,UADkC;AAExC,EAAA,IAAI,EAAJ,IAFwC;AAGxC,EAAA,UAAU,EAAV,UAHwC;AAIxC,EAAA,KAAK,EAAL;AAJwC,CAArC","file":"validate.js","sourcesContent":["/**\n * this plugin validates documents before they can be inserted into the RxCollection.\n * It's using is-my-json-valid as jsonschema-validator\n * @link https://github.com/mafintosh/is-my-json-valid\n */\nimport isMyJsonValid from 'is-my-json-valid';\nimport {\n    newRxError\n} from '../rx-error';\nimport {\n    requestIdleCallbackIfAvailable\n} from '../util';\nimport {\n    RxSchema\n} from '../rx-schema';\nimport type { RxPlugin } from '../types';\n\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\nconst VALIDATOR_CACHE: Map<string, any> = new Map();\n\n\n/**\n * returns the parsed validator from is-my-json-valid\n */\nfunction _getValidator(\n    rxSchema: RxSchema\n) {\n    const hash = rxSchema.hash;\n    if (!VALIDATOR_CACHE.has(hash)) {\n        const validator = isMyJsonValid(rxSchema.jsonSchema as any);\n        VALIDATOR_CACHE.set(hash, validator);\n    }\n    return VALIDATOR_CACHE.get(hash);\n}\n\n/**\n * validates the given object against the schema\n * @param  schemaPath if given, the sub-schema will be validated\n * @throws {RxError} if not valid\n */\nconst validate = function (\n    this: RxSchema,\n    obj: any\n): any {\n    const useValidator = _getValidator(this);\n    const isValid = useValidator(obj);\n    if (isValid) return obj;\n    else {\n        throw newRxError('VD2', {\n            errors: useValidator.errors,\n            obj,\n            schema: this.jsonSchema\n        });\n    }\n};\n\nconst runAfterSchemaCreated = (rxSchema: RxSchema) => {\n    // pre-generate the isMyJsonValid-validator from the schema\n    requestIdleCallbackIfAvailable(() => {\n        _getValidator(rxSchema);\n    });\n};\n\nexport const rxdb = true;\nexport const prototypes = {\n    /**\n     * set validate-function for the RxSchema.prototype\n     * @param prototype of RxSchema\n     */\n    RxSchema: (proto: any) => {\n        proto._getValidator = _getValidator;\n        proto.validate = validate;\n    }\n};\nexport const hooks = {\n    createRxSchema: runAfterSchemaCreated\n};\n\nexport const RxDBValidatePlugin: RxPlugin = {\n    name: 'validate',\n    rxdb,\n    prototypes,\n    hooks\n};\n"]}