{"version":3,"file":"validate.js","names":["VALIDATOR_CACHE","Map","_getValidator","rxSchema","hash","has","validator","jsonSchema","set","get","validateFullDocumentData","obj","useValidator","isValid","errors","schema","runAfterSchemaCreated","RxDBValidatePlugin","name","rxdb","prototypes","RxSchema","proto","hooks","createRxSchema","after"],"sources":["../../../src/plugins/validate.ts"],"sourcesContent":["/**\n * this plugin validates documents before they can be inserted into the RxCollection.\n * It's using is-my-json-valid as jsonschema-validator\n * @link https://github.com/mafintosh/is-my-json-valid\n */\nimport isMyJsonValid from 'is-my-json-valid';\nimport {\n    newRxError\n} from '../rx-error';\nimport {\n    requestIdleCallbackIfAvailable\n} from '../util';\nimport {\n    RxSchema\n} from '../rx-schema';\nimport type { RxPlugin } from '../types';\n\n/**\n * cache the validators by the schema-hash\n * so we can reuse them when multiple collections have the same schema\n */\nconst VALIDATOR_CACHE: Map<string, any> = new Map();\n\n\n/**\n * returns the parsed validator from is-my-json-valid\n */\nfunction _getValidator(\n    rxSchema: RxSchema\n) {\n    const hash = rxSchema.hash;\n    if (!VALIDATOR_CACHE.has(hash)) {\n        const validator = isMyJsonValid(rxSchema.jsonSchema as any);\n        VALIDATOR_CACHE.set(hash, validator);\n    }\n    return VALIDATOR_CACHE.get(hash);\n}\n\n/**\n * validates the given object against the schema\n * @param  schemaPath if given, the sub-schema will be validated\n * @throws {RxError} if not valid\n */\nfunction validateFullDocumentData(\n    this: RxSchema,\n    obj: any\n): any {\n    const useValidator = _getValidator(this);\n    const isValid = useValidator(obj);\n    if (isValid) return obj;\n    else {\n        throw newRxError('VD2', {\n            errors: useValidator.errors,\n            obj,\n            schema: this.jsonSchema\n        });\n    }\n}\n\nconst runAfterSchemaCreated = (rxSchema: RxSchema) => {\n    // pre-generate the isMyJsonValid-validator from the schema\n    requestIdleCallbackIfAvailable(() => {\n        _getValidator(rxSchema);\n    });\n};\n\nexport const RxDBValidatePlugin: RxPlugin = {\n    name: 'validate',\n    rxdb: true,\n    prototypes: {\n        /**\n         * set validate-function for the RxSchema.prototype\n         * @param prototype of RxSchema\n         */\n        RxSchema: (proto: any) => {\n            proto._getValidator = _getValidator;\n            proto.validateFullDocumentData = validateFullDocumentData;\n        }\n    },\n    hooks: {\n        createRxSchema: {\n            after: runAfterSchemaCreated\n        }\n    }\n};\n"],"mappings":";;;;;;;;;AAKA;;AACA;;AAGA;;AATA;AACA;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;AACA,IAAMA,eAAiC,GAAG,IAAIC,GAAJ,EAA1C;AAGA;AACA;AACA;;AACA,SAASC,aAAT,CACIC,QADJ,EAEE;EACE,IAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;;EACA,IAAI,CAACJ,eAAe,CAACK,GAAhB,CAAoBD,IAApB,CAAL,EAAgC;IAC5B,IAAME,SAAS,GAAG,+BAAcH,QAAQ,CAACI,UAAvB,CAAlB;IACAP,eAAe,CAACQ,GAAhB,CAAoBJ,IAApB,EAA0BE,SAA1B;EACH;;EACD,OAAON,eAAe,CAACS,GAAhB,CAAoBL,IAApB,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASM,wBAAT,CAEIC,GAFJ,EAGO;EACH,IAAMC,YAAY,GAAGV,aAAa,CAAC,IAAD,CAAlC;;EACA,IAAMW,OAAO,GAAGD,YAAY,CAACD,GAAD,CAA5B;EACA,IAAIE,OAAJ,EAAa,OAAOF,GAAP,CAAb,KACK;IACD,MAAM,yBAAW,KAAX,EAAkB;MACpBG,MAAM,EAAEF,YAAY,CAACE,MADD;MAEpBH,GAAG,EAAHA,GAFoB;MAGpBI,MAAM,EAAE,KAAKR;IAHO,CAAlB,CAAN;EAKH;AACJ;;AAED,IAAMS,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACb,QAAD,EAAwB;EAClD;EACA,0CAA+B,YAAM;IACjCD,aAAa,CAACC,QAAD,CAAb;EACH,CAFD;AAGH,CALD;;AAOO,IAAMc,kBAA4B,GAAG;EACxCC,IAAI,EAAE,UADkC;EAExCC,IAAI,EAAE,IAFkC;EAGxCC,UAAU,EAAE;IACR;AACR;AACA;AACA;IACQC,QAAQ,EAAE,kBAACC,KAAD,EAAgB;MACtBA,KAAK,CAACpB,aAAN,GAAsBA,aAAtB;MACAoB,KAAK,CAACZ,wBAAN,GAAiCA,wBAAjC;IACH;EARO,CAH4B;EAaxCa,KAAK,EAAE;IACHC,cAAc,EAAE;MACZC,KAAK,EAAET;IADK;EADb;AAbiC,CAArC"}