{"version":3,"file":"index.js","names":["replicateP2P","options","getRequestId","count","requestCounter","collection","database","token","requestFlag","addRxPlugin","RxDBLeaderElectionPlugin","pull","batchSize","push","multiInstance","waitForLeadership","randomCouchString","storageToken","pool","RxP2PReplicationPool","connectionHandlerCreator","subs","connectionHandler","error$","subscribe","err","next","disconnect$","peer","removePeer","message$","pipe","filter","data","message","method","send","id","result","connectSub","connect$","canceled","sendMessageAndAwaitAnswer","params","tokenResponse","peerToken","isMaster","isMasterInP2PReplication","hashFunction","masterHandler","masterReplicationHandler","masterChangeStreamSub","masterChangeStream$","ev","streamResponse","p","unsubscribe","messageSub","msgPeer","bind","response","replicationState","replicateRxCollection","replicationIdentifier","name","topic","join","autoStart","deletedField","live","retryTime","Object","assign","handler","lastPulledCheckpoint","ensureNotFalsy","answer","stream$","response$","m","map","undefined","docs","addPeer","peerStates$","BehaviorSubject","Map","Subject","onDestroy","cancel","rxStorageInstanceToReplicationHandler","storageInstance","conflictHandler","peerState","getValue","set","getFromMapOrThrow","forEach","sub","awaitFirstPeer","firstValueFrom","peerStates","size","Array","from","keys","destroy"],"sources":["../../../../src/plugins/replication-p2p/index.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    filter,\n    firstValueFrom,\n    map,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport { addRxPlugin } from '../../plugin';\nimport { rxStorageInstanceToReplicationHandler } from '../../replication-protocol';\nimport type {\n    RxCollection,\n    RxError,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxTypeError\n} from '../../types';\nimport { ensureNotFalsy, getFromMapOrThrow, randomCouchString } from '../../plugins/utils';\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport { replicateRxCollection } from '../replication';\nimport { isMasterInP2PReplication, sendMessageAndAwaitAnswer } from './p2p-helper';\nimport type {\n    P2PConnectionHandler,\n    P2PPeer,\n    P2PPeerState,\n    P2PReplicationCheckpoint,\n    P2PResponse,\n    RxP2PReplicationState,\n    SyncOptionsP2P\n} from './p2p-types';\n\n\nexport async function replicateP2P<RxDocType>(\n    options: SyncOptionsP2P<RxDocType>\n): Promise<RxP2PReplicationPool<RxDocType>> {\n    const collection = options.collection;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n\n    // fill defaults\n    if (options.pull) {\n        if (!options.pull.batchSize) {\n            options.pull.batchSize = 20;\n        }\n    }\n    if (options.push) {\n        if (!options.push.batchSize) {\n            options.push.batchSize = 20;\n        }\n    }\n\n    if (collection.database.multiInstance) {\n        await collection.database.waitForLeadership();\n    }\n\n    // used to easier debug stuff\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return collection.database.token + '|' + requestFlag + '|' + count;\n    }\n\n    const storageToken = await collection.database.storageToken;\n    const pool = new RxP2PReplicationPool(\n        collection,\n        options,\n        options.connectionHandlerCreator(options)\n    );\n\n\n    pool.subs.push(\n        pool.connectionHandler.error$.subscribe(err => pool.error$.next(err)),\n        pool.connectionHandler.disconnect$.subscribe(peer => pool.removePeer(peer))\n    );\n\n    /**\n     * Answer if someone requests our storage token\n     */\n    pool.subs.push(\n        pool.connectionHandler.message$.pipe(\n            filter(data => data.message.method === 'token')\n        ).subscribe(data => {\n            pool.connectionHandler.send(data.peer, {\n                id: data.message.id,\n                result: storageToken\n            });\n        })\n    );\n\n    const connectSub = pool.connectionHandler.connect$\n        .pipe(\n            filter(() => !pool.canceled)\n        )\n        .subscribe(async (peer) => {\n            /**\n             * TODO ensure both know the correct secret\n             */\n            const tokenResponse = await sendMessageAndAwaitAnswer(\n                pool.connectionHandler,\n                peer,\n                {\n                    id: getRequestId(),\n                    method: 'token',\n                    params: []\n                }\n            );\n            const peerToken: string = tokenResponse.result;\n            const isMaster = isMasterInP2PReplication(collection.database.hashFunction, storageToken, peerToken);\n\n            let replicationState: RxP2PReplicationState<RxDocType> | undefined;\n            if (isMaster) {\n                const masterHandler = pool.masterReplicationHandler;\n                const masterChangeStreamSub = masterHandler.masterChangeStream$.subscribe(ev => {\n                    const streamResponse: P2PResponse = {\n                        id: 'masterChangeStream$',\n                        result: ev\n                    };\n                    pool.connectionHandler.send(peer, streamResponse);\n                });\n\n                // clean up the subscription\n                pool.subs.push(\n                    masterChangeStreamSub,\n                    pool.connectionHandler.disconnect$.pipe(\n                        filter(p => p.id === peer.id)\n                    ).subscribe(() => masterChangeStreamSub.unsubscribe())\n                );\n\n                const messageSub = pool.connectionHandler.message$\n                    .pipe(\n                        filter(data => data.peer.id === peer.id),\n                        filter(data => data.message.method !== 'token')\n                    )\n                    .subscribe(async (data) => {\n                        const { peer: msgPeer, message } = data;\n                        /**\n                         * If it is not a function,\n                         * it means that the client requested the masterChangeStream$\n                         */\n                        const method = (masterHandler as any)[message.method].bind(masterHandler);\n                        const result = await (method as any)(...message.params);\n                        const response: P2PResponse = {\n                            id: message.id,\n                            result\n                        };\n                        pool.connectionHandler.send(msgPeer, response);\n                    });\n                pool.subs.push(messageSub);\n            } else {\n                replicationState = replicateRxCollection({\n                    replicationIdentifier: [collection.name, options.topic, peerToken].join('||'),\n                    collection: collection,\n                    autoStart: true,\n                    deletedField: '_deleted',\n                    live: true,\n                    retryTime: options.retryTime,\n                    waitForLeadership: false,\n                    pull: options.pull ? Object.assign({}, options.pull, {\n                        async handler(lastPulledCheckpoint: P2PReplicationCheckpoint) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterChangesSince',\n                                    params: [\n                                        lastPulledCheckpoint,\n                                        ensureNotFalsy(options.pull).batchSize\n                                    ],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        },\n                        stream$: pool.connectionHandler.response$.pipe(\n                            filter(m => m.response.id === 'masterChangeStream$'),\n                            map(m => m.response.result)\n                        )\n\n                    }) : undefined,\n                    push: options.push ? Object.assign({}, options.push, {\n                        async handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterWrite',\n                                    params: [docs],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        }\n                    }) : undefined\n                });\n            }\n            pool.addPeer(peer, replicationState);\n        });\n    pool.subs.push(connectSub);\n    return pool;\n}\n\n\n/**\n * Because the P2P replication runs between many instances,\n * we use a Pool instead of returning a single replication state.\n */\nexport class RxP2PReplicationPool<RxDocType> {\n\n    peerStates$: BehaviorSubject<Map<P2PPeer, P2PPeerState<RxDocType>>> = new BehaviorSubject(new Map());\n    canceled: boolean = false;\n    masterReplicationHandler: RxReplicationHandler<RxDocType, P2PReplicationCheckpoint>;\n    subs: Subscription[] = [];\n\n    public error$ = new Subject<RxError | RxTypeError>();\n\n    constructor(\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly options: SyncOptionsP2P<RxDocType>,\n        public readonly connectionHandler: P2PConnectionHandler\n    ) {\n        this.collection.onDestroy.push(() => this.cancel());\n        this.masterReplicationHandler = rxStorageInstanceToReplicationHandler(\n            collection.storageInstance,\n            collection.conflictHandler,\n            collection.database.token,\n        );\n    }\n\n    addPeer(\n        peer: P2PPeer,\n        replicationState?: RxP2PReplicationState<RxDocType>\n    ) {\n        const peerState: P2PPeerState<RxDocType> = {\n            peer,\n            replicationState,\n            subs: []\n        };\n        this.peerStates$.next(this.peerStates$.getValue().set(peer, peerState));\n        if (replicationState) {\n            peerState.subs.push(\n                replicationState.error$.subscribe(ev => this.error$.next(ev))\n            );\n        }\n    }\n    removePeer(peer: P2PPeer) {\n        const peerState = getFromMapOrThrow(this.peerStates$.getValue(), peer);\n        this.peerStates$.getValue().delete(peer);\n        this.peerStates$.next(this.peerStates$.getValue());\n        peerState.subs.forEach(sub => sub.unsubscribe());\n        if (peerState.replicationState) {\n            peerState.replicationState.cancel();\n        }\n    }\n\n    // often used in unit tests\n    awaitFirstPeer() {\n        return firstValueFrom(\n            this.peerStates$.pipe(\n                filter(peerStates => peerStates.size > 0)\n            )\n        );\n    }\n\n    public async cancel() {\n        if (this.canceled) {\n            return;\n        }\n        this.canceled = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        Array.from(this.peerStates$.getValue().keys()).forEach(peer => {\n            this.removePeer(peer);\n        });\n        await this.connectionHandler.destroy();\n    }\n}\n\nexport * from './p2p-helper';\nexport * from './p2p-types';\n// export * from './connection-handler-webtorrent';\n// export * from './connection-handler-p2pcf';\nexport * from './connection-handler-simple-peer';\n"],"mappings":"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"}