{"version":3,"file":"index.js","names":["syncP2P","options","requestCounter","getRequestId","count","collection","database","token","requestFlag","randomCouchString","storageToken","pool","RxP2PReplicationPool","connectionHandlerCreator","subs","push","connectionHandler","error$","subscribe","err","next","disconnect$","peer","removePeer","message$","pipe","filter","data","message","method","send","id","result","connectSub","connect$","canceled","sendMessageAndAwaitAnswer","params","tokenResponse","peerToken","isMaster","isMasterInP2PReplication","hashFunction","replicationState","masterHandler","masterReplicationHandler","masterChangeStreamSub","masterChangeStream$","ev","streamResponse","p","unsubscribe","messageSub","msgPeer","bind","response","replicateRxCollection","replicationIdentifier","name","topic","join","autoStart","deletedField","live","retryTime","waitForLeadership","pull","Object","assign","handler","lastPulledCheckpoint","ensureNotFalsy","batchSize","answer","stream$","response$","m","map","undefined","docs","addPeer","multiInstance","peerStates$","BehaviorSubject","Map","Subject","onDestroy","cancel","rxStorageInstanceToReplicationHandler","storageInstance","conflictHandler","peerState","getValue","set","getFromMapOrThrow","forEach","sub","awaitFirstPeer","firstValueFrom","peerStates","size","Array","from","keys","destroy","RxDBReplicationP2PPlugin","init","addRxPlugin","RxDBLeaderElectionPlugin","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-p2p/index.ts"],"sourcesContent":["import { BehaviorSubject, filter, firstValueFrom, map, Subject, Subscription } from 'rxjs';\nimport { addRxPlugin } from '../../plugin';\nimport { rxStorageInstanceToReplicationHandler } from '../../replication-protocol';\nimport type {\n    RxCollection,\n    RxError,\n    RxPlugin,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxTypeError\n} from '../../types';\nimport { ensureNotFalsy, getFromMapOrThrow, randomCouchString } from '../../util';\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport { replicateRxCollection } from '../replication';\nimport { isMasterInP2PReplication, sendMessageAndAwaitAnswer } from './p2p-helper';\nimport type {\n    P2PConnectionHandler,\n    P2PPeer,\n    P2PPeerState,\n    P2PReplicationCheckpoint,\n    P2PResponse,\n    RxP2PReplicationState,\n    SyncOptionsP2P\n} from './p2p-types';\n\n\nexport async function syncP2P<RxDocType>(\n    this: RxCollection<RxDocType>,\n    options: SyncOptionsP2P<RxDocType>\n): Promise<RxP2PReplicationPool<RxDocType>> {\n\n    // fill defaults\n    if (options.pull) {\n        if (!options.pull.batchSize) {\n            options.pull.batchSize = 20;\n        }\n    }\n    if (options.push) {\n        if (!options.push.batchSize) {\n            options.push.batchSize = 20;\n        }\n    }\n\n    const collection = this;\n    if (this.database.multiInstance) {\n        await this.database.waitForLeadership();\n    }\n\n    // used to easier debug stuff\n    let requestCounter = 0;\n    const requestFlag = randomCouchString(10);\n    function getRequestId() {\n        const count = requestCounter++;\n        return collection.database.token + '|' + requestFlag + '|' + count;\n    }\n\n    const storageToken = await this.database.storageToken;\n    const pool = new RxP2PReplicationPool(\n        this,\n        options,\n        options.connectionHandlerCreator(options)\n    );\n\n\n    pool.subs.push(\n        pool.connectionHandler.error$.subscribe(err => pool.error$.next(err)),\n        pool.connectionHandler.disconnect$.subscribe(peer => pool.removePeer(peer))\n    );\n\n    /**\n     * Answer if someone requests our storage token\n     */\n    pool.subs.push(\n        pool.connectionHandler.message$.pipe(\n            filter(data => data.message.method === 'token')\n        ).subscribe(data => {\n            pool.connectionHandler.send(data.peer, {\n                id: data.message.id,\n                result: storageToken\n            });\n        })\n    );\n\n    const connectSub = pool.connectionHandler.connect$\n        .pipe(\n            filter(() => !pool.canceled)\n        )\n        .subscribe(async (peer) => {\n            /**\n             * TODO ensure both know the correct secret\n             */\n            const tokenResponse = await sendMessageAndAwaitAnswer(\n                pool.connectionHandler,\n                peer,\n                {\n                    id: getRequestId(),\n                    method: 'token',\n                    params: []\n                }\n            );\n            const peerToken: string = tokenResponse.result;\n            const isMaster = isMasterInP2PReplication(this.database.hashFunction, storageToken, peerToken);\n\n            let replicationState: RxP2PReplicationState<RxDocType> | undefined;\n            if (isMaster) {\n                const masterHandler = pool.masterReplicationHandler;\n                const masterChangeStreamSub = masterHandler.masterChangeStream$.subscribe(ev => {\n                    const streamResponse: P2PResponse = {\n                        id: 'masterChangeStream$',\n                        result: ev\n                    };\n                    pool.connectionHandler.send(peer, streamResponse);\n                });\n\n                // clean up the subscription\n                pool.subs.push(\n                    masterChangeStreamSub,\n                    pool.connectionHandler.disconnect$.pipe(\n                        filter(p => p.id === peer.id)\n                    ).subscribe(() => masterChangeStreamSub.unsubscribe())\n                );\n\n                const messageSub = pool.connectionHandler.message$\n                    .pipe(\n                        filter(data => data.peer.id === peer.id),\n                        filter(data => data.message.method !== 'token')\n                    )\n                    .subscribe(async (data) => {\n                        const { peer: msgPeer, message } = data;\n                        /**\n                         * If it is not a function,\n                         * it means that the client requested the masterChangeStream$\n                         */\n                        const method = (masterHandler as any)[message.method].bind(masterHandler);\n                        const result = await (method as any)(...message.params);\n                        const response: P2PResponse = {\n                            id: message.id,\n                            result\n                        };\n                        pool.connectionHandler.send(msgPeer, response);\n                    });\n                pool.subs.push(messageSub);\n            } else {\n                replicationState = replicateRxCollection({\n                    replicationIdentifier: [this.name, options.topic, peerToken].join('||'),\n                    collection: this,\n                    autoStart: true,\n                    deletedField: '_deleted',\n                    live: true,\n                    retryTime: options.retryTime,\n                    waitForLeadership: false,\n                    pull: options.pull ? Object.assign({}, options.pull, {\n                        async handler(lastPulledCheckpoint: P2PReplicationCheckpoint) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterChangesSince',\n                                    params: [\n                                        lastPulledCheckpoint,\n                                        ensureNotFalsy(options.pull).batchSize\n                                    ],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        },\n                        stream$: pool.connectionHandler.response$.pipe(\n                            filter(m => m.response.id === 'masterChangeStream$'),\n                            map(m => m.response.result)\n                        )\n\n                    }) : undefined,\n                    push: options.push ? Object.assign({}, options.push, {\n                        async handler(docs: RxReplicationWriteToMasterRow<RxDocType>[]) {\n                            const answer = await sendMessageAndAwaitAnswer(\n                                pool.connectionHandler,\n                                peer,\n                                {\n                                    method: 'masterWrite',\n                                    params: [docs],\n                                    id: getRequestId()\n                                }\n                            );\n                            return answer.result;\n                        }\n                    }) : undefined\n                });\n            }\n            pool.addPeer(peer, replicationState);\n        });\n    pool.subs.push(connectSub);\n    return pool;\n}\n\n\n/**\n * Because the P2P replication runs between many instances,\n * we use a Pool instead of returning a single replication state.\n */\nexport class RxP2PReplicationPool<RxDocType> {\n\n    peerStates$: BehaviorSubject<Map<P2PPeer, P2PPeerState<RxDocType>>> = new BehaviorSubject(new Map());\n    canceled: boolean = false;\n    masterReplicationHandler: RxReplicationHandler<RxDocType, P2PReplicationCheckpoint>;\n    subs: Subscription[] = [];\n\n    public error$ = new Subject<RxError | RxTypeError>();\n\n    constructor(\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly options: SyncOptionsP2P<RxDocType>,\n        public readonly connectionHandler: P2PConnectionHandler\n    ) {\n        this.collection.onDestroy.push(() => this.cancel());\n        this.masterReplicationHandler = rxStorageInstanceToReplicationHandler(\n            collection.storageInstance,\n            collection.conflictHandler,\n            collection.database.hashFunction\n        );\n    }\n\n    addPeer(\n        peer: P2PPeer,\n        replicationState?: RxP2PReplicationState<RxDocType>\n    ) {\n        const peerState: P2PPeerState<RxDocType> = {\n            peer,\n            replicationState,\n            subs: []\n        };\n        this.peerStates$.next(this.peerStates$.getValue().set(peer, peerState));\n        if (replicationState) {\n            peerState.subs.push(\n                replicationState.error$.subscribe(ev => this.error$.next(ev))\n            );\n        }\n    }\n    removePeer(peer: P2PPeer) {\n        const peerState = getFromMapOrThrow(this.peerStates$.getValue(), peer);\n        this.peerStates$.getValue().delete(peer);\n        this.peerStates$.next(this.peerStates$.getValue());\n        peerState.subs.forEach(sub => sub.unsubscribe());\n        if (peerState.replicationState) {\n            peerState.replicationState.cancel();\n        }\n    }\n\n    // often used in unit tests\n    awaitFirstPeer() {\n        return firstValueFrom(\n            this.peerStates$.pipe(\n                filter(peerStates => peerStates.size > 0)\n            )\n        );\n    }\n\n    public async cancel() {\n        if (this.canceled) {\n            return;\n        }\n        this.canceled = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        Array.from(this.peerStates$.getValue().keys()).forEach(peer => {\n            this.removePeer(peer);\n        });\n        await this.connectionHandler.destroy();\n    }\n}\n\n\nexport const RxDBReplicationP2PPlugin: RxPlugin = {\n    name: 'replication-p2p',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncP2P = syncP2P;\n        }\n    }\n};\n\n\nexport * from './p2p-helper';\nexport * from './p2p-types';\n// export * from './connection-handler-webtorrent';\n// export * from './connection-handler-p2pcf';\nexport * from './connection-handler-simple-peer';\n"],"mappings":"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"}