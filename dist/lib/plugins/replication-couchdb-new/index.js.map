{"version":3,"file":"index.js","names":["body","recover","result","e","then","pact","state","value","s","v","o","bind","observer","prototype","onFulfilled","onRejected","callback","_this","thenable","test","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","RxCouchDBNewReplicationState","url","fetch","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","RxReplicationState","syncCouchDBNew","options","flatClone","endsWith","waitForLeadership","pullStream$","Subject","replicationPrimitivesPull","handler","lastPulledCheckpoint","batchSize","mergeUrlQueryParams","style","feed","include_docs","since","sequence","heartbeat","limit","seq_interval","replicationState","response","json","jsonResponse","documents","results","map","row","couchDBDocToRxDocData","schema","primaryPath","ensureNotFalsy","doc","checkpoint","last_seq","modifier","stream$","asObservable","replicationPrimitivesPush","rows","docs","sendDoc","newDocumentState","assumedMasterState","_rev","pouchSwapPrimaryToId","method","headers","JSON","stringify","responseJson","conflicts","filter","isConflict","error","ok","newRxError","args","length","getConflictDocsUrl","keys","c","id","conflictResponse","conflictResponseJson","conflictDocsMasterState","r","COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX","fastUnsecureHash","startBefore","start","isStopped","next","err","startReplicationOnLeaderShip","RxDBReplicationCouchDBNewPlugin","name","init","addRxPlugin","RxDBLeaderElectionPlugin","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-couchdb-new/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncCouchDBNew()-function to rxdb\n * you can use it to sync collections with a remote CouchDB endpoint.\n */\nimport {\n    ensureNotFalsy,\n    fastUnsecureHash,\n    flatClone\n} from '../../util';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    RxPlugin,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem,\n    PouchdbChangesResult,\n    PouchBulkDocResultRow,\n    PouchAllDocsResponse\n} from '../../types';\nimport {\n    RxReplicationState, startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    newRxError,\n    WithDeleted\n} from '../../index';\n\nimport { Subject } from 'rxjs';\nimport type {\n    CouchDBCheckpointType,\n    FetchMethodType,\n    SyncOptionsCouchDBNew\n} from './couchdb-types';\nimport {\n    couchDBDocToRxDocData,\n    COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX,\n    mergeUrlQueryParams\n} from './couchdb-helper';\nimport { pouchSwapPrimaryToId } from '../pouchdb';\n\nexport * from './couchdb-helper';\nexport * from './couchdb-types';\n\nexport class RxCouchDBNewReplicationState<RxDocType> extends RxReplicationState<RxDocType, CouchDBCheckpointType> {\n    constructor(\n        public readonly url: string,\n        public fetch: FetchMethodType,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CouchDBCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function syncCouchDBNew<RxDocType>(\n    this: RxCollection<RxDocType>,\n    options: SyncOptionsCouchDBNew<RxDocType>\n) {\n    options = flatClone(options);\n    if (!options.url.endsWith('/')) {\n        options.url = options.url + '/';\n    }\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n\n    const collection = this;\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CouchDBCheckpointType>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CouchDBCheckpointType> | undefined;\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CouchDBCheckpointType | undefined,\n                batchSize: number\n            ) {\n                /**\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/changes.html\n                 */\n                const url = options.url + '_changes?' + mergeUrlQueryParams({\n                    style: 'all_docs',\n                    feed: 'normal',\n                    include_docs: true,\n                    since: lastPulledCheckpoint ? lastPulledCheckpoint.sequence : 0,\n                    heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\n                    limit: batchSize,\n                    seq_interval: batchSize\n                });\n\n                const response = await replicationState.fetch(url);\n                const jsonResponse: PouchdbChangesResult = await response.json();\n                const documents: WithDeleted<RxDocType>[] = jsonResponse.results\n                    .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\n                return {\n                    documents,\n                    checkpoint: {\n                        sequence: jsonResponse.last_seq\n                    }\n                };\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                /**\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/bulk-api.html#db-bulk-docs\n                 */\n                const url = options.url + '_bulk_docs?' + mergeUrlQueryParams({});\n                const body = {\n                    docs: rows.map(row => {\n                        const sendDoc = flatClone(row.newDocumentState);\n                        if (row.assumedMasterState) {\n                            (sendDoc as any)._rev = ensureNotFalsy((row.assumedMasterState as any)._rev);\n                        }\n                        return pouchSwapPrimaryToId(collection.schema.primaryPath, sendDoc);\n                    })\n                };\n\n                const response = await replicationState.fetch(\n                    url,\n                    {\n                        method: 'POST',\n                        headers: {\n                            'content-type': 'application/json'\n                        },\n                        body: JSON.stringify(body)\n                    }\n                );\n                const responseJson: PouchBulkDocResultRow[] = await response.json();\n\n                const conflicts = responseJson.filter(row => {\n                    const isConflict = row.error === 'conflict';\n                    if (!row.ok && !isConflict) {\n                        throw newRxError('SNH', { args: { row } });\n                    }\n                    return isConflict;\n                });\n\n                if (conflicts.length === 0) {\n                    return [];\n                }\n\n                const getConflictDocsUrl = options.url + '_all_docs?' + mergeUrlQueryParams({\n                    include_docs: true,\n                    keys: JSON.stringify(conflicts.map(c => c.id))\n                });\n                const conflictResponse = await replicationState.fetch(getConflictDocsUrl);\n                const conflictResponseJson: PouchAllDocsResponse = await conflictResponse.json();\n                const conflictDocsMasterState: WithDeleted<RxDocType>[] = conflictResponseJson.rows\n                    .map(r => couchDBDocToRxDocData(collection.schema.primaryPath, r.doc));\n\n                return conflictDocsMasterState;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier\n        };\n    }\n\n    const replicationState = new RxCouchDBNewReplicationState<RxDocType>(\n        options.url,\n        options.fetch ? options.fetch : fetch,\n        COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX + fastUnsecureHash(options.url),\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Use long polling to get live changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        replicationState.start = () => {\n            let since: string | number = 'now';\n            const batchSize = options.pull && options.pull.batchSize ? options.pull.batchSize : 20;\n\n            (async () => {\n                while (!replicationState.isStopped()) {\n                    const url = options.url + '_changes?' + mergeUrlQueryParams({\n                        style: 'all_docs',\n                        feed: 'longpoll',\n                        since,\n                        include_docs: true,\n                        heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\n                        limit: batchSize,\n                        seq_interval: batchSize\n                    });\n\n                    let jsonResponse: PouchdbChangesResult;\n                    try {\n                        jsonResponse = await (await replicationState.fetch(url)).json();\n                    } catch (err) {\n                        pullStream$.error(err);\n                        continue;\n                    }\n                    const documents: WithDeleted<RxDocType>[] = jsonResponse.results\n                        .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\n                    since = jsonResponse.last_seq;\n\n                    pullStream$.next({\n                        documents,\n                        checkpoint: {\n                            sequence: jsonResponse.last_seq\n                        }\n                    });\n                }\n            })();\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n\n    return replicationState;\n}\n\n\nexport const RxDBReplicationCouchDBNewPlugin: RxPlugin = {\n    name: 'replication-couchdb-new',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncCouchDBNew = syncCouchDBNew;\n        }\n    }\n};\n"],"mappings":"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"}