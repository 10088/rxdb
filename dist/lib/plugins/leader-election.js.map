{"version":3,"sources":["../../../src/plugins/leader-election.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAIA;;AAUA;;AAdA;AACA;AACA;AAiBA,IAAM,qBAAyD,GAAG,IAAI,OAAJ,EAAlE;AACA,IAAM,mCAA6E,GAAG,IAAI,OAAJ,EAAtF;AAEA;AACA;AACA;AACA;;AACO,SAAS,kCAAT,CAA4C,gBAA5C,EAA+F;AAClG,MAAI,OAAO,GAAG,mCAAmC,CAAC,GAApC,CAAwC,gBAAxC,CAAd;;AACA,MAAI,CAAC,OAAL,EAAc;AACV,IAAA,OAAO,GAAG,4CAAqB,gBAArB,CAAV;AACA,IAAA,mCAAmC,CAAC,GAApC,CAAwC,gBAAxC,EAA0D,OAA1D;AACH;;AACD,SAAO,OAAP;AACH;;AAGM,SAAS,cAAT,GAAyD;AAC5D,MAAM,gBAAgB,GAAG,0BAAe,KAAK,gBAApB,CAAzB;AACA,MAAI,OAAO,GAAG,kCAAkC,CAAC,gBAAD,CAAhD;;AACA,MAAI,CAAC,OAAL,EAAc;AACV,IAAA,OAAO,GAAG,kCAAkC,CAAC,gBAAD,CAA5C;AACA,IAAA,qBAAqB,CAAC,GAAtB,CACI,IADJ,EAEI,OAFJ;AAIH;;AACD,SAAO,OAAP;AACH;;AAEM,SAAS,QAAT,GAA6C;AAChD,MAAI,CAAC,KAAK,aAAV,EAAyB;AACrB,WAAO,IAAP;AACH;;AACD,SAAO,KAAK,aAAL,GAAqB,QAA5B;AACH;;AAEM,SAAS,iBAAT,GAA+D;AAClE,MAAI,CAAC,KAAK,aAAV,EAAyB;AACrB,WAAO,0BAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAK,aAAL,GACF,eADE,GAEF,IAFE,CAEG;AAAA,aAAM,IAAN;AAAA,KAFH,CAAP;AAGH;AACJ;AAED;AACA;AACA;;;AACO,SAAS,SAAT,CAAmB,EAAnB,EAAmC;AACtC,MAAM,GAAG,GAAG,qBAAqB,CAAC,GAAtB,CAA0B,EAA1B,CAAZ;;AACA,MAAI,GAAJ,EAAS;AACL,IAAA,GAAG,CAAC,GAAJ;AACH;AACJ;;AAEM,IAAM,IAAI,GAAG,IAAb;;AACA,IAAM,UAAU,GAAG;AACtB,EAAA,UAAU,EAAE,oBAAC,KAAD,EAAgB;AACxB,IAAA,KAAK,CAAC,aAAN,GAAsB,cAAtB;AACA,IAAA,KAAK,CAAC,QAAN,GAAiB,QAAjB;AACA,IAAA,KAAK,CAAC,iBAAN,GAA0B,iBAA1B;AACH;AALqB,CAAnB;;AAQA,IAAM,wBAAkC,GAAG;AAC9C,EAAA,IAAI,EAAE,iBADwC;AAE9C,EAAA,IAAI,EAAJ,IAF8C;AAG9C,EAAA,UAAU,EAAV,UAH8C;AAI9C,EAAA,KAAK,EAAE;AACH,IAAA,oBAAoB,EAAE;AADnB;AAJuC,CAA3C","file":"leader-election.js","sourcesContent":["/**\n * this plugin adds the leader-election-capabilities to rxdb\n */\n\nimport {\n    createLeaderElection,\n    LeaderElector,\n    BroadcastChannel\n} from 'broadcast-channel';\n\nimport type {\n    RxDatabase,\n    RxPlugin\n} from '../types';\nimport {\n    ensureNotFalsy,\n    PROMISE_RESOLVE_TRUE\n} from '../util';\n\nconst LEADER_ELECTORS_OF_DB: WeakMap<RxDatabase, LeaderElector> = new WeakMap();\nconst LEADER_ELECTOR_BY_BROADCAST_CHANNEL: WeakMap<BroadcastChannel, LeaderElector> = new WeakMap();\n\n/**\n * Returns the leader elector of a broadcast channel.\n * Used to ensure we reuse the same elector for the channel each time.\n */\nexport function getLeaderElectorByBroadcastChannel(broadcastChannel: BroadcastChannel): LeaderElector {\n    let elector = LEADER_ELECTOR_BY_BROADCAST_CHANNEL.get(broadcastChannel);\n    if (!elector) {\n        elector = createLeaderElection(broadcastChannel);\n        LEADER_ELECTOR_BY_BROADCAST_CHANNEL.set(broadcastChannel, elector);\n    }\n    return elector;\n}\n\n\nexport function getForDatabase(this: RxDatabase): LeaderElector {\n    const broadcastChannel = ensureNotFalsy(this.broadcastChannel);\n    let elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n    if (!elector) {\n        elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n        LEADER_ELECTORS_OF_DB.set(\n            this,\n            elector\n        );\n    }\n    return elector;\n}\n\nexport function isLeader(this: RxDatabase): boolean {\n    if (!this.multiInstance) {\n        return true;\n    }\n    return this.leaderElector().isLeader;\n}\n\nexport function waitForLeadership(this: RxDatabase): Promise<boolean> {\n    if (!this.multiInstance) {\n        return PROMISE_RESOLVE_TRUE;\n    } else {\n        return this.leaderElector()\n            .awaitLeadership()\n            .then(() => true);\n    }\n}\n\n/**\n * runs when the database gets destroyed\n */\nexport function onDestroy(db: RxDatabase) {\n    const has = LEADER_ELECTORS_OF_DB.get(db);\n    if (has) {\n        has.die();\n    }\n}\n\nexport const rxdb = true;\nexport const prototypes = {\n    RxDatabase: (proto: any) => {\n        proto.leaderElector = getForDatabase;\n        proto.isLeader = isLeader;\n        proto.waitForLeadership = waitForLeadership;\n    }\n};\n\nexport const RxDBLeaderElectionPlugin: RxPlugin = {\n    name: 'leader-election',\n    rxdb,\n    prototypes,\n    hooks: {\n        preDestroyRxDatabase: onDestroy\n    }\n};\n"]}