{"version":3,"file":"leader-election.js","names":["LEADER_ELECTORS_OF_DB","WeakMap","LEADER_ELECTOR_BY_BROADCAST_CHANNEL","getLeaderElectorByBroadcastChannel","broadcastChannel","elector","get","createLeaderElection","set","getForDatabase","getBroadcastChannelReference","token","name","oldDestroy","destroy","bind","removeBroadcastChannelReference","leaderElector","isLeader","multiInstance","waitForLeadership","PROMISE_RESOLVE_TRUE","awaitLeadership","then","onDestroy","db","has","die","rxdb","prototypes","RxDatabase","proto","RxDBLeaderElectionPlugin","hooks","preDestroyRxDatabase","after"],"sources":["../../../src/plugins/leader-election.ts"],"sourcesContent":["/**\n * this plugin adds the leader-election-capabilities to rxdb\n */\n\nimport {\n    createLeaderElection,\n    LeaderElector,\n    BroadcastChannel\n} from 'broadcast-channel';\nimport {\n    getBroadcastChannelReference,\n    removeBroadcastChannelReference\n} from '../rx-storage-multiinstance';\n\nimport type {\n    RxDatabase,\n    RxPlugin\n} from '../types';\nimport {\n    PROMISE_RESOLVE_TRUE\n} from '../util';\n\nconst LEADER_ELECTORS_OF_DB: WeakMap<RxDatabase, LeaderElector> = new WeakMap();\nconst LEADER_ELECTOR_BY_BROADCAST_CHANNEL: WeakMap<BroadcastChannel, LeaderElector> = new WeakMap();\n\n\n/**\n * Returns the leader elector of a broadcast channel.\n * Used to ensure we reuse the same elector for the channel each time.\n */\nexport function getLeaderElectorByBroadcastChannel(broadcastChannel: BroadcastChannel): LeaderElector {\n    let elector = LEADER_ELECTOR_BY_BROADCAST_CHANNEL.get(broadcastChannel);\n    if (!elector) {\n        elector = createLeaderElection(broadcastChannel);\n        LEADER_ELECTOR_BY_BROADCAST_CHANNEL.set(broadcastChannel, elector);\n    }\n    return elector;\n}\n\n/**\n * @overwrites RxDatabase().leaderElector for caching\n */\nexport function getForDatabase(this: RxDatabase): LeaderElector {\n\n\n    const broadcastChannel = getBroadcastChannelReference(\n        this.token,\n        this.name,\n        this\n    );\n\n    /**\n     * Clean up the reference on RxDatabase.destroy()\n     */\n    const oldDestroy = this.destroy.bind(this);\n    this.destroy = function () {\n        removeBroadcastChannelReference(this.token, this);\n        return oldDestroy();\n    }\n\n\n    let elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n    if (!elector) {\n        elector = getLeaderElectorByBroadcastChannel(broadcastChannel);\n        LEADER_ELECTORS_OF_DB.set(\n            this,\n            elector\n        );\n    }\n\n    /**\n     * Overwrite for caching\n     */\n    this.leaderElector = () => elector;\n\n    return elector;\n}\n\nexport function isLeader(this: RxDatabase): boolean {\n    if (!this.multiInstance) {\n        return true;\n    }\n    return this.leaderElector().isLeader;\n}\n\nexport function waitForLeadership(this: RxDatabase): Promise<boolean> {\n    if (!this.multiInstance) {\n        return PROMISE_RESOLVE_TRUE;\n    } else {\n        return this.leaderElector()\n            .awaitLeadership()\n            .then(() => true);\n    }\n}\n\n/**\n * runs when the database gets destroyed\n */\nexport function onDestroy(db: RxDatabase) {\n    const has = LEADER_ELECTORS_OF_DB.get(db);\n    if (has) {\n        has.die();\n    }\n}\n\nexport const rxdb = true;\nexport const prototypes = {\n    RxDatabase: (proto: any) => {\n        proto.leaderElector = getForDatabase;\n        proto.isLeader = isLeader;\n        proto.waitForLeadership = waitForLeadership;\n    }\n};\n\nexport const RxDBLeaderElectionPlugin: RxPlugin = {\n    name: 'leader-election',\n    rxdb,\n    prototypes,\n    hooks: {\n        preDestroyRxDatabase: {\n            after: onDestroy\n        }\n    }\n};\n"],"mappings":";;;;;;;;;;;;;AAIA;;AAKA;;AASA;;AAlBA;AACA;AACA;AAoBA,IAAMA,qBAAyD,GAAG,IAAIC,OAAJ,EAAlE;AACA,IAAMC,mCAA6E,GAAG,IAAID,OAAJ,EAAtF;AAGA;AACA;AACA;AACA;;AACO,SAASE,kCAAT,CAA4CC,gBAA5C,EAA+F;EAClG,IAAIC,OAAO,GAAGH,mCAAmC,CAACI,GAApC,CAAwCF,gBAAxC,CAAd;;EACA,IAAI,CAACC,OAAL,EAAc;IACVA,OAAO,GAAG,IAAAE,sCAAA,EAAqBH,gBAArB,CAAV;IACAF,mCAAmC,CAACM,GAApC,CAAwCJ,gBAAxC,EAA0DC,OAA1D;EACH;;EACD,OAAOA,OAAP;AACH;AAED;AACA;AACA;;;AACO,SAASI,cAAT,GAAyD;EAG5D,IAAML,gBAAgB,GAAG,IAAAM,oDAAA,EACrB,KAAKC,KADgB,EAErB,KAAKC,IAFgB,EAGrB,IAHqB,CAAzB;EAMA;AACJ;AACA;;EACI,IAAMC,UAAU,GAAG,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAnB;;EACA,KAAKD,OAAL,GAAe,YAAY;IACvB,IAAAE,uDAAA,EAAgC,KAAKL,KAArC,EAA4C,IAA5C;IACA,OAAOE,UAAU,EAAjB;EACH,CAHD;;EAMA,IAAIR,OAAO,GAAGF,kCAAkC,CAACC,gBAAD,CAAhD;;EACA,IAAI,CAACC,OAAL,EAAc;IACVA,OAAO,GAAGF,kCAAkC,CAACC,gBAAD,CAA5C;IACAJ,qBAAqB,CAACQ,GAAtB,CACI,IADJ,EAEIH,OAFJ;EAIH;EAED;AACJ;AACA;;;EACI,KAAKY,aAAL,GAAqB;IAAA,OAAMZ,OAAN;EAAA,CAArB;;EAEA,OAAOA,OAAP;AACH;;AAEM,SAASa,QAAT,GAA6C;EAChD,IAAI,CAAC,KAAKC,aAAV,EAAyB;IACrB,OAAO,IAAP;EACH;;EACD,OAAO,KAAKF,aAAL,GAAqBC,QAA5B;AACH;;AAEM,SAASE,iBAAT,GAA+D;EAClE,IAAI,CAAC,KAAKD,aAAV,EAAyB;IACrB,OAAOE,0BAAP;EACH,CAFD,MAEO;IACH,OAAO,KAAKJ,aAAL,GACFK,eADE,GAEFC,IAFE,CAEG;MAAA,OAAM,IAAN;IAAA,CAFH,CAAP;EAGH;AACJ;AAED;AACA;AACA;;;AACO,SAASC,SAAT,CAAmBC,EAAnB,EAAmC;EACtC,IAAMC,GAAG,GAAG1B,qBAAqB,CAACM,GAAtB,CAA0BmB,EAA1B,CAAZ;;EACA,IAAIC,GAAJ,EAAS;IACLA,GAAG,CAACC,GAAJ;EACH;AACJ;;AAEM,IAAMC,IAAI,GAAG,IAAb;;AACA,IAAMC,UAAU,GAAG;EACtBC,UAAU,EAAE,oBAACC,KAAD,EAAgB;IACxBA,KAAK,CAACd,aAAN,GAAsBR,cAAtB;IACAsB,KAAK,CAACb,QAAN,GAAiBA,QAAjB;IACAa,KAAK,CAACX,iBAAN,GAA0BA,iBAA1B;EACH;AALqB,CAAnB;;AAQA,IAAMY,wBAAkC,GAAG;EAC9CpB,IAAI,EAAE,iBADwC;EAE9CgB,IAAI,EAAJA,IAF8C;EAG9CC,UAAU,EAAVA,UAH8C;EAI9CI,KAAK,EAAE;IACHC,oBAAoB,EAAE;MAClBC,KAAK,EAAEX;IADW;EADnB;AAJuC,CAA3C"}