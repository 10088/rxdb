{"version":3,"sources":["../../../../src/plugins/query-builder/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;AA+CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzCA;;AACA;;AAEA;AACA,IAAM,kBAAkB,GAAG,kBAA3B;;AAEO,SAAS,eAAT,CACH,OADG,EAEH,YAFG,EAGH,KAHG,EAImC;AACtC,MAAM,YAAY,GAAG,2CAAmB,iBAAM,OAAO,CAAC,UAAd,CAAnB,CAArB;;AACA,MAAI,OAAO,CAAC,KAAR,CAAc,kBAAd,CAAJ,EAAuC;AACnC,IAAA,YAAY,CAAC,KAAb,GAAqB,OAAO,CAAC,KAAR,CAAc,kBAAd,CAArB;AACH;;AAEA,EAAA,YAAD,CAAsB,YAAtB,EAAoC,KAApC,EANsC,CAMM;;AAE5C,MAAM,gBAAgB,GAAG,YAAY,CAAC,MAAb,EAAzB;AACA,MAAM,QAAQ,GAAG,IAAI,oBAAJ,CACb,OAAO,CAAC,EADK,EAEb,gBAAgB,CAAC,KAFJ,EAGb,OAAO,CAAC,UAHK,CAAjB;;AAKA,MAAI,gBAAgB,CAAC,IAArB,EAA2B;AACvB,IAAA,QAAQ,CAAC,KAAT,CAAe,kBAAf,IAAqC,gBAAgB,CAAC,IAAtD;AACH;;AAED,MAAM,QAAQ,GAAG,+BAAiB,QAAjB,CAAjB;AACA,SAAO,QAAP;AACH;;AAEM,SAAS,iBAAT,CACH,KADG,EAEH,YAFG,EAGC;AACJ,EAAA,KAAK,CAAC,YAAD,CAAL,GAAsB,UAAyB,KAAzB,EAAqC;AACvD,WAAO,eAAe,CAAC,IAAD,EAAO,YAAP,EAAqB,KAArB,CAAtB;AACH,GAFD;AAGH;;AAIM,IAAM,sBAAgC,GAAG;AAC5C,EAAA,IAAI,EAAE,eADsC;AAE5C,EAAA,IAAI,EAAE,IAFsC;AAG5C,EAAA,UAAU,EAAE;AACR,IAAA,OADQ,mBACA,KADA,EACY;AAChB,OACI,OADJ,EAEI,QAFJ,EAGI,IAHJ,EAII,IAJJ,EAKI,KALJ,EAMI,KANJ,EAOI,KAPJ,EAQI,QARJ,EASI,WATJ,EAUI,MAVJ,EAWE,OAXF,CAWU,UAAA,SAAS,EAAI;AACnB,QAAA,iBAAiB,CAAC,KAAD,EAAQ,SAAR,CAAjB;AACH,OAbD;;AAcA,gDAAuB,OAAvB,CAA+B,UAAA,SAAS,EAAI;AACxC,QAAA,iBAAiB,CAAC,KAAD,EAAQ,SAAR,CAAjB;AACH,OAFD;;AAGA,+CAAsB,OAAtB,CAA8B,UAAA,QAAQ,EAAI;AACtC,QAAA,iBAAiB,CAAC,KAAD,EAAQ,QAAR,CAAjB;AACH,OAFD;AAGH;AAtBO;AAHgC,CAAzC","file":"index.js","sourcesContent":["import {\n    createQueryBuilder,\n    OTHER_MANGO_ATTRIBUTES,\n    OTHER_MANGO_OPERATORS\n} from './mquery/nosql-query-builder';\nimport type { RxPlugin, RxQuery } from '../../types';\nimport { RxQueryBase, tunnelQueryCache } from '../../rx-query';\nimport { clone } from '../../util';\n\n// if the query-builder plugin is used, we have to save it's last path\nconst RXQUERY_OTHER_FLAG = 'queryBuilderPath';\n\nexport function runBuildingStep<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQuery<RxDocumentType, RxQueryResult>,\n    functionName: string,\n    value: any\n): RxQuery<RxDocumentType, RxQueryResult> {\n    const queryBuilder = createQueryBuilder(clone(rxQuery.mangoQuery));\n    if (rxQuery.other[RXQUERY_OTHER_FLAG]) {\n        queryBuilder._path = rxQuery.other[RXQUERY_OTHER_FLAG];\n    }\n\n    (queryBuilder as any)[functionName](value); // run\n\n    const queryBuilderJson = queryBuilder.toJSON();\n    const newQuery = new RxQueryBase(\n        rxQuery.op,\n        queryBuilderJson.query,\n        rxQuery.collection\n    ) as RxQuery;\n    if (queryBuilderJson.path) {\n        newQuery.other[RXQUERY_OTHER_FLAG] = queryBuilderJson.path;\n    }\n\n    const tunneled = tunnelQueryCache(newQuery);\n    return tunneled;\n}\n\nexport function applyBuildingStep(\n    proto: any,\n    functionName: string\n): void {\n    proto[functionName] = function (this: RxQuery, value: any) {\n        return runBuildingStep(this, functionName, value);\n    };\n}\n\nexport * from './mquery/nosql-query-builder';\n\nexport const RxDBQueryBuilderPlugin: RxPlugin = {\n    name: 'query-builder',\n    rxdb: true,\n    prototypes: {\n        RxQuery(proto: any) {\n            [\n                'where',\n                'equals',\n                'eq',\n                'or',\n                'nor',\n                'and',\n                'mod',\n                'exists',\n                'elemMatch',\n                'sort'\n            ].forEach(attribute => {\n                applyBuildingStep(proto, attribute);\n            });\n            OTHER_MANGO_ATTRIBUTES.forEach(attribute => {\n                applyBuildingStep(proto, attribute);\n            });\n            OTHER_MANGO_OPERATORS.forEach(operator => {\n                applyBuildingStep(proto, operator);\n            });\n        }\n    }\n};\n"]}