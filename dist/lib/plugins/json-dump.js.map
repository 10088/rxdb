{"version":3,"sources":["../../../src/plugins/json-dump.ts"],"names":[],"mappings":"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","file":"json-dump.js","sourcesContent":["/**\n * this plugin adds the json export/import capabilities to RxDB\n */\nimport {\n    hash,\n    now\n} from '../util';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from '../rx-query';\nimport {\n    newRxError\n} from '../rx-error';\nimport type {\n    RxDatabase,\n    RxCollection,\n    RxPlugin,\n    RxDocumentData,\n    BulkWriteRow\n} from '../types';\nimport { _handleToStorageInstance } from '../rx-collection-helper';\n\nfunction dumpRxDatabase(\n    this: RxDatabase,\n    decrypted = false,\n    collections?: string[]\n): Promise<any> {\n    const json: any = {\n        name: this.name,\n        instanceToken: this.token,\n        encrypted: false,\n        passwordHash: null,\n        collections: []\n    };\n\n    if (this.password) {\n        json.passwordHash = hash(this.password);\n        if (decrypted) json.encrypted = false;\n        else json.encrypted = true;\n    }\n\n    const useCollections = Object.keys(this.collections)\n        .filter(colName => !collections || collections.includes(colName))\n        .filter(colName => colName.charAt(0) !== '_')\n        .map(colName => this.collections[colName]);\n\n    return Promise.all(\n        useCollections\n            .map(col => col.exportJSON(decrypted))\n    ).then(cols => {\n        json.collections = cols;\n        return json;\n    });\n}\n\nconst importDumpRxDatabase = function (\n    this: RxDatabase,\n    dump: any\n) {\n    /**\n     * collections must be created before the import\n     * because we do not know about the other collection-settings here\n     */\n    const missingCollections = dump.collections\n        .filter((col: any) => !this.collections[col.name])\n        .map((col: any) => col.name);\n    if (missingCollections.length > 0) {\n        throw newRxError('JD1', {\n            missingCollections\n        });\n    }\n\n    return Promise.all(\n        dump.collections\n            .map((colDump: any) => this.collections[colDump.name].importJSON(colDump))\n    );\n};\n\nconst dumpRxCollection = function (\n    this: RxCollection,\n    decrypted = false\n) {\n    const encrypted = !decrypted;\n\n    const json: any = {\n        name: this.name,\n        schemaHash: this.schema.hash,\n        encrypted: false,\n        passwordHash: null,\n        docs: []\n    };\n\n    if (this.database.password && encrypted) {\n        json.passwordHash = hash(this.database.password);\n        json.encrypted = true;\n    }\n\n    const query = createRxQuery(\n        'find',\n        _getDefaultQuery(),\n        this\n    );\n    return this._queryStorageInstance(query, undefined, encrypted)\n        .then((docs: any) => {\n            json.docs = docs.map((docData: any) => {\n                delete docData._rev;\n                delete docData._attachments;\n                return docData;\n            });\n            return json;\n        });\n};\n\nfunction importDumpRxCollection<RxDocType>(\n    this: RxCollection<RxDocType>,\n    exportedJSON: any\n): Promise<any> {\n    // check schemaHash\n    if (exportedJSON.schemaHash !== this.schema.hash) {\n        throw newRxError('JD2', {\n            schemaHash: exportedJSON.schemaHash,\n            own: this.schema.hash\n        });\n    }\n\n    // check if passwordHash matches own\n    if (\n        exportedJSON.encrypted &&\n        exportedJSON.passwordHash !== hash(this.database.password)\n    ) {\n        throw newRxError('JD3', {\n            passwordHash: exportedJSON.passwordHash,\n            own: hash(this.database.password)\n        });\n    }\n\n    const docs: RxDocumentData<RxDocType>[] = exportedJSON.docs\n        // decrypt\n        .map((doc: any) => this._crypter.decrypt(doc))\n        // validate schema\n        .map((doc: any) => this.schema.validate(doc));\n\n    let startTime: number;\n    return this.database.lockedRun(\n        // write to disc\n        () => {\n            startTime = now();\n            const writeMe: BulkWriteRow<RxDocType>[] = docs.map(doc => ({\n                document: _handleToStorageInstance(this, doc)\n            }));\n            return this.storageInstance.bulkWrite(writeMe);\n        }\n    );\n}\n\nexport const rxdb = true;\nexport const prototypes = {\n    RxDatabase: (proto: any) => {\n        proto.exportJSON = dumpRxDatabase;\n        proto.importJSON = importDumpRxDatabase;\n    },\n    RxCollection: (proto: any) => {\n        proto.exportJSON = dumpRxCollection;\n        proto.importJSON = importDumpRxCollection;\n    }\n};\n\nexport const overwritable = {};\n\nexport const RxDBJsonDumpPlugin: RxPlugin = {\n    name: 'json-dump',\n    rxdb,\n    prototypes,\n    overwritable\n};\n"]}