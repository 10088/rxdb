{"version":3,"sources":["../../../../src/plugins/dev-mode/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAQA;;AAGA;;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AACA;;AACA;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AACA;;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,qBAAT,CAAkC,GAAlC,EAA2D;AAC9D;AACA,MAAI,CAAC,GAAL,EAAU;AACN,WAAO,GAAP;AACH;;AAED,SAAO,4BAAW,GAAX,CAAP;AACH;;AAGD,IAAM,oBAAoB,GAAG,UAA7B;AACO,IAAM,iBAA2B,GAAG;AACvC,EAAA,IAAI,EAAE,oBADiC;AAEvC,EAAA,IAAI,EAAE,IAFiC;AAGvC,EAAA,YAAY,EAAE;AACV,IAAA,SADU,uBACE;AACR,aAAO,IAAP;AACH,KAHS;AAIV,IAAA,qBAAqB,EAArB,qBAJU;AAKV,IAAA,kBALU,8BAKS,IALT,EAK2B;AACjC,UAAI,CAAC,8BAAe,IAAf,CAAL,EAA2B;AACvB,QAAA,OAAO,CAAC,KAAR,CAAc,iCAAiC,IAA/C;AACA,cAAM,IAAI,KAAJ,CAAU,gBAAgB,IAAhB,GAAuB,oCAAjC,CAAN;AACH;;AACD,aAAO,8BAAe,IAAf,CAAP;AACH;AAXS,GAHyB;AAgBvC,EAAA,KAAK,EAAE;AACH,IAAA,cAAc,EAAE,wBAAC,IAAD,EAAsC;AAClD;AACZ;AACA;AACA;AACA;AACY,UAAI,IAAI,CAAC,MAAL,CAAY,IAAZ,KAAqB,oBAAzB,EAA+C;AAC3C,cAAM,yBAAW,MAAX,EAAmB;AACrB,UAAA,OAAO,EAAE,IAAI,CAAC;AADO,SAAnB,CAAN;AAGH;AACJ,KAZE;AAaH,IAAA,iBAAiB,EAAE,wBAbhB;AAcH,IAAA,mBAAmB,EAAE,6BAAC,IAAD,EAAuC;AACxD,0DAA0B,IAA1B;AACH,KAhBE;AAiBH,IAAA,qBAAqB,EAAE,+BAAC,IAAD,EAAmD;AACtE,0DAA0B,IAA1B;;AACA,UAAI,IAAI,CAAC,IAAL,CAAU,MAAV,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC7B,cAAM,yBAAW,KAAX,EAAkB;AACpB,UAAA,IAAI,EAAE,IAAI,CAAC;AADS,SAAlB,CAAN;AAGH;;AACD,UAAI,CAAC,IAAI,CAAC,MAAV,EAAkB;AACd,cAAM,yBAAW,KAAX,EAAkB;AACpB,UAAA,IAAI,EAAE,IAAI,CAAC,IADS;AAEpB,UAAA,IAAI,EAAJ;AAFoB,SAAlB,CAAN;AAIH;AACJ,KA9BE;AA+BH,IAAA,gBAAgB,EAAE,0BAAC,IAAD,EAAU;AACxB,kCAAW,IAAX;AACH,KAjCE;AAkCH,IAAA,kBAAkB,EAAE,4BAAC,IAAD,EAA+B;AAC/C;AACA,qCAAgB,IAAI,CAAC,OAArB;AACA,qCAAgB,IAAI,CAAC,OAArB;AACA,qCAAgB,IAAI,CAAC,WAArB,EAJ+C,CAM/C;;AACA,UAAI,IAAI,CAAC,MAAL,IAAe,IAAI,CAAC,mBAAxB,EAA6C;AACzC,gEACI,IAAI,CAAC,MADT,EAEI,IAAI,CAAC,mBAFT;AAIH;AACJ;AA/CE;AAhBgC,CAApC","file":"index.js","sourcesContent":["import type {\n    RxPlugin,\n    RxCollectionCreator,\n    RxDatabaseCreator,\n    RxPluginPreAddRxPluginArgs,\n    RxErrorKey\n} from '../../types';\n\nimport {\n    ERROR_MESSAGES\n} from './error-messages';\nimport {\n    checkSchema\n} from './check-schema';\nimport { checkOrmMethods } from './check-orm';\nimport { checkMigrationStrategies } from './check-migration-strategies';\nimport {\n    ensureCollectionNameValid,\n    ensureDatabaseNameIsValid\n} from './unallowed-properties';\nimport { checkQuery } from './check-query';\nimport { newRxError } from '../../rx-error';\nimport { DeepReadonly } from '../../types/util';\n\nexport * from './check-schema';\nexport * from './unallowed-properties';\n\nimport deepFreeze from 'deep-freeze';\n\n/**\n * Deep freezes and object when in dev-mode.\n * Deep-Freezing has the same performaance as deep-cloning, so we only do that in dev-mode.\n * Also we can ensure the readonly state via typescript\n * @link https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n */\nexport function deepFreezeWhenDevMode<T>(obj: T): DeepReadonly<T> {\n    // direct return if falsy\n    if (!obj) {\n        return obj as any;\n    }\n\n    return deepFreeze(obj);\n}\n\n\nconst DEV_MODE_PLUGIN_NAME = 'dev-mode';\nexport const RxDBDevModePlugin: RxPlugin = {\n    name: DEV_MODE_PLUGIN_NAME,\n    rxdb: true,\n    overwritable: {\n        isDevMode() {\n            return true;\n        },\n        deepFreezeWhenDevMode,\n        tunnelErrorMessage(code: RxErrorKey) {\n            if (!ERROR_MESSAGES[code]) {\n                console.error('RxDB: Error-Code not known: ' + code);\n                throw new Error('Error-Code ' + code + ' not known, contact the maintainer');\n            }\n            return ERROR_MESSAGES[code];\n        }\n    },\n    hooks: {\n        preAddRxPlugin: (args: RxPluginPreAddRxPluginArgs) => {\n            /**\n             * throw when dev mode is added multiple times\n             * because there is no way that this was done intentional.\n             * Likely the developer has mixed core and default usage of RxDB.\n             */\n            if (args.plugin.name === DEV_MODE_PLUGIN_NAME) {\n                throw newRxError('DEV1', {\n                    plugins: args.plugins\n                });\n            }\n        },\n        preCreateRxSchema: checkSchema,\n        preCreateRxDatabase: (args: RxDatabaseCreator<any, any>) => {\n            ensureDatabaseNameIsValid(args);\n        },\n        preCreateRxCollection: (args: RxCollectionCreator & { name: string; }) => {\n            ensureCollectionNameValid(args);\n            if (args.name.charAt(0) === '_') {\n                throw newRxError('DB2', {\n                    name: args.name\n                });\n            }\n            if (!args.schema) {\n                throw newRxError('DB4', {\n                    name: args.name,\n                    args\n                });\n            }\n        },\n        preCreateRxQuery: (args) => {\n            checkQuery(args);\n        },\n        createRxCollection: (args: RxCollectionCreator) => {\n            // check ORM-methods\n            checkOrmMethods(args.statics);\n            checkOrmMethods(args.methods);\n            checkOrmMethods(args.attachments);\n\n            // check migration strategies\n            if (args.schema && args.migrationStrategies) {\n                checkMigrationStrategies(\n                    args.schema,\n                    args.migrationStrategies\n                );\n            }\n        }\n    }\n};\n"]}