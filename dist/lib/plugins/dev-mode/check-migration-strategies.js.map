{"version":3,"sources":["../../../../src/plugins/dev-mode/check-migration-strategies.ts"],"names":[],"mappings":";;;;;;;AACA;;AACA;;AAGA;AACA;AACA;AACA;AACO,SAAS,wBAAT,CACH,MADG,EAEH,mBAFG,EAGI;AACP;AACA,MACI,OAAO,mBAAP,KAA+B,QAA/B,IACA,KAAK,CAAC,OAAN,CAAc,mBAAd,CAFJ,EAGE;AACE,UAAM,6BAAe,OAAf,EAAwB;AAC1B,MAAA,MAAM,EAAN;AAD0B,KAAxB,CAAN;AAGH;;AAED,MAAM,gBAAgB,GAAG,mCAAoB,MAApB,CAAzB,CAXO,CAaP;;AACA,MACI,gBAAgB,CAAC,MAAjB,KAA4B,MAAM,CAC7B,IADuB,CAClB,mBADkB,EACG,MAFnC,EAGE;AACE,UAAM,yBAAW,OAAX,EAAoB;AACtB,MAAA,IAAI,EAAE,MAAM,CAAC,IAAP,CAAY,mBAAZ,CADgB;AAEtB,MAAA,MAAM,EAAE;AAFc,KAApB,CAAN;AAIH,GAtBM,CAwBP;;;AACA,EAAA,gBAAgB,CACX,GADL,CACS,UAAA,GAAG;AAAA,WAAK;AACT,MAAA,CAAC,EAAE,GADM;AAET,MAAA,CAAC,EAAE,mBAAmB,CAAE,GAAG,GAAG,CAAR;AAFb,KAAL;AAAA,GADZ,EAKK,MALL,CAKY,UAAA,KAAK;AAAA,WAAI,OAAO,KAAK,CAAC,CAAb,KAAmB,UAAvB;AAAA,GALjB,EAMK,OANL,CAMa,UAAA,KAAK,EAAI;AACd,UAAM,6BAAe,OAAf,EAAwB;AAC1B,MAAA,OAAO,EAAE,KAAK,CAAC,CADW;AAE1B,MAAA,IAAI,EAAE,OAAO,KAFa;AAG1B,MAAA,MAAM,EAAN;AAH0B,KAAxB,CAAN;AAKH,GAZL;AAcA,SAAO,IAAP;AACH","file":"check-migration-strategies.js","sourcesContent":["import type { RxJsonSchema, NumberFunctionMap } from '../../types';\nimport { newRxTypeError, newRxError } from '../../rx-error';\nimport { getPreviousVersions } from '../../rx-schema';\n\n\n/**\n * checks if the migrationStrategies are ok, throws if not\n * @throws {Error|TypeError} if not ok\n */\nexport function checkMigrationStrategies(\n    schema: RxJsonSchema<any>,\n    migrationStrategies: NumberFunctionMap\n): boolean {\n    // migrationStrategies must be object not array\n    if (\n        typeof migrationStrategies !== 'object' ||\n        Array.isArray(migrationStrategies)\n    ) {\n        throw newRxTypeError('COL11', {\n            schema\n        });\n    }\n\n    const previousVersions = getPreviousVersions(schema);\n\n    // for every previousVersion there must be strategy\n    if (\n        previousVersions.length !== Object\n            .keys(migrationStrategies).length\n    ) {\n        throw newRxError('COL12', {\n            have: Object.keys(migrationStrategies),\n            should: previousVersions\n        });\n    }\n\n    // every strategy must have number as property and be a function\n    previousVersions\n        .map(vNr => ({\n            v: vNr,\n            s: migrationStrategies[(vNr + 1)]\n        }))\n        .filter(strat => typeof strat.s !== 'function')\n        .forEach(strat => {\n            throw newRxTypeError('COL13', {\n                version: strat.v,\n                type: typeof strat,\n                schema\n            });\n        });\n\n    return true;\n}\n"]}