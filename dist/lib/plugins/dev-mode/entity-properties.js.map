{"version":3,"sources":["../../../../src/plugins/dev-mode/entity-properties.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA;AACA;AACA,IAAI,uBAAJ;;AACO,SAAS,sBAAT,GAA4C;AAC/C,MAAI,CAAC,uBAAL,EAA8B;AAC1B,QAAM,cAAc,GAAG,IAAK,8BAAL,EAAvB;AACA,QAAM,aAAa,GAAG,MAAM,CAAC,mBAAP,CAA2B,cAA3B,CAAtB;AACA,QAAM,mBAAmB,GAAG,MAAM,CAAC,mBAAP,CACxB,MAAM,CAAC,cAAP,CAAsB,cAAtB,CADwB,CAA5B;AAGA,IAAA,uBAAuB,aAAO,aAAP,EAAyB,mBAAzB,CAAvB;AACH;;AACD,SAAO,uBAAP;AACH;AAGD;AACA;AACA;;;AACA,IAAI,qBAAJ;;AACO,SAAS,oBAAT,GAA0C;AAC7C,MAAI,CAAC,qBAAL,EAA4B;AACxB;AACA;AACA,QAAM,cAAwC,GAAG,IAAK,0BAAL,CAC7C,gBAD6C,EAE7C,QAF6C,CAAjD;AAIA,QAAM,aAAa,GAAG,MAAM,CAAC,mBAAP,CAA2B,cAA3B,CAAtB;AACA,QAAM,mBAAmB,GAAG,MAAM,CAAC,mBAAP,CACxB,MAAM,CAAC,cAAP,CAAsB,cAAtB,CADwB,CAA5B;AAGA,IAAA,qBAAqB,aAAO,aAAP,EAAyB,mBAAzB,CAArB;AACA,IAAA,cAAc,CAAC,OAAf;AACH;;AACD,SAAO,qBAAP;AACH;AAED;AACA;AACA;;;AACA,IAAM,iBAAiB,GAAG,6CAA4B,yBAA5B,CAA1B;AACA,IAAM,gBAAgB,GAAG,IAAK,iBAAL,EAAzB;;AACA,IAAI,qBAAJ;;AACO,SAAS,oBAAT,GAA0C;AAC7C,MAAI,CAAC,qBAAL,EAA4B;AACxB,QAAM,QAAQ,GAAG,CAAC,SAAD,EAAY,QAAZ,CAAjB;AACA,QAAM,aAAa,GAAG,MAAM,CAAC,mBAAP,CAA2B,gBAA3B,CAAtB;AACA,QAAM,mBAAmB,GAAG,MAAM,CAAC,mBAAP,CAA2B,yBAA3B,CAA5B;AACA,IAAA,qBAAqB,aAAO,aAAP,EAAyB,mBAAzB,EAAiD,QAAjD,CAArB;AACH;;AACD,SAAO,qBAAP;AACH","file":"entity-properties.js","sourcesContent":["import { RxCollectionBase } from '../../rx-collection';\nimport { RxDatabaseBase } from '../../rx-database';\nimport { createRxDocumentConstructor, basePrototype } from '../../rx-document';\n\n/**\n * returns all possible properties of a RxCollection-instance\n */\nlet _rxCollectionProperties: string[];\nexport function rxCollectionProperties(): string[] {\n    if (!_rxCollectionProperties) {\n        const pseudoInstance = new (RxCollectionBase as any)();\n        const ownProperties = Object.getOwnPropertyNames(pseudoInstance);\n        const prototypeProperties = Object.getOwnPropertyNames(\n            Object.getPrototypeOf(pseudoInstance)\n        );\n        _rxCollectionProperties = [...ownProperties, ...prototypeProperties];\n    }\n    return _rxCollectionProperties;\n}\n\n\n/**\n * returns all possible properties of a RxDatabase-instance\n */\nlet _rxDatabaseProperties: string[];\nexport function rxDatabaseProperties(): string[] {\n    if (!_rxDatabaseProperties) {\n        // TODO instead of using the pseudoInstance,\n        // we should get the properties from the prototype of the class\n        const pseudoInstance: RxDatabaseBase<any, any> = new (RxDatabaseBase as any)(\n            'pseudoInstance',\n            'memory'\n        );\n        const ownProperties = Object.getOwnPropertyNames(pseudoInstance);\n        const prototypeProperties = Object.getOwnPropertyNames(\n            Object.getPrototypeOf(pseudoInstance)\n        );\n        _rxDatabaseProperties = [...ownProperties, ...prototypeProperties];\n        pseudoInstance.destroy();\n    }\n    return _rxDatabaseProperties;\n}\n\n/**\n * returns all possible properties of a RxDocument\n */\nconst pseudoConstructor = createRxDocumentConstructor(basePrototype);\nconst pseudoRxDocument = new (pseudoConstructor as any)();\nlet _rxDocumentProperties: string[];\nexport function rxDocumentProperties(): string[] {\n    if (!_rxDocumentProperties) {\n        const reserved = ['deleted', 'synced'];\n        const ownProperties = Object.getOwnPropertyNames(pseudoRxDocument);\n        const prototypeProperties = Object.getOwnPropertyNames(basePrototype);\n        _rxDocumentProperties = [...ownProperties, ...prototypeProperties, ...reserved];\n    }\n    return _rxDocumentProperties;\n}\n"]}