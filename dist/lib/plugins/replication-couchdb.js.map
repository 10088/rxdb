{"version":3,"sources":["../../../src/plugins/replication-couchdb.ts"],"names":[],"mappings":"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","file":"replication-couchdb.js","sourcesContent":["/**\n * this plugin adds the RxCollection.sync()-function to rxdb\n * you can use it to sync collections with remote or local couchdb-instances\n */\n\nimport PouchReplicationPlugin from 'pouchdb-replication';\nimport {\n    BehaviorSubject,\n    Subject,\n    fromEvent,\n    Subscription,\n    Observable,\n    firstValueFrom\n} from 'rxjs';\nimport {\n    skipUntil,\n    filter,\n    first,\n    mergeMap\n} from 'rxjs/operators';\n\nimport {\n    promiseWait,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_TRUE\n} from '../util';\nimport {\n    newRxError\n} from '../rx-error';\nimport {\n    pouchReplicationFunction,\n    isInstanceOf as isInstanceOfPouchDB,\n    addPouchPlugin\n} from '../plugins/pouchdb';\n\nimport {\n    isRxCollection\n} from '../rx-collection';\nimport type {\n    RxCollection,\n    PouchSyncHandler,\n    PouchReplicationOptions,\n    RxPlugin,\n    SyncOptions,\n    PouchDBInstance\n} from '../types';\nimport { _handleFromStorageInstance } from '../rx-collection-helper';\n\n// add pouchdb-replication-plugin\naddPouchPlugin(PouchReplicationPlugin);\n\n/**\n * Contains all pouchdb instances that\n * are used inside of RxDB by collections or databases.\n * Used to ensure the remote of a replication cannot be an internal pouchdb.\n */\nconst INTERNAL_POUCHDBS = new WeakSet();\n\nexport class RxCouchDBReplicationStateBase {\n    public _subs: Subscription[] = [];\n\n    // can be used for debuging or custom event-handling\n    // will be set some time after sync() is called\n    public _pouchEventEmitterObject?: PouchSyncHandler | null;\n    public _subjects = {\n        change: new Subject(),\n        docs: new Subject(),\n        denied: new Subject(),\n        active: new BehaviorSubject(false),\n        complete: new BehaviorSubject(false),\n        alive: new BehaviorSubject(false),\n        error: new Subject(),\n    };\n\n    public canceled: boolean = false;\n\n    constructor(\n        public readonly collection: RxCollection,\n        public readonly syncOptions: SyncOptions\n    ) {\n        // create getters\n        Object.keys(this._subjects).forEach(key => {\n            Object.defineProperty(this, key + '$', {\n                get: function () {\n                    return this._subjects[key].asObservable();\n                }\n            });\n        });\n    }\n\n    awaitInitialReplication(): Promise<void> {\n        if (this.syncOptions.options && this.syncOptions.options.live) {\n            throw newRxError('RC4', {\n                database: this.collection.database.name,\n                collection: this.collection.name\n            });\n        }\n        if (this.collection.database.multiInstance && this.syncOptions.waitForLeadership) {\n            throw newRxError('RC5', {\n                database: this.collection.database.name,\n                collection: this.collection.name\n            });\n        }\n\n        const that: RxCouchDBReplicationState = this as any;\n        return firstValueFrom(\n            that.complete$.pipe(\n                filter(x => !!x)\n            )\n        );\n    }\n\n    /**\n     * Returns false when the replication has already been canceled\n     */\n    cancel(): Promise<boolean> {\n        if (this.canceled) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        this.canceled = true;\n        this.collection._repStates.delete(this as any);\n        if (this._pouchEventEmitterObject) {\n            this._pouchEventEmitterObject.cancel();\n        }\n        this._subs.forEach(sub => sub.unsubscribe());\n\n        return PROMISE_RESOLVE_TRUE;\n    }\n}\n\nexport type RxCouchDBReplicationState = RxCouchDBReplicationStateBase & {\n    change$: Observable<any>;\n    docs$: Observable<any>;\n    denied$: Observable<any>;\n    active$: Observable<any>;\n    alive$: Observable<boolean>;\n    complete$: Observable<any>;\n    error$: Observable<any>;\n};\n\nexport function setPouchEventEmitter(\n    rxRepState: RxCouchDBReplicationState,\n    evEmitter: PouchSyncHandler\n) {\n    if (rxRepState._pouchEventEmitterObject) {\n        throw newRxError('RC1');\n    }\n    rxRepState._pouchEventEmitterObject = evEmitter;\n\n    // change\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'change')\n            .subscribe(ev => {\n                rxRepState._subjects.change.next(ev);\n            })\n    );\n\n    // denied\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'denied')\n            .subscribe(ev => rxRepState._subjects.denied.next(ev))\n    );\n\n    // docs\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'change')\n            .subscribe(ev => {\n                if (\n                    rxRepState._subjects.docs.observers.length === 0 ||\n                    (ev as any).direction !== 'pull'\n                ) return;\n\n                (ev as any).change.docs\n                    .filter((doc: any) => doc.language !== 'query') // remove internal docs\n                    .map((doc: any) => _handleFromStorageInstance(rxRepState.collection, doc)) // do primary-swap and keycompression\n                    .forEach((doc: any) => rxRepState._subjects.docs.next(doc));\n            }));\n\n    // error\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'error')\n            .subscribe(ev => rxRepState._subjects.error.next(ev))\n    );\n\n    // active\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'active')\n            .subscribe(() => rxRepState._subjects.active.next(true))\n    );\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'paused')\n            .subscribe(() => rxRepState._subjects.active.next(false))\n    );\n\n    // complete\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'complete')\n            .subscribe(async (info: any) => {\n                /**\n                 * when complete fires, it might be that not all changeEvents\n                 * have passed throught, because of the delay of .wachtForChanges()\n                 * Therefore we have to first ensure that all previous changeEvents have been handled\n                 */\n                await promiseWait(100);\n                rxRepState._subjects.complete.next(info);\n            })\n    );\n    // auto-cancel one-time replications on complelete to not cause memory leak\n    if (\n        !rxRepState.syncOptions.options ||\n        !rxRepState.syncOptions.options.live\n    ) {\n        rxRepState._subs.push(\n            rxRepState.complete$.pipe(\n                filter(x => !!x),\n                first(),\n                mergeMap(() => {\n                    return rxRepState.collection.database\n                        .requestIdlePromise()\n                        .then(() => rxRepState.cancel());\n                })\n            ).subscribe()\n        );\n    }\n\n    function getIsAlive(emitter: any): Promise<boolean> {\n        // \"state\" will live in emitter.state if single direction replication\n        // or in emitter.push.state & emitter.pull.state when syncing for both\n        let state = emitter.state;\n        if (!state) {\n            state = [emitter.pull.state, emitter.push.state]\n                .reduce((acc, val) => {\n                    if (acc === 'active' || val === 'active') return 'active';\n                    return acc === 'stopped' ? acc : val;\n                }, '');\n        }\n\n        // If it's active, we can't determine whether the connection is active\n        // or not yet\n        if (state === 'active') {\n            return promiseWait(15).then(() => getIsAlive(emitter));\n        }\n\n        const isAlive = state !== 'stopped';\n        return Promise.resolve(isAlive);\n    }\n\n    rxRepState._subs.push(\n        fromEvent(evEmitter as any, 'paused')\n            .pipe(\n                skipUntil(fromEvent(evEmitter as any, 'active'))\n            ).subscribe(() => {\n                getIsAlive(rxRepState._pouchEventEmitterObject)\n                    .then(isAlive => rxRepState._subjects.alive.next(isAlive));\n            })\n    );\n}\n\nexport function createRxCouchDBReplicationState(\n    collection: RxCollection,\n    syncOptions: SyncOptions\n): RxCouchDBReplicationState {\n    return new RxCouchDBReplicationStateBase(\n        collection,\n        syncOptions\n    ) as RxCouchDBReplicationState;\n}\n\nexport function syncCouchDB(\n    this: RxCollection,\n    {\n        remote,\n        waitForLeadership = true,\n        direction = {\n            pull: true,\n            push: true\n        },\n        options = {\n            live: true,\n            retry: true\n        },\n        query\n    }: SyncOptions) {\n    const useOptions: PouchReplicationOptions & { selector: any } = flatClone(options) as any;\n\n    // prevent #641 by not allowing internal pouchdbs as remote\n    if (\n        isInstanceOfPouchDB(remote) &&\n        INTERNAL_POUCHDBS.has(remote)\n    ) {\n        throw newRxError('RC3', {\n            database: this.database.name,\n            collection: this.name\n        });\n    }\n\n    // if remote is RxCollection, get internal pouchdb\n    if (isRxCollection(remote)) {\n        remote = (remote as RxCollection).storageInstance.internals.pouch;\n    }\n\n    if (query && this !== query.collection) {\n        throw newRxError('RC2', {\n            query\n        });\n    }\n\n    const syncFun = pouchReplicationFunction(this.storageInstance.internals.pouch, direction);\n    if (query) {\n        useOptions.selector = (query as any).toJSON().selector;\n    }\n\n    const repState: any = createRxCouchDBReplicationState(\n        this,\n        {\n            remote,\n            waitForLeadership,\n            direction,\n            options,\n            query\n        }\n    );\n\n    // run internal so .sync() does not have to be async\n    const waitTillRun = (\n        waitForLeadership &&\n        this.database.multiInstance // do not await leadership if not multiInstance\n    ) ? this.database.waitForLeadership() : promiseWait(0);\n    (waitTillRun as any).then(() => {\n        if (this.destroyed || repState.canceled) {\n            return;\n        }\n        const pouchSync = syncFun(remote, useOptions);\n        setPouchEventEmitter(repState, pouchSync);\n        this._repStates.add(repState);\n    });\n\n    return repState;\n}\n\nexport const rxdb = true;\nexport const prototypes = {\n    RxCollection: (proto: any) => {\n        proto.syncCouchDB = syncCouchDB;\n    }\n};\n\nexport const hooks = {\n    createRxCollection: function (\n        collection: RxCollection\n    ) {\n        const pouch: PouchDBInstance | undefined = collection.storageInstance.internals.pouch;\n        if (pouch) {\n            INTERNAL_POUCHDBS.add(collection.storageInstance.internals.pouch);\n        }\n    }\n};\n\nexport const RxDBReplicationCouchDBPlugin: RxPlugin = {\n    name: 'replication-couchdb',\n    rxdb,\n    prototypes,\n    hooks\n};\n"]}