{"version":3,"file":"index.js","names":["ensureSchemaSupportsAttachments","doc","schemaJson","collection","schema","jsonSchema","attachments","newRxError","link","preMigrateDocument","data","docData","_attachments","newAttachments","Promise","all","Object","keys","map","attachmentId","attachment","docPrimary","oldCollection","primaryPath","storageInstance","getAttachmentData","rawAttachmentData","length","type","putAttachment","attachmentData","_skipIfSame","dataSize","blobBufferUtil","size","toBase64String","dataString","id","_atomicQueue","then","docWriteData","flatCloneDocWithMeta","_data","flatClone","writeRow","previous","document","writeSingle","writeResult","attachmentDataOfId","fromStorageInstanceResult","newData","_rev","_dataSync$","next","_assignMethodsToAttachment","entries","forEach","funName","fun","defineProperty","get","bind","RxAttachment","digest","remove","getData","primary","plainDataBase64","createBlobBufferFromBase64","getStringData","toString","rxDocument","getAttachment","getValue","allAttachments","postMigrateDocument","_action","PROMISE_RESOLVE_VOID","RxDBAttachmentsPlugin","name","rxdb","prototypes","RxDocument","proto","allAttachments$","pipe","attachmentsData","overwritable","hooks","after"],"sources":["../../../../src/plugins/attachments/index.ts"],"sourcesContent":["import {\n    map\n} from 'rxjs/operators';\n\nimport {\n    blobBufferUtil,\n    flatClone,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport {\n    newRxError\n} from '../../rx-error';\nimport type {\n    RxDocument,\n    RxPlugin,\n    BlobBuffer,\n    OldRxCollection,\n    RxDocumentWriteData,\n    RxAttachmentData,\n    RxDocumentData,\n    RxAttachmentCreator,\n    RxAttachmentWriteData\n} from '../../types';\nimport { flatCloneDocWithMeta, writeSingle } from '../../rx-storage-helper';\n\n\n\nfunction ensureSchemaSupportsAttachments(doc: any) {\n    const schemaJson = doc.collection.schema.jsonSchema;\n    if (!schemaJson.attachments) {\n        throw newRxError('AT1', {\n            link: 'https://pubkey.github.io/rxdb/rx-attachment.html'\n        });\n    }\n}\n\nconst _assignMethodsToAttachment = function (attachment: any) {\n    Object\n        .entries(attachment.doc.collection.attachments)\n        .forEach(([funName, fun]) => {\n            Object.defineProperty(attachment, funName, {\n                get: () => (fun as any).bind(attachment)\n            });\n        });\n};\n\n/**\n * an RxAttachment is basically just the attachment-stub\n * wrapped so that you can access the attachment-data\n */\nexport class RxAttachment {\n    public doc: RxDocument;\n    public id: string;\n    public type: string;\n    public length: number;\n    public digest: string;\n    constructor({\n        doc,\n        id,\n        type,\n        length,\n        digest\n    }: any) {\n        this.doc = doc;\n        this.id = id;\n        this.type = type;\n        this.length = length;\n        this.digest = digest;\n\n        _assignMethodsToAttachment(this);\n    }\n\n    remove(): Promise<void> {\n        this.doc._atomicQueue = this.doc._atomicQueue\n            .then(async () => {\n                const docWriteData: RxDocumentWriteData<{}> = flatCloneDocWithMeta(this.doc._data);\n                docWriteData._attachments = flatClone(docWriteData._attachments);\n                delete docWriteData._attachments[this.id];\n                const writeResult: RxDocumentData<any> = await writeSingle(\n                    this.doc.collection.storageInstance,\n                    {\n                        previous: flatClone(this.doc._data), // TODO do we need a flatClone here?\n                        document: docWriteData\n                    },\n                    'attachment-remove'\n                );\n\n                const newData = flatClone(this.doc._data);\n                newData._rev = writeResult._rev;\n                newData._attachments = writeResult._attachments;\n                this.doc._dataSync$.next(newData);\n\n            });\n        return this.doc._atomicQueue;\n    }\n\n    /**\n     * returns the data for the attachment\n     */\n    async getData(): Promise<BlobBuffer> {\n        const plainDataBase64 = await this.doc.collection.storageInstance.getAttachmentData(\n            this.doc.primary,\n            this.id\n        );\n        const ret = await blobBufferUtil.createBlobBufferFromBase64(\n            plainDataBase64,\n            this.type as any\n        );\n        return ret;\n    }\n\n    async getStringData(): Promise<string> {\n        const data = await this.getData();\n        const asString = await blobBufferUtil.toString(data);\n        return asString;\n    }\n}\n\nexport function fromStorageInstanceResult(\n    id: string,\n    attachmentData: RxAttachmentData,\n    rxDocument: RxDocument\n) {\n    return new RxAttachment({\n        doc: rxDocument,\n        id,\n        type: attachmentData.type,\n        length: attachmentData.length,\n        digest: attachmentData.digest\n    });\n}\n\nexport async function putAttachment(\n    this: RxDocument,\n    attachmentData: RxAttachmentCreator,\n    /**\n     * If set to true, the write will be skipped\n     * when the attachment already contains the same data.\n     * @deprecated The check if the data has changed is now performed\n     * inside of the RxStorage, no longer by RxDB itself. So we do\n     * no longer need 'skipIfSame'.\n     */\n    _skipIfSame: boolean = true\n): Promise<RxAttachment> {\n    ensureSchemaSupportsAttachments(this);\n\n    const dataSize = blobBufferUtil.size(attachmentData.data);\n    const dataString = await blobBufferUtil.toBase64String(attachmentData.data);\n\n    const id = attachmentData.id;\n    const type = attachmentData.type;\n    const data = dataString;\n\n    this._atomicQueue = this._atomicQueue\n        .then(async () => {\n            const docWriteData: RxDocumentWriteData<{}> = flatCloneDocWithMeta(this._data);\n            docWriteData._attachments = flatClone(docWriteData._attachments);\n\n            docWriteData._attachments[id] = {\n                length: dataSize,\n                type,\n                data\n            };\n            const writeRow = {\n                previous: flatClone(this._data),\n                document: flatClone(docWriteData)\n            };\n\n            const writeResult = await writeSingle(\n                this.collection.storageInstance,\n                writeRow,\n                'attachment-put'\n            );\n\n            const attachmentDataOfId = writeResult._attachments[id];\n            const attachment = fromStorageInstanceResult(\n                id,\n                attachmentDataOfId,\n                this\n            );\n\n            const newData = flatClone(this._data);\n            newData._rev = writeResult._rev;\n            newData._attachments = writeResult._attachments;\n            this._dataSync$.next(newData);\n\n            return attachment;\n        });\n    return this._atomicQueue;\n}\n\n/**\n * get an attachment of the document by its id\n */\nexport function getAttachment(\n    this: RxDocument,\n    id: string\n): RxAttachment | null {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n    if (!docData._attachments || !docData._attachments[id])\n        return null;\n\n    const attachmentData = docData._attachments[id];\n    const attachment = fromStorageInstanceResult(\n        id,\n        attachmentData,\n        this\n    );\n    return attachment;\n}\n\n/**\n * returns all attachments of the document\n */\nexport function allAttachments(\n    this: RxDocument\n): RxAttachment[] {\n    ensureSchemaSupportsAttachments(this);\n    const docData: any = this._dataSync$.getValue();\n\n    // if there are no attachments, the field is missing\n    if (!docData._attachments) {\n        return [];\n    }\n    return Object.keys(docData._attachments)\n        .map(id => {\n            return fromStorageInstanceResult(\n                id,\n                docData._attachments[id],\n                this\n            );\n        });\n}\n\nexport async function preMigrateDocument<RxDocType>(\n    data: {\n        docData: RxDocumentData<RxDocType>;\n        oldCollection: OldRxCollection;\n    }\n): Promise<void> {\n    const attachments = data.docData._attachments;\n    if (attachments) {\n        const newAttachments: { [attachmentId: string]: RxAttachmentWriteData; } = {};\n        await Promise.all(\n            Object.keys(attachments).map(async (attachmentId) => {\n                const attachment: RxAttachmentData = attachments[attachmentId];\n                const docPrimary: string = (data.docData as any)[data.oldCollection.schema.primaryPath];\n                const rawAttachmentData = await data.oldCollection.storageInstance.getAttachmentData(docPrimary, attachmentId);\n                newAttachments[attachmentId] = {\n                    length: attachment.length,\n                    type: attachment.type,\n                    data: rawAttachmentData\n                };\n            })\n        );\n\n        /**\n         * Hooks mutate the input\n         * instead of returning stuff\n         */\n        (data.docData as RxDocumentWriteData<RxDocType>)._attachments = newAttachments;\n    }\n}\n\nexport function postMigrateDocument(_action: any): Promise<void> {\n    /**\n     * No longer needed because\n     * we store the attachments data buffers directly in the document.\n     */\n    return PROMISE_RESOLVE_VOID;\n}\n\nexport const RxDBAttachmentsPlugin: RxPlugin = {\n    name: 'attachments',\n    rxdb: true,\n    prototypes: {\n        RxDocument: (proto: any) => {\n            proto.putAttachment = putAttachment;\n            proto.getAttachment = getAttachment;\n            proto.allAttachments = allAttachments;\n            Object.defineProperty(proto, 'allAttachments$', {\n                get: function allAttachments$() {\n                    return this._dataSync$\n                        .pipe(\n                            map((data: any) => {\n                                if (!data['_attachments']) {\n                                    return {};\n                                }\n                                return data['_attachments'];\n                            }),\n                            map((attachmentsData: any) => Object.entries(\n                                attachmentsData\n                            )),\n                            map(entries => {\n                                return (entries as any)\n                                    .map(([id, attachmentData]: any) => {\n                                        return fromStorageInstanceResult(\n                                            id,\n                                            attachmentData,\n                                            this\n                                        );\n                                    });\n                            })\n                        );\n                }\n            });\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preMigrateDocument: {\n            after: preMigrateDocument\n        },\n        postMigrateDocument: {\n            after: postMigrateDocument\n        }\n    }\n};\n"],"mappings":"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"}