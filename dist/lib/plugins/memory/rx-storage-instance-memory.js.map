{"version":3,"file":"rx-storage-instance-memory.js","names":["RxStorageInstanceMemory","storage","databaseName","collectionName","schema","internals","options","settings","closed","changes$","Subject","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","bulkWrite","documentWrites","context","ensureNotRemoved","ret","success","error","categorized","categorizeBulkWriteRows","documents","errors","forEach","err","documentId","stateByIndex","Object","values","byIndex","bulkInsertDocs","writeRow","docId","document","putWriteRowToState","undefined","bulkUpdateDocs","get","attachmentsMap","attachments","attachmentsAdd","attachment","set","attachmentMapKey","attachmentId","attachmentData","attachmentsUpdate","attachmentsRemove","eventBulk","events","length","lastState","getNewestOfDocumentStates","checkpoint","id","lwt","_meta","next","Promise","resolve","findDocumentsById","docIds","withDeleted","docInDb","_deleted","query","preparedQuery","queryPlan","skip","limit","Infinity","skipPlusLimit","queryMatcher","RxStorageDexieStatics","getQueryMatcher","sortComparator","getSortComparator","queryPlanFields","index","mustManuallyResort","sortFieldsSameAsIndexFields","concat","lowerBound","startKeys","lowerBoundString","getStartIndexStringFromLowerBound","upperBound","endKeys","upperBoundString","getStartIndexStringFromUpperBound","indexName","getMemoryIndexName","docsWithIndex","indexOfLower","boundGE","indexString","compareDocsWithIndex","rows","done","currentDoc","doc","push","sort","slice","getChangedDocumentsSince","sinceLwt","RX_META_LWT_MINIMUM","sinceId","boundGT","lastDoc","lastOfArray","cleanup","minimumDeletedTime","maxDeletionTime","now","removeDocFromState","PROMISE_RESOLVE_TRUE","getAttachmentData","data","getFromMapOrThrow","changeStream","asObservable","remove","removed","collectionStates","getMemoryCollectionKey","close","reject","newRxError","database","collection","complete","refCount","PROMISE_RESOLVE_VOID","conflictResultionTasks","conflictResultionTasks$","resolveConflictResultionTask","_taskSolution","createMemoryStorageInstance","params","collectionKey","Map","addIndexesToInternalsState","instance"],"sources":["../../../../src/plugins/memory/rx-storage-instance-memory.ts"],"sourcesContent":["import {\n    Observable,\n    Subject\n} from 'rxjs';\nimport {\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport {\n    categorizeBulkWriteRows,\n    getNewestOfDocumentStates\n} from '../../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport {\n    getFromMapOrThrow,\n    lastOfArray,\n    now,\n    PROMISE_RESOLVE_TRUE,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM\n} from '../../util';\nimport { RxStorageDexieStatics } from '../dexie/rx-storage-dexie';\nimport {\n    boundGE,\n    boundGT\n} from './binary-search-bounds';\nimport {\n    attachmentMapKey,\n    compareDocsWithIndex,\n    ensureNotRemoved,\n    getMemoryCollectionKey,\n    putWriteRowToState,\n    removeDocFromState\n} from './memory-helper';\nimport {\n    addIndexesToInternalsState,\n    getMemoryIndexName\n} from './memory-indexes';\nimport type {\n    MemoryPreparedQuery,\n    MemoryStorageInternals,\n    RxStorageMemory,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageMemorySettings\n} from './memory-types';\n\nexport class RxStorageInstanceMemory<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MemoryStorageInternals<RxDocType>,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public closed = false;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n\n    constructor(\n        public readonly storage: RxStorageMemory,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MemoryStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageMemoryInstanceCreationOptions>,\n        public readonly settings: RxStorageMemorySettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotRemoved(this);\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            this.internals.documents,\n            documentWrites,\n            context\n        );\n        categorized.errors.forEach(err => {\n            ret.error[err.documentId] = err;\n        });\n\n        /**\n         * Do inserts/updates\n         */\n        const stateByIndex = Object.values(this.internals.byIndex);\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            putWriteRowToState(\n                docId as any,\n                this.internals,\n                stateByIndex,\n                writeRow,\n                undefined\n            );\n            ret.success[docId as any] = writeRow.document;\n        });\n\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            putWriteRowToState(\n                docId as any,\n                this.internals,\n                stateByIndex,\n                writeRow,\n                this.internals.documents.get(docId as any)\n            );\n            ret.success[docId as any] = writeRow.document;\n        });\n\n        /**\n         * Handle attachments\n         */\n        const attachmentsMap = this.internals.attachments;\n        categorized.attachmentsAdd.forEach(attachment => {\n            attachmentsMap.set(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                attachment.attachmentData\n            );\n        });\n        categorized.attachmentsUpdate.forEach(attachment => {\n            attachmentsMap.set(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                attachment.attachmentData\n            );\n        });\n        categorized.attachmentsRemove.forEach(attachment => {\n            attachmentsMap.delete(\n                attachmentMapKey(attachment.documentId, attachment.attachmentId)\n            );\n        });\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            this.changes$.next(categorized.eventBulk);\n        }\n        return Promise.resolve(ret);\n    }\n\n    findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        const ret: RxDocumentDataById<RxDocType> = {};\n        docIds.forEach(docId => {\n            const docInDb = this.internals.documents.get(docId);\n            if (\n                docInDb &&\n                (\n                    !docInDb._deleted ||\n                    withDeleted\n                )\n            ) {\n                ret[docId] = docInDb;\n            }\n        });\n        return Promise.resolve(ret);\n    }\n\n    query(preparedQuery: MemoryPreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const queryPlan = preparedQuery.queryPlan;\n        const query = preparedQuery.query;\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        const queryMatcher = RxStorageDexieStatics.getQueryMatcher(\n            this.schema,\n            preparedQuery\n        );\n        const sortComparator = RxStorageDexieStatics.getSortComparator(this.schema, preparedQuery);\n\n        const queryPlanFields: string[] = queryPlan.index;\n        const mustManuallyResort = !queryPlan.sortFieldsSameAsIndexFields;\n        const index: string[] | undefined = ['_deleted'].concat(queryPlanFields);\n        let lowerBound: any[] = queryPlan.startKeys;\n        lowerBound = [false].concat(lowerBound);\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            lowerBound\n        );\n\n        let upperBound: any[] = queryPlan.endKeys;\n        upperBound = [false].concat(upperBound);\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            upperBound\n        );\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGE(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let rows: RxDocumentData<RxDocType>[] = [];\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n\n            if (\n                !currentDoc ||\n                currentDoc.indexString > upperBoundString\n            ) {\n                break;\n            }\n\n            if (queryMatcher(currentDoc.doc)) {\n                rows.push(currentDoc.doc);\n            }\n\n            if (\n                (rows.length >= skipPlusLimit && !mustManuallyResort) ||\n                indexOfLower >= docsWithIndex.length\n            ) {\n                done = true;\n            }\n\n            indexOfLower++;\n        }\n\n        if (mustManuallyResort) {\n            rows = rows.sort(sortComparator);\n        }\n\n        // apply skip and limit boundaries.\n        rows = rows.slice(skip, skipPlusLimit);\n\n        return Promise.resolve({\n            documents: rows\n        });\n    }\n\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n\n        const index = ['_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            ['_meta.lwt', this.primaryPath as any],\n            [\n                sinceLwt,\n                sinceId\n            ]\n        );\n\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        // TODO use array.slice() so we do not have to iterate here\n        const rows: RxDocumentData<RxDocType>[] = [];\n        while (rows.length < limit && indexOfLower < docsWithIndex.length) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            rows.push(currentDoc.doc);\n            indexOfLower++;\n        }\n\n        const lastDoc = lastOfArray(rows);\n        return Promise.resolve({\n            documents: rows,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        });\n    }\n\n    cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const index = ['_deleted', '_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                0,\n                ''\n            ]\n        );\n\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            {\n                indexString: lowerBoundString\n            } as any,\n            compareDocsWithIndex\n        );\n\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            if (!currentDoc || currentDoc.doc._meta.lwt > maxDeletionTime) {\n                done = true;\n            } else {\n                removeDocFromState(\n                    this.primaryPath as any,\n                    this.schema,\n                    this.internals,\n                    currentDoc.doc\n                );\n                indexOfLower++;\n            }\n        }\n        return PROMISE_RESOLVE_TRUE;\n    }\n\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        ensureNotRemoved(this);\n        const data = getFromMapOrThrow(\n            this.internals.attachments,\n            attachmentMapKey(documentId, attachmentId)\n        );\n        return Promise.resolve(data.data);\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotRemoved(this);\n        return this.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        ensureNotRemoved(this);\n\n        this.internals.removed = true;\n        this.storage.collectionStates.delete(\n            getMemoryCollectionKey(this.databaseName, this.collectionName)\n        );\n        await this.close();\n    }\n\n    close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(newRxError('SNH', {\n                database: this.databaseName,\n                collection: this.collectionName\n            }));\n        }\n        this.closed = true;\n        this.changes$.complete();\n\n        this.internals.refCount = this.internals.refCount - 1;\n        if (this.internals.refCount === 0) {\n            this.storage.collectionStates.delete(\n                getMemoryCollectionKey(this.databaseName, this.collectionName)\n            );\n        }\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.internals.conflictResultionTasks$.asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\nexport function createMemoryStorageInstance<RxDocType>(\n    storage: RxStorageMemory,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>,\n    settings: RxStorageMemorySettings\n): Promise<RxStorageInstanceMemory<RxDocType>> {\n    const collectionKey = getMemoryCollectionKey(params.databaseName, params.collectionName);\n\n    let internals = storage.collectionStates.get(collectionKey);\n    if (!internals) {\n        internals = {\n            removed: false,\n            refCount: 1,\n            documents: new Map(),\n            attachments: params.schema.attachments ? new Map() : undefined as any,\n            byIndex: {},\n            conflictResultionTasks$: new Subject()\n        };\n        addIndexesToInternalsState(internals, params.schema);\n        storage.collectionStates.set(collectionKey, internals);\n    } else {\n        internals.refCount = internals.refCount + 1;\n    }\n\n    const instance = new RxStorageInstanceMemory(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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"}