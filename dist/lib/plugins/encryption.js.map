{"version":3,"sources":["../../../src/plugins/encryption.ts"],"names":[],"mappings":"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","file":"encryption.js","sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\n\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\n\nimport {\n    newRxTypeError,\n    newRxError\n} from '../rx-error';\n\nimport type {\n    Crypter\n} from '../crypter';\nimport type {\n    RxPlugin,\n    RxDatabase,\n    RxLocalDocumentData\n} from '../types';\nimport { hash, PROMISE_RESOLVE_FALSE } from '../util';\nimport { findLocalDocument } from '../rx-storage-helper';\n\nconst minPassLength = 8;\n\nexport function encrypt(value: string, password: any): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decrypt(cipherText: string, password: any): string {\n    const decrypted = AES.decrypt(cipherText, password);\n    return decrypted.toString(cryptoEnc);\n}\n\nconst _encryptString = function (this: Crypter, value: string) {\n    return encrypt(value, this.password);\n};\n\nconst _decryptString = function (this: Crypter, encryptedValue: string): string {\n    const decrypted = decrypt(encryptedValue, this.password);\n    return decrypted;\n};\n\n\nexport type PasswordHashDocument = RxLocalDocumentData<{\n    value: string;\n}>;\n\n/**\n * validates and inserts the password hash into the internal collection\n * to ensure there is/was no other instance with a different password\n * which would cause strange side effects when both instances save into the same db\n */\nexport async function storePasswordHashIntoDatabase(\n    rxDatabase: RxDatabase\n): Promise<boolean> {\n    if (!rxDatabase.password) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    const pwHash = hash(rxDatabase.password);\n    const pwHashDocumentId = 'pwHash';\n\n    const pwHashDoc = await findLocalDocument<PasswordHashDocument>(\n        rxDatabase.localDocumentsStore,\n        pwHashDocumentId\n    );\n    if (!pwHashDoc) {\n        const docData: PasswordHashDocument = {\n            _id: pwHashDocumentId,\n            value: pwHash,\n            _attachments: {}\n        };\n        await rxDatabase.localDocumentsStore.bulkWrite([{\n            document: docData\n        }]);\n        return true;\n    } else if (pwHash !== pwHashDoc.value) {\n        // different hash was already set by other instance\n        await rxDatabase.destroy();\n        throw newRxError('DB1', {\n            passwordHash: hash(rxDatabase.password),\n            existingPasswordHash: pwHashDoc.value\n        });\n    } else {\n        return true;\n    }\n}\n\n\n\n\nexport const rxdb = true;\nexport const prototypes = {\n    /**\n     * set crypto-functions for the Crypter.prototype\n     */\n    Crypter: (proto: any) => {\n        proto._encryptString = _encryptString;\n        proto._decryptString = _decryptString;\n    }\n};\nexport const overwritable = {\n    validatePassword: function (password: any) {\n        if (password && typeof password !== 'string') {\n            throw newRxTypeError('EN1', {\n                password\n            });\n        }\n        if (password && password.length < minPassLength) {\n            throw newRxError('EN2', {\n                minPassLength,\n                password\n            });\n        }\n    }\n};\n\nexport const RxDBEncryptionPlugin: RxPlugin = {\n    name: 'encryption',\n    rxdb,\n    prototypes,\n    overwritable,\n    hooks: {\n        createRxDatabase: (db: RxDatabase) => {\n            return storePasswordHashIntoDatabase(db);\n        }\n    }\n};\n"]}