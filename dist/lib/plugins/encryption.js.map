{"version":3,"file":"encryption.js","names":["body","recover","result","e","then","storePasswordHashIntoDatabase","rxDatabase","pwHash","pwHashDoc","data","hash","destroy","newRxError","passwordHash","password","existingPasswordHash","PROMISE_RESOLVE_FALSE","pwHashDocumentKey","pwHashDocumentId","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_ENCRYPTION","docData","id","key","context","_deleted","_attachments","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","createRevision","writeSingle","internalStore","document","err","isError","status","ensureNotFalsy","documentInDb","MINIMUM_PASSWORD_LENGTH","encryptString","value","encrypted","AES","encrypt","toString","decryptString","cipherText","args","decrypted","decrypt","ret","cryptoEnc","cloneWithoutAttachments","attachments","flatClone","clone","RxDBEncryptionPlugin","name","rxdb","prototypes","overwritable","validatePassword","newRxTypeError","length","minPassLength","hooks","createRxDatabase","after","database","preWriteToStorageInstance","before","schema","doc","forEach","path","objectPath","get","stringValue","JSON","stringify","set","postReadFromInstance","decryptedParsed","parse","preWriteAttachment","dataString","attachmentData","postReadAttachment","plainData"],"sources":["../../../src/plugins/encryption.ts"],"sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\n\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\n\nimport {\n    newRxTypeError,\n    newRxError\n} from '../rx-error';\n\nimport objectPath from 'object-path';\nimport type {\n    RxPlugin,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageBulkWriteError,\n    InternalStoreDocType\n} from '../types';\nimport {\n    clone,\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    hash,\n    PROMISE_RESOLVE_FALSE\n} from '../util';\nimport { writeSingle } from '../rx-storage-helper';\nimport {\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_ENCRYPTION\n} from '../rx-database-internal-store';\n\nexport const MINIMUM_PASSWORD_LENGTH: 8 = 8;\n\n\nexport function encryptString(value: string, password: string): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decryptString(cipherText: string, password: any): string {\n    /**\n     * Trying to decrypt non-strings\n     * will cause no errors and will be hard to debug.\n     * So instead we do this check here.\n     */\n    if (typeof cipherText !== 'string') {\n        throw newRxError('SNH', {\n            args: {\n                cipherText\n            }\n        });\n    }\n\n    const decrypted = AES.decrypt(cipherText, password);\n    const ret = decrypted.toString(cryptoEnc);\n    return ret;\n}\n\n\nexport type InternalStorePasswordDocType = InternalStoreDocType<{\n    hash: string;\n}>;\n\n/**\n * validates and inserts the password hash into the internal collection\n * to ensure there is/was no other instance with a different password\n * which would cause strange side effects when both instances save into the same db\n */\nexport async function storePasswordHashIntoDatabase(\n    rxDatabase: RxDatabase\n): Promise<boolean> {\n    if (!rxDatabase.password) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    const pwHash = hash(rxDatabase.password);\n    const pwHashDocumentKey = 'pwHash';\n    const pwHashDocumentId = getPrimaryKeyOfInternalDocument(\n        pwHashDocumentKey,\n        INTERNAL_CONTEXT_ENCRYPTION\n    );\n\n    const docData: RxDocumentWriteData<InternalStorePasswordDocType> = {\n        id: pwHashDocumentId,\n        key: pwHashDocumentKey,\n        context: INTERNAL_CONTEXT_ENCRYPTION,\n        data: {\n            hash: pwHash\n        },\n        _deleted: false,\n        _attachments: {},\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision()\n    };\n    docData._rev = createRevision(docData);\n\n    let pwHashDoc;\n    try {\n        pwHashDoc = await writeSingle(\n            rxDatabase.internalStore,\n            {\n                document: docData\n            },\n            'encryption-password-hash'\n        );\n    } catch (err) {\n        if (\n            (err as any).isError &&\n            (err as RxStorageBulkWriteError<InternalStorePasswordDocType>).status === 409\n        ) {\n            pwHashDoc = ensureNotFalsy((err as RxStorageBulkWriteError<InternalStorePasswordDocType>).documentInDb);\n        } else {\n            throw err;\n        }\n    }\n\n    if (pwHash !== pwHashDoc.data.hash) {\n        // different hash was already set by other instance\n        await rxDatabase.destroy();\n        throw newRxError('DB1', {\n            passwordHash: hash(rxDatabase.password),\n            existingPasswordHash: pwHashDoc.data.hash\n        });\n    } else {\n        return true;\n    }\n}\n\n\nfunction cloneWithoutAttachments<T>(data: RxDocumentData<T>): RxDocumentData<T> {\n    const attachments = data._attachments;\n    data = flatClone(data);\n    delete (data as any)._attachments;\n    data = clone(data);\n    data._attachments = attachments;\n    return data;\n}\n\nexport const RxDBEncryptionPlugin: RxPlugin = {\n    name: 'encryption',\n    rxdb: true,\n    prototypes: {},\n    overwritable: {\n        validatePassword: function (password: any) {\n            if (password && typeof password !== 'string') {\n                throw newRxTypeError('EN1', {\n                    password\n                });\n            }\n            if (password && password.length < MINIMUM_PASSWORD_LENGTH) {\n                throw newRxError('EN2', {\n                    minPassLength: MINIMUM_PASSWORD_LENGTH,\n                    password\n                });\n            }\n        }\n    },\n    hooks: {\n        createRxDatabase: {\n            after: args => {\n                return storePasswordHashIntoDatabase(args.database);\n            }\n        },\n        preWriteToStorageInstance: {\n            before: (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    !password ||\n                    !schema.encrypted ||\n                    schema.encrypted.length === 0\n                ) {\n                    return;\n                }\n\n                const docData = cloneWithoutAttachments(args.doc);\n                schema.encrypted\n                    .forEach(path => {\n                        const value = objectPath.get(docData, path);\n                        if (typeof value === 'undefined') {\n                            return;\n                        }\n\n                        const stringValue = JSON.stringify(value);\n                        const encrypted = encryptString(stringValue, password);\n                        objectPath.set(docData, path, encrypted);\n                    });\n                args.doc = docData;\n            }\n        },\n        postReadFromInstance: {\n            after: (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    !password ||\n                    !schema.encrypted ||\n                    schema.encrypted.length === 0\n                ) {\n                    return;\n                }\n                const docData = cloneWithoutAttachments(args.doc);\n                schema.encrypted\n                    .forEach(path => {\n                        const value = objectPath.get(docData, path);\n                        if (typeof value === 'undefined') {\n                            return;\n                        }\n                        const decrypted = decryptString(value, password);\n                        const decryptedParsed = JSON.parse(decrypted);\n                        objectPath.set(docData, path, decryptedParsed);\n                    });\n                args.doc = docData;\n            }\n        },\n        preWriteAttachment: {\n            after: (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    password &&\n                    schema.attachments &&\n                    schema.attachments.encrypted\n                ) {\n                    const dataString = args.attachmentData.data;\n                    const encrypted = encryptString(dataString, password);\n                    args.attachmentData.data = encrypted;\n                }\n            }\n        },\n        postReadAttachment: {\n            after: (args) => {\n                const password = args.database.password;\n                const schema = args.schema\n                if (\n                    password &&\n                    schema.attachments &&\n                    schema.attachments.encrypted\n                ) {\n                    const dataString = args.plainData;\n                    const decrypted = decryptString(dataString, password);\n                    args.plainData = decrypted;\n                }\n            }\n        }\n    }\n};\n"],"mappings":"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"}