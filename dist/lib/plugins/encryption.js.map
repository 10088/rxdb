{"version":3,"sources":["../../../src/plugins/encryption.ts"],"names":["minPassLength","encrypt","value","password","encrypted","AES","toString","decrypt","cipherText","decrypted","cryptoEnc","_encryptString","_decryptString","encryptedValue","storePasswordHashIntoDatabase","rxDatabase","PROMISE_RESOLVE_FALSE","pwHash","pwHashDocumentId","localDocumentsStore","pwHashDoc","docData","_id","_attachments","bulkWrite","document","destroy","passwordHash","existingPasswordHash","rxdb","prototypes","Crypter","proto","overwritable","validatePassword","length","RxDBEncryptionPlugin","name","hooks","createRxDatabase","db"],"mappings":"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","sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\n\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\n\nimport {\n    newRxTypeError,\n    newRxError\n} from '../rx-error';\n\nimport type {\n    Crypter\n} from '../crypter';\nimport type {\n    RxPlugin,\n    RxDatabase,\n    RxLocalDocumentData\n} from '../types';\nimport { hash, PROMISE_RESOLVE_FALSE } from '../util';\nimport { findLocalDocument } from '../rx-storage-helper';\n\nconst minPassLength = 8;\n\nexport function encrypt(value: string, password: any): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decrypt(cipherText: string, password: any): string {\n    const decrypted = AES.decrypt(cipherText, password);\n    return decrypted.toString(cryptoEnc);\n}\n\nconst _encryptString = function (this: Crypter, value: string) {\n    return encrypt(value, this.password);\n};\n\nconst _decryptString = function (this: Crypter, encryptedValue: string): string {\n    const decrypted = decrypt(encryptedValue, this.password);\n    return decrypted;\n};\n\n\nexport type PasswordHashDocument = RxLocalDocumentData<{\n    value: string;\n}>;\n\n/**\n * validates and inserts the password hash into the internal collection\n * to ensure there is/was no other instance with a different password\n * which would cause strange side effects when both instances save into the same db\n */\nexport async function storePasswordHashIntoDatabase(\n    rxDatabase: RxDatabase\n): Promise<boolean> {\n    if (!rxDatabase.password) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    const pwHash = hash(rxDatabase.password);\n    const pwHashDocumentId = 'pwHash';\n\n    const pwHashDoc = await findLocalDocument<PasswordHashDocument>(\n        rxDatabase.localDocumentsStore,\n        pwHashDocumentId\n    );\n    if (!pwHashDoc) {\n        const docData: PasswordHashDocument = {\n            _id: pwHashDocumentId,\n            value: pwHash,\n            _attachments: {}\n        };\n        await rxDatabase.localDocumentsStore.bulkWrite([{\n            document: docData\n        }]);\n        return true;\n    } else if (pwHash !== pwHashDoc.value) {\n        // different hash was already set by other instance\n        await rxDatabase.destroy();\n        throw newRxError('DB1', {\n            passwordHash: hash(rxDatabase.password),\n            existingPasswordHash: pwHashDoc.value\n        });\n    } else {\n        return true;\n    }\n}\n\n\n\n\nexport const rxdb = true;\nexport const prototypes = {\n    /**\n     * set crypto-functions for the Crypter.prototype\n     */\n    Crypter: (proto: any) => {\n        proto._encryptString = _encryptString;\n        proto._decryptString = _decryptString;\n    }\n};\nexport const overwritable = {\n    validatePassword: function (password: any) {\n        if (password && typeof password !== 'string') {\n            throw newRxTypeError('EN1', {\n                password\n            });\n        }\n        if (password && password.length < minPassLength) {\n            throw newRxError('EN2', {\n                minPassLength,\n                password\n            });\n        }\n    }\n};\n\nexport const RxDBEncryptionPlugin: RxPlugin = {\n    name: 'encryption',\n    rxdb,\n    prototypes,\n    overwritable,\n    hooks: {\n        createRxDatabase: (db: RxDatabase) => {\n            return storePasswordHashIntoDatabase(db);\n        }\n    }\n};\n"],"file":"encryption.js"}