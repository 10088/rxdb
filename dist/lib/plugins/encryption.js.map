{"version":3,"file":"encryption.js","names":["body","recover","result","e","then","MINIMUM_PASSWORD_LENGTH","encryptString","value","password","encrypted","AES","encrypt","toString","decryptString","cipherText","newRxError","args","decrypted","decrypt","ret","cryptoEnc","wrappedKeyEncryptionStorage","Object","assign","storage","createStorageInstance","params","database","databaseName","collection","collectionName","schema","schemaWithoutEncrypted","clone","attachments","modifyToStorage","docData","cloneWithoutAttachments","ensureNotFalsy","forEach","path","objectPath","get","stringValue","JSON","stringify","set","newAttachments","entries","_attachments","id","attachment","useAttachment","flatClone","data","dataString","b64EncodeUnicode","modifyFromStorage","decryptedParsed","parse","modifyAttachmentFromStorage","attachmentData","b64DecodeUnicode","instance","wrapRxStorageInstance","hasEncryption","retInstance","title","INTERNAL_STORE_SCHEMA_TITLE","validatePassword","err","close","newRxTypeError","length","minPassLength"],"sources":["../../../src/plugins/encryption.ts"],"sourcesContent":["/**\n * this plugin adds the encryption-capabilities to rxdb\n * It's using crypto-js/aes for password-encryption\n * @link https://github.com/brix/crypto-js\n */\nimport AES from 'crypto-js/aes';\nimport * as cryptoEnc from 'crypto-js/enc-utf8';\nimport objectPath from 'object-path';\nimport { wrapRxStorageInstance } from '../plugin-helpers';\nimport {\n    INTERNAL_STORE_SCHEMA_TITLE\n} from '../rx-database-internal-store';\nimport { newRxError, newRxTypeError } from '../rx-error';\nimport { hasEncryption } from '../rx-storage-helper';\nimport type {\n    InternalStoreDocType,\n    RxAttachmentWriteData,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../types';\nimport {\n    b64DecodeUnicode,\n    b64EncodeUnicode,\n    clone,\n    ensureNotFalsy,\n    flatClone\n} from '../util';\n\nexport const MINIMUM_PASSWORD_LENGTH: 8 = 8;\n\n\nexport function encryptString(value: string, password: string): string {\n    const encrypted = AES.encrypt(value, password);\n    return encrypted.toString();\n}\n\nexport function decryptString(cipherText: string, password: any): string {\n    /**\n     * Trying to decrypt non-strings\n     * will cause no errors and will be hard to debug.\n     * So instead we do this check here.\n     */\n    if (typeof cipherText !== 'string') {\n        throw newRxError('SNH', {\n            args: {\n                cipherText\n            }\n        });\n    }\n\n    const decrypted = AES.decrypt(cipherText, password);\n    const ret = decrypted.toString(cryptoEnc);\n    return ret;\n}\n\nexport type InternalStorePasswordDocType = InternalStoreDocType<{\n    hash: string;\n}>;\n\nexport function wrappedKeyEncryptionStorage<Internals, InstanceCreationOptions>(\n    args: {\n        storage: RxStorage<Internals, InstanceCreationOptions>\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    return Object.assign(\n        {},\n        args.storage,\n        {\n            async createStorageInstance<RxDocType>(\n                params: RxStorageInstanceCreationParams<RxDocType, any>\n            ) {\n                if (!hasEncryption(params.schema)) {\n                    const retInstance = await args.storage.createStorageInstance(params);\n                    if (\n                        params.schema.title === INTERNAL_STORE_SCHEMA_TITLE &&\n                        params.password\n                    ) {\n                        try {\n                            validatePassword(params.password);\n                        } catch (err) {\n                            /**\n                             * Even if the checks fail,\n                             * we have to clean up.\n                             */\n                            await retInstance.close();\n                            throw err;\n                        }\n                    }\n                    return retInstance;\n                }\n\n                if (!params.password) {\n                    throw newRxError('EN3', {\n                        database: params.databaseName,\n                        collection: params.collectionName,\n                        schema: params.schema\n                    });\n                }\n                const password = params.password;\n\n                const schemaWithoutEncrypted: RxJsonSchema<RxDocumentData<RxDocType>> = clone(params.schema);\n                delete schemaWithoutEncrypted.encrypted;\n                if (schemaWithoutEncrypted.attachments) {\n                    schemaWithoutEncrypted.attachments.encrypted = false;\n                }\n\n                const instance = await args.storage.createStorageInstance(\n                    Object.assign(\n                        {},\n                        params,\n                        {\n                            schema: schemaWithoutEncrypted\n                        }\n                    )\n                );\n\n                function modifyToStorage(docData: RxDocumentData<RxDocType>) {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = objectPath.get(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n\n                            const stringValue = JSON.stringify(value);\n                            const encrypted = encryptString(stringValue, password);\n                            objectPath.set(docData, path, encrypted);\n                        });\n\n                    // handle attachments\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const newAttachments: typeof docData._attachments = {};\n                        Object.entries(docData._attachments).forEach(([id, attachment]) => {\n                            const useAttachment: RxAttachmentWriteData = flatClone(attachment) as any;\n                            if (useAttachment.data) {\n                                const dataString = useAttachment.data;\n                                useAttachment.data = b64EncodeUnicode(encryptString(dataString, password));\n                            }\n                            newAttachments[id] = useAttachment;\n                        });\n                        docData._attachments = newAttachments;\n                    }\n                    return docData;\n                }\n                function modifyFromStorage(docData: RxDocumentData<any>): Promise<RxDocumentData<RxDocType>> {\n                    docData = cloneWithoutAttachments(docData);\n                    ensureNotFalsy(params.schema.encrypted)\n                        .forEach(path => {\n                            const value = objectPath.get(docData, path);\n                            if (typeof value === 'undefined') {\n                                return;\n                            }\n                            const decrypted = decryptString(value, password);\n                            const decryptedParsed = JSON.parse(decrypted);\n                            objectPath.set(docData, path, decryptedParsed);\n                        });\n                    return docData;\n                }\n\n                function modifyAttachmentFromStorage(attachmentData: string): string {\n                    if (\n                        params.schema.attachments &&\n                        params.schema.attachments.encrypted\n                    ) {\n                        const decrypted = decryptString(b64DecodeUnicode(attachmentData), password);\n                        return decrypted;\n                    } else {\n                        return attachmentData;\n                    }\n                }\n\n                return wrapRxStorageInstance(\n                    instance,\n                    modifyToStorage,\n                    modifyFromStorage,\n                    modifyAttachmentFromStorage\n                );\n            }\n        }\n    );\n}\n\n\n\n\n\nfunction cloneWithoutAttachments<T>(data: RxDocumentData<T>): RxDocumentData<T> {\n    const attachments = data._attachments;\n    data = flatClone(data);\n    delete (data as any)._attachments;\n    data = clone(data);\n    data._attachments = attachments;\n    return data;\n}\n\nfunction validatePassword(password: any) {\n    if (password && typeof password !== 'string') {\n        throw newRxTypeError('EN1', {\n            password\n        });\n    }\n    if (password && password.length < MINIMUM_PASSWORD_LENGTH) {\n        throw newRxError('EN2', {\n            minPassLength: MINIMUM_PASSWORD_LENGTH,\n            password\n        });\n    }\n}\n"],"mappings":"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"}