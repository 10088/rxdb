{"version":3,"file":"index.js","names":["RxGraphQLReplicationState","replicationState","collection","url","clientState","send$","undefined","error$","canceled$","active$","received$","subjects","received","asObservable","send","error","canceled","active","initialReplicationComplete$","isStopped","awaitInitialReplication","run","retryOnFail","cancel","setHeaders","headers","client","syncGraphQL","waitForLeadership","pull","push","deletedFlag","live","liveInterval","retryTime","autoStart","pullModifier","modifier","DEFAULT_MODIFIER","pushModifier","mutateableClientState","replicationPrimitivesPull","handler","latestPulledDocument","queryBuilder","pullGraphQL","query","variables","result","errors","RxReplicationPullError","overwritable","tunnelErrorMessage","dataPath","Object","keys","data","docsData","objectPath","get","length","documents","hasMoreDocuments","batchSize","args","Promise","all","map","doc","isDeleted","_deleted","modified","filter","replicationPrimitivesPush","docs","changedDoc","modifiedPushDocs","pushObj","RxReplicationPushError","replicationIdentifier","GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX","graphqlReplicationState","RxDBReplicationGraphQLPlugin","name","init","RxDBLeaderElectionPlugin","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with remote graphql endpoint\n */\n\nimport type {\n    Observable\n} from 'rxjs';\nimport GraphQLClient from 'graphql-client';\nimport objectPath from 'object-path';\nimport {\n    flatClone\n} from '../../util';\n\nimport {\n    hash\n} from '../../util';\n\nimport {\n    DEFAULT_MODIFIER,\n    GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX\n} from './helper';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport {\n    overwritable\n} from '../../overwritable';\nimport type {\n    RxCollection,\n    RxPlugin,\n    RxDocumentData,\n    ReplicationPullOptions,\n    ReplicationPushOptions\n} from '../../types';\nimport { replicateRxCollection, RxReplicationStateBase } from '../replication';\nimport {\n    RxReplicationError,\n    RxReplicationPullError,\n    RxReplicationPushError\n} from '../replication/rx-replication-error';\nimport { newRxError } from '../../rx-error';\nimport { addRxPlugin, SyncOptionsGraphQL } from '../../index';\n\nexport class RxGraphQLReplicationState<RxDocType> {\n\n    public received$: Observable<RxDocumentData<RxDocType>>;\n    public send$: Observable<any> = undefined as any;\n    public error$: Observable<RxReplicationError<RxDocType>> = undefined as any;\n    public canceled$: Observable<boolean> = undefined as any;\n    public active$: Observable<boolean> = undefined as any;\n    public initialReplicationComplete$: Observable<true>;\n\n    constructor(\n        /**\n         * The GraphQL replication uses the replication primitives plugin\n         * internally. So we need that replicationState.\n         */\n        public readonly replicationState: RxReplicationStateBase<RxDocType>,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly url: string,\n        public readonly clientState: { client: any }\n    ) {\n        // map observables from replicationState to this\n        this.received$ = replicationState.subjects.received.asObservable();\n        this.send$ = replicationState.subjects.send.asObservable();\n        this.error$ = replicationState.subjects.error.asObservable();\n        this.canceled$ = replicationState.subjects.canceled.asObservable();\n        this.active$ = replicationState.subjects.active.asObservable();\n        this.initialReplicationComplete$ = replicationState.initialReplicationComplete$;\n    }\n\n\n    isStopped(): boolean {\n        return this.replicationState.isStopped();\n    }\n\n    awaitInitialReplication(): Promise<true> {\n        return this.replicationState.awaitInitialReplication();\n    }\n\n    run(retryOnFail = true): Promise<void> {\n        return this.replicationState.run(retryOnFail);\n    }\n\n    cancel(): Promise<any> {\n        return this.replicationState.cancel();\n    }\n\n    setHeaders(headers: { [k: string]: string }): void {\n        this.clientState.client = GraphQLClient({\n            url: this.url,\n            headers\n        });\n    }\n}\n\nexport function syncGraphQL<RxDocType>(\n    this: RxCollection,\n    {\n        url,\n        headers = {},\n        waitForLeadership = true,\n        pull,\n        push,\n        deletedFlag = '_deleted',\n        live = false,\n        liveInterval = 1000 * 10, // in ms\n        retryTime = 1000 * 5, // in ms\n        autoStart = true,\n    }: SyncOptionsGraphQL<RxDocType>\n): RxGraphQLReplicationState<RxDocType> {\n    const collection = this;\n\n    // fill in defaults for pull & push\n    const pullModifier = pull && pull.modifier ? pull.modifier : DEFAULT_MODIFIER;\n    const pushModifier = push && push.modifier ? push.modifier : DEFAULT_MODIFIER;\n\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        client: GraphQLClient({\n            url,\n            headers\n        })\n    }\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType> | undefined;\n    if (pull) {\n        replicationPrimitivesPull = {\n            async handler(latestPulledDocument) {\n                const pullGraphQL = await pull.queryBuilder(latestPulledDocument);\n                const result = await mutateableClientState.client.query(pullGraphQL.query, pullGraphQL.variables);\n                if (result.errors) {\n                    if (typeof result.errors === 'string') {\n                        throw new RxReplicationPullError(\n                            result.errors,\n                            latestPulledDocument,\n                        );\n                    } else {\n                        throw new RxReplicationPullError(\n                            overwritable.tunnelErrorMessage('GQL2'),\n                            latestPulledDocument,\n                            result.errors\n                        );\n                    }\n                }\n\n                const dataPath = pull.dataPath || ['data', Object.keys(result.data)[0]];\n                const docsData: any[] = objectPath.get(result, dataPath);\n\n                // optimization shortcut, do not proceed if there are no documents.\n                if (docsData.length === 0) {\n                    return {\n                        documents: [],\n                        hasMoreDocuments: false\n                    };\n                }\n\n                let hasMoreDocuments: boolean = false;\n                if (docsData.length > pull.batchSize) {\n                    throw newRxError('GQL3', {\n                        args: {\n                            pull,\n                            documents: docsData\n                        }\n                    });\n                } else if (docsData.length === pull.batchSize) {\n                    hasMoreDocuments = true;\n                }\n\n                const modified: any[] = (await Promise.all(docsData\n                    .map(async (doc: any) => {\n                        // swap out deleted flag\n                        if (deletedFlag !== '_deleted') {\n                            const isDeleted = !!doc[deletedFlag];\n                            doc._deleted = isDeleted;\n                            delete doc[deletedFlag];\n                        }\n\n                        return await pullModifier(doc);\n                    })\n                )).filter(doc => !!doc);\n                return {\n                    documents: modified,\n                    hasMoreDocuments\n                }\n            }\n        }\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            batchSize: push.batchSize,\n            async handler(docs: RxDocumentData<RxDocType>[]) {\n                let modifiedPushDocs: RxDocumentData<RxDocType>[] = await Promise.all(\n                    docs.map(async (doc) => {\n                        let changedDoc: any = flatClone(doc);\n\n                        // swap out deleted flag\n                        if (deletedFlag !== '_deleted') {\n                            const isDeleted = !!doc._deleted;\n                            changedDoc[deletedFlag] = isDeleted;\n                            delete changedDoc._deleted;\n                        }\n\n                        changedDoc = await pushModifier(changedDoc);\n                        return changedDoc ? changedDoc : null;\n                    })\n                );\n                /**\n                 * The push modifier might have returned null instead of a document\n                 * which means that these documents must not be pushed and filtered out.\n                 */\n                modifiedPushDocs = modifiedPushDocs.filter(doc => !!doc) as any;\n\n                /**\n                 * Optimization shortcut.\n                 * If we have no more documents to push,\n                 * because all were filtered out by the modifier,\n                 * we can quit here.\n                 */\n                if (modifiedPushDocs.length === 0) {\n                    return;\n                }\n\n                const pushObj = await push.queryBuilder(modifiedPushDocs);\n                const result = await mutateableClientState.client.query(pushObj.query, pushObj.variables);\n                if (result.errors) {\n                    if (typeof result.errors === 'string') {\n                        throw new RxReplicationPushError(\n                            result.errors,\n                            docs\n                        );\n                    } else {\n                        throw new RxReplicationPushError(\n                            overwritable.tunnelErrorMessage('GQL4'),\n                            docs,\n                            result.errors\n                        );\n                    }\n                }\n            }\n        };\n    }\n\n    const replicationState = replicateRxCollection<RxDocType>({\n        replicationIdentifier: GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX + hash(url),\n        collection,\n        deletedFlag,\n        pull: replicationPrimitivesPull,\n        push: replicationPrimitivesPush,\n        waitForLeadership,\n        live,\n        liveInterval,\n        retryTime,\n        autoStart\n    });\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        replicationState,\n        collection,\n        url,\n        mutateableClientState\n    );\n\n    return graphqlReplicationState;\n}\n\nexport * from './helper';\nexport * from './graphql-schema-from-rx-schema';\nexport * from './query-builder-from-rx-schema';\n\nexport const RxDBReplicationGraphQLPlugin: RxPlugin = {\n    name: 'replication-graphql',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncGraphQL = syncGraphQL;\n        }\n    }\n};\n"],"mappings":"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"}