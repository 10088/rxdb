{"version":3,"file":"index.js","names":["RxGraphQLReplicationState","url","clientState","replicationIdentifierHash","collection","deletedField","pull","push","live","retryTime","autoStart","setHeaders","headers","client","GraphQLClient","http","credentials","setCredentials","RxReplicationState","syncGraphQL","waitForLeadership","mutateableClientState","pullStream$","Subject","replicationPrimitivesPull","pullBatchSize","batchSize","handler","lastPulledCheckpoint","queryBuilder","pullGraphQL","query","variables","result","docsData","data","documents","newCheckpoint","checkpoint","errors","dataPath","Object","keys","objectPath","get","responseModifier","modifier","stream$","asObservable","replicationPrimitivesPush","rows","pushObj","graphqlReplicationState","GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX","fastUnsecureHash","ws","mustUseSocket","streamQueryBuilder","startBefore","start","bind","wsClient","getGraphQLWebSocket","ensureNotFalsy","on","next","subscribe","streamResponse","firstField","error","complete","cancelBefore","cancel","removeGraphQLWebSocketRef","startReplicationOnLeaderShip","RxDBReplicationGraphQLPlugin","name","init","addRxPlugin","RxDBLeaderElectionPlugin","rxdb","prototypes","RxCollection","proto"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with remote graphql endpoint\n */\n\nimport GraphQLClient from 'graphql-client';\nimport objectPath from 'object-path';\nimport {\n    ensureNotFalsy,\n    fastUnsecureHash\n} from '../../util';\n\nimport {\n    GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX\n} from './helper';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    RxPlugin,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    GraphQLServerUrl,\n    RxReplicationPullStreamItem\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    SyncOptionsGraphQL,\n    WithDeleted\n} from '../../index';\n\nimport {\n    removeGraphQLWebSocketRef,\n    getGraphQLWebSocket\n} from './graphql-websocket';\nimport { Subject } from 'rxjs';\n\nexport class RxGraphQLReplicationState<RxDocType, CheckpointType> extends RxReplicationState<RxDocType, CheckpointType> {\n    constructor(\n        public readonly url: GraphQLServerUrl,\n        public readonly clientState: { headers: any; client: any, credentials: string | undefined },\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            deletedField,\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n\n    setHeaders(headers: { [k: string]: string }): void {\n        this.clientState.headers = headers;\n        this.clientState.client = GraphQLClient({\n            url: this.url.http,\n            headers,\n            credentials: this.clientState.credentials\n        });\n    }\n\n    setCredentials(credentials: string | undefined) {\n        this.clientState.credentials = credentials\n        this.clientState.client = GraphQLClient({\n            url: this.url.http,\n            headers: this.clientState.headers,\n            credentials\n        });\n    }\n}\n\nexport function syncGraphQL<RxDocType, CheckpointType>(\n    this: RxCollection,\n    {\n        url,\n        headers = {},\n        credentials,\n        deletedField = '_deleted',\n        waitForLeadership = true,\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5, // in ms\n        autoStart = true,\n    }: SyncOptionsGraphQL<RxDocType, CheckpointType>\n): RxGraphQLReplicationState<RxDocType, CheckpointType> {\n    const collection = this;\n\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        headers,\n        credentials,\n        client: GraphQLClient({\n            url: url.http,\n            headers,\n            credentials\n        })\n    };\n\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CheckpointType> | undefined;\n    if (pull) {\n        const pullBatchSize = pull.batchSize ? pull.batchSize : 20;\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CheckpointType\n            ) {\n                const pullGraphQL = await pull.queryBuilder(lastPulledCheckpoint, pullBatchSize);\n                const result = await mutateableClientState.client.query(pullGraphQL.query, pullGraphQL.variables);\n                if (result.errors) {\n                    throw result.errors;\n                }\n\n                const dataPath = pull.dataPath || ['data', Object.keys(result.data)[0]];\n                let data: any = objectPath.get(result, dataPath);\n\n                if (pull.responseModifier) {\n                    data = await pull.responseModifier(\n                        data,\n                        'handler',\n                        lastPulledCheckpoint\n                    );\n                }\n\n                const docsData: WithDeleted<RxDocType>[] = data.documents;\n                const newCheckpoint = data.checkpoint;\n\n                return {\n                    documents: docsData,\n                    checkpoint: newCheckpoint\n                }\n            },\n            batchSize: pull.batchSize,\n            modifier: pull.modifier,\n            stream$: pullStream$.asObservable()\n        }\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const pushObj = await push.queryBuilder(rows);\n                const result = await mutateableClientState.client.query(pushObj.query, pushObj.variables);\n\n                if (result.errors) {\n                    throw result.errors;\n                }\n                const dataPath = Object.keys(result.data)[0];\n                const data: any = objectPath.get(result.data, dataPath);\n                return data;\n            },\n            batchSize: push.batchSize,\n            modifier: push.modifier\n        };\n    }\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        url,\n        mutateableClientState,\n        GRAPHQL_REPLICATION_PLUGIN_IDENTITY_PREFIX + fastUnsecureHash(url.http ? url.http : url.ws as any),\n        collection,\n        deletedField,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        live,\n        retryTime,\n        autoStart\n    );\n\n    const mustUseSocket = url.ws &&\n        pull &&\n        pull.streamQueryBuilder &&\n        live;\n\n    const startBefore = graphqlReplicationState.start.bind(graphqlReplicationState);\n    graphqlReplicationState.start = () => {\n        if (mustUseSocket) {\n            const wsClient = getGraphQLWebSocket(ensureNotFalsy(url.ws));\n\n            wsClient.on('connected', () => {\n                pullStream$.next('RESYNC');\n            });\n\n            const query: any = ensureNotFalsy(pull.streamQueryBuilder)(mutateableClientState.headers);\n\n            wsClient.subscribe(\n                query,\n                {\n                    next: async (streamResponse: any) => {\n                        const firstField = Object.keys(streamResponse.data)[0];\n                        let data = streamResponse.data[firstField];\n                        if (pull.responseModifier) {\n                            data = await pull.responseModifier(\n                                data,\n                                'stream'\n                            );\n                        }\n                        pullStream$.next(data);\n                    },\n                    error: (error: any) => {\n                        pullStream$.error(error);\n                    },\n                    complete: () => {\n                        pullStream$.complete();\n                    }\n                });\n        }\n        return startBefore();\n    }\n\n    const cancelBefore = graphqlReplicationState.cancel.bind(graphqlReplicationState);\n    graphqlReplicationState.cancel = () => {\n        pullStream$.complete();\n        if (mustUseSocket) {\n            removeGraphQLWebSocketRef(ensureNotFalsy(url.ws));\n        }\n        return cancelBefore();\n    }\n\n    startReplicationOnLeaderShip(waitForLeadership, graphqlReplicationState);\n    return graphqlReplicationState;\n}\n\nexport * from './helper';\nexport * from './graphql-schema-from-rx-schema';\nexport * from './query-builder-from-rx-schema';\nexport * from './graphql-websocket';\n\nexport const RxDBReplicationGraphQLPlugin: RxPlugin = {\n    name: 'replication-graphql',\n    init() {\n        addRxPlugin(RxDBLeaderElectionPlugin);\n    },\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.syncGraphQL = syncGraphQL;\n        }\n    }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;AAKA;;AACA;;AACA;;AAKA;;AAyOA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;;AArOA;;AAUA;;AAIA;;AAMA;;AAoNA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;;AAhNA;;AA8MA;;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;;AACA;;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;;AAvPA;AACA;AACA;AACA;IAuCaA,yB;;;EACT,mCACoBC,GADpB,EAEoBC,WAFpB,EAGoBC,yBAHpB,EAIoBC,UAJpB,EAKoBC,YALpB,EAMoBC,IANpB,EAOoBC,IAPpB,EAQoBC,IARpB,EASWC,SATX,EAUWC,SAVX,EAWE;IAAA;;IACE,uCACIP,yBADJ,EAEIC,UAFJ,EAGIC,YAHJ,EAIIC,IAJJ,EAKIC,IALJ,EAMIC,IANJ,EAOIC,SAPJ,EAQIC,SARJ;IADF,MAVkBT,GAUlB,GAVkBA,GAUlB;IAAA,MATkBC,WASlB,GATkBA,WASlB;IAAA,MARkBC,yBAQlB,GARkBA,yBAQlB;IAAA,MAPkBC,UAOlB,GAPkBA,UAOlB;IAAA,MANkBC,YAMlB,GANkBA,YAMlB;IAAA,MALkBC,IAKlB,GALkBA,IAKlB;IAAA,MAJkBC,IAIlB,GAJkBA,IAIlB;IAAA,MAHkBC,IAGlB,GAHkBA,IAGlB;IAAA,MAFSC,SAET,GAFSA,SAET;IAAA,MADSC,SACT,GADSA,SACT;IAAA;EAWD;;;;SAEDC,U,GAAA,oBAAWC,OAAX,EAAmD;IAC/C,KAAKV,WAAL,CAAiBU,OAAjB,GAA2BA,OAA3B;IACA,KAAKV,WAAL,CAAiBW,MAAjB,GAA0B,IAAAC,yBAAA,EAAc;MACpCb,GAAG,EAAE,KAAKA,GAAL,CAASc,IADsB;MAEpCH,OAAO,EAAPA,OAFoC;MAGpCI,WAAW,EAAE,KAAKd,WAAL,CAAiBc;IAHM,CAAd,CAA1B;EAKH,C;;SAEDC,c,GAAA,wBAAeD,WAAf,EAAgD;IAC5C,KAAKd,WAAL,CAAiBc,WAAjB,GAA+BA,WAA/B;IACA,KAAKd,WAAL,CAAiBW,MAAjB,GAA0B,IAAAC,yBAAA,EAAc;MACpCb,GAAG,EAAE,KAAKA,GAAL,CAASc,IADsB;MAEpCH,OAAO,EAAE,KAAKV,WAAL,CAAiBU,OAFU;MAGpCI,WAAW,EAAXA;IAHoC,CAAd,CAA1B;EAKH,C;;;EAzCqEE,+B;;;;AA4CnE,SAASC,WAAT,OAciD;EAAA,IAXhDlB,GAWgD,QAXhDA,GAWgD;EAAA,wBAVhDW,OAUgD;EAAA,IAVhDA,OAUgD,6BAVtC,EAUsC;EAAA,IAThDI,WASgD,QAThDA,WASgD;EAAA,6BARhDX,YAQgD;EAAA,IARhDA,YAQgD,kCARjC,UAQiC;EAAA,iCAPhDe,iBAOgD;EAAA,IAPhDA,iBAOgD,sCAP5B,IAO4B;EAAA,IANhDd,IAMgD,QANhDA,IAMgD;EAAA,IALhDC,IAKgD,QALhDA,IAKgD;EAAA,qBAJhDC,IAIgD;EAAA,IAJhDA,IAIgD,0BAJzC,IAIyC;EAAA,0BAHhDC,SAGgD;EAAA,IAHhDA,SAGgD,+BAHpC,OAAO,CAG6B;EAAA,0BAFhDC,SAEgD;EAAA,IAFhDA,SAEgD,+BAFpC,IAEoC;EACpD,IAAMN,UAAU,GAAG,IAAnB;EAEA;AACJ;AACA;AACA;;EACI,IAAMiB,qBAAqB,GAAG;IAC1BT,OAAO,EAAPA,OAD0B;IAE1BI,WAAW,EAAXA,WAF0B;IAG1BH,MAAM,EAAE,IAAAC,yBAAA,EAAc;MAClBb,GAAG,EAAEA,GAAG,CAACc,IADS;MAElBH,OAAO,EAAPA,OAFkB;MAGlBI,WAAW,EAAXA;IAHkB,CAAd;EAHkB,CAA9B;EAWA,IAAMM,WAA4E,GAAG,IAAIC,aAAJ,EAArF;EAEA,IAAIC,yBAAJ;;EACA,IAAIlB,IAAJ,EAAU;IACN,IAAMmB,aAAa,GAAGnB,IAAI,CAACoB,SAAL,GAAiBpB,IAAI,CAACoB,SAAtB,GAAkC,EAAxD;IACAF,yBAAyB,GAAG;MAClBG,OADkB,mBAEpBC,oBAFoB;QAAA,IAGtB;UAAA,uBAC4BtB,IAAI,CAACuB,YAAL,CAAkBD,oBAAlB,EAAwCH,aAAxC,CAD5B,iBACQK,WADR;YAAA,uBAEuBT,qBAAqB,CAACR,MAAtB,CAA6BkB,KAA7B,CAAmCD,WAAW,CAACC,KAA/C,EAAsDD,WAAW,CAACE,SAAlE,CAFvB,iBAEQC,MAFR;cAAA;gBAkBE,IAAMC,QAAkC,GAAGC,IAAI,CAACC,SAAhD;gBACA,IAAMC,aAAa,GAAGF,IAAI,CAACG,UAA3B;gBAEA,OAAO;kBACHF,SAAS,EAAEF,QADR;kBAEHI,UAAU,EAAED;gBAFT,CAAP;cArBF;;cAGE,IAAIJ,MAAM,CAACM,MAAX,EAAmB;gBACf,MAAMN,MAAM,CAACM,MAAb;cACH;;cAED,IAAMC,QAAQ,GAAGlC,IAAI,CAACkC,QAAL,IAAiB,CAAC,MAAD,EAASC,MAAM,CAACC,IAAP,CAAYT,MAAM,CAACE,IAAnB,EAAyB,CAAzB,CAAT,CAAlC;;cACA,IAAIA,IAAS,GAAGQ,sBAAA,CAAWC,GAAX,CAAeX,MAAf,EAAuBO,QAAvB,CAAhB;;cARF;gBAAA,IAUMlC,IAAI,CAACuC,gBAVX;kBAAA,uBAWmBvC,IAAI,CAACuC,gBAAL,CACTV,IADS,EAET,SAFS,EAGTP,oBAHS,CAXnB;oBAWMO,IAAI,wBAAJ;kBAXN;gBAAA;cAAA;;cAAA;YAAA;UAAA;QAyBD,CA5BuB;UAAA;QAAA;MAAA;MA6BxBT,SAAS,EAAEpB,IAAI,CAACoB,SA7BQ;MA8BxBoB,QAAQ,EAAExC,IAAI,CAACwC,QA9BS;MA+BxBC,OAAO,EAAEzB,WAAW,CAAC0B,YAAZ;IA/Be,CAA5B;EAiCH;;EACD,IAAIC,yBAAJ;;EACA,IAAI1C,IAAJ,EAAU;IACN0C,yBAAyB,GAAG;MAClBtB,OADkB,mBAEpBuB,IAFoB;QAAA,IAGtB;UAAA,uBACwB3C,IAAI,CAACsB,YAAL,CAAkBqB,IAAlB,CADxB,iBACQC,OADR;YAAA,uBAEuB9B,qBAAqB,CAACR,MAAtB,CAA6BkB,KAA7B,CAAmCoB,OAAO,CAACpB,KAA3C,EAAkDoB,OAAO,CAACnB,SAA1D,CAFvB,iBAEQC,MAFR;cAIE,IAAIA,MAAM,CAACM,MAAX,EAAmB;gBACf,MAAMN,MAAM,CAACM,MAAb;cACH;;cACD,IAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYT,MAAM,CAACE,IAAnB,EAAyB,CAAzB,CAAjB;;cACA,IAAMA,IAAS,GAAGQ,sBAAA,CAAWC,GAAX,CAAeX,MAAM,CAACE,IAAtB,EAA4BK,QAA5B,CAAlB;;cACA,OAAOL,IAAP;YATF;UAAA;QAUD,CAbuB;UAAA;QAAA;MAAA;MAcxBT,SAAS,EAAEnB,IAAI,CAACmB,SAdQ;MAexBoB,QAAQ,EAAEvC,IAAI,CAACuC;IAfS,CAA5B;EAiBH;;EAED,IAAMM,uBAAuB,GAAG,IAAIpD,yBAAJ,CAC5BC,GAD4B,EAE5BoB,qBAF4B,EAG5BgC,kDAAA,GAA6C,IAAAC,sBAAA,EAAiBrD,GAAG,CAACc,IAAJ,GAAWd,GAAG,CAACc,IAAf,GAAsBd,GAAG,CAACsD,EAA3C,CAHjB,EAI5BnD,UAJ4B,EAK5BC,YAL4B,EAM5BmB,yBAN4B,EAO5ByB,yBAP4B,EAQ5BzC,IAR4B,EAS5BC,SAT4B,EAU5BC,SAV4B,CAAhC;EAaA,IAAM8C,aAAa,GAAGvD,GAAG,CAACsD,EAAJ,IAClBjD,IADkB,IAElBA,IAAI,CAACmD,kBAFa,IAGlBjD,IAHJ;EAKA,IAAMkD,WAAW,GAAGN,uBAAuB,CAACO,KAAxB,CAA8BC,IAA9B,CAAmCR,uBAAnC,CAApB;;EACAA,uBAAuB,CAACO,KAAxB,GAAgC,YAAM;IAClC,IAAIH,aAAJ,EAAmB;MACf,IAAMK,QAAQ,GAAG,IAAAC,qCAAA,EAAoB,IAAAC,oBAAA,EAAe9D,GAAG,CAACsD,EAAnB,CAApB,CAAjB;MAEAM,QAAQ,CAACG,EAAT,CAAY,WAAZ,EAAyB,YAAM;QAC3B1C,WAAW,CAAC2C,IAAZ,CAAiB,QAAjB;MACH,CAFD;MAIA,IAAMlC,KAAU,GAAG,IAAAgC,oBAAA,EAAezD,IAAI,CAACmD,kBAApB,EAAwCpC,qBAAqB,CAACT,OAA9D,CAAnB;MAEAiD,QAAQ,CAACK,SAAT,CACInC,KADJ,EAEI;QACIkC,IAAI,YAASE,cAAT;UAAA,IAAiC;YAAA;cASjC7C,WAAW,CAAC2C,IAAZ,CAAiB9B,KAAjB;YATiC;;YACjC,IAAMiC,UAAU,GAAG3B,MAAM,CAACC,IAAP,CAAYyB,cAAc,CAAChC,IAA3B,EAAiC,CAAjC,CAAnB;YACA,IAAIA,KAAI,GAAGgC,cAAc,CAAChC,IAAf,CAAoBiC,UAApB,CAAX;;YAFiC;cAAA,IAG7B9D,IAAI,CAACuC,gBAHwB;gBAAA,uBAIhBvC,IAAI,CAACuC,gBAAL,CACTV,KADS,EAET,QAFS,CAJgB;kBAI7BA,KAAI,yBAAJ;gBAJ6B;cAAA;YAAA;;YAAA;UAUpC,CAVG;YAAA;UAAA;QAAA,CADR;QAYIkC,KAAK,EAAE,eAACA,MAAD,EAAgB;UACnB/C,WAAW,CAAC+C,KAAZ,CAAkBA,MAAlB;QACH,CAdL;QAeIC,QAAQ,EAAE,oBAAM;UACZhD,WAAW,CAACgD,QAAZ;QACH;MAjBL,CAFJ;IAqBH;;IACD,OAAOZ,WAAW,EAAlB;EACH,CAjCD;;EAmCA,IAAMa,YAAY,GAAGnB,uBAAuB,CAACoB,MAAxB,CAA+BZ,IAA/B,CAAoCR,uBAApC,CAArB;;EACAA,uBAAuB,CAACoB,MAAxB,GAAiC,YAAM;IACnClD,WAAW,CAACgD,QAAZ;;IACA,IAAId,aAAJ,EAAmB;MACf,IAAAiB,2CAAA,EAA0B,IAAAV,oBAAA,EAAe9D,GAAG,CAACsD,EAAnB,CAA1B;IACH;;IACD,OAAOgB,YAAY,EAAnB;EACH,CAND;;EAQA,IAAAG,yCAAA,EAA6BtD,iBAA7B,EAAgDgC,uBAAhD;EACA,OAAOA,uBAAP;AACH;;AAOM,IAAMuB,4BAAsC,GAAG;EAClDC,IAAI,EAAE,qBAD4C;EAElDC,IAFkD,kBAE3C;IACH,IAAAC,kBAAA,EAAYC,wCAAZ;EACH,CAJiD;EAKlDC,IAAI,EAAE,IAL4C;EAMlDC,UAAU,EAAE;IACRC,YAAY,EAAE,sBAACC,KAAD,EAAgB;MAC1BA,KAAK,CAAChE,WAAN,GAAoBA,WAApB;IACH;EAHO;AANsC,CAA/C"}