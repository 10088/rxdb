{"version":3,"sources":["../../../../src/plugins/replication-graphql/graphql-schema-from-rx-schema.ts"],"names":[],"mappings":"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","file":"graphql-schema-from-rx-schema.js","sourcesContent":["import { getGraphqlSchemaFromJsonSchema } from 'get-graphql-from-jsonschema';\n\nimport { scalarTypes } from 'get-graphql-from-jsonschema/build/lib/scalarTypes';\n\nimport { RxJsonSchema } from '../../types';\nimport { fillWithDefaultSettings } from '../../rx-schema';\nimport { clone, ucfirst } from '../../util';\n\nexport type Prefixes = {\n    set?: string;\n    feed?: string;\n    changed?: string;\n};\n\n/**\n * just type some common types\n * to have better IDE autocomplete,\n * all strings are allowed\n */\nexport type GraphQLParamType = 'ID' | 'ID!' | 'String' | 'String!' | 'Int' | 'Int!' | string;\n\nexport type GraphQLSchemaFromRxSchemaInputSingleCollection = {\n    schema: RxJsonSchema<any>;\n    deletedFlag: string;\n    // which keys must be send to the feed-query to get the newer documents?\n    feedKeys: string[];\n    ignoreInputKeys?: string[];\n    ignoreOutputKeys?: string[];\n    withRevisions?: boolean;\n    prefixes?: Prefixes;\n    subscriptionParams?: { [k: string]: GraphQLParamType }\n};\n\nexport type GraphQLSchemaFromRxSchemaInput = {\n    [collectionName: string]: GraphQLSchemaFromRxSchemaInputSingleCollection\n};\nexport type GraphQLSchemaFromRxSchemaOutput = {\n    asString: string;\n    queries: string[];\n    mutations: string[];\n    subscriptions: string[];\n    inputs: string[];\n    types: string[];\n};\n\n// we use two spaces because get-graphql-from-jsonschema does also\nexport const SPACING = '  ';\n\n/**\n * TODO this is in beta mode,\n * use it at your own risk.\n * Fix bugs when you find them.\n */\nexport function graphQLSchemaFromRxSchema(\n    input: GraphQLSchemaFromRxSchemaInput\n): GraphQLSchemaFromRxSchemaOutput {\n    const ret: GraphQLSchemaFromRxSchemaOutput = {\n        asString: '',\n        queries: [],\n        mutations: [],\n        subscriptions: [],\n        inputs: [],\n        types: []\n    };\n\n\n    Object.entries(input).forEach(([collectionName, collectionSettings]) => {\n        collectionSettings = fillUpOptionals(collectionSettings);\n\n        const schema = collectionSettings.schema;\n        const prefixes: Prefixes = collectionSettings.prefixes as any;\n        const ucCollectionName = ucfirst(collectionName);\n        const collectionNameInput = ucfirst(collectionName) + 'Input';\n\n        // input\n        const inputSchema = stripKeysFromSchema(schema, collectionSettings.ignoreInputKeys as string[]);\n\n        const inputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: collectionNameInput,\n            schema: inputSchema as any,\n            direction: 'input'\n        });\n\n        ret.inputs = ret.inputs.concat(\n            inputGraphQL\n                .typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, collectionNameInput))\n        );\n\n        // output\n        const outputSchema = stripKeysFromSchema(schema, collectionSettings.ignoreOutputKeys as string[]);\n        const outputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: collectionName,\n            schema: outputSchema as any,\n            direction: 'output'\n        });\n        ret.types = ret.types.concat(\n            outputGraphQL.typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, ucCollectionName))\n        );\n\n        // query\n        const queryName = prefixes.feed + ucCollectionName;\n        const queryKeys = collectionSettings.feedKeys.map(key => {\n            const subSchema: any = schema.properties[key];\n            const graphqlType = (scalarTypes as any)[subSchema.type];\n            const keyString = key + ': ' + graphqlType + '';\n            return keyString;\n        });\n        queryKeys.push('limit: Int!');\n        const queryString = queryName + '(' + queryKeys.join(', ') + '): [' + ucCollectionName + '!]!';\n        ret.queries.push(SPACING + queryString);\n\n        // mutation\n        const mutationName = prefixes.set + ucCollectionName;\n        const mutationString = mutationName + '(' + collectionName + ': ' + collectionNameInput + '): ' + ucCollectionName;\n        ret.mutations.push(SPACING + mutationString);\n\n        // subscription\n        let subscriptionParamsString = '';\n        if (collectionSettings.subscriptionParams && Object.keys(collectionSettings.subscriptionParams).length > 0) {\n            subscriptionParamsString = '(' +\n                Object\n                    .entries(collectionSettings.subscriptionParams)\n                    .map(([name, type]) => name + ': ' + type)\n                    .join(', ') +\n                ')';\n        }\n        const subscriptionName = prefixes.changed + ucCollectionName;\n        const subscriptionString = subscriptionName + subscriptionParamsString + ': ' + ucCollectionName;\n        ret.subscriptions.push(SPACING + subscriptionString);\n    });\n\n    // build full string\n    const fullQueryString = 'type Query {\\n' + ret.queries.join('\\n') + '\\n}\\n';\n    const fullMutationString = 'type Mutation {\\n' + ret.mutations.join('\\n') + '\\n}\\n';\n    const fullSubscriptionString = 'type Subscription {\\n' + ret.subscriptions.join('\\n') + '\\n}\\n';\n\n    const fullTypeString = ret.types.join('\\n');\n    const fullInputString = ret.inputs.join('\\n');\n\n    const fullSchemaString = '' +\n        'schema {\\n' +\n        SPACING + 'query: Query\\n' +\n        SPACING + 'mutation: Mutation\\n' +\n        SPACING + 'subscription: Subscription\\n' +\n        '}\\n';\n\n    ret.asString = '' +\n        fullQueryString + '\\n' +\n        fullMutationString + '\\n' +\n        fullSubscriptionString + '\\n' +\n        fullTypeString + '\\n' +\n        fullInputString + '\\n' +\n        fullSchemaString;\n\n    return ret;\n}\n\n\nexport function fillUpOptionals(\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection\n): GraphQLSchemaFromRxSchemaInputSingleCollection {\n\n    const schema = fillWithDefaultSettings(input.schema);\n    // strip internal attributes\n    Object.keys(schema.properties).forEach(key => {\n        if (key.startsWith('_')) {\n            delete schema.properties[key];\n        }\n    });\n    input.schema = schema;\n\n    // add deleted flag to schema\n    schema.properties[input.deletedFlag] = {\n        type: 'boolean'\n    };\n    (schema.required as string[]).push(input.deletedFlag);\n\n    // fill up prefixes\n    if (!input.prefixes) {\n        input.prefixes = {} as any;\n    }\n    const prefixes: Prefixes = input.prefixes as any;\n    if (!prefixes.set) {\n        prefixes.set = 'set';\n    }\n    if (!prefixes.feed) {\n        prefixes.feed = 'feed';\n    }\n    if (!prefixes.changed) {\n        prefixes.changed = 'changed';\n    }\n\n    if (!input.withRevisions) {\n        input.withRevisions = false;\n    }\n\n    if (!input.ignoreInputKeys) {\n        input.ignoreInputKeys = [];\n    }\n    if (!input.ignoreOutputKeys) {\n        input.ignoreOutputKeys = [];\n    }\n\n    return input;\n}\n\nfunction stripKeysFromSchema<T>(schema: RxJsonSchema<T>, strip: string[]): RxJsonSchema<Partial<T>> {\n    const cloned: any = clone(schema);\n    strip.forEach(key => {\n        delete cloned.properties[key];\n    });\n    return cloned;\n}\n\n/**\n * get-graphql-from-jsonschema add a T0-suffix\n * that we do not want for the top level type\n */\nfunction replaceTopLevelTypeName(str: string, ucCollectionName: string): string {\n    return str.replace(' ' + ucCollectionName + 'T0 ', ' ' + ucCollectionName + ' ');\n}\n"]}