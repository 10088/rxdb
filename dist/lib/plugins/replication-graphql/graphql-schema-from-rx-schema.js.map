{"version":3,"file":"graphql-schema-from-rx-schema.js","names":["SPACING","graphQLSchemaFromRxSchema","input","ret","asString","queries","mutations","subscriptions","inputs","types","Object","entries","forEach","collectionName","collectionSettings","fillUpOptionals","schema","prefixes","ucCollectionName","ucfirst","collectionNameInput","inputSchema","stripKeysFromSchema","ignoreInputKeys","inputGraphQL","getGraphqlSchemaFromJsonSchema","rootName","direction","concat","typeDefinitions","map","str","replaceTopLevelTypeName","outputSchema","ignoreOutputKeys","outputGraphQL","queryName","feed","queryKeys","feedKeys","key","subSchema","properties","graphqlType","scalarTypes","type","keyString","push","queryString","join","mutationName","set","mutationString","subscriptionParamsString","subscriptionParams","keys","length","name","subscriptionName","changed","subscriptionString","fullQueryString","fullMutationString","fullSubscriptionString","fullTypeString","fullInputString","fullSchemaString","fillWithDefaultSettings","startsWith","deletedFlag","required","withRevisions","strip","cloned","clone","replace"],"sources":["../../../../src/plugins/replication-graphql/graphql-schema-from-rx-schema.ts"],"sourcesContent":["import { getGraphqlSchemaFromJsonSchema } from 'get-graphql-from-jsonschema';\n\nimport { scalarTypes } from 'get-graphql-from-jsonschema/build/lib/scalarTypes';\nimport { fillWithDefaultSettings } from '../../rx-schema-helper';\n\nimport { RxJsonSchema } from '../../types';\nimport { clone, ucfirst } from '../../util';\n\nexport type Prefixes = {\n    set?: string;\n    feed?: string;\n    changed?: string;\n};\n\n/**\n * just type some common types\n * to have better IDE autocomplete,\n * all strings are allowed\n */\nexport type GraphQLParamType = 'ID' | 'ID!' | 'String' | 'String!' | 'Int' | 'Int!' | string;\n\nexport type GraphQLSchemaFromRxSchemaInputSingleCollection = {\n    schema: RxJsonSchema<any>;\n    deletedFlag: string;\n    // which keys must be send to the feed-query to get the newer documents?\n    feedKeys: string[];\n    ignoreInputKeys?: string[];\n    ignoreOutputKeys?: string[];\n    withRevisions?: boolean;\n    prefixes?: Prefixes;\n    subscriptionParams?: { [k: string]: GraphQLParamType }\n};\n\nexport type GraphQLSchemaFromRxSchemaInput = {\n    [collectionName: string]: GraphQLSchemaFromRxSchemaInputSingleCollection\n};\nexport type GraphQLSchemaFromRxSchemaOutput = {\n    asString: string;\n    queries: string[];\n    mutations: string[];\n    subscriptions: string[];\n    inputs: string[];\n    types: string[];\n};\n\n// we use two spaces because get-graphql-from-jsonschema does also\nexport const SPACING = '  ';\n\n/**\n * Create a GraphQL schema from a given RxJsonSchema\n */\nexport function graphQLSchemaFromRxSchema(\n    input: GraphQLSchemaFromRxSchemaInput\n): GraphQLSchemaFromRxSchemaOutput {\n    const ret: GraphQLSchemaFromRxSchemaOutput = {\n        asString: '',\n        queries: [],\n        mutations: [],\n        subscriptions: [],\n        inputs: [],\n        types: []\n    };\n\n\n    Object.entries(input).forEach(([collectionName, collectionSettings]) => {\n        collectionSettings = fillUpOptionals(collectionSettings);\n\n        const schema = collectionSettings.schema;\n        const prefixes: Prefixes = collectionSettings.prefixes as any;\n        const ucCollectionName = ucfirst(collectionName);\n        const collectionNameInput = ucfirst(collectionName) + 'Input';\n\n        // input\n        const inputSchema = stripKeysFromSchema(schema, collectionSettings.ignoreInputKeys as string[]);\n\n        const inputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: collectionNameInput,\n            schema: inputSchema as any,\n            direction: 'input'\n        });\n\n        ret.inputs = ret.inputs.concat(\n            inputGraphQL\n                .typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, collectionNameInput))\n        );\n\n        // output\n        const outputSchema = stripKeysFromSchema(schema, collectionSettings.ignoreOutputKeys as string[]);\n        const outputGraphQL = getGraphqlSchemaFromJsonSchema({\n            rootName: collectionName,\n            schema: outputSchema as any,\n            direction: 'output'\n        });\n        ret.types = ret.types.concat(\n            outputGraphQL.typeDefinitions\n                .map(str => replaceTopLevelTypeName(str, ucCollectionName))\n        );\n\n        // query\n        const queryName = prefixes.feed + ucCollectionName;\n        const queryKeys = collectionSettings.feedKeys.map(key => {\n            const subSchema: any = schema.properties[key];\n            const graphqlType = (scalarTypes as any)[subSchema.type];\n            const keyString = key + ': ' + graphqlType + '';\n            return keyString;\n        });\n        queryKeys.push('limit: Int!');\n        const queryString = queryName + '(' + queryKeys.join(', ') + '): [' + ucCollectionName + '!]!';\n        ret.queries.push(SPACING + queryString);\n\n        // mutation\n        const mutationName = prefixes.set + ucCollectionName;\n        const mutationString = mutationName + '(' + collectionName + ': [' + collectionNameInput + ']): ' + ucCollectionName;\n        ret.mutations.push(SPACING + mutationString);\n\n        // subscription\n        let subscriptionParamsString = '';\n        if (collectionSettings.subscriptionParams && Object.keys(collectionSettings.subscriptionParams).length > 0) {\n            subscriptionParamsString = '(' +\n                Object\n                    .entries(collectionSettings.subscriptionParams)\n                    .map(([name, type]) => name + ': ' + type)\n                    .join(', ') +\n                ')';\n        }\n        const subscriptionName = prefixes.changed + ucCollectionName;\n        const subscriptionString = subscriptionName + subscriptionParamsString + ': ' + ucCollectionName;\n        ret.subscriptions.push(SPACING + subscriptionString);\n    });\n\n    // build full string\n    const fullQueryString = 'type Query {\\n' + ret.queries.join('\\n') + '\\n}\\n';\n    const fullMutationString = 'type Mutation {\\n' + ret.mutations.join('\\n') + '\\n}\\n';\n    const fullSubscriptionString = 'type Subscription {\\n' + ret.subscriptions.join('\\n') + '\\n}\\n';\n\n    const fullTypeString = ret.types.join('\\n');\n    const fullInputString = ret.inputs.join('\\n');\n\n    const fullSchemaString = '' +\n        'schema {\\n' +\n        SPACING + 'query: Query\\n' +\n        SPACING + 'mutation: Mutation\\n' +\n        SPACING + 'subscription: Subscription\\n' +\n        '}\\n';\n\n    ret.asString = '' +\n        fullQueryString + '\\n' +\n        fullMutationString + '\\n' +\n        fullSubscriptionString + '\\n' +\n        fullTypeString + '\\n' +\n        fullInputString + '\\n' +\n        fullSchemaString;\n\n    return ret;\n}\n\n\nexport function fillUpOptionals(\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection\n): GraphQLSchemaFromRxSchemaInputSingleCollection {\n\n    const schema = fillWithDefaultSettings(input.schema);\n    // strip internal attributes\n    Object.keys(schema.properties).forEach(key => {\n        if (key.startsWith('_')) {\n            delete schema.properties[key];\n        }\n    });\n    input.schema = schema;\n\n    // add deleted flag to schema\n    schema.properties[input.deletedFlag] = {\n        type: 'boolean'\n    };\n    (schema.required as string[]).push(input.deletedFlag);\n\n    // fill up prefixes\n    if (!input.prefixes) {\n        input.prefixes = {} as any;\n    }\n    const prefixes: Prefixes = input.prefixes as any;\n    if (!prefixes.set) {\n        prefixes.set = 'set';\n    }\n    if (!prefixes.feed) {\n        prefixes.feed = 'feed';\n    }\n    if (!prefixes.changed) {\n        prefixes.changed = 'changed';\n    }\n\n    if (!input.withRevisions) {\n        input.withRevisions = false;\n    }\n\n    if (!input.ignoreInputKeys) {\n        input.ignoreInputKeys = [];\n    }\n    if (!input.ignoreOutputKeys) {\n        input.ignoreOutputKeys = [];\n    }\n\n    return input;\n}\n\nfunction stripKeysFromSchema<T>(schema: RxJsonSchema<T>, strip: string[]): RxJsonSchema<Partial<T>> {\n    const cloned: any = clone(schema);\n    strip.forEach(key => {\n        delete cloned.properties[key];\n    });\n    return cloned;\n}\n\n/**\n * get-graphql-from-jsonschema add a T0-suffix\n * that we do not want for the top level type\n */\nfunction replaceTopLevelTypeName(str: string, ucCollectionName: string): string {\n    return str.replace(' ' + ucCollectionName + 'T0 ', ' ' + ucCollectionName + ' ');\n}\n"],"mappings":"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"}