{"version":3,"sources":["../../../../src/plugins/replication-graphql/query-builder-from-rx-schema.ts"],"names":[],"mappings":"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","file":"query-builder-from-rx-schema.js","sourcesContent":["import {\n    GraphQLSchemaFromRxSchemaInputSingleCollection,\n    fillUpOptionals,\n    Prefixes,\n    SPACING\n} from './graphql-schema-from-rx-schema';\nimport { ucfirst } from '../../util';\nimport { RxGraphQLReplicationQueryBuilder } from '../../types';\nimport { newRxError } from '../../rx-error';\n\nexport function pullQueryBuilderFromRxSchema(\n    collectionName: string,\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection,\n    batchSize: number = 5\n): RxGraphQLReplicationQueryBuilder {\n    input = fillUpOptionals(input);\n    const schema = input.schema;\n    const prefixes: Prefixes = input.prefixes as any;\n\n    const ucCollectionName = ucfirst(collectionName);\n    const queryName = prefixes.feed + ucCollectionName;\n\n    const outputFields = Object.keys(schema.properties).filter(k => !(input.ignoreOutputKeys as string[]).includes(k));\n    outputFields.push(input.deletedFlag);\n\n    const builder: RxGraphQLReplicationQueryBuilder = (doc: any) => {\n\n        const queryKeys = input.feedKeys.map(key => {\n            const subSchema: any = schema.properties[key];\n            if (!subSchema) {\n                throw newRxError('GQL1', {\n                    document: doc,\n                    schema,\n                    key,\n                    args: {\n                        feedKeys: input.feedKeys\n                    }\n                });\n            }\n            const type = subSchema.type;\n            const value = doc ? doc[key] : null;\n            let keyString = key + ': ';\n            if (type === 'number' || type === 'integer' || !value) {\n                keyString += value;\n            } else {\n                keyString += '\"' + value + '\"';\n            }\n            return keyString;\n        });\n        queryKeys.push('limit: ' + batchSize);\n\n        const query = '' +\n            '{\\n' +\n            SPACING + queryName + '(' + queryKeys.join(', ') + ') {\\n' +\n            SPACING + SPACING + outputFields.join('\\n' + SPACING + SPACING) + '\\n' +\n            SPACING + '}\\n' +\n            '}';\n        return {\n            query,\n            variables: {}\n        };\n    };\n\n    return builder;\n}\n\n\nexport function pushQueryBuilderFromRxSchema(\n    collectionName: string,\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection\n): RxGraphQLReplicationQueryBuilder {\n    input = fillUpOptionals(input);\n    const prefixes: Prefixes = input.prefixes as any;\n\n    const ucCollectionName = ucfirst(collectionName);\n    const queryName = prefixes.set + ucCollectionName;\n\n    const builder: RxGraphQLReplicationQueryBuilder = (doc: any) => {\n        const query = '' +\n            'mutation Set' + ucCollectionName + '($' + collectionName + ': ' + ucCollectionName + 'Input) {\\n' +\n            SPACING + queryName + '(' + collectionName + ': $' + collectionName + ') {\\n' +\n            SPACING + SPACING + input.deletedFlag + '\\n' + // GraphQL enforces to return at least one field\n            SPACING + '}\\n' +\n            '}';\n\n        const sendDoc: any = {};\n        Object.entries(doc).forEach(([k, v]) => {\n            if (\n                // skip if in ignoreInputKeys list\n                !(input.ignoreInputKeys as string[]).includes(k) &&\n                // only use properties that are in the schema\n                input.schema.properties[k]\n            ) {\n                sendDoc[k] = v;\n            }\n        });\n\n        // add deleted flag\n        sendDoc[input.deletedFlag] = !!doc._deleted;\n\n        const variables = {\n            [collectionName]: sendDoc\n        };\n        return {\n            query,\n            variables\n        };\n    };\n\n    return builder;\n}\n"]}