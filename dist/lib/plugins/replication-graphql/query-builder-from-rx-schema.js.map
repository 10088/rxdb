{"version":3,"file":"query-builder-from-rx-schema.js","names":["pullQueryBuilderFromRxSchema","collectionName","input","batchSize","schema","prefixes","ucCollectionName","queryName","feed","outputFields","Object","keys","properties","filter","k","ignoreOutputKeys","includes","push","deletedFlag","builder","doc","queryKeys","feedKeys","map","key","subSchema","document","args","type","value","keyString","query","SPACING","join","variables","pushQueryBuilderFromRxSchema","primaryKey","set","docs","sendDocs","forEach","sendDoc","entries","v","ignoreInputKeys"],"sources":["../../../../src/plugins/replication-graphql/query-builder-from-rx-schema.ts"],"sourcesContent":["import {\n    GraphQLSchemaFromRxSchemaInputSingleCollection,\n    fillUpOptionals,\n    Prefixes,\n    SPACING\n} from './graphql-schema-from-rx-schema';\nimport { ucfirst } from '../../util';\nimport type {\n    RxGraphQLReplicationPullQueryBuilder,\n    RxGraphQLReplicationPushQueryBuilder\n} from '../../types';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\n\nexport function pullQueryBuilderFromRxSchema(\n    collectionName: string,\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection,\n    batchSize: number\n): RxGraphQLReplicationPullQueryBuilder<any> {\n    input = fillUpOptionals(input);\n    const schema = input.schema;\n    const prefixes: Prefixes = input.prefixes as any;\n\n    const ucCollectionName = ucfirst(collectionName);\n    const queryName = prefixes.feed + ucCollectionName;\n\n    const outputFields = Object.keys(schema.properties).filter(k => !(input.ignoreOutputKeys as string[]).includes(k));\n    outputFields.push(input.deletedFlag);\n\n    const builder: RxGraphQLReplicationPullQueryBuilder<any> = (doc: any) => {\n\n        const queryKeys = input.feedKeys.map(key => {\n            const subSchema: any = schema.properties[key];\n            if (!subSchema) {\n                throw newRxError('GQL1', {\n                    document: doc,\n                    schema,\n                    key,\n                    args: {\n                        feedKeys: input.feedKeys\n                    }\n                });\n            }\n            const type = subSchema.type;\n            const value = doc ? doc[key] : null;\n            let keyString = key + ': ';\n            if (type === 'number' || type === 'integer' || !value) {\n                keyString += value;\n            } else {\n                keyString += '\"' + value + '\"';\n            }\n            return keyString;\n        });\n        queryKeys.push('limit: ' + batchSize);\n\n        const query = '' +\n            '{\\n' +\n            SPACING + queryName + '(' + queryKeys.join(', ') + ') {\\n' +\n            SPACING + SPACING + outputFields.join('\\n' + SPACING + SPACING) + '\\n' +\n            SPACING + '}\\n' +\n            '}';\n        return {\n            query,\n            variables: {}\n        };\n    };\n\n    return builder;\n}\n\n\nexport function pushQueryBuilderFromRxSchema(\n    collectionName: string,\n    input: GraphQLSchemaFromRxSchemaInputSingleCollection\n): RxGraphQLReplicationPushQueryBuilder {\n    const primaryKey = getPrimaryFieldOfPrimaryKey(input.schema.primaryKey);\n    input = fillUpOptionals(input);\n    const prefixes: Prefixes = input.prefixes as any;\n\n    const ucCollectionName = ucfirst(collectionName);\n    const queryName = prefixes.set + ucCollectionName;\n\n    const builder: RxGraphQLReplicationPushQueryBuilder = (docs: any[]) => {\n        const query = '' +\n            'mutation Set' + ucCollectionName + '($' + collectionName + ': [' + ucCollectionName + 'Input]) {\\n' +\n            SPACING + queryName + '(' + collectionName + ': $' + collectionName + ') {\\n' +\n            SPACING + SPACING + primaryKey + '\\n' + // GraphQL enforces to return at least one field\n            SPACING + '}\\n' +\n            '}';\n\n        const sendDocs: any[] = [];\n        docs.forEach(doc => {\n            const sendDoc: any = {};\n            Object.entries(doc).forEach(([k, v]) => {\n                if (\n                    // skip if in ignoreInputKeys list\n                    !(input.ignoreInputKeys as string[]).includes(k) &&\n                    // only use properties that are in the schema\n                    input.schema.properties[k]\n                ) {\n                    sendDoc[k] = v;\n                }\n            });\n            sendDocs.push(sendDoc);\n        });\n        const variables = {\n            [collectionName]: sendDocs\n        };\n        return {\n            query,\n            variables\n        };\n    };\n\n    return builder;\n}\n"],"mappings":"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"}