{"version":3,"file":"file-util.js","names":["setMeta","options","meta","loc","metaFileLocation","writeJsonToFile","getMeta","Promise","res","rej","fs","readFile","err","data","metaContent","JSON","parse","location","writeToFile","stringify","writeFile","ensureFolderExists","folderPath","existsSync","mkdirSync","recursive","clearFolder","deleteFolder","rmdirSync","prepareFolders","database","directory","metaLoc","currentTime","metaData","createdAt","updatedAt","collectionStates","writeFileSync","Object","keys","collections","forEach","collectionName","path","join","documentFolder","docId"],"sources":["../../../../src/plugins/backup/file-util.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport {\n    BackupMetaFileContent,\n    BackupOptions,\n    RxDatabase\n} from '../../types';\nimport { now } from '../../util';\n\n/**\n * ensure that the given folder exists\n */\nexport function ensureFolderExists(folderPath: string): void {\n    if (!fs.existsSync(folderPath)) {\n        fs.mkdirSync(folderPath, { recursive: true });\n    }\n}\n\n/**\n * deletes and recreates the folder\n */\nexport function clearFolder(folderPath: string): void {\n    deleteFolder(folderPath);\n    ensureFolderExists(folderPath);\n}\n\nexport function deleteFolder(folderPath: string): void {\n    // only remove if exists to not raise warning\n    if (fs.existsSync(folderPath)) {\n        fs.rmdirSync(folderPath, { recursive: true });\n    }\n}\n\nexport function prepareFolders(\n    database: RxDatabase,\n    options: BackupOptions\n) {\n    ensureFolderExists(options.directory);\n\n    const metaLoc = metaFileLocation(options);\n\n    if (!fs.existsSync(metaLoc)) {\n        const currentTime = now();\n        const metaData: BackupMetaFileContent = {\n            createdAt: currentTime,\n            updatedAt: currentTime,\n            collectionStates: {}\n        };\n        fs.writeFileSync(metaLoc, JSON.stringify(metaData), 'utf-8');\n    }\n\n    Object.keys(database.collections).forEach(collectionName => {\n        ensureFolderExists(\n            path.join(\n                options.directory,\n                collectionName\n            )\n        );\n    });\n}\n\nexport async function writeToFile(\n    location: string,\n    data: string | Buffer\n): Promise<void> {\n    return new Promise(function (res, rej) {\n        fs.writeFile(\n            location,\n            data,\n            'utf-8',\n            (err) => {\n                if (err) {\n                    rej(err);\n                } else {\n                    res();\n                }\n            }\n        );\n    });\n}\n\nexport async function writeJsonToFile(\n    location: string,\n    data: any\n): Promise<void> {\n    return writeToFile(\n        location,\n        JSON.stringify(data)\n    );\n}\n\nexport function metaFileLocation(options: BackupOptions): string {\n    return path.join(\n        options.directory,\n        'backup_meta.json'\n    );\n}\n\nexport async function getMeta(options: BackupOptions): Promise<BackupMetaFileContent> {\n    const loc = metaFileLocation(options);\n    return new Promise((res, rej) => {\n        fs.readFile(loc, 'utf-8', (err, data) => {\n            if (err) {\n                rej(err);\n            } else {\n                const metaContent = JSON.parse(data);\n                res(metaContent);\n            }\n        });\n    });\n}\n\nexport async function setMeta(\n    options: BackupOptions,\n    meta: BackupMetaFileContent\n): Promise<void> {\n    const loc = metaFileLocation(options);\n    return writeJsonToFile(loc, meta);\n}\n\nexport function documentFolder(\n    options: BackupOptions,\n    docId: string\n): string {\n    return path.join(\n        options.directory,\n        docId\n    );\n}\n"],"mappings":"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"}