{"version":3,"file":"file-util.js","names":["ensureFolderExists","folderPath","fs","existsSync","mkdirSync","recursive","clearFolder","deleteFolder","rmdirSync","prepareFolders","database","options","directory","metaLoc","metaFileLocation","currentTime","now","metaData","createdAt","updatedAt","collectionStates","writeFileSync","JSON","stringify","Object","keys","collections","forEach","collectionName","path","join","writeToFile","location","data","Promise","res","rej","writeFile","err","writeJsonToFile","getMeta","loc","readFile","metaContent","parse","setMeta","meta","documentFolder","docId"],"sources":["../../../../src/plugins/backup/file-util.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport {\n    BackupMetaFileContent,\n    BackupOptions,\n    RxDatabase\n} from '../../types';\nimport { now } from '../../util';\n\n/**\n * ensure that the given folder exists\n */\nexport function ensureFolderExists(folderPath: string): void {\n    if (!fs.existsSync(folderPath)) {\n        fs.mkdirSync(folderPath, { recursive: true });\n    }\n}\n\n/**\n * deletes and recreates the folder\n */\nexport function clearFolder(folderPath: string): void {\n    deleteFolder(folderPath);\n    ensureFolderExists(folderPath);\n}\n\nexport function deleteFolder(folderPath: string): void {\n    // only remove if exists to not raise warning\n    if (fs.existsSync(folderPath)) {\n        fs.rmdirSync(folderPath, { recursive: true });\n    }\n}\n\nexport function prepareFolders(\n    database: RxDatabase,\n    options: BackupOptions\n) {\n    ensureFolderExists(options.directory);\n\n    const metaLoc = metaFileLocation(options);\n\n    if (!fs.existsSync(metaLoc)) {\n        const currentTime = now();\n        const metaData: BackupMetaFileContent = {\n            createdAt: currentTime,\n            updatedAt: currentTime,\n            collectionStates: {}\n        };\n        fs.writeFileSync(metaLoc, JSON.stringify(metaData), 'utf-8');\n    }\n\n    Object.keys(database.collections).forEach(collectionName => {\n        ensureFolderExists(\n            path.join(\n                options.directory,\n                collectionName\n            )\n        );\n    });\n}\n\nexport function writeToFile(\n    location: string,\n    data: string | Buffer\n): Promise<void> {\n    return new Promise(function (res, rej) {\n        fs.writeFile(\n            location,\n            data,\n            'utf-8',\n            (err) => {\n                if (err) {\n                    rej(err);\n                } else {\n                    res();\n                }\n            }\n        );\n    });\n}\n\nexport function writeJsonToFile(\n    location: string,\n    data: any\n): Promise<void> {\n    return writeToFile(\n        location,\n        JSON.stringify(data)\n    );\n}\n\nexport function metaFileLocation(options: BackupOptions): string {\n    return path.join(\n        options.directory,\n        'backup_meta.json'\n    );\n}\n\nexport function getMeta(options: BackupOptions): Promise<BackupMetaFileContent> {\n    const loc = metaFileLocation(options);\n    return new Promise((res, rej) => {\n        fs.readFile(loc, 'utf-8', (err, data) => {\n            if (err) {\n                rej(err);\n            } else {\n                const metaContent = JSON.parse(data);\n                res(metaContent);\n            }\n        });\n    });\n}\n\nexport function setMeta(\n    options: BackupOptions,\n    meta: BackupMetaFileContent\n): Promise<void> {\n    const loc = metaFileLocation(options);\n    return writeJsonToFile(loc, meta);\n}\n\nexport function documentFolder(\n    options: BackupOptions,\n    docId: string\n): string {\n    return path.join(\n        options.directory,\n        docId\n    );\n}\n"],"mappings":"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"}