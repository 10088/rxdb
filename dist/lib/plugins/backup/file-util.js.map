{"version":3,"sources":["../../../../src/plugins/backup/file-util.ts"],"names":[],"mappings":"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","file":"file-util.js","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport {\n    BackupMetaFileContent,\n    BackupOptions,\n    RxDatabase\n} from '../../types';\nimport { now } from '../../util';\n\n/**\n * ensure that the given folder exists\n */\nexport function ensureFolderExists(folderPath: string): void {\n    if (!fs.existsSync(folderPath)) {\n        fs.mkdirSync(folderPath, { recursive: true });\n    }\n}\n\n/**\n * deletes and recreates the folder\n */\nexport function clearFolder(folderPath: string): void {\n    deleteFolder(folderPath);\n    ensureFolderExists(folderPath);\n}\n\nexport function deleteFolder(folderPath: string): void {\n    // only remove if exists to not raise warning\n    if (fs.existsSync(folderPath)) {\n        fs.rmdirSync(folderPath, { recursive: true });\n    }\n}\n\nexport function prepareFolders(\n    database: RxDatabase,\n    options: BackupOptions\n) {\n    ensureFolderExists(options.directory);\n\n    const metaLoc = metaFileLocation(options);\n\n    if (!fs.existsSync(metaLoc)) {\n        const currentTime = now();\n        const metaData: BackupMetaFileContent = {\n            createdAt: currentTime,\n            updatedAt: currentTime,\n            collectionStates: {}\n        };\n        fs.writeFileSync(metaLoc, JSON.stringify(metaData), 'utf-8');\n    }\n\n    Object.keys(database.collections).forEach(collectionName => {\n        ensureFolderExists(\n            path.join(\n                options.directory,\n                collectionName\n            )\n        );\n    });\n}\n\nexport async function writeToFile(\n    location: string,\n    data: string | Buffer\n): Promise<void> {\n    return new Promise(function (res, rej) {\n        fs.writeFile(\n            location,\n            data,\n            'utf-8',\n            (err) => {\n                if (err) {\n                    rej(err);\n                } else {\n                    res();\n                }\n            }\n        );\n    });\n}\n\nexport async function writeJsonToFile(\n    location: string,\n    data: any\n): Promise<void> {\n    return writeToFile(\n        location,\n        JSON.stringify(data)\n    );\n}\n\nexport function metaFileLocation(options: BackupOptions): string {\n    return path.join(\n        options.directory,\n        'backup_meta.json'\n    );\n}\n\nexport async function getMeta(options: BackupOptions): Promise<BackupMetaFileContent> {\n    const loc = metaFileLocation(options);\n    return new Promise((res, rej) => {\n        fs.readFile(loc, 'utf-8', (err, data) => {\n            if (err) {\n                rej(err);\n            } else {\n                const metaContent = JSON.parse(data);\n                res(metaContent);\n            }\n        });\n    });\n}\n\nexport async function setMeta(\n    options: BackupOptions,\n    meta: BackupMetaFileContent\n): Promise<void> {\n    const loc = metaFileLocation(options);\n    return writeJsonToFile(loc, meta);\n}\n\nexport function documentFolder(\n    options: BackupOptions,\n    docId: string\n): string {\n    return path.join(\n        options.directory,\n        docId\n    );\n}\n"]}