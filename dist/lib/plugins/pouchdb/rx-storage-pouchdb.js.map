{"version":3,"sources":["../../../../src/plugins/pouchdb/rx-storage-pouchdb.ts"],"names":["RxStoragePouch","adapter","pouchSettings","name","checkPouchAdapter","hash","data","createPouch","location","options","pouchDbParameters","settings","pouchDBOptions","Object","assign","pouch","PouchDB","createStorageInstance","params","pouchLocation","getPouchLocation","databaseName","collectionName","schema","version","createIndexesOnPouch","RxStorageInstancePouch","createKeyObjectStorageInstance","useOptions","auto_compaction","revs_limit","RxStorageKeyObjectInstancePouch","adapters","leveldb","indexes","primaryKey","getIndexes","before","existingIndexes","Set","map","idx","Promise","all","indexMaybeArray","indexArray","Array","isArray","key","indexName","join","has","createIndex","ddoc","index","fields","dbName","schemaVersion","prefix","includes","split","last","pop","ret","getRxStoragePouch","Error","storage"],"mappings":"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","sourcesContent":["\nimport type {\n    PouchDBInstance,\n    PouchSettings,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    RxStorage,\n    RxKeyObjectStorageInstanceCreationParams,\n} from '../../types';\n\nimport {\n    flatClone,\n    adapterObject\n} from '../../util';\nimport {\n    isLevelDown,\n    PouchDB\n} from './pouch-db';\nimport { newRxError } from '../../rx-error';\n\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport { RxStorageInstancePouch } from './rx-storage-instance-pouch';\nimport { RxStorageKeyObjectInstancePouch } from './rx-storage-key-object-instance-pouch';\nimport { pouchHash, PouchStorageInternals } from './pouchdb-helper';\n\nexport class RxStoragePouch implements RxStorage<PouchStorageInternals, PouchSettings> {\n    public name: string = 'pouchdb';\n\n    constructor(\n        public adapter: any,\n        public pouchSettings: PouchSettings = {}\n    ) {\n        checkPouchAdapter(adapter);\n    }\n\n    /**\n     * create the same diggest as an attachment with that data\n     * would have created by pouchdb internally.\n     */\n    public hash(data: Buffer | Blob | string): Promise<string> {\n        return pouchHash(data);\n    }\n\n    private async createPouch(\n        location: string,\n        options: PouchSettings\n    ): Promise<PouchDBInstance> {\n        const pouchDbParameters = {\n            location: location,\n            adapter: adapterObject(this.adapter),\n            settings: options\n        };\n        const pouchDBOptions = Object.assign(\n            {},\n            pouchDbParameters.adapter,\n            this.pouchSettings,\n            pouchDbParameters.settings\n        );\n\n        const pouch = new PouchDB(\n            pouchDbParameters.location,\n            pouchDBOptions\n        ) as PouchDBInstance;\n\n        /**\n         * In the past we found some errors where the PouchDB is not directly useable\n         * so we we had to call .info() first to ensure it can be used.\n         * I commented this out for now to get faster database/collection creation.\n         * We might have to add this again if something fails.\n         */\n        // await pouch.info();\n\n        return pouch;\n    }\n\n    public async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, PouchSettings>\n    ): Promise<RxStorageInstancePouch<RxDocType>> {\n        const pouchLocation = getPouchLocation(\n            params.databaseName,\n            params.collectionName,\n            params.schema.version\n        );\n        const pouch = await this.createPouch(\n            pouchLocation,\n            params.options\n        );\n        await createIndexesOnPouch(pouch, params.schema);\n        return new RxStorageInstancePouch(\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                pouch\n            },\n            params.options\n        );\n    }\n\n    public async createKeyObjectStorageInstance(\n        params: RxKeyObjectStorageInstanceCreationParams<PouchSettings>\n    ): Promise<RxStorageKeyObjectInstancePouch> {\n        const useOptions = flatClone(params.options);\n        // no compaction because this only stores local documents\n        useOptions.auto_compaction = false;\n        useOptions.revs_limit = 1;\n\n        /**\n         * TODO shouldnt we use a different location\n         * for the local storage? Or at least make sure we\n         * reuse the same pouchdb instance?\n         */\n        const pouchLocation = getPouchLocation(\n            params.databaseName,\n            params.collectionName,\n            0\n        );\n        const pouch = await this.createPouch(\n            pouchLocation,\n            params.options\n        );\n\n        return new RxStorageKeyObjectInstancePouch(\n            params.databaseName,\n            params.collectionName,\n            {\n                pouch\n            },\n            params.options\n        );\n    }\n}\n\n/**\n * Checks if all is ok with the given adapter,\n * else throws an error.\n */\nexport function checkPouchAdapter(adapter: string | any) {\n    if (typeof adapter === 'string') {\n        // TODO make a function hasAdapter()\n        if (!(PouchDB as any).adapters || !(PouchDB as any).adapters[adapter]) {\n            throw newRxError('DB9', {\n                adapter\n            });\n        }\n    } else {\n        isLevelDown(adapter);\n        if (!(PouchDB as any).adapters || !(PouchDB as any).adapters.leveldb) {\n            throw newRxError('DB10', {\n                adapter\n            });\n        }\n    }\n}\n\n/**\n * Creates the indexes of the schema inside of the pouchdb instance.\n * Will skip indexes that already exist.\n */\nexport async function createIndexesOnPouch(\n    pouch: PouchDBInstance,\n    schema: RxJsonSchema<any>\n): Promise<void> {\n    if (!schema.indexes) {\n        return;\n    }\n\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const before = await pouch.getIndexes();\n    const existingIndexes: Set<string> = new Set(\n        before.indexes.map(idx => idx.name)\n    );\n\n    await Promise.all(\n        schema.indexes.map(async (indexMaybeArray) => {\n            let indexArray: string[] = Array.isArray(indexMaybeArray) ? indexMaybeArray : [indexMaybeArray];\n\n            /**\n             * replace primary key with _id\n             * because that is the enforced primary key on pouchdb.\n             */\n            indexArray = indexArray.map(key => {\n                if (key === primaryKey) {\n                    return '_id';\n                } else {\n                    return key;\n                }\n            });\n\n            const indexName = 'idx-rxdb-index-' + indexArray.join(',');\n            if (existingIndexes.has(indexName)) {\n                // index already exists\n                return;\n            }\n            /**\n             * TODO we might have even better performance by doing a bulkDocs\n             * on index creation\n             */\n            return pouch.createIndex({\n                name: indexName,\n                ddoc: indexName,\n                index: {\n                    fields: indexArray\n                }\n            });\n        })\n    );\n}\n\n/**\n * returns the pouchdb-database-name\n */\nexport function getPouchLocation(\n    dbName: string,\n    collectionName: string,\n    schemaVersion: number\n): string {\n    const prefix = dbName + '-rxdb-' + schemaVersion + '-';\n    if (!collectionName.includes('/')) {\n        return prefix + collectionName;\n    } else {\n        // if collectionName is a path, we have to prefix the last part only\n        const split = collectionName.split('/');\n        const last = split.pop();\n\n        let ret = split.join('/');\n        ret += '/' + prefix + last;\n        return ret;\n    }\n}\n\nexport function getRxStoragePouch(\n    adapter: any,\n    pouchSettings?: PouchSettings\n): RxStoragePouch {\n    if (!adapter) {\n        throw new Error('adapter missing');\n    }\n    const storage = new RxStoragePouch(adapter, pouchSettings);\n    return storage;\n}\n"],"file":"rx-storage-pouchdb.js"}