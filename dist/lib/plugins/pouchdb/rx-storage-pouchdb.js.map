{"version":3,"sources":["../../../../src/plugins/pouchdb/rx-storage-pouchdb.ts"],"names":[],"mappings":"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","file":"rx-storage-pouchdb.js","sourcesContent":["\nimport type {\n    PouchDBInstance,\n    PouchSettings,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    RxStorage,\n    RxKeyObjectStorageInstanceCreationParams,\n} from '../../types';\n\nimport {\n    flatClone,\n    adapterObject\n} from '../../util';\nimport {\n    isLevelDown,\n    PouchDB\n} from './pouch-db';\nimport { newRxError } from '../../rx-error';\n\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport { RxStorageInstancePouch } from './rx-storage-instance-pouch';\nimport { RxStorageKeyObjectInstancePouch } from './rx-storage-key-object-instance-pouch';\nimport { pouchHash, PouchStorageInternals } from './pouchdb-helper';\n\nexport class RxStoragePouch implements RxStorage<PouchStorageInternals, PouchSettings> {\n    public name: string = 'pouchdb';\n\n    constructor(\n        public adapter: any,\n        public pouchSettings: PouchSettings = {}\n    ) {\n        checkPouchAdapter(adapter);\n    }\n\n    /**\n     * create the same diggest as an attachment with that data\n     * would have created by pouchdb internally.\n     */\n    public hash(data: Buffer | Blob | string): Promise<string> {\n        return pouchHash(data);\n    }\n\n    private async createPouch(\n        location: string,\n        options: PouchSettings\n    ): Promise<PouchDBInstance> {\n        const pouchDbParameters = {\n            location: location,\n            adapter: adapterObject(this.adapter),\n            settings: options\n        };\n        const pouchDBOptions = Object.assign(\n            {},\n            pouchDbParameters.adapter,\n            this.pouchSettings,\n            pouchDbParameters.settings\n        );\n\n        const pouch = new PouchDB(\n            pouchDbParameters.location,\n            pouchDBOptions\n        ) as PouchDBInstance;\n\n        /**\n         * In the past we found some errors where the PouchDB is not directly useable\n         * so we we had to call .info() first to ensure it can be used.\n         * I commented this out for now to get faster database/collection creation.\n         * We might have to add this again if something fails.\n         */\n        // await pouch.info();\n\n        return pouch;\n    }\n\n    public async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, PouchSettings>\n    ): Promise<RxStorageInstancePouch<RxDocType>> {\n        const pouchLocation = getPouchLocation(\n            params.databaseName,\n            params.collectionName,\n            params.schema.version\n        );\n        const pouch = await this.createPouch(\n            pouchLocation,\n            params.options\n        );\n        await createIndexesOnPouch(pouch, params.schema);\n        return new RxStorageInstancePouch(\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                pouch\n            },\n            params.options\n        );\n    }\n\n    public async createKeyObjectStorageInstance(\n        params: RxKeyObjectStorageInstanceCreationParams<PouchSettings>\n    ): Promise<RxStorageKeyObjectInstancePouch> {\n        const useOptions = flatClone(params.options);\n        // no compaction because this only stores local documents\n        useOptions.auto_compaction = false;\n        useOptions.revs_limit = 1;\n\n        /**\n         * TODO shouldnt we use a different location\n         * for the local storage? Or at least make sure we\n         * reuse the same pouchdb instance?\n         */\n        const pouchLocation = getPouchLocation(\n            params.databaseName,\n            params.collectionName,\n            0\n        );\n        const pouch = await this.createPouch(\n            pouchLocation,\n            params.options\n        );\n\n        return new RxStorageKeyObjectInstancePouch(\n            params.databaseName,\n            params.collectionName,\n            {\n                pouch\n            },\n            params.options\n        );\n    }\n}\n\n/**\n * Checks if all is ok with the given adapter,\n * else throws an error.\n */\nexport function checkPouchAdapter(adapter: string | any) {\n    if (typeof adapter === 'string') {\n        // TODO make a function hasAdapter()\n        if (!(PouchDB as any).adapters || !(PouchDB as any).adapters[adapter]) {\n            throw newRxError('DB9', {\n                adapter\n            });\n        }\n    } else {\n        isLevelDown(adapter);\n        if (!(PouchDB as any).adapters || !(PouchDB as any).adapters.leveldb) {\n            throw newRxError('DB10', {\n                adapter\n            });\n        }\n    }\n}\n\n/**\n * Creates the indexes of the schema inside of the pouchdb instance.\n * Will skip indexes that already exist.\n */\nexport async function createIndexesOnPouch(\n    pouch: PouchDBInstance,\n    schema: RxJsonSchema<any>\n): Promise<void> {\n    if (!schema.indexes) {\n        return;\n    }\n\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const before = await pouch.getIndexes();\n    const existingIndexes: Set<string> = new Set(\n        before.indexes.map(idx => idx.name)\n    );\n\n    await Promise.all(\n        schema.indexes.map(async (indexMaybeArray) => {\n            let indexArray: string[] = Array.isArray(indexMaybeArray) ? indexMaybeArray : [indexMaybeArray];\n\n            /**\n             * replace primary key with _id\n             * because that is the enforced primary key on pouchdb.\n             */\n            indexArray = indexArray.map(key => {\n                if (key === primaryKey) {\n                    return '_id';\n                } else {\n                    return key;\n                }\n            });\n\n            const indexName = 'idx-rxdb-index-' + indexArray.join(',');\n            if (existingIndexes.has(indexName)) {\n                // index already exists\n                return;\n            }\n            /**\n             * TODO we might have even better performance by doing a bulkDocs\n             * on index creation\n             */\n            return pouch.createIndex({\n                name: indexName,\n                ddoc: indexName,\n                index: {\n                    fields: indexArray\n                }\n            });\n        })\n    );\n}\n\n/**\n * returns the pouchdb-database-name\n */\nexport function getPouchLocation(\n    dbName: string,\n    collectionName: string,\n    schemaVersion: number\n): string {\n    const prefix = dbName + '-rxdb-' + schemaVersion + '-';\n    if (!collectionName.includes('/')) {\n        return prefix + collectionName;\n    } else {\n        // if collectionName is a path, we have to prefix the last part only\n        const split = collectionName.split('/');\n        const last = split.pop();\n\n        let ret = split.join('/');\n        ret += '/' + prefix + last;\n        return ret;\n    }\n}\n\nexport function getRxStoragePouch(\n    adapter: any,\n    pouchSettings?: PouchSettings\n): RxStoragePouch {\n    if (!adapter) {\n        throw new Error('adapter missing');\n    }\n    const storage = new RxStoragePouch(adapter, pouchSettings);\n    return storage;\n}\n"]}