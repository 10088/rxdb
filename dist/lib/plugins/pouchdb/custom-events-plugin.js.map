{"version":3,"sources":["../../../../src/plugins/pouchdb/custom-events-plugin.ts"],"names":[],"mappings":"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","file":"custom-events-plugin.js","sourcesContent":["/*\n * Instead of listening to pouch.changes,\n * we overwrite pouchdbs bulkDocs()\n * and create our own event stream, this will work more reliable\n * and has less strange behaviors.\n * Also we can better define what data we need for our events.\n * @link http://jsbin.com/pagebi/1/edit?js,output\n * @link https://github.com/pubkey/rxdb/blob/1f4115b69bdacbb853af9c637d70f5f184d4e474/src/rx-storage-pouchdb.ts#L273\n */\n\nimport type {\n    PouchBulkDocOptions,\n    PouchBulkDocResultRow,\n    PouchDBInstance,\n    PouchWriteError\n} from '../../types';\nimport PouchDBCore from 'pouchdb-core';\nimport { Subject } from 'rxjs';\nimport {\n    flatClone,\n    now\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { ObliviousSet } from 'oblivious-set';\n\n// ensure only added once\nlet addedToPouch = false;\n\ndeclare type EmitData = {\n    emitId: number;\n    writeOptions: PouchBulkDocOptions;\n    writeDocs: any[];\n    writeResult: (PouchBulkDocResultRow | PouchWriteError)[];\n    // used on new_edits=false to check if the last revision has changed\n    previousDocs: Map<string, any>;\n    startTime: number;\n    endTime: number;\n};\n\n\ndeclare type Emitter = {\n    subject: Subject<EmitData>;\n    /**\n     * Contains all eventIds that of emitted events,\n     * used because multi-instance pouchdbs often will reemit the same\n     * event on the other browser tab.\n     */\n    obliviousSet: ObliviousSet<string>;\n};\nexport const EVENT_EMITTER_BY_POUCH_INSTANCE: Map<string, Emitter> = new Map();\n\nexport function getCustomEventEmitterByPouch(\n    pouch: PouchDBInstance\n): Emitter {\n    const key = [\n        pouch.name,\n        pouch.adapter\n    ].join('|');\n    let emitter = EVENT_EMITTER_BY_POUCH_INSTANCE.get(key);\n    if (!emitter) {\n        emitter = {\n            subject: new Subject(),\n            obliviousSet: new ObliviousSet(60 * 1000)\n        };\n        EVENT_EMITTER_BY_POUCH_INSTANCE.set(key, emitter);\n    }\n    return emitter;\n}\n\n\nlet i = 0;\n\nexport function addCustomEventsPluginToPouch() {\n    if (addedToPouch) {\n        return;\n    }\n    addedToPouch = true;\n\n    const oldBulkDocs: any = PouchDBCore.prototype.bulkDocs;\n    const newBulkDocs = async function (\n        this: PouchDBInstance,\n        body: any[] | { docs: any[], new_edits?: boolean },\n        options: PouchBulkDocOptions,\n        callback: Function\n    ) {\n        const startTime = now();\n        const t = i++;\n\n        // normalize input\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n        if (!options) {\n            options = {};\n        }\n\n        let docs: any[];\n        if (Array.isArray(body)) {\n            docs = body;\n        } else if (body === undefined) {\n            docs = [];\n        } else {\n            docs = body.docs;\n            if (body.hasOwnProperty('new_edits')) {\n                options.new_edits = body.new_edits;\n            }\n        }\n\n        if (docs.length === 0) {\n            throw newRxError('SNH', {\n                args: {\n                    body,\n                    options\n                }\n            });\n        }\n\n\n        /**\n         * If new_edits=false we have to first find the current state\n         * of the document and can later check if the state was changed\n         * because a new revision was written and we have to emit an event.\n         */\n        const previousDocs: Map<string, any> = new Map();\n        if (\n            options.hasOwnProperty('new_edits') &&\n            options.new_edits === false\n        ) {\n            const ids = docs.map(doc => doc._id);\n\n            /**\n             * Pouchdb does not return deleted documents via allDocs()\n             * So have to do use our hack with getting the newest revisions from the\n             * changes.\n             */\n            const viaChanges = await this.changes({\n                live: false,\n                since: 0,\n                doc_ids: ids,\n                style: 'all_docs'\n            });\n\n            const previousDocsResult = await Promise.all(\n                viaChanges.results.map(async (result) => {\n                    const firstDoc = await this.get(\n                        result.id,\n                        {\n                            rev: result.changes[0].rev,\n                            deleted: 'ok',\n                            revs: options.set_new_edit_as_latest_revision ? true : false,\n                            style: 'all_docs'\n                        }\n                    );\n                    return firstDoc;\n                })\n            );\n            previousDocsResult.forEach(doc => previousDocs.set(doc._id, doc));\n\n            if (options.set_new_edit_as_latest_revision) {\n                docs.forEach(doc => {\n                    const id = doc._id;\n                    const previous = previousDocs.get(id);\n                    if (previous) {\n                        const splittedRev = doc._rev.split('-');\n                        const revHeight = parseInt(splittedRev[0], 10);\n                        const revLabel = splittedRev[1];\n                        doc._revisions = {\n                            start: revHeight,\n                            ids: previous._revisions.ids\n                        };\n                        doc._revisions.ids.unshift(revLabel);\n\n                        delete previous._revisions;\n                    }\n                });\n            }\n        }\n\n\n        /**\n         * pouchdb calls this function again with transformed input.\n         * This would lead to duplicate events. So we marks the deeper calls via the options\n         * parameter and do not emit events if it is set.\n         */\n        const deeperOptions = flatClone(options);\n        deeperOptions.isDeeper = true;\n\n        return oldBulkDocs.call(this, docs, deeperOptions, (err: any, result: any) => {\n            if (err) {\n                if (callback) {\n                    callback(err);\n                } else {\n                    throw err;\n                }\n            } else {\n                if (!options.isDeeper) {\n                    const endTime = now();\n                    const emitData = {\n                        emitId: t,\n                        writeDocs: docs,\n                        writeOptions: options,\n                        writeResult: result,\n                        previousDocs,\n                        startTime,\n                        endTime\n                    };\n\n                    const emitter = getCustomEventEmitterByPouch(this);\n                    emitter.subject.next(emitData);\n                }\n\n                if (callback) {\n                    callback(null, result);\n                } else {\n                    return result;\n                }\n            }\n        });\n    };\n\n    PouchDBCore.plugin({\n        bulkDocs: newBulkDocs\n    } as any);\n\n}\n\n"]}