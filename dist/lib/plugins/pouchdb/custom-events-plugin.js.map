{"version":3,"sources":["../../../../src/plugins/pouchdb/custom-events-plugin.ts"],"names":["addedToPouch","EVENT_EMITTER_BY_POUCH_INSTANCE","Map","getCustomEventEmitterByPouch","pouch","key","name","adapter","join","emitter","get","subject","Subject","set","i","addCustomEventsPluginToPouch","oldBulkDocs","PouchDBCore","prototype","bulkDocs","newBulkDocs","body","options","callback","startTime","t","Array","isArray","docs","undefined","hasOwnProperty","new_edits","length","args","previousDocs","ids","map","doc","_id","changes","live","since","doc_ids","style","viaChanges","Promise","all","results","result","id","rev","deleted","revs","set_new_edit_as_latest_revision","firstDoc","previousDocsResult","forEach","previous","splittedRev","_rev","split","revHeight","parseInt","revLabel","_revisions","start","unshift","deeperOptions","isDeeper","call","err","endTime","emitData","emitId","writeDocs","writeOptions","writeResult","eventEmitDataToStorageEvents","events","eventBulk","next","plugin","primaryPath","ret","writeDoc","_attachments","previousDoc","_deleted","event","operation","changeEvent","changeEventToNormal","push","custom","writeRowById","writeDocsById","resultRow","startsWith","POUCHDB_DESIGN_PREFIX","POUCHDB_LOCAL_PREFIX","writeMap","error","writeRow","newDoc","document","change","primary","storageChangeEvent","eventId","documentId"],"mappings":";;;;;;;;;;;;;;;;;AAoBA;;AACA;;AACA;;AAOA;;AAEA;;AA/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0BA;AACA,IAAIA,YAAY,GAAG,KAAnB;AAiBO,IAAMC,+BAA0D,GAAG,IAAIC,GAAJ,EAAnE;;;AAEA,SAASC,4BAAT,CACHC,KADG,EAEe;AAClB,MAAMC,GAAG,GAAG,CACRD,KAAK,CAACE,IADE,EAERF,KAAK,CAACG,OAFE,EAGVC,IAHU,CAGL,GAHK,CAAZ;AAIA,MAAIC,OAAO,GAAGR,+BAA+B,CAACS,GAAhC,CAAoCL,GAApC,CAAd;;AACA,MAAI,CAACI,OAAL,EAAc;AACVA,IAAAA,OAAO,GAAG;AACNE,MAAAA,OAAO,EAAE,IAAIC,aAAJ;AADH,KAAV;AAGAX,IAAAA,+BAA+B,CAACY,GAAhC,CAAoCR,GAApC,EAAyCI,OAAzC;AACH;;AACD,SAAOA,OAAP;AACH;;AAGD,IAAIK,CAAC,GAAG,CAAR;;AAEO,SAASC,4BAAT,GAAwC;AAC3C,MAAIf,YAAJ,EAAkB;AACd;AACH;;AACDA,EAAAA,YAAY,GAAG,IAAf;AAEA,MAAMgB,WAAgB,GAAGC,wBAAYC,SAAZ,CAAsBC,QAA/C;;AACA,MAAMC,WAAW;AAAA,6FAAG,kBAEhBC,IAFgB,EAGhBC,OAHgB,EAIhBC,QAJgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMVC,cAAAA,SANU,GAME,gBANF;AAOVC,cAAAA,CAPU,GAONX,CAAC,EAPK,EAShB;;AACA,kBAAI,OAAOQ,OAAP,KAAmB,UAAvB,EAAmC;AAC/BC,gBAAAA,QAAQ,GAAGD,OAAX;AACAA,gBAAAA,OAAO,GAAG,EAAV;AACH;;AACD,kBAAI,CAACA,OAAL,EAAc;AACVA,gBAAAA,OAAO,GAAG,EAAV;AACH;;AAGD,kBAAII,KAAK,CAACC,OAAN,CAAcN,IAAd,CAAJ,EAAyB;AACrBO,gBAAAA,IAAI,GAAGP,IAAP;AACH,eAFD,MAEO,IAAIA,IAAI,KAAKQ,SAAb,EAAwB;AAC3BD,gBAAAA,IAAI,GAAG,EAAP;AACH,eAFM,MAEA;AACHA,gBAAAA,IAAI,GAAGP,IAAI,CAACO,IAAZ;;AACA,oBAAIP,IAAI,CAACS,cAAL,CAAoB,WAApB,CAAJ,EAAsC;AAClCR,kBAAAA,OAAO,CAACS,SAAR,GAAoBV,IAAI,CAACU,SAAzB;AACH;AACJ;;AA5Be,oBA8BZH,IAAI,CAACI,MAAL,KAAgB,CA9BJ;AAAA;AAAA;AAAA;;AAAA,oBA+BN,yBAAW,KAAX,EAAkB;AACpBC,gBAAAA,IAAI,EAAE;AACFZ,kBAAAA,IAAI,EAAJA,IADE;AAEFC,kBAAAA,OAAO,EAAPA;AAFE;AADc,eAAlB,CA/BM;;AAAA;AAwChB;AACR;AACA;AACA;AACA;AACcY,cAAAA,YA7CU,GA6CuB,IAAIhC,GAAJ,EA7CvB;;AAAA,oBA+CZoB,OAAO,CAACQ,cAAR,CAAuB,WAAvB,KACAR,OAAO,CAACS,SAAR,KAAsB,KAhDV;AAAA;AAAA;AAAA;;AAkDNI,cAAAA,GAlDM,GAkDAP,IAAI,CAACQ,GAAL,CAAS,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,GAAR;AAAA,eAAZ,CAlDA;AAoDZ;AACZ;AACA;AACA;AACA;;AAxDwB;AAAA,qBAyDa,KAAKC,OAAL,CAAa;AAClCC,gBAAAA,IAAI,EAAE,KAD4B;AAElCC,gBAAAA,KAAK,EAAE,CAF2B;AAGlCC,gBAAAA,OAAO,EAAEP,GAHyB;AAIlCQ,gBAAAA,KAAK,EAAE;AAJ2B,eAAb,CAzDb;;AAAA;AAyDNC,cAAAA,UAzDM;AAAA;AAAA,qBAgEqBC,OAAO,CAACC,GAAR,CAC7BF,UAAU,CAACG,OAAX,CAAmBX,GAAnB;AAAA,0GAAuB,iBAAOY,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACI,KAAI,CAACtC,GAAL,CACnBsC,MAAM,CAACC,EADY,EAEnB;AACIC,4BAAAA,GAAG,EAAEF,MAAM,CAACT,OAAP,CAAe,CAAf,EAAkBW,GAD3B;AAEIC,4BAAAA,OAAO,EAAE,IAFb;AAGIC,4BAAAA,IAAI,EAAE9B,OAAO,CAAC+B,+BAAR,GAA0C,IAA1C,GAAiD,KAH3D;AAIIV,4BAAAA,KAAK,EAAE;AAJX,2BAFmB,CADJ;;AAAA;AACbW,0BAAAA,QADa;AAAA,2DAUZA,QAVY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAvB;;AAAA;AAAA;AAAA;AAAA,kBAD6B,CAhErB;;AAAA;AAgENC,cAAAA,kBAhEM;AA8EZA,cAAAA,kBAAkB,CAACC,OAAnB,CAA2B,UAAAnB,GAAG;AAAA,uBAAIH,YAAY,CAACrB,GAAb,CAAiBwB,GAAG,CAACC,GAArB,EAA0BD,GAA1B,CAAJ;AAAA,eAA9B;;AAEA,kBAAIf,OAAO,CAAC+B,+BAAZ,EAA6C;AACzCzB,gBAAAA,IAAI,CAAC4B,OAAL,CAAa,UAAAnB,GAAG,EAAI;AAChB,sBAAMY,EAAE,GAAGZ,GAAG,CAACC,GAAf;AACA,sBAAMmB,QAAQ,GAAGvB,YAAY,CAACxB,GAAb,CAAiBuC,EAAjB,CAAjB;;AACA,sBAAIQ,QAAJ,EAAc;AACV,wBAAMC,WAAW,GAAGrB,GAAG,CAACsB,IAAJ,CAASC,KAAT,CAAe,GAAf,CAApB;;AACA,wBAAMC,SAAS,GAAGC,QAAQ,CAACJ,WAAW,CAAC,CAAD,CAAZ,EAAiB,EAAjB,CAA1B;AACA,wBAAMK,QAAQ,GAAGL,WAAW,CAAC,CAAD,CAA5B;;AAEA,wBAAI,CAACD,QAAQ,CAACO,UAAd,EAA0B;AAAEP,sBAAAA,QAAQ,CAACO,UAAT,GAAsB;AAAE7B,wBAAAA,GAAG,EAAE;AAAP,uBAAtB;AAAmC;;AAE/DE,oBAAAA,GAAG,CAAC2B,UAAJ,GAAiB;AACbC,sBAAAA,KAAK,EAAEJ,SADM;AAEb1B,sBAAAA,GAAG,EAAEsB,QAAQ,CAACO,UAAT,CAAoB7B;AAFZ,qBAAjB;;AAIAE,oBAAAA,GAAG,CAAC2B,UAAJ,CAAe7B,GAAf,CAAmB+B,OAAnB,CAA2BH,QAA3B;;AAEA,2BAAON,QAAQ,CAACO,UAAhB;AACH;AACJ,iBAlBD;AAmBH;;AApGW;AAwGhB;AACR;AACA;AACA;AACA;AACcG,cAAAA,aA7GU,GA6GM,qBAAU7C,OAAV,CA7GN;AA8GhB6C,cAAAA,aAAa,CAACC,QAAd,GAAyB,IAAzB;AA9GgB,gDAgHTpD,WAAW,CAACqD,IAAZ,CAAiB,IAAjB,EAAuBzC,IAAvB,EAA6BuC,aAA7B,EAA4C,UAACG,GAAD,EAAWtB,MAAX,EAA2B;AAC1E,oBAAIsB,GAAJ,EAAS;AACL,sBAAI/C,QAAJ,EAAc;AACVA,oBAAAA,QAAQ,CAAC+C,GAAD,CAAR;AACH,mBAFD,MAEO;AACH,0BAAMA,GAAN;AACH;AACJ,iBAND,MAMO;AACH,yBAAO,8EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAOChD,OAAO,CAAC8C,QAPT;AAAA;AAAA;AAAA;;AAQMG,4BAAAA,OARN,GAQgB,gBARhB;AASMC,4BAAAA,QATN,GASiB;AACbC,8BAAAA,MAAM,EAAEhD,CADK;AAEbiD,8BAAAA,SAAS,EAAE9C,IAFE;AAGb+C,8BAAAA,YAAY,EAAErD,OAHD;AAIbsD,8BAAAA,WAAW,EAAE5B,MAJA;AAKbd,8BAAAA,YAAY,EAAZA,YALa;AAMbV,8BAAAA,SAAS,EAATA,SANa;AAOb+C,8BAAAA,OAAO,EAAPA;AAPa,6BATjB;AAAA;AAAA,mCAmBqBM,4BAA4B,CAC7C,KAD6C,EAE7CL,QAF6C,CAnBjD;;AAAA;AAmBMM,4BAAAA,MAnBN;AAuBMC,4BAAAA,SAvBN,GAuBkC;AAC9B9B,8BAAAA,EAAE,EAAE,6BAAkB,EAAlB,CAD0B;AAE9B6B,8BAAAA,MAAM,EAANA;AAF8B,6BAvBlC;AA2BMrE,4BAAAA,OA3BN,GA2BgBN,4BAA4B,CAAC,KAAD,CA3B5C;AA4BAM,4BAAAA,OAAO,CAACE,OAAR,CAAgBqE,IAAhB,CAAqBD,SAArB;;AA5BA;AAAA,iCA+BAxD,QA/BA;AAAA;AAAA;AAAA;;AAgCAA,4BAAAA,QAAQ,CAAC,IAAD,EAAOyB,MAAP,CAAR;AAhCA;AAAA;;AAAA;AAAA,8DAkCOA,MAlCP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAD,IAAP;AAqCH;AACJ,eA9CM,CAhHS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAX5B,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAiKAH,0BAAYgE,MAAZ,CAAmB;AACf9D,IAAAA,QAAQ,EAAEC;AADK,GAAnB;AAIH;;SAEqByD,4B;;;;;gHAAf,kBACHK,WADG,EAEHV,QAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAIGW,YAAAA,GAJH,GAI4D,EAJ5D;;AAAA,kBAMCX,QAAQ,CAACG,YAAT,CAAsB7C,cAAtB,CAAqC,WAArC,KAAqD,CAAC0C,QAAQ,CAACG,YAAT,CAAsB5C,SAN7E;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOOc,OAAO,CAACC,GAAR,CACF0B,QAAQ,CAACE,SAAT,CAAmBtC,GAAnB;AAAA,wGAAuB,kBAAOgD,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACbnC,wBAAAA,EADa,GACRmC,QAAQ,CAAC9C,GADD;AAGnB8C,wBAAAA,QAAQ,GAAG,sDACPF,WADO,EAEPE,QAFO,CAAX;AAHmB;AAAA,+BAQW,kDAA8BA,QAAQ,CAACC,YAAvC,CARX;;AAAA;AAQnBD,wBAAAA,QAAQ,CAACC,YARU;AAUfC,wBAAAA,WAVe,GAUDd,QAAQ,CAACtC,YAAT,CAAsBxB,GAAtB,CAA0BuC,EAA1B,CAVC;;AAWnB,4BAAIqC,WAAJ,EAAiB;AACbA,0BAAAA,WAAW,GAAG,sDACVJ,WADU,EAEVI,WAFU,CAAd;AAIH;;AAhBkB,8BAmBfA,WAAW,IACX,+BAAoBA,WAAW,CAAC3B,IAAhC,IAAwC,+BAAoByB,QAAQ,CAACzB,IAA7B,CApBzB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,8BA0Bf,CAAC2B,WAAD,IAAgBF,QAAQ,CAACG,QA1BV;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,8BA+BfD,WAAW,IAAIA,WAAW,CAACC,QAA3B,IAAuCH,QAAQ,CAACG,QA/BjC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,8BAqCf,CAAC,CAACD,WAAD,IAAgBA,WAAW,CAACC,QAA7B,KAA0C,CAACH,QAAQ,CAACG,QArCrC;AAAA;AAAA;AAAA;;AAsCf;AACAC,wBAAAA,KAAK,GAAG;AACJC,0BAAAA,SAAS,EAAE,QADP;AAEJpD,0BAAAA,GAAG,EAAE+C,QAFD;AAGJnC,0BAAAA,EAAE,EAAEA,EAHA;AAIJQ,0BAAAA,QAAQ,EAAE;AAJN,yBAAR;AAvCe;AAAA;;AAAA;AAAA,8BA6CR2B,QAAQ,CAACG,QAAT,IAAqBD,WAArB,IAAoC,CAACA,WAAW,CAACC,QA7CzC;AAAA;AAAA;AAAA;;AA8Cf;AACAD,wBAAAA,WAAW,CAAC3B,IAAZ,GAAmByB,QAAQ,CAACzB,IAA5B;AACA6B,wBAAAA,KAAK,GAAG;AACJC,0BAAAA,SAAS,EAAE,QADP;AAEJpD,0BAAAA,GAAG,EAAE,IAFD;AAGJY,0BAAAA,EAAE,EAAEA,EAHA;AAIJQ,0BAAAA,QAAQ,EAAE6B;AAJN,yBAAR;AAhDe;AAAA;;AAAA;AAAA,6BAuDfA,WAvDe;AAAA;AAAA;AAAA;;AAyDf;AACAE,wBAAAA,KAAK,GAAG;AACJC,0BAAAA,SAAS,EAAE,QADP;AAEJpD,0BAAAA,GAAG,EAAE+C,QAFD;AAGJnC,0BAAAA,EAAE,EAAEA,EAHA;AAIJQ,0BAAAA,QAAQ,EAAE6B;AAJN,yBAAR;AA1De;AAAA;;AAAA;AAAA,8BAiET,yBAAW,KAAX,EAAkB;AAAErD,0BAAAA,IAAI,EAAE;AAAEmD,4BAAAA,QAAQ,EAARA;AAAF;AAAR,yBAAlB,CAjES;;AAAA;AAoEbM,wBAAAA,WApEa,GAoECC,mBAAmB,CACnCT,WADmC,EAEnCM,KAFmC,EAGnChB,QAAQ,CAAChD,SAH0B,EAInCgD,QAAQ,CAACD,OAJ0B,CApEpB;AA0EnBY,wBAAAA,GAAG,CAACS,IAAJ,CAASF,WAAT;;AA1EmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAvB;;AAAA;AAAA;AAAA;AAAA,gBADE,CAPP;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBA2FC,CAAClB,QAAQ,CAACG,YAAT,CAAsBkB,MAAvB,IACCrB,QAAQ,CAACG,YAAT,CAAsBkB,MAAtB,IAAgC,CAACrB,QAAQ,CAACG,YAAT,CAAsBkB,MAAtB,CAA6BC,YA5FhE;AAAA;AAAA;AAAA;;AA8FOC,YAAAA,aA9FP,GA8FyC,IAAI7F,GAAJ,EA9FzC;AA+FCsE,YAAAA,QAAQ,CAACE,SAAT,CAAmBlB,OAAnB,CAA2B,UAAA4B,QAAQ;AAAA,qBAAIW,aAAa,CAAClF,GAAd,CAAkBuE,QAAQ,CAAC9C,GAA3B,EAAgC8C,QAAhC,CAAJ;AAAA,aAAnC;AA/FD;AAAA,mBAgGOvC,OAAO,CAACC,GAAR,CACF0B,QAAQ,CAACI,WAAT,CAAqBxC,GAArB;AAAA,wGAAyB,kBAAO4D,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACf/C,wBAAAA,EADe,GACV+C,SAAS,CAAC/C,EADA;;AAAA,8BAGjBA,EAAE,CAACgD,UAAH,CAAcC,oCAAd,KACAjD,EAAE,CAACgD,UAAH,CAAcE,mCAAd,CAJiB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAQjBf,wBAAAA,QARiB,GAQN,6BAAkBW,aAAlB,EAAiCC,SAAS,CAAC/C,EAA3C,CARM;AASrBmC,wBAAAA,QAAQ,GAAG,sDACPF,WADO,EAEPE,QAFO,CAAX;AATqB;AAAA,+BAcS,kDAA8BA,QAAQ,CAACC,YAAvC,CAdT;;AAAA;AAcrBD,wBAAAA,QAAQ,CAACC,YAdY;AAgBrBD,wBAAAA,QAAQ,GAAG,qBAAUA,QAAV,CAAX;AACAA,wBAAAA,QAAQ,CAACzB,IAAT,GAAiBqC,SAAD,CAAmB9C,GAAnC;AACMsC,wBAAAA,KAlBe,GAkBP,gDACVN,WADU,EAEVE,QAFU,CAlBO;AAsBfM,wBAAAA,WAtBe,GAsBDC,mBAAmB,CAACT,WAAD,EAAcM,KAAd,CAtBlB;AAuBrBL,wBAAAA,GAAG,CAACS,IAAJ,CAASF,WAAT;;AAvBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAzB;;AAAA;AAAA;AAAA;AAAA,gBADE,CAhGP;;AAAA;AAAA;AAAA;;AAAA;AA4HOU,YAAAA,QA5HP,GA4HwD5B,QAAQ,CAACG,YAAT,CAAsBkB,MAAtB,CAA6BC,YA5HrF;AAAA;AAAA,mBA6HOjD,OAAO,CAACC,GAAR,CACF0B,QAAQ,CAACI,WAAT,CAAqBxC,GAArB;AAAA,wGAAyB,kBAAO4D,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAChBA,SAAD,CAA+BK,KADd;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKfpD,wBAAAA,EALe,GAKV+C,SAAS,CAAC/C,EALA;AAMfqD,wBAAAA,QANe,GAMJ,6BAAkBF,QAAlB,EAA4BnD,EAA5B,CANI;AAOfsD,wBAAAA,MAPe,GAON,sDACXrB,WADW,EAEXoB,QAAQ,CAACE,QAFE,CAPM;AAAA;AAAA,+BAWO,kDAA8BD,MAAM,CAAClB,YAArC,CAXP;;AAAA;AAWrBkB,wBAAAA,MAAM,CAAClB,YAXc;AAYrBkB,wBAAAA,MAAM,CAAC5C,IAAP,GAAeqC,SAAD,CAAqC9C,GAAnD;;AAZqB,8BAejB,CAACoD,QAAQ,CAAC7C,QAAV,IAAsB6C,QAAQ,CAAC7C,QAAT,CAAkB8B,QAfvB;AAAA;AAAA;AAAA;;AAgBjB;AACAC,wBAAAA,KAAK,GAAG;AACJC,0BAAAA,SAAS,EAAE,QADP;AAEJpD,0BAAAA,GAAG,EAAEkE,MAFD;AAGJtD,0BAAAA,EAAE,EAAEA,EAHA;AAIJQ,0BAAAA,QAAQ,EAAE;AAJN,yBAAR;AAjBiB;AAAA;;AAAA;AAAA,6BAuBV6C,QAAQ,CAACE,QAAT,CAAkBjB,QAvBR;AAAA;AAAA;AAAA;;AAwBjB;AAEA;AACA;AACA;AACMD,wBAAAA,WA7BW,GA6BG,sDAChBJ,WADgB,EAEhBoB,QAAQ,CAAC7C,QAFO,CA7BH;AAAA;AAAA,+BAiCgB,kDAA8B6B,WAAW,CAACD,YAA1C,CAjChB;;AAAA;AAiCjBC,wBAAAA,WAAW,CAACD,YAjCK;AAkCjBC,wBAAAA,WAAW,CAAC3B,IAAZ,GAAoBqC,SAAD,CAAqC9C,GAAxD;AAEAsC,wBAAAA,KAAK,GAAG;AACJC,0BAAAA,SAAS,EAAE,QADP;AAEJpD,0BAAAA,GAAG,EAAE,IAFD;AAGJY,0BAAAA,EAAE,EAAE+C,SAAS,CAAC/C,EAHV;AAIJQ,0BAAAA,QAAQ,EAAE6B;AAJN,yBAAR;AApCiB;AAAA;;AAAA;AA2CjB;AACAE,wBAAAA,KAAK,GAAG;AACJC,0BAAAA,SAAS,EAAE,QADP;AAEJpD,0BAAAA,GAAG,EAAEkE,MAFD;AAGJtD,0BAAAA,EAAE,EAAE+C,SAAS,CAAC/C,EAHV;AAIJQ,0BAAAA,QAAQ,EAAE6C,QAAQ,CAAC7C;AAJf,yBAAR;;AA5CiB;AAoDrB,4BACI6C,QAAQ,CAACE,QAAT,CAAkBjB,QAAlB,KAEI,CAACe,QAAQ,CAAC7C,QAAV,IACA6C,QAAQ,CAAC7C,QAAT,CAAkB8B,QAHtB,CADJ,EAME;AACE;AACpB;AACA;AACA;AACiB,yBAXD,MAWO;AACGG,0BAAAA,WADH,GACiBC,mBAAmB,CACnCnB,QAAQ,CAACG,YAAT,CAAsBkB,MAAtB,CAA6BX,WADM,EAEnCM,KAFmC,EAGnChB,QAAQ,CAAChD,SAH0B,EAInCgD,QAAQ,CAACD,OAJ0B,CADpC;AAOHY,0BAAAA,GAAG,CAACS,IAAJ,CAASF,WAAT;AACH;;AAvEoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAzB;;AAAA;AAAA;AAAA;AAAA,gBADE,CA7HP;;AAAA;AAAA,8CA2MIP,GA3MJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA8MA,SAASQ,mBAAT,CACHT,WADG,EAEHuB,MAFG,EAGHjF,SAHG,EAIH+C,OAJG,EAK4C;AAC/C,MAAMlC,GAA8B,GAAGoE,MAAM,CAAChB,SAAP,KAAqB,QAArB,GAAgCgB,MAAM,CAAChD,QAAvC,GAAyDgD,MAAM,CAACpE,GAAvG;AACA,MAAMqE,OAAe,GAAIrE,GAAD,CAAa6C,WAAb,CAAxB;AACA,MAAMyB,kBAAmE,GAAG;AACxEC,IAAAA,OAAO,EAAE,gCAAY,KAAZ,EAAmBF,OAAnB,EAA4BrE,GAAG,CAACsB,IAAhC,CAD+D;AAExEkD,IAAAA,UAAU,EAAEH,OAF4D;AAGxED,IAAAA,MAAM,EAANA,MAHwE;AAIxEjF,IAAAA,SAAS,EAATA,SAJwE;AAKxE+C,IAAAA,OAAO,EAAPA;AALwE,GAA5E;AAOA,SAAOoC,kBAAP;AACH","sourcesContent":["/*\n * Instead of listening to pouch.changes,\n * we overwrite pouchdbs bulkDocs()\n * and create our own event stream, this will work more reliable\n * and has less strange behaviors.\n * Also we can better define what data we need for our events.\n * @link http://jsbin.com/pagebi/1/edit?js,output\n * @link https://github.com/pubkey/rxdb/blob/1f4115b69bdacbb853af9c637d70f5f184d4e474/src/rx-storage-pouchdb.ts#L273\n */\n\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    PouchBulkDocOptions,\n    PouchBulkDocResultRow,\n    PouchDBInstance,\n    PouchWriteError,\n    RxDocumentData,\n    RxStorageChangeEvent\n} from '../../types';\nimport PouchDBCore from 'pouchdb-core';\nimport { Subject } from 'rxjs';\nimport {\n    flatClone,\n    getFromMapOrThrow,\n    getHeightOfRevision,\n    now,\n    randomCouchString\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { ObliviousSet } from 'oblivious-set';\nimport { getEventKey, pouchChangeRowToChangeEvent, POUCHDB_DESIGN_PREFIX, POUCHDB_LOCAL_PREFIX, pouchDocumentDataToRxDocumentData, writeAttachmentsToAttachments } from './pouchdb-helper';\nimport { ChangeEvent } from 'event-reduce-js';\n\n// ensure only added once\nlet addedToPouch = false;\n\ndeclare type EmitData = {\n    emitId: number;\n    writeOptions: PouchBulkDocOptions;\n    writeDocs: any[];\n    writeResult: (PouchBulkDocResultRow | PouchWriteError)[];\n    // used on new_edits=false to check if the last revision has changed\n    previousDocs: Map<string, any>;\n    startTime: number;\n    endTime: number;\n};\n\n\ndeclare type Emitter<RxDocType> = {\n    subject: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>>;\n};\nexport const EVENT_EMITTER_BY_POUCH_INSTANCE: Map<string, Emitter<any>> = new Map();\n\nexport function getCustomEventEmitterByPouch<RxDocType>(\n    pouch: PouchDBInstance\n): Emitter<RxDocType> {\n    const key = [\n        pouch.name,\n        pouch.adapter\n    ].join('|');\n    let emitter = EVENT_EMITTER_BY_POUCH_INSTANCE.get(key);\n    if (!emitter) {\n        emitter = {\n            subject: new Subject()\n        };\n        EVENT_EMITTER_BY_POUCH_INSTANCE.set(key, emitter);\n    }\n    return emitter;\n}\n\n\nlet i = 0;\n\nexport function addCustomEventsPluginToPouch() {\n    if (addedToPouch) {\n        return;\n    }\n    addedToPouch = true;\n\n    const oldBulkDocs: any = PouchDBCore.prototype.bulkDocs;\n    const newBulkDocs = async function (\n        this: PouchDBInstance,\n        body: any[] | { docs: any[], new_edits?: boolean },\n        options: PouchBulkDocOptions,\n        callback: Function\n    ) {\n        const startTime = now();\n        const t = i++;\n\n        // normalize input\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n        if (!options) {\n            options = {};\n        }\n\n        let docs: any[];\n        if (Array.isArray(body)) {\n            docs = body;\n        } else if (body === undefined) {\n            docs = [];\n        } else {\n            docs = body.docs;\n            if (body.hasOwnProperty('new_edits')) {\n                options.new_edits = body.new_edits;\n            }\n        }\n\n        if (docs.length === 0) {\n            throw newRxError('SNH', {\n                args: {\n                    body,\n                    options\n                }\n            });\n        }\n\n\n        /**\n         * If new_edits=false we have to first find the current state\n         * of the document and can later check if the state was changed\n         * because a new revision was written and we have to emit an event.\n         */\n        const previousDocs: Map<string, any> = new Map();\n        if (\n            options.hasOwnProperty('new_edits') &&\n            options.new_edits === false\n        ) {\n            const ids = docs.map(doc => doc._id);\n\n            /**\n             * Pouchdb does not return deleted documents via allDocs()\n             * So have to do use our hack with getting the newest revisions from the\n             * changes.\n             */\n            const viaChanges = await this.changes({\n                live: false,\n                since: 0,\n                doc_ids: ids,\n                style: 'all_docs'\n            });\n\n            const previousDocsResult = await Promise.all(\n                viaChanges.results.map(async (result) => {\n                    const firstDoc = await this.get(\n                        result.id,\n                        {\n                            rev: result.changes[0].rev,\n                            deleted: 'ok',\n                            revs: options.set_new_edit_as_latest_revision ? true : false,\n                            style: 'all_docs'\n                        }\n                    );\n                    return firstDoc;\n                })\n            );\n            previousDocsResult.forEach(doc => previousDocs.set(doc._id, doc));\n\n            if (options.set_new_edit_as_latest_revision) {\n                docs.forEach(doc => {\n                    const id = doc._id;\n                    const previous = previousDocs.get(id);\n                    if (previous) {\n                        const splittedRev = doc._rev.split('-');\n                        const revHeight = parseInt(splittedRev[0], 10);\n                        const revLabel = splittedRev[1];\n\n                        if (!previous._revisions) { previous._revisions = { ids: [] } }\n\n                        doc._revisions = {\n                            start: revHeight,\n                            ids: previous._revisions.ids\n                        };\n                        doc._revisions.ids.unshift(revLabel);\n\n                        delete previous._revisions;\n                    }\n                });\n            }\n        }\n\n\n        /**\n         * pouchdb calls this function again with transformed input.\n         * This would lead to duplicate events. So we marks the deeper calls via the options\n         * parameter and do not emit events if it is set.\n         */\n        const deeperOptions = flatClone(options);\n        deeperOptions.isDeeper = true;\n\n        return oldBulkDocs.call(this, docs, deeperOptions, (err: any, result: any) => {\n            if (err) {\n                if (callback) {\n                    callback(err);\n                } else {\n                    throw err;\n                }\n            } else {\n                return (async () => {\n\n                    /**\n                     * For calls that came from RxDB,\n                     * we have to ensure that the events are emitted\n                     * before the actual call resolves.\n                     */\n                    if (!options.isDeeper) {\n                        const endTime = now();\n                        const emitData = {\n                            emitId: t,\n                            writeDocs: docs,\n                            writeOptions: options,\n                            writeResult: result,\n                            previousDocs,\n                            startTime,\n                            endTime\n                        };\n\n                        const events = await eventEmitDataToStorageEvents(\n                            '_id',\n                            emitData\n                        );\n                        const eventBulk: EventBulk<any> = {\n                            id: randomCouchString(10),\n                            events\n                        }\n                        const emitter = getCustomEventEmitterByPouch(this);\n                        emitter.subject.next(eventBulk);\n                    }\n\n                    if (callback) {\n                        callback(null, result);\n                    } else {\n                        return result;\n                    }\n                })();\n            }\n        });\n    };\n\n    PouchDBCore.plugin({\n        bulkDocs: newBulkDocs\n    } as any);\n\n}\n\nexport async function eventEmitDataToStorageEvents<RxDocType>(\n    primaryPath: string,\n    emitData: EmitData\n): Promise<RxStorageChangeEvent<RxDocumentData<RxDocType>>[]> {\n    const ret: RxStorageChangeEvent<RxDocumentData<RxDocType>>[] = [];\n\n    if (emitData.writeOptions.hasOwnProperty('new_edits') && !emitData.writeOptions.new_edits) {\n        await Promise.all(\n            emitData.writeDocs.map(async (writeDoc) => {\n                const id = writeDoc._id;\n\n                writeDoc = pouchDocumentDataToRxDocumentData(\n                    primaryPath,\n                    writeDoc\n                );\n\n                writeDoc._attachments = await writeAttachmentsToAttachments(writeDoc._attachments);\n\n                let previousDoc = emitData.previousDocs.get(id);\n                if (previousDoc) {\n                    previousDoc = pouchDocumentDataToRxDocumentData(\n                        primaryPath,\n                        previousDoc\n                    );\n                }\n\n                if (\n                    previousDoc &&\n                    getHeightOfRevision(previousDoc._rev) > getHeightOfRevision(writeDoc._rev)\n                ) {\n                    // not the newest revision was added\n                    // TODO is comparing the height enough to compare revisions?\n                    return;\n                }\n                if (!previousDoc && writeDoc._deleted) {\n                    // deleted document was added as revision\n                    return;\n                }\n\n                if (previousDoc && previousDoc._deleted && writeDoc._deleted) {\n                    // delete document was deleted again\n                    return;\n                }\n\n                let event: ChangeEvent<RxDocumentData<RxDocType>>;\n                if ((!previousDoc || previousDoc._deleted) && !writeDoc._deleted) {\n                    // was insert\n                    event = {\n                        operation: 'INSERT',\n                        doc: writeDoc,\n                        id: id,\n                        previous: null\n                    };\n                } else if (writeDoc._deleted && previousDoc && !previousDoc._deleted) {\n                    // was delete\n                    previousDoc._rev = writeDoc._rev;\n                    event = {\n                        operation: 'DELETE',\n                        doc: null,\n                        id: id,\n                        previous: previousDoc\n                    };\n                } else if (\n                    previousDoc\n                ) {\n                    // was update\n                    event = {\n                        operation: 'UPDATE',\n                        doc: writeDoc,\n                        id: id,\n                        previous: previousDoc\n                    };\n                } else {\n                    throw newRxError('SNH', { args: { writeDoc } });\n                }\n\n                const changeEvent = changeEventToNormal(\n                    primaryPath,\n                    event,\n                    emitData.startTime,\n                    emitData.endTime\n                );\n                ret.push(changeEvent);\n            })\n        );\n    }\n    /**\n     * There is no write map given for internal pouchdb document writes\n     * like it is done with replication.\n     */\n    else if (\n        !emitData.writeOptions.custom ||\n        (emitData.writeOptions.custom && !emitData.writeOptions.custom.writeRowById)\n    ) {\n        const writeDocsById: Map<string, any> = new Map();\n        emitData.writeDocs.forEach(writeDoc => writeDocsById.set(writeDoc._id, writeDoc));\n        await Promise.all(\n            emitData.writeResult.map(async (resultRow) => {\n                const id = resultRow.id;\n                if (\n                    id.startsWith(POUCHDB_DESIGN_PREFIX) ||\n                    id.startsWith(POUCHDB_LOCAL_PREFIX)\n                ) {\n                    return;\n                }\n                let writeDoc = getFromMapOrThrow(writeDocsById, resultRow.id);\n                writeDoc = pouchDocumentDataToRxDocumentData(\n                    primaryPath,\n                    writeDoc\n                );\n\n                writeDoc._attachments = await writeAttachmentsToAttachments(writeDoc._attachments);\n\n                writeDoc = flatClone(writeDoc);\n                writeDoc._rev = (resultRow as any).rev;\n                const event = pouchChangeRowToChangeEvent<RxDocType>(\n                    primaryPath as any,\n                    writeDoc\n                );\n                const changeEvent = changeEventToNormal(primaryPath, event);\n                ret.push(changeEvent);\n            })\n        );\n    } else {\n        const writeMap: Map<string, BulkWriteRow<RxDocType>> = emitData.writeOptions.custom.writeRowById;\n        await Promise.all(\n            emitData.writeResult.map(async (resultRow) => {\n                if ((resultRow as PouchWriteError).error) {\n                    return;\n                }\n\n                const id = resultRow.id;\n                const writeRow = getFromMapOrThrow(writeMap, id);\n                const newDoc = pouchDocumentDataToRxDocumentData(\n                    primaryPath,\n                    writeRow.document as any\n                );\n                newDoc._attachments = await writeAttachmentsToAttachments(newDoc._attachments);\n                newDoc._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                let event: ChangeEvent<RxDocumentData<RxDocType>>;\n                if (!writeRow.previous || writeRow.previous._deleted) {\n                    // was insert\n                    event = {\n                        operation: 'INSERT',\n                        doc: newDoc,\n                        id: id,\n                        previous: null\n                    };\n                } else if (writeRow.document._deleted) {\n                    // was delete\n\n                    // we need to add the new revision to the previous doc\n                    // so that the eventkey is calculated correctly.\n                    // Is this a hack? idk.\n                    const previousDoc = pouchDocumentDataToRxDocumentData(\n                        primaryPath,\n                        writeRow.previous as any\n                    );\n                    previousDoc._attachments = await writeAttachmentsToAttachments(previousDoc._attachments);\n                    previousDoc._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                    event = {\n                        operation: 'DELETE',\n                        doc: null,\n                        id: resultRow.id,\n                        previous: previousDoc\n                    };\n                } else {\n                    // was update\n                    event = {\n                        operation: 'UPDATE',\n                        doc: newDoc,\n                        id: resultRow.id,\n                        previous: writeRow.previous\n                    };\n                }\n\n                if (\n                    writeRow.document._deleted &&\n                    (\n                        !writeRow.previous ||\n                        writeRow.previous._deleted\n                    )\n                ) {\n                    /**\n                     * A deleted document was newly added to the storage engine,\n                     * do not emit an event.\n                     */\n                } else {\n                    const changeEvent = changeEventToNormal(\n                        emitData.writeOptions.custom.primaryPath,\n                        event,\n                        emitData.startTime,\n                        emitData.endTime\n                    );\n                    ret.push(changeEvent);\n                }\n            })\n        );\n    }\n\n\n    return ret;\n}\n\nexport function changeEventToNormal<RxDocType>(\n    primaryPath: string,\n    change: ChangeEvent<RxDocumentData<RxDocType>>,\n    startTime?: number,\n    endTime?: number\n): RxStorageChangeEvent<RxDocumentData<RxDocType>> {\n    const doc: RxDocumentData<RxDocType> = change.operation === 'DELETE' ? change.previous as any : change.doc as any;\n    const primary: string = (doc as any)[primaryPath];\n    const storageChangeEvent: RxStorageChangeEvent<RxDocumentData<RxDocType>> = {\n        eventId: getEventKey(false, primary, doc._rev),\n        documentId: primary,\n        change,\n        startTime,\n        endTime\n    };\n    return storageChangeEvent;\n}\n"],"file":"custom-events-plugin.js"}