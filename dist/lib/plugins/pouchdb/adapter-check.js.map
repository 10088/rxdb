{"version":3,"file":"adapter-check.js","names":["POUCHDB_LOCATION","checkAdapter","adapter","_id","pouch","PouchDB","auto_compaction","revs_limit","err","PROMISE_RESOLVE_FALSE","recoveredDoc","info","then","put","value","ok","time","get","doc","remove"],"sources":["../../../../src/plugins/pouchdb/adapter-check.ts"],"sourcesContent":["/**\n * this plugin adds the checkAdapter-function to rxdb\n * you can use it to check if the given adapter is working in the current environmet\n */\nimport {\n    PouchDB\n} from './pouch-db';\nimport {\n    adapterObject,\n    now,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString\n} from '../../util';\nimport type {\n    PouchDBInstance\n} from '../../types';\n\n/**\n * The same pouchdb-location is used on each run\n * To ensure when this is run multiple times,\n * there will not be many created databases\n */\nexport const POUCHDB_LOCATION = 'rxdb-adapter-check';\n\nexport function checkAdapter(adapter: any): Promise<any> {\n    // id of the document which is stored and removed to ensure everything works\n    const _id = POUCHDB_LOCATION + '-' + randomCouchString(12);\n\n    let pouch: PouchDBInstance;\n    try {\n        pouch = new (PouchDB as any)(\n            POUCHDB_LOCATION,\n            adapterObject(adapter), {\n            auto_compaction: true,\n            revs_limit: 1\n        }\n        );\n    } catch (err) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let recoveredDoc: any;\n    return pouch.info() // ensure that we wait until db is useable\n        // ensure write works\n        .then(() => pouch.put({\n            _id,\n            value: {\n                ok: true,\n                time: now()\n            }\n        }))\n        // ensure read works\n        .then(() => pouch.get(_id))\n        .then(doc => recoveredDoc = doc)\n        // ensure remove works\n        .then(() => pouch.remove(recoveredDoc))\n        .then(() => true)\n        .then(() => {\n            if (recoveredDoc && recoveredDoc.value && recoveredDoc.value.ok)\n                return true;\n            else\n                return false;\n        })\n        .catch(() => false);\n\n    /**\n     * NOTICE:\n     * Do not remove the pouchdb-instance after the test\n     * The problem is that when this function is call in parallel,\n     * for example when you restore the tabs from a browser-session and open\n     * the same website multiple times at the same time,\n     * calling destroy would possibly crash the other call\n     */\n}\n"],"mappings":";;;;;;;;AAIA;;AAGA;;AAPA;AACA;AACA;AACA;;AAcA;AACA;AACA;AACA;AACA;AACO,IAAMA,gBAAgB,GAAG,oBAAzB;;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAAkD;EACrD;EACA,IAAMC,GAAG,GAAGH,gBAAgB,GAAG,GAAnB,GAAyB,6BAAkB,EAAlB,CAArC;;EAEA,IAAII,KAAJ;;EACA,IAAI;IACAA,KAAK,GAAG,IAAKC,gBAAL,CACJL,gBADI,EAEJ,yBAAcE,OAAd,CAFI,EAEoB;MACxBI,eAAe,EAAE,IADO;MAExBC,UAAU,EAAE;IAFY,CAFpB,CAAR;EAOH,CARD,CAQE,OAAOC,GAAP,EAAY;IACV,OAAOC,2BAAP;EACH;;EAED,IAAIC,YAAJ;EACA,OAAON,KAAK,CAACO,IAAN,GAAa;EAChB;EADG,CAEFC,IAFE,CAEG;IAAA,OAAMR,KAAK,CAACS,GAAN,CAAU;MAClBV,GAAG,EAAHA,GADkB;MAElBW,KAAK,EAAE;QACHC,EAAE,EAAE,IADD;QAEHC,IAAI,EAAE;MAFH;IAFW,CAAV,CAAN;EAAA,CAFH,EASH;EATG,CAUFJ,IAVE,CAUG;IAAA,OAAMR,KAAK,CAACa,GAAN,CAAUd,GAAV,CAAN;EAAA,CAVH,EAWFS,IAXE,CAWG,UAAAM,GAAG;IAAA,OAAIR,YAAY,GAAGQ,GAAnB;EAAA,CAXN,EAYH;EAZG,CAaFN,IAbE,CAaG;IAAA,OAAMR,KAAK,CAACe,MAAN,CAAaT,YAAb,CAAN;EAAA,CAbH,EAcFE,IAdE,CAcG;IAAA,OAAM,IAAN;EAAA,CAdH,EAeFA,IAfE,CAeG,YAAM;IACR,IAAIF,YAAY,IAAIA,YAAY,CAACI,KAA7B,IAAsCJ,YAAY,CAACI,KAAb,CAAmBC,EAA7D,EACI,OAAO,IAAP,CADJ,KAGI,OAAO,KAAP;EACP,CApBE,WAqBI;IAAA,OAAM,KAAN;EAAA,CArBJ,CAAP;EAuBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACC"}