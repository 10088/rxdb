{"version":3,"file":"pouchdb-helper.js","names":["writeAttachmentsToAttachments","attachments","ret","Promise","all","Object","entries","map","key","obj","type","args","data","dataAsBase64String","RxStoragePouchStatics","hash","length","digest","asWrite","blobBufferUtil","toBase64String","OPEN_POUCHDB_STORAGE_INSTANCES","Set","POUCHDB_LOCAL_PREFIX","POUCHDB_LOCAL_PREFIX_LENGTH","POUCHDB_DESIGN_PREFIX","POUCHDB_META_FIELDNAME","pouchSwapIdToPrimary","primaryKey","docData","_id","pouchSwapIdToPrimaryString","str","pouchDocumentDataToRxDocumentData","pouchDoc","useDoc","_revisions","_deleted","_attachments","forEach","value","content_type","_meta","rxDocumentDataToPouchDocumentData","doc","pouchSwapPrimaryToId","useValue","stub","idValue","pouchStripLocalFlagFromPrimary","substring","getEventKey","pouchDBInstance","primary","change","useRev","_rev","previous","eventKey","name","operation","pouchChangeRowToChangeEvent","id","revHeight","pouchChangeRowToChangeStreamEvent","pouchRow","deleted","previousDoc","ev","sequence","seq","primarySwapPouchDbQuerySelector","selector","Array","isArray","item","k","v","startsWith","pouchHash","res","getPouchIndexDesignDocNameByIndex","index","indexName","join","RXDB_POUCH_DELETED_FLAG"],"sources":["../../../../src/plugins/pouchdb/pouchdb-helper.ts"],"sourcesContent":["import type {\n    ChangeStreamEvent,\n    MaybeReadonly,\n    PouchChangeRow,\n    PouchDBInstance,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxLocalDocumentData,\n    StringKeys,\n    WithAttachments\n} from '../../types';\nimport type { RxStorageInstancePouch } from './rx-storage-instance-pouch';\nimport { binaryMd5 } from 'pouchdb-md5';\nimport {\n    blobBufferUtil,\n    flatClone,\n    getHeightOfRevision\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type { ChangeEvent } from 'event-reduce-js';\nimport { getAttachmentSize, hashAttachmentData } from '../../rx-storage-helper';\nimport { RxStoragePouchStatics } from './pouch-statics';\n\nexport type PouchStorageInternals = {\n    pouch: PouchDBInstance;\n};\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_POUCHDB_STORAGE_INSTANCES: Set<RxStorageInstancePouch<any>> = new Set();\n\n/**\n * prefix of local pouchdb documents\n */\nexport const POUCHDB_LOCAL_PREFIX: '_local/' = '_local/';\nexport const POUCHDB_LOCAL_PREFIX_LENGTH = POUCHDB_LOCAL_PREFIX.length;\n\n/**\n * Pouchdb stores indexes as design documents,\n * we have to filter them out and not return the\n * design documents to the outside.\n */\nexport const POUCHDB_DESIGN_PREFIX: '_design/' = '_design/';\n\n\n/**\n * PouchDB does not allow to add custom properties\n * that start with lodash like RxDB's _meta field.\n * So we have to map this field into a non-lodashed field.\n */\nexport const POUCHDB_META_FIELDNAME = 'rxdbMeta';\n\nexport function pouchSwapIdToPrimary<T>(\n    primaryKey: StringKeys<RxDocumentData<T>>,\n    docData: any\n): any {\n\n    if (primaryKey === '_id' || docData[primaryKey]) {\n        return docData;\n    }\n\n    docData = flatClone(docData);\n    docData[primaryKey] = docData._id;\n    delete docData._id;\n\n    return docData;\n}\n\nexport function pouchSwapIdToPrimaryString<T>(\n    primaryKey: StringKeys<RxDocumentData<T>>,\n    str: keyof T\n): StringKeys<RxDocumentData<T>> {\n    if (str === '_id') {\n        return primaryKey;\n    } else {\n        return str as any;\n    }\n}\n\nexport function pouchDocumentDataToRxDocumentData<T>(\n    primaryKey: StringKeys<RxDocumentData<T>>,\n    pouchDoc: WithAttachments<T>\n): RxDocumentData<T> {\n    let useDoc: RxDocumentData<T> = pouchSwapIdToPrimary(primaryKey, pouchDoc);\n\n    // always flat clone becaues we mutate the _attachments property.\n    useDoc = flatClone(useDoc);\n    delete (useDoc as any)._revisions;\n\n    // ensure deleted flag is set.\n    useDoc._deleted = !!useDoc._deleted;\n\n    useDoc._attachments = {};\n    if (pouchDoc._attachments) {\n        Object.entries(pouchDoc._attachments).forEach(([key, value]) => {\n            if ((value as any).data) {\n                useDoc._attachments[key] = {\n                    data: (value as any).data,\n                    type: (value as any).type ? (value as any).type : (value as any).content_type\n                } as any;\n            } else {\n                useDoc._attachments[key] = {\n                    digest: value.digest,\n                    // TODO why do we need to access value.type?\n                    type: (value as any).type ? (value as any).type : value.content_type,\n                    length: value.length\n                };\n            }\n        });\n    }\n\n    useDoc._meta = (useDoc as any)[POUCHDB_META_FIELDNAME];\n    delete (useDoc as any)[POUCHDB_META_FIELDNAME];\n\n    return useDoc;\n}\n\nexport function rxDocumentDataToPouchDocumentData<T>(\n    primaryKey: StringKeys<RxDocumentData<T>>,\n    doc: RxDocumentData<T> | RxDocumentWriteData<T>\n): WithAttachments<T & { _id: string; }> {\n    let pouchDoc: WithAttachments<T> = pouchSwapPrimaryToId(primaryKey, doc);\n\n    // always flat clone becaues we mutate the _attachments property.\n    pouchDoc = flatClone(pouchDoc);\n\n    pouchDoc._attachments = {};\n    if (doc._attachments) {\n        Object.entries(doc._attachments).forEach(([key, value]) => {\n            const useValue: RxAttachmentWriteData & RxAttachmentData = value as any;\n            if (useValue.data) {\n                (pouchDoc as any)._attachments[key] = {\n                    data: useValue.data,\n                    content_type: useValue.type\n                };\n            } else {\n                (pouchDoc as any)._attachments[key] = {\n                    digest: useValue.digest,\n                    content_type: useValue.type,\n                    length: useValue.length,\n                    stub: true\n                };\n            }\n        });\n    }\n\n    (pouchDoc as any)[POUCHDB_META_FIELDNAME] = (pouchDoc as any)._meta;\n    delete (pouchDoc as any)._meta;\n\n    return pouchDoc as any;\n}\n\n\n/**\n * Swaps the primaryKey of the document\n * to the _id property.\n */\nexport function pouchSwapPrimaryToId<RxDocType>(\n    primaryKey: StringKeys<RxDocumentData<RxDocType>>,\n    docData: any\n): RxDocType & { _id: string } {\n    // optimisation shortcut\n    if (primaryKey === '_id') {\n        return docData;\n    }\n\n    const idValue = docData[primaryKey];\n    const ret = flatClone(docData);\n    delete ret[primaryKey];\n    ret._id = idValue;\n    return ret;\n}\n\n/**\n * in:  '_local/foobar'\n * out: 'foobar'\n */\nexport function pouchStripLocalFlagFromPrimary(str: string): string {\n    return str.substring(POUCHDB_LOCAL_PREFIX.length);\n}\n\nexport function getEventKey(\n    pouchDBInstance: PouchDBInstance,\n    primary: string,\n    change: ChangeEvent<RxDocumentData<any>>\n): string {\n    const useRev = change.doc ? change.doc._rev : change.previous._rev;\n    const eventKey = pouchDBInstance.name + '|' + primary + '|' + change.operation + '|' + useRev;\n    return eventKey;\n}\n\nexport function pouchChangeRowToChangeEvent<DocumentData>(\n    primaryKey: StringKeys<DocumentData>,\n    pouchDoc: any\n): ChangeEvent<RxDocumentData<DocumentData>> {\n    if (!pouchDoc) {\n        throw newRxError('SNH', { args: { pouchDoc } });\n    }\n    const id = pouchDoc._id;\n\n    const doc = pouchDocumentDataToRxDocumentData<DocumentData>(\n        primaryKey,\n        pouchDoc as any\n    );\n    const revHeight = doc._rev ? getHeightOfRevision(doc._rev) : 1;\n\n    if (pouchDoc._deleted) {\n        return {\n            operation: 'DELETE',\n            id,\n            doc: null,\n            previous: doc\n        };\n    } else if (revHeight === 1) {\n        return {\n            operation: 'INSERT',\n            id,\n            doc,\n            previous: null\n        };\n    } else {\n        return {\n            operation: 'UPDATE',\n            id,\n            doc: doc,\n            previous: 'UNKNOWN'\n        };\n    }\n}\n\nexport function pouchChangeRowToChangeStreamEvent<DocumentData>(\n    primaryKey: StringKeys<DocumentData>,\n    pouchRow: PouchChangeRow\n): ChangeStreamEvent<DocumentData> {\n    const doc = pouchRow.doc;\n    if (!doc) {\n        throw newRxError('SNH', { args: { pouchRow } });\n    }\n    const revHeight = getHeightOfRevision(doc._rev);\n\n    if (pouchRow.deleted) {\n        const previousDoc = flatClone(\n            pouchDocumentDataToRxDocumentData(\n                primaryKey,\n                pouchRow.doc as any\n            )\n        );\n        const ev: ChangeStreamEvent<DocumentData> = {\n            sequence: pouchRow.seq,\n            id: pouchRow.id,\n            operation: 'DELETE',\n            doc: null,\n            previous: previousDoc\n        };\n        return ev;\n    } else if (revHeight === 1) {\n        const ev: ChangeStreamEvent<DocumentData> = {\n            sequence: pouchRow.seq,\n            id: pouchRow.id,\n            operation: 'INSERT',\n            doc: pouchDocumentDataToRxDocumentData(\n                primaryKey,\n                pouchRow.doc as any\n            ),\n            previous: null\n        };\n        return ev;\n    } else {\n        const ev: ChangeStreamEvent<DocumentData> = {\n            sequence: pouchRow.seq,\n            id: pouchRow.id,\n            operation: 'UPDATE',\n            doc: pouchDocumentDataToRxDocumentData(\n                primaryKey,\n                pouchRow.doc as any\n            ),\n            previous: 'UNKNOWN'\n        };\n        return ev;\n    }\n}\n\n\n/**\n * Runs a primary swap with transform all custom primaryKey occurences\n * into '_id'\n * @recursive\n */\nexport function primarySwapPouchDbQuerySelector<RxDocType>(\n    selector: any,\n    primaryKey: StringKeys<RxDocumentData<RxDocType>>\n): any {\n    if (primaryKey === '_id') {\n        return selector;\n    }\n    if (Array.isArray(selector)) {\n        return selector.map(item => primarySwapPouchDbQuerySelector(item, primaryKey));\n    } else if (typeof selector === 'object') {\n        const ret: any = {};\n        Object.entries(selector).forEach(([k, v]) => {\n            if (k === primaryKey) {\n                ret._id = v;\n            } else {\n                if (k.startsWith('$')) {\n                    ret[k] = primarySwapPouchDbQuerySelector(v, primaryKey);\n                } else {\n                    ret[k] = v;\n                }\n            }\n        });\n        return ret;\n    } else {\n        return selector;\n    }\n}\n\nexport function pouchHash(data: Buffer | Blob | string): Promise<string> {\n    return new Promise(res => {\n        binaryMd5(data, (digest: string) => {\n            res(digest);\n        });\n    });\n}\n\nexport async function writeAttachmentsToAttachments(\n    attachments: { [attachmentId: string]: RxAttachmentData | RxAttachmentWriteData; }\n): Promise<{ [attachmentId: string]: RxAttachmentData; }> {\n    if (!attachments) {\n        return {};\n    }\n    const ret: { [attachmentId: string]: RxAttachmentData; } = {};\n    await Promise.all(\n        Object.entries(attachments).map(async ([key, obj]) => {\n            if (!obj.type) {\n                throw newRxError('SNH', { args: { obj } });\n            }\n            /**\n             * Is write attachment,\n             * so we have to remove the data to have a\n             * non-write attachment.\n             */\n            if ((obj as RxAttachmentWriteData).data) {\n                const asWrite = (obj as RxAttachmentWriteData);\n                const dataAsBase64String = typeof asWrite.data === 'string' ? asWrite.data : await blobBufferUtil.toBase64String(asWrite.data);\n                const hash = await hashAttachmentData(\n                    dataAsBase64String,\n                    RxStoragePouchStatics\n                );\n                const length = getAttachmentSize(dataAsBase64String);\n                ret[key] = {\n                    digest: 'md5-' + hash,\n                    length,\n                    type: asWrite.type\n                };\n            } else {\n                ret[key] = obj as RxAttachmentData;\n            }\n        })\n    );\n    return ret;\n}\n\nexport function getPouchIndexDesignDocNameByIndex(\n    index: MaybeReadonly<string[]>\n): string {\n    const indexName = 'idx-rxdb-index-' + index.join(',');\n    return indexName;\n}\n\n/**\n * PouchDB has not way to read deleted local documents\n * out of the database.\n * So instead of deleting them, we set a custom deleted flag.\n */\nexport const RXDB_POUCH_DELETED_FLAG = 'rxdb-pouch-deleted' as const;\n\n\nexport type RxLocalDocumentDataWithCustomDeletedFlag<D> = RxLocalDocumentData<D> & {\n    [k in typeof RXDB_POUCH_DELETED_FLAG]?: boolean;\n};\n"],"mappings":"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"}