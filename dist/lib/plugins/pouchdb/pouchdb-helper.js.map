{"version":3,"sources":["../../../../src/plugins/pouchdb/pouchdb-helper.ts"],"names":[],"mappings":"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","file":"pouchdb-helper.js","sourcesContent":["import type {\n    ChangeStreamEvent,\n    PouchChangeRow,\n    PouchDBInstance,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxDocumentData,\n    RxDocumentWriteData,\n    WithAttachments\n} from '../../types';\nimport type { RxStorageInstancePouch } from './rx-storage-instance-pouch';\nimport type {\n    RxStorageKeyObjectInstancePouch\n} from './rx-storage-key-object-instance-pouch';\nimport { binaryMd5 } from 'pouchdb-md5';\nimport {\n    blobBufferUtil,\n    flatClone,\n    getHeightOfRevision\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type { ChangeEvent } from 'event-reduce-js';\n\nexport type PouchStorageInternals = {\n    pouch: PouchDBInstance;\n};\n\n/**\n * Used to check in tests if all instances have been cleaned up.\n */\nexport const OPEN_POUCHDB_STORAGE_INSTANCES: Set<RxStorageKeyObjectInstancePouch | RxStorageInstancePouch<any>> = new Set();\n\n/**\n * prefix of local pouchdb documents\n */\nexport const POUCHDB_LOCAL_PREFIX: '_local/' = '_local/';\n/**\n * Pouchdb stores indexes as design documents,\n * we have to filter them out and not return the\n * design documents to the outside.\n */\nexport const POUCHDB_DESIGN_PREFIX: '_design/' = '_design/';\n\n\nexport function pouchHash(data: Buffer | Blob | string): Promise<string> {\n    return new Promise(res => {\n        binaryMd5(data, (digest: string) => {\n            res('md5-' + digest);\n        });\n    });\n}\n\nexport function pouchSwapIdToPrimary<T>(\n    primaryKey: keyof T,\n    docData: any\n): any {\n\n    if (primaryKey === '_id' || docData[primaryKey]) {\n        return docData;\n    }\n    docData = flatClone(docData);\n    docData[primaryKey] = docData._id;\n    delete docData._id;\n\n    return docData;\n}\n\nexport function pouchDocumentDataToRxDocumentData<T>(\n    primaryKey: keyof T,\n    pouchDoc: WithAttachments<T>\n): RxDocumentData<T> {\n    let useDoc: RxDocumentData<T> = pouchSwapIdToPrimary(primaryKey, pouchDoc);\n\n    // always flat clone becaues we mutate the _attachments property.\n    useDoc = flatClone(useDoc);\n    delete (useDoc as any)._revisions;\n\n    useDoc._attachments = {};\n    if (pouchDoc._attachments) {\n        Object.entries(pouchDoc._attachments).forEach(([key, value]) => {\n            if ((value as any).data) {\n                useDoc._attachments[key] = {\n                    data: (value as any).data,\n                    type: (value as any).type ? (value as any).type : (value as any).content_type\n                } as any;\n            } else {\n                useDoc._attachments[key] = {\n                    digest: value.digest,\n                    // TODO why do we need to access value.type?\n                    type: (value as any).type ? (value as any).type : value.content_type,\n                    length: value.length\n                };\n            }\n        });\n    }\n\n    return useDoc;\n}\n\nexport function rxDocumentDataToPouchDocumentData<T>(\n    primaryKey: keyof T,\n    doc: RxDocumentData<T> | RxDocumentWriteData<T>\n): WithAttachments<T & { _id: string; }> {\n    let pouchDoc: WithAttachments<T> = pouchSwapPrimaryToId(primaryKey, doc);\n\n    // always flat clone becaues we mutate the _attachments property.\n    pouchDoc = flatClone(pouchDoc);\n\n    pouchDoc._attachments = {};\n    if (doc._attachments) {\n        Object.entries(doc._attachments).forEach(([key, value]) => {\n            const useValue: RxAttachmentWriteData & RxAttachmentData = value as any;\n            if (useValue.data) {\n                (pouchDoc as any)._attachments[key] = {\n                    data: useValue.data,\n                    content_type: useValue.type\n                };\n            } else {\n                (pouchDoc as any)._attachments[key] = {\n                    digest: useValue.digest,\n                    content_type: useValue.type,\n                    length: useValue.length,\n                    stub: true\n                };\n            }\n        });\n    }\n\n    return pouchDoc as any;\n}\n\n\n/**\n * Swaps the primaryKey of the document\n * to the _id property.\n */\nexport function pouchSwapPrimaryToId<RxDocType>(\n    primaryKey: keyof RxDocType,\n    docData: any\n): RxDocType & { _id: string } {\n    // optimisation shortcut\n    if (primaryKey === '_id') {\n        return docData;\n    }\n\n    const idValue = docData[primaryKey];\n    const ret = flatClone(docData);\n    delete ret[primaryKey];\n    ret._id = idValue;\n    return ret;\n}\n\n/**\n * in:  '_local/foobar'\n * out: 'foobar'\n */\nexport function pouchStripLocalFlagFromPrimary(str: string): string {\n    return str.substring(POUCHDB_LOCAL_PREFIX.length);\n}\n\nexport function getEventKey(\n    isLocal: boolean,\n    primary: string,\n    revision: string\n): string {\n\n    // TODO remove this check this should never happen\n    if (!primary) {\n        throw new Error('primary missing !!');\n    }\n\n    const prefix = isLocal ? 'local' : 'non-local';\n    const eventKey = prefix + '|' + primary + '|' + revision;\n    return eventKey;\n}\n\nexport function pouchChangeRowToChangeEvent<DocumentData>(\n    primaryKey: keyof DocumentData,\n    pouchDoc: any\n): ChangeEvent<RxDocumentData<DocumentData>> {\n    if (!pouchDoc) {\n        throw newRxError('SNH', { args: { pouchDoc } });\n    }\n    const id = pouchDoc._id;\n\n    const doc = pouchDocumentDataToRxDocumentData<DocumentData>(\n        primaryKey,\n        pouchDoc as any\n    );\n    const revHeight = getHeightOfRevision(doc._rev);\n\n    if (pouchDoc._deleted) {\n        return {\n            operation: 'DELETE',\n            id,\n            doc: null,\n            previous: doc\n        };\n    } else if (revHeight === 1) {\n        return {\n            operation: 'INSERT',\n            id,\n            doc,\n            previous: null\n        };\n    } else {\n        return {\n            operation: 'UPDATE',\n            id,\n            doc: doc,\n            previous: 'UNKNOWN'\n        };\n    }\n}\n\nexport function pouchChangeRowToChangeStreamEvent<DocumentData>(\n    primaryKey: keyof DocumentData,\n    pouchRow: PouchChangeRow\n): ChangeStreamEvent<DocumentData> {\n    const doc = pouchRow.doc;\n    if (!doc) {\n        throw newRxError('SNH', { args: { pouchRow } });\n    }\n    const revHeight = getHeightOfRevision(doc._rev);\n\n    if (pouchRow.deleted) {\n        const previousDoc = flatClone(\n            pouchDocumentDataToRxDocumentData(\n                primaryKey,\n                pouchRow.doc as any\n            )\n        );\n        delete previousDoc._deleted;\n        const ev: ChangeStreamEvent<DocumentData> = {\n            sequence: pouchRow.seq,\n            id: pouchRow.id,\n            operation: 'DELETE',\n            doc: null,\n            previous: previousDoc\n        };\n        return ev;\n    } else if (revHeight === 1) {\n        const ev: ChangeStreamEvent<DocumentData> = {\n            sequence: pouchRow.seq,\n            id: pouchRow.id,\n            operation: 'INSERT',\n            doc: pouchDocumentDataToRxDocumentData(\n                primaryKey,\n                pouchRow.doc as any\n            ),\n            previous: null\n        };\n        return ev;\n    } else {\n        const ev: ChangeStreamEvent<DocumentData> = {\n            sequence: pouchRow.seq,\n            id: pouchRow.id,\n            operation: 'UPDATE',\n            doc: pouchDocumentDataToRxDocumentData(\n                primaryKey,\n                pouchRow.doc as any\n            ),\n            previous: 'UNKNOWN'\n        };\n        return ev;\n    }\n}\n\n\n/**\n * Runs a primary swap with transform all custom primaryKey occurences\n * into '_id'\n * @recursive\n */\nexport function primarySwapPouchDbQuerySelector<RxDocType>(selector: any, primaryKey: keyof RxDocType): any {\n    if (primaryKey === '_id') {\n        return selector;\n    }\n    if (Array.isArray(selector)) {\n        return selector.map(item => primarySwapPouchDbQuerySelector(item, primaryKey));\n    } else if (typeof selector === 'object') {\n        const ret: any = {};\n        Object.entries(selector).forEach(([k, v]) => {\n            if (k === primaryKey) {\n                ret._id = v;\n            } else {\n                if (k.startsWith('$')) {\n                    ret[k] = primarySwapPouchDbQuerySelector(v, primaryKey);\n                } else {\n                    ret[k] = v;\n                }\n            }\n        });\n        return ret;\n    } else {\n        return selector;\n    }\n}\n\n\nexport async function writeAttachmentsToAttachments(\n    attachments: { [attachmentId: string]: RxAttachmentData | RxAttachmentWriteData; }\n): Promise<{ [attachmentId: string]: RxAttachmentData; }> {\n    if (!attachments) {\n        return {};\n    }\n    const ret: { [attachmentId: string]: RxAttachmentData; } = {};\n    await Promise.all(\n        Object.entries(attachments).map(async ([key, obj]) => {\n            if (!obj.type) {\n                throw newRxError('SNH', { args: { obj } });\n            }\n            if ((obj as RxAttachmentWriteData).data) {\n                const asWrite = (obj as RxAttachmentWriteData);\n\n                const hash = await pouchHash(asWrite.data);\n                const asString = await blobBufferUtil.toString(asWrite.data);\n                const length = asString.length;\n                ret[key] = {\n                    digest: hash,\n                    length,\n                    type: asWrite.type\n                };\n            } else {\n                ret[key] = obj as RxAttachmentData;\n            }\n        })\n    );\n    return ret;\n}\n\n"]}