{"version":3,"sources":["../../../../src/plugins/pouchdb/pouch-statics.ts"],"names":["RxStoragePouchStatics","hash","data","hashKey","POUCH_HASH_KEY","getSortComparator","schema","query","primaryPath","primaryKey","sortOptions","sort","inMemoryFields","Object","keys","selector","filter","key","startsWith","fun","a","b","args","rows","map","doc","sortedRows","length","_id","getQueryMatcher","massagedSelector","cloned","row","rowsMatched","ret","prepareQuery","mutateableQuery","forEach","sortPart","comparisonOperators","keyUsed","some","op","includes","schemaObj","type","$gt","$regex","path","sortArray","part","direction","values","useKey","newPart","entries","k","v","Array","isArray"],"mappings":"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","sourcesContent":["import {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport { newRxError } from '../../rx-error';\n\nimport {\n    pouchHash,\n    pouchSwapPrimaryToId,\n    POUCH_HASH_KEY,\n    primarySwapPouchDbQuerySelector\n} from './pouchdb-helper';\nimport type { DeterministicSortComparator, QueryMatcher } from 'event-reduce-js';\nimport { getSchemaByObjectPath } from '../../rx-schema-helper';\nimport type {\n    MangoQuery,\n    MangoQuerySortDirection,\n    MangoQuerySortPart,\n    PreparedQuery,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageStatics\n} from '../../types';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\n\nexport const RxStoragePouchStatics: RxStorageStatics = {\n\n    /**\n     * create the same diggest as an attachment with that data\n     * would have created by pouchdb internally.\n     */\n    hash(data: Buffer | Blob | string): Promise<string> {\n        return pouchHash(data);\n    },\n    hashKey: POUCH_HASH_KEY,\n\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const sortOptions: MangoQuerySortPart[] = query.sort ? (query.sort as any) : [{\n            [primaryPath]: 'asc'\n        }];\n        const inMemoryFields = Object\n            .keys(query.selector)\n            .filter(key => !key.startsWith('$'));\n\n        const fun: DeterministicSortComparator<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            /**\n             * Sorting on two documents with the same primary is not allowed\n             * because it might end up in a non-deterministic result.\n             */\n            if (a[primaryPath] === b[primaryPath]) {\n                throw newRxError('SNH', { args: { a, b }, primaryPath: primaryPath as any });\n            }\n\n            // TODO use createFieldSorter\n            // TODO make a performance test\n            const rows = [a, b].map(doc => ({\n                doc: pouchSwapPrimaryToId<RxDocType>(primaryPath, doc)\n            }));\n            const sortedRows: { doc: any }[] = filterInMemoryFields(\n                rows,\n                {\n                    selector: {},\n                    sort: sortOptions\n                },\n                inMemoryFields\n            );\n            if (sortedRows.length !== 2) {\n                throw newRxError('SNH', {\n                    query,\n                    primaryPath: primaryPath as any,\n                    args: {\n                        rows,\n                        sortedRows\n                    }\n                });\n            }\n            if (sortedRows[0].doc._id === rows[0].doc._id) {\n                return -1;\n            } else {\n                return 1;\n            }\n        };\n        return fun;\n    },\n\n    /**\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n    getQueryMatcher<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const massagedSelector = massageSelector(query.selector);\n\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocType) => {\n            const cloned = pouchSwapPrimaryToId(primaryPath, doc);\n            const row = {\n                doc: cloned\n            };\n            const rowsMatched = filterInMemoryFields(\n                [row],\n                { selector: massagedSelector },\n                Object.keys(query.selector)\n            );\n            const ret = rowsMatched && rowsMatched.length === 1;\n            return ret;\n        };\n        return fun;\n    },\n\n\n    /**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        mutateableQuery: MangoQuery<RxDocType>\n    ): PreparedQuery<RxDocType> {\n        const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n        const query = mutateableQuery;\n\n        /**\n         * because sort wont work on unused keys we have to workaround\n         * so we add the key to the selector if necessary\n         * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n         */\n        if (query.sort) {\n            query.sort.forEach(sortPart => {\n                const key = Object.keys(sortPart)[0];\n                const comparisonOperators = ['$gt', '$gte', '$lt', '$lte'];\n                const keyUsed = query.selector[key] && Object.keys(query.selector[key]).some(op => comparisonOperators.includes(op)) || false;\n                if (!keyUsed) {\n                    const schemaObj = getSchemaByObjectPath(schema, key);\n                    if (!schemaObj) {\n                        throw newRxError('QU5', {\n                            query,\n                            key,\n                            schema\n                        });\n                    }\n                    if (!query.selector[key]) {\n                        query.selector[key] = {};\n                    }\n                    switch (schemaObj.type) {\n                        case 'number':\n                        case 'integer':\n                            // TODO change back to -Infinity when issue resolved\n                            // @link https://github.com/pouchdb/pouchdb/issues/6454\n                            // -Infinity does not work since pouchdb 6.2.0\n                            query.selector[key].$gt = -9999999999999999999999999999;\n                            break;\n                        case 'string':\n                            /**\n                             * strings need an empty string, see\n                             * @link https://github.com/pubkey/rxdb/issues/585\n                             */\n                            if (typeof query.selector[key] !== 'string') {\n                                query.selector[key].$gt = '';\n                            }\n                            break;\n                        default:\n                            query.selector[key].$gt = null;\n                            break;\n                    }\n                }\n            });\n        }\n\n        // regex does not work over the primary key\n        // TODO move this to dev mode\n        if (query.selector[primaryKey as any] && query.selector[primaryKey as any].$regex) {\n            throw newRxError('QU4', {\n                path: primaryKey as any,\n                query: mutateableQuery\n            });\n        }\n\n        // primary-swap sorting\n        if (query.sort) {\n            const sortArray: MangoQuerySortPart<RxDocType>[] = query.sort.map(part => {\n                const key = Object.keys(part)[0];\n                const direction: MangoQuerySortDirection = Object.values(part)[0];\n                const useKey = key === primaryKey ? '_id' : key;\n                const newPart = { [useKey]: direction };\n                return newPart as any;\n            });\n            query.sort = sortArray;\n        }\n\n        // strip empty selectors\n        Object.entries(query.selector).forEach(([k, v]) => {\n            if (\n                typeof v === 'object' &&\n                v !== null &&\n                !Array.isArray(v) &&\n                Object.keys((v as any)).length === 0\n            ) {\n                delete query.selector[k];\n            }\n        });\n\n        query.selector = primarySwapPouchDbQuerySelector(query.selector, primaryKey);\n\n        /**\n         * To ensure a deterministic sorting,\n         * we have to ensure the primary key is always part\n         * of the sort query.\n\n        * TODO This should be done but will not work with pouchdb\n         * because it will throw\n         * 'Cannot sort on field(s) \"key\" when using the default index'\n         * So we likely have to modify the indexes so that this works. \n         */\n        /*\n        if (!mutateableQuery.sort) {\n            mutateableQuery.sort = [{ [this.primaryPath]: 'asc' }] as any;\n        } else {\n            const isPrimaryInSort = mutateableQuery.sort\n                .find(p => firstPropertyNameOfObject(p) === this.primaryPath);\n            if (!isPrimaryInSort) {\n                mutateableQuery.sort.push({ [this.primaryPath]: 'asc' } as any);\n            }\n        }\n        */\n\n        return query;\n    }\n};\n"],"file":"pouch-statics.js"}