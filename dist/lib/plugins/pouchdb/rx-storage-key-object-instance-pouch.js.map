{"version":3,"sources":["../../../../src/plugins/pouchdb/rx-storage-key-object-instance-pouch.ts"],"names":[],"mappings":"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","file":"rx-storage-key-object-instance-pouch.js","sourcesContent":["import { ChangeEvent } from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageKeyObjectInstance,\n    RxStorageChangeEvent,\n    RxLocalDocumentData,\n    BulkWriteLocalRow,\n    RxLocalStorageBulkWriteResponse,\n    PouchWriteError,\n    RxStorageBulkWriteLocalError,\n    PouchBulkDocResultRow,\n    PouchSettings\n} from '../../types';\nimport {\n    flatClone,\n    getFromMapOrThrow,\n    now,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport {\n    getEventKey,\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    POUCHDB_LOCAL_PREFIX,\n    PouchStorageInternals,\n    pouchStripLocalFlagFromPrimary\n} from './pouchdb-helper';\n\nexport class RxStorageKeyObjectInstancePouch implements RxStorageKeyObjectInstance<PouchStorageInternals, PouchSettings> {\n\n    private changes$: Subject<RxStorageChangeEvent<RxLocalDocumentData>> = new Subject();\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n    }\n\n    close(): Promise<void> {\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        await this.internals.pouch.destroy();\n    }\n\n    public async bulkWrite<D = any>(\n        documentWrites: BulkWriteLocalRow<D>[]\n    ): Promise<RxLocalStorageBulkWriteResponse<D>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const writeRowById: Map<string, BulkWriteLocalRow<D>> = new Map();\n\n        const insertDocs: RxLocalDocumentData<D>[] = documentWrites.map(writeRow => {\n            writeRowById.set(writeRow.document._id, writeRow);\n            const storeDocumentData = flatClone(writeRow.document);\n\n            /**\n             * add local prefix\n             * Local documents always have _id as primary\n             */\n            storeDocumentData._id = POUCHDB_LOCAL_PREFIX + storeDocumentData._id;\n\n            // if previous document exists, we have to send the previous revision to pouchdb.\n            if (writeRow.previous) {\n                storeDocumentData._rev = writeRow.previous._rev;\n            }\n\n            return storeDocumentData;\n        });\n\n        const startTime = now();\n        const pouchResult = await this.internals.pouch.bulkDocs(insertDocs);\n        const endTime = now();\n        const ret: RxLocalStorageBulkWriteResponse<D> = {\n            success: new Map(),\n            error: new Map()\n        };\n\n        pouchResult.forEach(resultRow => {\n            resultRow.id = pouchStripLocalFlagFromPrimary(resultRow.id);\n            const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n            if ((resultRow as PouchWriteError).error) {\n                const err: RxStorageBulkWriteLocalError<D> = {\n                    isError: true,\n                    status: 409,\n                    documentId: resultRow.id,\n                    writeRow\n                };\n                ret.error.set(resultRow.id, err);\n            } else {\n                const pushObj: RxLocalDocumentData<D> = flatClone(writeRow.document);\n                pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n                // local document cannot have attachments\n                pushObj._attachments = {};\n                ret.success.set(resultRow.id, pushObj as any);\n\n                /**\n                 * Emit a write event to the changestream.\n                 * We do this here and not by observing the internal pouchdb changes\n                 * because here we have the previous document data and do\n                 * not have to fill previous with 'UNKNOWN'.\n                 */\n                let event: ChangeEvent<RxLocalDocumentData<D>>;\n                if (!writeRow.previous) {\n                    // was insert\n                    event = {\n                        operation: 'INSERT',\n                        doc: pushObj,\n                        id: resultRow.id,\n                        previous: null\n                    };\n                } else if (writeRow.document._deleted) {\n                    // was delete\n\n                    // we need to add the new revision to the previous doc\n                    // so that the eventkey is calculated correctly.\n                    // Is this a hack? idk.\n                    const previousDoc = flatClone(writeRow.previous);\n                    previousDoc._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                    event = {\n                        operation: 'DELETE',\n                        doc: null,\n                        id: resultRow.id,\n                        previous: previousDoc\n                    };\n                } else {\n                    // was update\n                    event = {\n                        operation: 'UPDATE',\n                        doc: pushObj,\n                        id: resultRow.id,\n                        previous: writeRow.previous\n                    };\n                }\n\n                if (\n                    writeRow.document._deleted &&\n                    (\n                        !writeRow.previous ||\n                        writeRow.previous._deleted\n                    )\n                ) {\n                    /**\n                     * A deleted document was newly added to the storage engine,\n                     * do not emit an event.\n                     */\n                } else {\n\n                    const doc: RxLocalDocumentData<D> = event.operation === 'DELETE' ? event.previous as any : event.doc as any;\n                    const eventId = getEventKey(true, doc._id, doc._rev ? doc._rev : '');\n\n                    const storageChangeEvent: RxStorageChangeEvent<RxLocalDocumentData<D>> = {\n                        eventId,\n                        documentId: resultRow.id,\n                        change: event,\n                        startTime,\n                        endTime\n                    };\n\n\n                    this.changes$.next(storageChangeEvent);\n                }\n\n            }\n\n\n        });\n\n\n\n        return ret;\n    }\n\n    async findLocalDocumentsById<D = any>(ids: string[]): Promise<Map<string, RxLocalDocumentData<D>>> {\n        const ret = new Map();\n\n        /**\n         * Pouchdb is not able to bulk-request local documents\n         * with the pouch.allDocs() method.\n         * so we need to get each by a single call.\n         * TODO create an issue at the pouchdb repo\n         */\n        await Promise.all(\n            ids.map(async (id) => {\n                const prefixedId = POUCHDB_LOCAL_PREFIX + id;\n                try {\n                    const docData = await this.internals.pouch.get(prefixedId);\n                    docData._id = id;\n                    ret.set(id, docData);\n                } catch (err) {\n                    // do not add to result list on error\n                }\n            })\n        );\n        return ret;\n    }\n\n    changeStream(): Observable<RxStorageChangeEvent<RxLocalDocumentData>> {\n        return this.changes$.asObservable();\n    }\n}\n"]}