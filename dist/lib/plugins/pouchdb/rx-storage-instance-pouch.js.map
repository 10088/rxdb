{"version":3,"sources":["../../../../src/plugins/pouchdb/rx-storage-instance-pouch.ts"],"names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","lastId","RxStorageInstancePouch","databaseName","collectionName","schema","internals","options","id","changes$","Subject","subs","OPEN_POUCHDB_STORAGE_INSTANCES","add","primaryPath","primaryKey","emitter","pouch","emittedEventBulkIds","ObliviousSet","eventSub","subject","subscribe","ev","events","length","has","forEach","event","change","doc","previous","next","push","close","sub","unsubscribe","PROMISE_RESOLVE_VOID","remove","destroy","bulkWrite","documentWrites","args","writeRow","document","_rev","console","dir","Error","includes","parsedPrev","height","parsedNew","writeRowById","Map","insertDocsById","writeDocs","map","writeData","primary","set","storeDocumentData","bulkDocs","new_edits","custom","pouchResult","ret","success","error","Promise","all","resultRow","err","isError","status","documentId","pushObj","rev","_attachments","query","preparedQuery","find","findResult","documents","docs","pouchDoc","useDoc","getAttachmentData","attachmentId","getAttachment","attachmentData","blobBufferUtil","toBase64String","findDocumentsById","ids","deleted","allDocs","include_docs","keys","rows","filter","row","docData","changes","live","since","doc_ids","style","viaChanges","retDocs","results","get","firstDoc","useFirstDoc","changeStream","asObservable","getChangedDocuments","changedDocuments","lastSequence","pouchChangesOpts","limit","sinceSequence","descending","direction","first","skippedDesignDocuments","pouchResults","addChangedDocuments","isDesignDoc","startsWith","POUCHDB_DESIGN_PREFIX","sequence","seq","concat","last_seq"],"mappings":"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","sourcesContent":["import { ObliviousSet } from 'oblivious-set';\nimport {\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type {\n    BulkWriteRow,\n    ChangeStreamOnceOptions,\n    EventBulk,\n    PouchBulkDocResultRow,\n    PouchChangesOptionsNonLive,\n    PouchSettings,\n    PouchWriteError,\n    PreparedQuery,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageQueryResult\n} from '../../types';\nimport {\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    POUCHDB_DESIGN_PREFIX,\n    pouchDocumentDataToRxDocumentData,\n    PouchStorageInternals,\n    pouchSwapIdToPrimary,\n    rxDocumentDataToPouchDocumentData,\n    writeAttachmentsToAttachments\n} from './pouchdb-helper';\nimport {\n    blobBufferUtil,\n    flatClone,\n    getFromMapOrThrow,\n    parseRevision,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport {\n    getCustomEventEmitterByPouch\n} from './custom-events-plugin';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\n\n\nlet lastId = 0;\n\nexport class RxStorageInstancePouch<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    PouchStorageInternals,\n    PouchSettings\n> {\n    public readonly id: number = lastId++;\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private subs: Subscription[] = [];\n    private primaryPath: keyof RxDocType;\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n\n        /**\n         * Instead of listening to pouch.changes,\n         * we have overwritten pouchdbs bulkDocs()\n         * and create our own event stream, this will work more relyable\n         * and does not mix up with write events from other sources.\n         */\n        const emitter = getCustomEventEmitterByPouch<RxDocType>(this.internals.pouch);\n\n        /**\n         * Contains all eventIds that of emitted events,\n         * used because multi-instance pouchdbs often will reemit the same\n         * event on the other browser tab so we have to de-duplicate them.\n         */\n        const emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n        const eventSub = emitter.subject.subscribe(async (ev) => {\n            if (\n                ev.events.length === 0 ||\n                emittedEventBulkIds.has(ev.id)\n            ) {\n                return;\n            }\n            emittedEventBulkIds.add(ev.id);\n\n            // rewrite primaryPath of all events\n            ev.events.forEach(event => {\n                if (event.change.doc) {\n                    event.change.doc = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.doc as any\n                    );\n                }\n                if (event.change.previous) {\n                    event.change.previous = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.previous as any\n                    );\n                }\n            });\n\n            this.changes$.next(ev);\n        });\n        this.subs.push(eventSub);\n    }\n\n    close() {\n        this.subs.forEach(sub => sub.unsubscribe());\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        this.subs.forEach(sub => sub.unsubscribe());\n\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        await this.internals.pouch.destroy();\n    }\n    public async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[]\n    ): Promise<\n        RxStorageBulkWriteResponse<RxDocType>\n    > {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n\n        // TODO remove this check\n        documentWrites.forEach(writeRow => {\n            if (!writeRow.document._rev) {\n                console.dir(writeRow);\n                throw new Error('rev missing');\n            }\n            if (!writeRow.document._rev.includes('-')) {\n                console.dir(writeRow);\n                throw new Error('invalid rev format: ' + writeRow.document._rev);\n            }\n            if (writeRow.previous) {\n                const parsedPrev = parseRevision(writeRow.previous._rev);\n                if (typeof parsedPrev.height !== 'number') {\n                    console.dir(writeRow);\n                    throw new Error('rev height is no number');\n                }\n                const parsedNew = parseRevision(writeRow.document._rev);\n                if (parsedPrev.height >= parsedNew.height) {\n                    console.dir(writeRow);\n                    throw new Error('new revision must be higher then previous');\n                }\n            }\n        });\n\n\n\n        const writeRowById: Map<string, BulkWriteRow<RxDocType>> = new Map();\n        const insertDocsById: Map<string, any> = new Map();\n        const writeDocs: (RxDocType & { _id: string; _rev: string })[] = documentWrites.map(writeData => {\n            const primary: string = (writeData.document as any)[this.primaryPath];\n            writeRowById.set(primary, writeData);\n            const storeDocumentData: any = rxDocumentDataToPouchDocumentData<RxDocType>(\n                this.primaryPath,\n                writeData.document\n            );\n            insertDocsById.set(primary, storeDocumentData);\n            return storeDocumentData;\n        });\n        const pouchResult = await this.internals.pouch.bulkDocs(writeDocs, {\n            new_edits: false,\n            custom: {\n                primaryPath: this.primaryPath,\n                writeRowById,\n                insertDocsById\n            }\n        } as any);\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        await Promise.all(\n            pouchResult.map(async (resultRow) => {\n                const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n                if ((resultRow as PouchWriteError).error) {\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: resultRow.id,\n                        writeRow\n                    };\n                    ret.error[resultRow.id] = err;\n                } else {\n                    let pushObj: RxDocumentData<RxDocType> = flatClone(writeRow.document) as any;\n                    pushObj = pouchSwapIdToPrimary(this.primaryPath, pushObj);\n                    pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                    // replace the inserted attachments with their diggest\n                    pushObj._attachments = {};\n                    if (!writeRow.document._attachments) {\n                        writeRow.document._attachments = {};\n                    } else {\n                        pushObj._attachments = await writeAttachmentsToAttachments(writeRow.document._attachments);\n                    }\n                    ret.success[resultRow.id] = pushObj;\n                }\n            })\n        );\n        return ret;\n    }\n\n    public async query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        const findResult = await this.internals.pouch.find<RxDocType>(preparedQuery);\n        const ret: RxStorageQueryResult<RxDocType> = {\n            documents: findResult.docs.map(pouchDoc => {\n                const useDoc = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    pouchDoc\n                );\n                return useDoc;\n            })\n        };\n        return ret;\n    }\n\n    async getAttachmentData(\n        documentId: string,\n        attachmentId: string\n    ): Promise<string> {\n        const attachmentData = await this.internals.pouch.getAttachment(\n            documentId,\n            attachmentId\n        );\n        const ret = await blobBufferUtil.toBase64String(attachmentData);\n        return ret;\n    }\n\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        /**\n         * On deleted documents, PouchDB will only return the tombstone.\n         * So we have to get the properties directly for each document\n         * with the hack of getting the changes and then make one request per document\n         * with the latest revision.\n         * TODO create an issue at pouchdb on how to get the document data of deleted documents,\n         * when one past revision was written via new_edits=false\n         * @link https://stackoverflow.com/a/63516761/3443137\n         */\n        if (deleted) {\n            const viaChanges = await this.internals.pouch.changes({\n                live: false,\n                since: 0,\n                doc_ids: ids,\n                style: 'all_docs'\n            });\n\n            const retDocs: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n            await Promise.all(\n                viaChanges.results.map(async (result) => {\n                    const firstDoc = await this.internals.pouch.get(\n                        result.id,\n                        {\n                            rev: result.changes[0].rev,\n                            deleted: 'ok',\n                            style: 'all_docs'\n                        }\n                    );\n                    const useFirstDoc = pouchDocumentDataToRxDocumentData(\n                        this.primaryPath,\n                        firstDoc\n                    );\n                    retDocs[result.id] = useFirstDoc;\n                })\n            );\n            return retDocs;\n        }\n\n\n        const pouchResult = await this.internals.pouch.allDocs({\n            include_docs: true,\n            keys: ids\n        });\n\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n        pouchResult.rows\n            .filter(row => !!row.doc)\n            .forEach(row => {\n                let docData = row.doc;\n                docData = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    docData\n                );\n                ret[row.id] = docData;\n            });\n\n        return ret;\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: {\n            id: string;\n            sequence: number;\n        }[];\n        lastSequence: number;\n    }> {\n        const pouchChangesOpts: PouchChangesOptionsNonLive = {\n            live: false,\n            limit: options.limit,\n            include_docs: false,\n            since: options.sinceSequence,\n            descending: options.direction === 'before' ? true : false\n        };\n\n        let lastSequence = 0;\n        let first = true;\n        let skippedDesignDocuments = 0;\n        let changedDocuments: { id: string; sequence: number; }[] = [];\n        /**\n         * Because PouchDB also returns changes of _design documents,\n         * we have to fill up the results with more changes if this happens.\n         */\n        while (first || skippedDesignDocuments > 0) {\n            first = false;\n            skippedDesignDocuments = 0;\n            const pouchResults = await this.internals.pouch.changes(pouchChangesOpts);\n            const addChangedDocuments = pouchResults.results\n                .filter(row => {\n                    const isDesignDoc = row.id.startsWith(POUCHDB_DESIGN_PREFIX);\n                    if (isDesignDoc) {\n                        skippedDesignDocuments = skippedDesignDocuments + 1;\n                        return false;\n                    } else {\n                        return true;\n                    }\n                })\n                .map(row => ({\n                    id: row.id,\n                    sequence: row.seq\n                }));\n            changedDocuments = changedDocuments.concat(addChangedDocuments);\n            lastSequence = pouchResults.last_seq;\n\n            // modify pouch options for next run of pouch.changes()\n            pouchChangesOpts.since = lastSequence;\n            pouchChangesOpts.limit = skippedDesignDocuments;\n        }\n\n        return {\n            changedDocuments,\n            lastSequence\n        };\n    }\n}\n"],"file":"rx-storage-instance-pouch.js"}