{"version":3,"sources":["../../../../src/plugins/pouchdb/rx-storage-instance-pouch.ts"],"names":[],"mappings":"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","file":"rx-storage-instance-pouch.js","sourcesContent":["import type { ChangeEvent, SortComparator, QueryMatcher } from 'event-reduce-js';\nimport { ObliviousSet } from 'oblivious-set';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    BlobBuffer,\n    BulkWriteRow, ChangeStreamOnceOptions, MangoQuery, MangoQuerySortDirection,\n    MangoQuerySortPart, PouchBulkDocResultRow,\n    PouchChangesOptionsNonLive, PouchSettings,\n    PouchWriteError, PreparedQuery, RxDocumentData, RxJsonSchema, RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse, RxStorageChangeEvent, RxStorageInstance, RxStorageQueryResult\n} from '../../types';\nimport type {\n    CompareFunction\n} from 'array-push-at-sort-position';\nimport {\n    getEventKey,\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    pouchChangeRowToChangeEvent,\n    POUCHDB_DESIGN_PREFIX,\n    POUCHDB_LOCAL_PREFIX,\n    pouchDocumentDataToRxDocumentData,\n    PouchStorageInternals,\n    pouchSwapIdToPrimary,\n    pouchSwapPrimaryToId,\n    primarySwapPouchDbQuerySelector,\n    rxDocumentDataToPouchDocumentData,\n    writeAttachmentsToAttachments\n} from './pouchdb-helper';\nimport {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport { flatClone, getFromMapOrThrow, getHeightOfRevision, PROMISE_RESOLVE_VOID } from '../../util';\nimport {\n    getCustomEventEmitterByPouch\n} from './custom-events-plugin';\nimport { getSchemaByObjectPath } from '../../rx-schema-helper';\n\nexport class RxStorageInstancePouch<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    PouchStorageInternals,\n    PouchSettings\n> {\n\n    private changes$: Subject<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = new Subject();\n    private subs: Subscription[] = [];\n    private emittedEventIds: ObliviousSet<string>;\n    private primaryPath: keyof RxDocType;\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n\n\n        /**\n         * Instead of listening to pouch.changes,\n         * we have overwritten pouchdbs bulkDocs()\n         * and create our own event stream, this will work more relyable\n         * and does not mix up with write events from other sources.\n         */\n        const emitter = getCustomEventEmitterByPouch(this.internals.pouch);\n        this.emittedEventIds = emitter.obliviousSet;\n        const eventSub = emitter.subject.subscribe(async (ev) => {\n            if (ev.writeOptions.hasOwnProperty('new_edits') && !ev.writeOptions.new_edits) {\n                await Promise.all(\n                    ev.writeDocs.map(async (writeDoc) => {\n                        const id = writeDoc._id;\n\n                        writeDoc = pouchDocumentDataToRxDocumentData(\n                            this.primaryPath,\n                            writeDoc\n                        );\n\n                        writeDoc._attachments = await writeAttachmentsToAttachments(writeDoc._attachments);\n\n                        let previousDoc = ev.previousDocs.get(id);\n                        if (previousDoc) {\n                            previousDoc = pouchDocumentDataToRxDocumentData(\n                                this.primaryPath,\n                                previousDoc\n                            );\n                        }\n\n                        if (\n                            previousDoc &&\n                            getHeightOfRevision(previousDoc._rev) > getHeightOfRevision(writeDoc._rev)\n                        ) {\n                            // not the newest revision was added\n                            // TODO is comparing the height enough to compare revisions?\n                            return;\n                        }\n                        if (!previousDoc && writeDoc._deleted) {\n                            // deleted document was added as revision\n                            return;\n                        }\n\n                        if (previousDoc && previousDoc._deleted && writeDoc._deleted) {\n                            // delete document was deleted again\n                            return;\n                        }\n\n                        let event: ChangeEvent<RxDocumentData<RxDocType>>;\n                        if (!previousDoc && !writeDoc._deleted) {\n                            // was insert\n                            event = {\n                                operation: 'INSERT',\n                                doc: writeDoc,\n                                id: id,\n                                previous: null\n                            };\n                        } else if (writeDoc._deleted && previousDoc && !previousDoc._deleted) {\n                            // was delete\n                            previousDoc._rev = writeDoc._rev;\n                            event = {\n                                operation: 'DELETE',\n                                doc: null,\n                                id: id,\n                                previous: previousDoc\n                            };\n                        } else if (\n                            previousDoc\n                        ) {\n                            // was update\n                            event = {\n                                operation: 'UPDATE',\n                                doc: writeDoc,\n                                id: id,\n                                previous: previousDoc\n                            };\n                        } else {\n                            throw newRxError('SNH', { args: { writeDoc } });\n                        }\n                        this.addEventToChangeStream(\n                            event,\n                            ev.startTime,\n                            ev.endTime\n                        );\n                    })\n                );\n                return;\n            }\n\n\n            /**\n             * There is no write map given for internal pouchdb document writes\n             * like it is done with replication.\n             */\n            if (!ev.writeOptions.custom) {\n                const writeDocsById: Map<string, any> = new Map();\n                ev.writeDocs.forEach(writeDoc => writeDocsById.set(writeDoc._id, writeDoc));\n\n                await Promise.all(\n                    ev.writeResult.map(async (resultRow) => {\n                        const id = resultRow.id;\n                        if (\n                            id.startsWith(POUCHDB_DESIGN_PREFIX) ||\n                            id.startsWith(POUCHDB_LOCAL_PREFIX)\n                        ) {\n                            return;\n                        }\n                        let writeDoc = getFromMapOrThrow(writeDocsById, resultRow.id);\n                        writeDoc._attachments = await writeAttachmentsToAttachments(writeDoc._attachments);\n\n                        writeDoc = flatClone(writeDoc);\n                        writeDoc._rev = (resultRow as any).rev;\n                        const event = pouchChangeRowToChangeEvent<RxDocType>(\n                            this.primaryPath,\n                            writeDoc\n                        );\n                        this.addEventToChangeStream(event);\n                    })\n                );\n\n                return;\n            }\n\n            const writeMap: Map<string, BulkWriteRow<RxDocType>> = ev.writeOptions.custom.writeRowById;\n            await Promise.all(\n                ev.writeResult.map(async (resultRow) => {\n                    if ((resultRow as PouchWriteError).error) {\n                        return;\n                    }\n\n                    const id = resultRow.id;\n                    const writeRow = getFromMapOrThrow(writeMap, id);\n                    const newDoc = pouchDocumentDataToRxDocumentData(\n                        this.primaryPath,\n                        writeRow.document as any\n                    );\n                    newDoc._attachments = await writeAttachmentsToAttachments(newDoc._attachments);\n                    newDoc._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                    let event: ChangeEvent<RxDocumentData<RxDocType>>;\n                    if (!writeRow.previous) {\n                        // was insert\n                        event = {\n                            operation: 'INSERT',\n                            doc: newDoc,\n                            id: id,\n                            previous: null\n                        };\n                    } else if (writeRow.document._deleted) {\n                        // was delete\n\n                        // we need to add the new revision to the previous doc\n                        // so that the eventkey is calculated correctly.\n                        // Is this a hack? idk.\n                        const previousDoc = pouchDocumentDataToRxDocumentData(\n                            this.primaryPath,\n                            writeRow.previous as any\n                        );\n                        previousDoc._attachments = await writeAttachmentsToAttachments(previousDoc._attachments);\n                        previousDoc._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                        event = {\n                            operation: 'DELETE',\n                            doc: null,\n                            id: resultRow.id,\n                            previous: previousDoc\n                        };\n                    } else {\n                        // was update\n                        event = {\n                            operation: 'UPDATE',\n                            doc: newDoc,\n                            id: resultRow.id,\n                            previous: writeRow.previous\n                        };\n                    }\n\n                    if (\n                        writeRow.document._deleted &&\n                        (\n                            !writeRow.previous ||\n                            writeRow.previous._deleted\n                        )\n                    ) {\n                        /**\n                         * A deleted document was newly added to the storage engine,\n                         * do not emit an event.\n                         */\n                    } else {\n                        this.addEventToChangeStream(\n                            event,\n                            ev.startTime,\n                            ev.endTime\n                        );\n                    }\n\n                })\n            );\n        });\n        this.subs.push(eventSub);\n    }\n\n    private addEventToChangeStream(\n        change: ChangeEvent<RxDocumentData<RxDocType>>,\n        startTime?: number,\n        endTime?: number\n    ) {\n        const doc: RxDocumentData<RxDocType> = change.operation === 'DELETE' ? change.previous as any : change.doc as any;\n        const primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        const primary: string = (doc as any)[primaryPath];\n\n        const eventId = getEventKey(false, primary, doc._rev);\n\n        if (this.emittedEventIds.has(eventId)) {\n            return;\n        }\n\n        this.emittedEventIds.add(eventId);\n        const storageChangeEvent: RxStorageChangeEvent<RxDocumentData<RxDocType>> = {\n            eventId,\n            documentId: primary,\n            change,\n            startTime,\n            endTime\n        };\n\n        this.changes$.next(storageChangeEvent);\n    }\n\n    close() {\n        this.subs.forEach(sub => sub.unsubscribe());\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        this.subs.forEach(sub => sub.unsubscribe());\n\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        await this.internals.pouch.destroy();\n    }\n\n    getSortComparator(\n        query: MangoQuery<RxDocType>\n    ): SortComparator<RxDocType> {\n        const primaryKey = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        const sortOptions: MangoQuerySortPart[] = query.sort ? (query.sort as any) : [{\n            [this.primaryPath]: 'asc'\n        }];\n        const massagedSelector = massageSelector(query.selector);\n        const inMemoryFields = Object.keys(query.selector);\n        const fun: CompareFunction<RxDocType> = (a: RxDocType, b: RxDocType) => {\n            // TODO use createFieldSorter\n            // TODO make a performance test\n            const rows = [a, b].map(doc => {\n                // swap primary to _id\n                const cloned: any = flatClone(doc);\n                const primaryValue = cloned[primaryKey];\n                delete cloned[primaryKey];\n                cloned._id = primaryValue;\n                return {\n                    doc: cloned\n                };\n            });\n            const sortedRows: { doc: any }[] = filterInMemoryFields(\n                rows,\n                {\n                    selector: massagedSelector,\n                    sort: sortOptions\n                },\n                inMemoryFields\n            );\n            if (sortedRows[0].doc._id === rows[0].doc._id) {\n                return -1;\n            } else {\n                return 1;\n            }\n        };\n        return fun;\n    }\n\n\n    /**\n     * @link https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-selector-core/src/matches-selector.js\n     */\n    getQueryMatcher(\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocType> {\n        const massagedSelector = massageSelector(query.selector);\n\n        const fun: QueryMatcher<RxDocType> = (doc: RxDocType) => {\n            const cloned = pouchSwapPrimaryToId(this.primaryPath, doc);\n            const row = {\n                doc: cloned\n            };\n            const rowsMatched = filterInMemoryFields(\n                [row],\n                { selector: massagedSelector },\n                Object.keys(query.selector)\n            );\n            const ret = rowsMatched && rowsMatched.length === 1;\n            return ret;\n        };\n        return fun;\n    }\n\n\n    /**\n     * pouchdb has many bugs and strange behaviors\n     * this functions takes a normal mango query\n     * and transforms it to one that fits for pouchdb\n     */\n    prepareQuery(\n        mutateableQuery: MangoQuery<RxDocType>\n    ): PreparedQuery<RxDocType> {\n        const primaryKey = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        const query = mutateableQuery;\n\n        /**\n         * because sort wont work on unused keys we have to workaround\n         * so we add the key to the selector if necessary\n         * @link https://github.com/nolanlawson/pouchdb-find/issues/204\n         */\n        if (query.sort) {\n            query.sort.forEach(sortPart => {\n                const key = Object.keys(sortPart)[0];\n                const comparisonOperators = ['$gt', '$gte', '$lt', '$lte'];\n                const keyUsed = query.selector[key] && Object.keys(query.selector[key]).some(op => comparisonOperators.includes(op)) || false;\n                if (!keyUsed) {\n                    const schemaObj = getSchemaByObjectPath(this.schema, key);\n                    if (!schemaObj) {\n                        throw newRxError('QU5', {\n                            key\n                        });\n                    }\n                    if (!query.selector[key]) {\n                        query.selector[key] = {};\n                    }\n                    switch (schemaObj.type) {\n                        case 'number':\n                        case 'integer':\n                            // TODO change back to -Infinity when issue resolved\n                            // @link https://github.com/pouchdb/pouchdb/issues/6454\n                            // -Infinity does not work since pouchdb 6.2.0\n                            query.selector[key].$gt = -9999999999999999999999999999;\n                            break;\n                        case 'string':\n                            /**\n                             * strings need an empty string, see\n                             * @link https://github.com/pubkey/rxdb/issues/585\n                             */\n                            if (typeof query.selector[key] !== 'string') {\n                                query.selector[key].$gt = '';\n                            }\n                            break;\n                        default:\n                            query.selector[key].$gt = null;\n                            break;\n                    }\n                }\n            });\n        }\n\n        // regex does not work over the primary key\n        // TODO move this to dev mode\n        if (query.selector[primaryKey as any] && query.selector[primaryKey as any].$regex) {\n            throw newRxError('QU4', {\n                path: primaryKey as any,\n                query: mutateableQuery\n            });\n        }\n\n        // primary-swap sorting\n        if (query.sort) {\n            const sortArray: MangoQuerySortPart<RxDocType>[] = query.sort.map(part => {\n                const key = Object.keys(part)[0];\n                const direction: MangoQuerySortDirection = Object.values(part)[0];\n                const useKey = key === primaryKey ? '_id' : key;\n                const newPart = { [useKey]: direction };\n                return newPart as any;\n            });\n            query.sort = sortArray;\n        }\n\n        // strip empty selectors\n        Object.entries(query.selector).forEach(([k, v]) => {\n            if (\n                typeof v === 'object' &&\n                v !== null &&\n                !Array.isArray(v) &&\n                Object.keys((v as any)).length === 0\n            ) {\n                delete query.selector[k];\n            }\n        });\n\n        query.selector = primarySwapPouchDbQuerySelector(query.selector, this.primaryPath);\n\n        return query;\n    }\n\n    public async bulkAddRevisions(\n        documents: RxDocumentData<RxDocType>[]\n    ): Promise<void> {\n        if (documents.length === 0) {\n            throw newRxError('P3', {\n                args: {\n                    documents\n                }\n            });\n        }\n\n        const writeData = documents.map(doc => {\n            return rxDocumentDataToPouchDocumentData(\n                this.primaryPath,\n                doc\n            );\n        });\n\n        // we do not need the response here because pouchdb returns an empty array on new_edits: false\n        await this.internals.pouch.bulkDocs(\n            writeData,\n            {\n                new_edits: false,\n                set_new_edit_as_latest_revision: true\n            }\n        );\n    }\n\n    public async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[]\n    ): Promise<\n        RxStorageBulkWriteResponse<RxDocType>\n    > {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const writeRowById: Map<string, BulkWriteRow<RxDocType>> = new Map();\n\n        const insertDocs: (RxDocType & { _id: string; _rev: string })[] = documentWrites.map(writeData => {\n            const primary: string = (writeData.document as any)[this.primaryPath];\n            writeRowById.set(primary, writeData);\n\n            const storeDocumentData: any = rxDocumentDataToPouchDocumentData<RxDocType>(\n                this.primaryPath,\n                writeData.document\n            );\n\n\n            // if previous document exists, we have to send the previous revision to pouchdb.\n            if (writeData.previous) {\n                storeDocumentData._rev = writeData.previous._rev;\n            }\n\n            return storeDocumentData;\n        });\n\n        const pouchResult = await this.internals.pouch.bulkDocs(insertDocs, {\n            custom: {\n                writeRowById\n            }\n        } as any);\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: new Map(),\n            error: new Map()\n        };\n\n        await Promise.all(\n            pouchResult.map(async (resultRow) => {\n                const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n                if ((resultRow as PouchWriteError).error) {\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: resultRow.id,\n                        writeRow\n                    };\n                    ret.error.set(resultRow.id, err);\n                } else {\n                    let pushObj: RxDocumentData<RxDocType> = flatClone(writeRow.document) as any;\n                    pushObj = pouchSwapIdToPrimary(this.primaryPath, pushObj);\n                    pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                    // replace the inserted attachments with their diggest\n                    pushObj._attachments = {};\n                    if (!writeRow.document._attachments) {\n                        writeRow.document._attachments = {};\n                    } else {\n                        pushObj._attachments = await writeAttachmentsToAttachments(writeRow.document._attachments);\n                    }\n                    ret.success.set(resultRow.id, pushObj);\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    public async query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        const findResult = await this.internals.pouch.find<RxDocType>(preparedQuery);\n        const ret: RxStorageQueryResult<RxDocType> = {\n            documents: findResult.docs.map(pouchDoc => {\n                const useDoc = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    pouchDoc\n                );\n                return useDoc;\n            })\n        };\n\n        return ret;\n    }\n\n    async getAttachmentData(\n        documentId: string,\n        attachmentId: string\n    ): Promise<BlobBuffer> {\n        const attachmentData = await this.internals.pouch.getAttachment(\n            documentId,\n            attachmentId\n        );\n        return attachmentData;\n    }\n\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<Map<string, RxDocumentData<RxDocType>>> {\n        /**\n         * On deleted documents, pouchdb will only return the tombstone.\n         * So we have to get the properties directly for each document\n         * with the hack of getting the changes and then make one request per document\n         * with the latest revision.\n         * TODO create an issue at pouchdb on how to get the document data of deleted documents,\n         * when one past revision was written via new_edits=false\n         * @link https://stackoverflow.com/a/63516761/3443137\n         */\n        if (deleted) {\n            const viaChanges = await this.internals.pouch.changes({\n                live: false,\n                since: 0,\n                doc_ids: ids,\n                style: 'all_docs'\n            });\n\n            const retDocs = new Map();\n            await Promise.all(\n                viaChanges.results.map(async (result) => {\n                    const firstDoc = await this.internals.pouch.get(\n                        result.id,\n                        {\n                            rev: result.changes[0].rev,\n                            deleted: 'ok',\n                            style: 'all_docs'\n                        }\n                    );\n                    const useFirstDoc = pouchDocumentDataToRxDocumentData(\n                        this.primaryPath,\n                        firstDoc\n                    );\n                    retDocs.set(result.id, useFirstDoc);\n                })\n            );\n            return retDocs;\n        }\n\n\n        const pouchResult = await this.internals.pouch.allDocs({\n            include_docs: true,\n            keys: ids\n        });\n\n        const ret = new Map();\n        pouchResult.rows\n            .filter(row => !!row.doc)\n            .forEach(row => {\n                let docData = row.doc;\n                docData = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    docData\n                );\n                ret.set(row.id, docData);\n            });\n\n        return ret;\n    }\n\n    changeStream(): Observable<RxStorageChangeEvent<RxDocumentData<RxDocType>>> {\n        return this.changes$.asObservable();\n    }\n\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: {\n            id: string;\n            sequence: number;\n        }[];\n        lastSequence: number;\n    }> {\n        const pouchChangesOpts: PouchChangesOptionsNonLive = {\n            live: false,\n            limit: options.limit,\n            include_docs: false,\n            since: options.sinceSequence,\n            descending: options.direction === 'before' ? true : false\n        };\n        const pouchResults = await this.internals.pouch.changes(pouchChangesOpts);\n        const changedDocuments = pouchResults.results\n            .filter(row => !row.id.startsWith(POUCHDB_DESIGN_PREFIX))\n            .map(row => ({\n                id: row.id,\n                sequence: row.seq\n            }));\n        const lastSequence = pouchResults.last_seq;\n        return {\n            changedDocuments,\n            lastSequence\n        };\n    }\n}\n"]}