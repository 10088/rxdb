{"version":3,"file":"rx-storage-instance-pouch.js","names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","lastId","RxStorageInstancePouch","storage","databaseName","collectionName","schema","internals","options","id","changes$","Subject","subs","closed","nonParallelQueue","PROMISE_RESOLVE_VOID","OPEN_POUCHDB_STORAGE_INSTANCES","add","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","emitter","getCustomEventEmitterByPouch","pouch","emittedEventBulkIds","ObliviousSet","eventSub","subject","subscribe","eventBulk","events","length","has","forEach","event","change","doc","pouchSwapIdToPrimary","previous","next","push","close","ensureNotClosed","sub","unsubscribe","OPEN_POUCH_INSTANCES","pouchInstanceId","remove","destroy","bulkWrite","documentWrites","context","newRxError","args","writeRowById","Map","insertDocsById","writeDocs","map","writeData","document","_meta","lwt","primary","set","storeDocumentData","rxDocumentDataToPouchDocumentData","previousDocsInDb","ret","success","error","bulkDocs","new_edits","custom","pouchResult","Promise","all","resultRow","writeRow","getFromMapOrThrow","previousDoc","err","isError","status","documentId","documentInDb","pouchDocumentDataToRxDocumentData","pushObj","flatClone","_rev","rev","_attachments","writeAttachmentsToAttachments","query","preparedQuery","find","findResult","documents","docs","pouchDoc","useDoc","getAttachmentData","attachmentId","getAttachment","attachmentData","blobBufferUtil","toBase64String","findDocumentsById","ids","deleted","retDocs","changes","live","since","doc_ids","style","viaChanges","results","get","firstDoc","useFirstDoc","allDocs","include_docs","keys","rows","filter","row","docData","changeStream","asObservable","cleanup","_minimumDeletedTime","compact","getChangedDocumentsSince","limit","checkpoint","changedDocuments","documentsData","Object","sequence","lastSequence","Error","lastRow","lastOfArray","changeRow","getFromObjectOrThrow","pouchChangesOpts","descending","first","skippedDesignDocuments","pouchResults","addChangedDocuments","isDesignDoc","startsWith","POUCHDB_DESIGN_PREFIX","seq","concat","last_seq","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","instance"],"sources":["../../../../src/plugins/pouchdb/rx-storage-instance-pouch.ts"],"sourcesContent":["import { ObliviousSet } from 'oblivious-set';\nimport {\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    PouchBulkDocResultRow,\n    PouchChangesOptionsNonLive,\n    PouchCheckpoint,\n    PouchSettings,\n    PouchWriteError,\n    PreparedQuery,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types';\nimport {\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    OPEN_POUCH_INSTANCES,\n    POUCHDB_DESIGN_PREFIX,\n    pouchDocumentDataToRxDocumentData,\n    PouchStorageInternals,\n    pouchSwapIdToPrimary,\n    rxDocumentDataToPouchDocumentData,\n    writeAttachmentsToAttachments\n} from './pouchdb-helper';\nimport {\n    blobBufferUtil,\n    flatClone,\n    getFromMapOrThrow,\n    getFromObjectOrThrow,\n    lastOfArray,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport {\n    getCustomEventEmitterByPouch\n} from './custom-events-plugin';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\n\n\nlet lastId = 0;\n\nexport class RxStorageInstancePouch<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    PouchStorageInternals,\n    PouchSettings,\n    PouchCheckpoint\n> {\n    public readonly id: number = lastId++;\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, PouchCheckpoint>> = new Subject();\n    private subs: Subscription[] = [];\n    private primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n\n    public closed: boolean = false;\n\n\n    /**\n     * Some PouchDB operations give wrong results when they run in parallel.\n     * So we have to ensure they are queued up.\n     */\n    private nonParallelQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n    constructor(\n        public readonly storage: RxStorage<PouchStorageInternals, PouchSettings>,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n\n        /**\n         * Instead of listening to pouch.changes,\n         * we have overwritten pouchdbs bulkDocs()\n         * and create our own event stream, this will work more relyable\n         * and does not mix up with write events from other sources.\n         */\n        const emitter = getCustomEventEmitterByPouch<RxDocType>(this.internals.pouch);\n\n        /**\n         * Contains all eventIds that of emitted events,\n         * used because multi-instance pouchdbs often will reemit the same\n         * event on the other browser tab so we have to de-duplicate them.\n         */\n        const emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n        const eventSub = emitter.subject.subscribe(async (eventBulk) => {\n            if (\n                eventBulk.events.length === 0 ||\n                emittedEventBulkIds.has(eventBulk.id)\n            ) {\n                return;\n            }\n            emittedEventBulkIds.add(eventBulk.id);\n\n            // rewrite primaryPath of all events\n            eventBulk.events.forEach(event => {\n                if (event.change.doc) {\n                    event.change.doc = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.doc as any\n                    );\n                }\n                if (event.change.previous) {\n                    event.change.previous = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.previous as any\n                    );\n                }\n            });\n\n            this.changes$.next(eventBulk);\n        });\n        this.subs.push(eventSub);\n    }\n\n    close() {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        OPEN_POUCH_INSTANCES.delete(this.internals.pouchInstanceId);\n\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        OPEN_POUCH_INSTANCES.delete(this.internals.pouchInstanceId);\n\n        await this.internals.pouch.destroy();\n    }\n    public async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<\n        RxStorageBulkWriteResponse<RxDocType>\n    > {\n        ensureNotClosed(this);\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const writeRowById: Map<string, BulkWriteRow<RxDocType>> = new Map();\n        const insertDocsById: Map<string, any> = new Map();\n        const writeDocs: (RxDocType & { _id: string; _rev: string })[] = documentWrites.map(writeData => {\n\n            /**\n             * Ensure that _meta.lwt is set correctly\n             */\n            if (\n                writeData.document._meta.lwt < 1000 ||\n                (\n                    writeData.previous &&\n                    writeData.previous._meta.lwt >= writeData.document._meta.lwt\n                )\n            ) {\n                throw newRxError('SNH', {\n                    args: writeData\n                });\n            }\n\n            const primary: string = (writeData.document as any)[this.primaryPath];\n            writeRowById.set(primary, writeData);\n            const storeDocumentData: any = rxDocumentDataToPouchDocumentData<RxDocType>(\n                this.primaryPath,\n                writeData.document\n            );\n            insertDocsById.set(primary, storeDocumentData);\n            return storeDocumentData;\n        });\n\n        const previousDocsInDb: Map<string, RxDocumentData<any>> = new Map();\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        this.nonParallelQueue = this.nonParallelQueue.then(async () => {\n            const pouchResult = await this.internals.pouch.bulkDocs(writeDocs, {\n                new_edits: false,\n                custom: {\n                    primaryPath: this.primaryPath,\n                    writeRowById,\n                    insertDocsById,\n                    previousDocsInDb,\n                    context\n                }\n            } as any);\n            return Promise.all(\n                pouchResult.map(async (resultRow) => {\n                    const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n                    if ((resultRow as PouchWriteError).error) {\n                        const previousDoc = getFromMapOrThrow(previousDocsInDb, resultRow.id);\n                        const err: RxStorageBulkWriteError<RxDocType> = {\n                            isError: true,\n                            status: 409,\n                            documentId: resultRow.id,\n                            writeRow,\n                            documentInDb: pouchDocumentDataToRxDocumentData(\n                                this.primaryPath,\n                                previousDoc\n                            )\n                        };\n                        ret.error[resultRow.id] = err;\n                    } else {\n                        let pushObj: RxDocumentData<RxDocType> = flatClone(writeRow.document) as any;\n                        pushObj = pouchSwapIdToPrimary(this.primaryPath, pushObj);\n                        pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                        // replace the inserted attachments with their diggest\n                        pushObj._attachments = {};\n                        if (!writeRow.document._attachments) {\n                            writeRow.document._attachments = {};\n                        } else {\n                            pushObj._attachments = await writeAttachmentsToAttachments(writeRow.document._attachments);\n                        }\n                        ret.success[resultRow.id] = pushObj;\n                    }\n                })\n            );\n        });\n        await this.nonParallelQueue;\n        return ret;\n    }\n\n    public async query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        const findResult = await this.internals.pouch.find<RxDocType>(preparedQuery);\n        const ret: RxStorageQueryResult<RxDocType> = {\n            documents: findResult.docs.map(pouchDoc => {\n                const useDoc = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    pouchDoc\n                );\n                return useDoc;\n            })\n        };\n        return ret;\n    }\n\n    async getAttachmentData(\n        documentId: string,\n        attachmentId: string\n    ): Promise<string> {\n        ensureNotClosed(this);\n        const attachmentData = await this.internals.pouch.getAttachment(\n            documentId,\n            attachmentId\n        );\n        const ret = await blobBufferUtil.toBase64String(attachmentData);\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        ensureNotClosed(this);\n\n        /**\n         * On deleted documents, PouchDB will only return the tombstone.\n         * So we have to get the properties directly for each document\n         * with the hack of getting the changes and then make one request per document\n         * with the latest revision.\n         * TODO create an issue at pouchdb on how to get the document data of deleted documents,\n         * when one past revision was written via new_edits=false\n         * @link https://stackoverflow.com/a/63516761/3443137\n         */\n        if (deleted) {\n            const retDocs: RxDocumentDataById<RxDocType> = {};\n            this.nonParallelQueue = this.nonParallelQueue.then(async () => {\n                const viaChanges = await this.internals.pouch.changes({\n                    live: false,\n                    since: 0,\n                    doc_ids: ids,\n                    style: 'all_docs'\n                });\n                await Promise.all(\n                    viaChanges.results.map(async (result) => {\n                        const firstDoc = await this.internals.pouch.get(\n                            result.id,\n                            {\n                                rev: result.changes[0].rev,\n                                deleted: 'ok',\n                                style: 'all_docs'\n                            }\n                        );\n                        const useFirstDoc = pouchDocumentDataToRxDocumentData(\n                            this.primaryPath,\n                            firstDoc\n                        );\n                        retDocs[result.id] = useFirstDoc;\n                    })\n                );\n            });\n            await this.nonParallelQueue;\n            return retDocs;\n        } else {\n            const ret: RxDocumentDataById<RxDocType> = {};\n            this.nonParallelQueue = this.nonParallelQueue.then(async () => {\n                const pouchResult = await this.internals.pouch.allDocs({\n                    include_docs: true,\n                    keys: ids\n                });\n                pouchResult.rows\n                    .filter(row => !!row.doc)\n                    .forEach(row => {\n                        let docData = row.doc;\n                        docData = pouchDocumentDataToRxDocumentData(\n                            this.primaryPath,\n                            docData\n                        );\n                        ret[row.id] = docData;\n                    });\n            });\n            await this.nonParallelQueue;\n            return ret;\n        }\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, PouchCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    cleanup(_minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        /**\n         * PouchDB does not support purging documents.\n         * So instead we run a compaction that might at least help a bit\n         * in freeing up disc space.\n         * @link https://github.com/pouchdb/pouchdb/issues/802\n         */\n        return this.internals.pouch\n            .compact()\n            .then(() => true);\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: PouchCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: PouchCheckpoint;\n    }> {\n        ensureNotClosed(this);\n        if (!limit || typeof limit !== 'number') {\n            throw new Error('wrong limit');\n        }\n\n        const pouchChangesOpts: PouchChangesOptionsNonLive = {\n            live: false,\n            limit: limit,\n            include_docs: false,\n            since: checkpoint ? checkpoint.sequence : 0,\n            descending: false\n        };\n\n        let lastSequence = 0;\n        let first = true;\n        let skippedDesignDocuments = 0;\n        let changedDocuments: { id: string; sequence: number; }[] = [];\n        /**\n         * Because PouchDB also returns changes of _design documents,\n         * we have to fill up the results with more changes if this happens.\n         */\n        while (first || skippedDesignDocuments > 0) {\n            first = false;\n            skippedDesignDocuments = 0;\n            const pouchResults = await this.internals.pouch.changes(pouchChangesOpts);\n            const addChangedDocuments = pouchResults.results\n                .filter(row => {\n                    const isDesignDoc = row.id.startsWith(POUCHDB_DESIGN_PREFIX);\n                    if (isDesignDoc) {\n                        skippedDesignDocuments = skippedDesignDocuments + 1;\n                        return false;\n                    } else {\n                        return true;\n                    }\n                })\n                .map(row => ({\n                    id: row.id,\n                    sequence: row.seq\n                }));\n            changedDocuments = changedDocuments.concat(addChangedDocuments);\n            lastSequence = pouchResults.last_seq;\n\n            // modify pouch options for next run of pouch.changes()\n            pouchChangesOpts.since = lastSequence;\n            pouchChangesOpts.limit = skippedDesignDocuments;\n        }\n\n        const documentsData = await this.findDocumentsById(\n            changedDocuments.map(o => o.id),\n            true\n        );\n\n        if (\n            Object.keys(documentsData).length > 0 &&\n            checkpoint && checkpoint.sequence === lastSequence\n        ) {\n            /**\n             * When documents are returned, it makes no sense\n             * if the sequence is equal to the one given at the checkpoint.\n             */\n            throw new Error('same sequence');\n        }\n\n        const lastRow = lastOfArray(changedDocuments);\n        return {\n            documents: changedDocuments.map(changeRow => getFromObjectOrThrow(documentsData, changeRow.id)),\n            checkpoint: lastRow ? {\n                sequence: lastRow.sequence\n            } : checkpoint ? checkpoint : {\n                sequence: -1\n            }\n        }\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstancePouch<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstancePouch is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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"}