{"version":3,"file":"revision-flag.js","names":["getPullReplicationFlag","replicationIdentifierHash","setLastWritePullReplication","documentData","revisionHeight","_meta","wasLastWriteFromPullReplication","lastRevision","parseRevision","_rev","replicationFlagValue","height"],"sources":["../../../../src/plugins/replication/revision-flag.ts"],"sourcesContent":["/**\n * The replication handler needs to know\n * which local documents have been lastly written locally\n * and which came from the remote.\n * To determine this, we 'flag' the document\n * by setting a specially crafted revision string.\n */\n\nimport type { DeepReadonly, RxDocumentData, RxDocumentWriteData } from '../../types';\nimport {\n    parseRevision\n} from '../../util';\n\nexport function getPullReplicationFlag(\n    replicationIdentifierHash: string\n) {\n    return 'rep-' + replicationIdentifierHash;\n}\n\n/**\n * Sets the pull replication flag to the _meta\n * to contain the next revision height.\n * Used to identify the document as 'pulled-from-remote'\n * so we do not send it to remote again.\n */\nexport function setLastWritePullReplication<RxDocType>(\n    replicationIdentifierHash: string,\n    documentData: RxDocumentData<RxDocType> | RxDocumentWriteData<RxDocType>,\n    /**\n     * Height of the revision\n     * with which the pull flag will be saved.\n     */\n    revisionHeight: number\n) {\n    documentData._meta[getPullReplicationFlag(replicationIdentifierHash)] = revisionHeight;\n}\n\nexport function wasLastWriteFromPullReplication<RxDocType>(\n    replicationIdentifierHash: string,\n    documentData: RxDocumentData<RxDocType> | DeepReadonly<RxDocumentData<RxDocType>>\n): boolean {\n    const lastRevision = parseRevision(documentData._rev);\n    const replicationFlagValue: number | undefined = documentData._meta[getPullReplicationFlag(replicationIdentifierHash)] as any;\n\n    if (\n        replicationFlagValue &&\n        lastRevision.height === replicationFlagValue\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"mappings":";;;;;;;;;AASA;;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AAOO,SAASA,sBAAT,CACHC,yBADG,EAEL;EACE,OAAO,SAASA,yBAAhB;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,2BAAT,CACHD,yBADG,EAEHE,YAFG;AAGH;AACJ;AACA;AACA;AACIC,cAPG,EAQL;EACED,YAAY,CAACE,KAAb,CAAmBL,sBAAsB,CAACC,yBAAD,CAAzC,IAAwEG,cAAxE;AACH;;AAEM,SAASE,+BAAT,CACHL,yBADG,EAEHE,YAFG,EAGI;EACP,IAAMI,YAAY,GAAG,IAAAC,mBAAA,EAAcL,YAAY,CAACM,IAA3B,CAArB;;EACA,IAAMC,oBAAwC,GAAGP,YAAY,CAACE,KAAb,CAAmBL,sBAAsB,CAACC,yBAAD,CAAzC,CAAjD;;EAEA,IACIS,oBAAoB,IACpBH,YAAY,CAACI,MAAb,KAAwBD,oBAF5B,EAGE;IACE,OAAO,IAAP;EACH,CALD,MAKO;IACH,OAAO,KAAP;EACH;AACJ"}