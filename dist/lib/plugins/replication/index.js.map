{"version":3,"sources":["../../../../src/plugins/replication/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport {\n    filter\n} from 'rxjs/operators';\nimport type {\n    DeepReadonlyObject,\n    ReplicationOptions,\n    ReplicationPullHandlerResult,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxCollection,\n    RxDocumentData,\n    RxReplicationState,\n    WithDeleted\n} from '../../types';\nimport {\n    getChangesSinceLastPushSequence,\n    getLastPullDocument,\n    setLastPullDocument,\n    setLastPushSequence\n} from './replication-checkpoint';\nimport {\n    flatClone,\n    getHeightOfRevision,\n    lastOfArray,\n    promiseWait,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_TRUE,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport { overwritable } from '../../overwritable';\nimport {\n    createRevisionForPulledDocument,\n    wasRevisionfromPullReplication\n} from './revision-flag';\nimport { _handleToStorageInstance } from '../../rx-collection-helper';\nimport { newRxError } from '../../rx-error';\nimport { getDocumentDataOfRxChangeEvent } from '../../rx-change-event';\n\n\nexport class RxReplicationStateBase<RxDocType> {\n    public readonly subs: Subscription[] = [];\n    public initialReplicationComplete$: Observable<any> = undefined as any;\n\n    private subjects = {\n        received: new Subject(), // all documents that are received from the endpoint\n        send: new Subject(), // all documents that are send to the endpoint\n        error: new Subject(), // all errors that are received from the endpoint, emits new Error() objects\n        canceled: new BehaviorSubject(false), // true when the replication was canceled\n        active: new BehaviorSubject(false), // true when something is running, false when not\n        initialReplicationComplete: new BehaviorSubject(false) // true the initial replication-cycle is over\n    };\n\n    private runningPromise: Promise<void> = PROMISE_RESOLVE_VOID;\n    private runQueueCount: number = 0;\n    /**\n     * Counts how many times the run() method\n     * has been called. Used in tests.\n     */\n    public runCount: number = 0;\n\n    constructor(\n        public readonly replicationIdentifier: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public liveInterval?: number,\n        public retryTime?: number,\n    ) {\n\n        // stop the replication when the collection gets destroyed\n        this.collection.onDestroy.then(() => {\n            this.cancel();\n        });\n\n        // create getters for the observables\n        Object.keys(this.subjects).forEach(key => {\n            Object.defineProperty(this, key + '$', {\n                get: function () {\n                    return this.subjects[key].asObservable();\n                }\n            });\n        });\n    }\n\n    isStopped(): boolean {\n        if (this.collection.destroyed) {\n            return true;\n        }\n        if (!this.live && this.subjects.initialReplicationComplete.getValue()) {\n            return true;\n        }\n        if (this.subjects.canceled['_value']) {\n            return true;\n        }\n\n        return false;\n    }\n\n    awaitInitialReplication(): Promise<true> {\n        return firstValueFrom(\n            this.initialReplicationComplete$.pipe(\n                filter(v => v === true),\n            )\n        );\n    }\n\n    cancel(): Promise<any> {\n        if (this.isStopped()) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.subjects.canceled.next(true);\n        return PROMISE_RESOLVE_TRUE;\n    }\n\n    /**\n     * Ensures that this._run() does not run in parallel\n     */\n    async run(retryOnFail = true): Promise<void> {\n        if (this.isStopped()) {\n            return;\n        }\n\n        if (this.runQueueCount > 2) {\n            return this.runningPromise;\n        }\n\n        this.runQueueCount++;\n        this.runningPromise = this.runningPromise.then(async () => {\n            this.subjects.active.next(true);\n            const willRetry = await this._run(retryOnFail);\n            this.subjects.active.next(false);\n            if (\n                retryOnFail &&\n                !willRetry &&\n                this.subjects.initialReplicationComplete.getValue() === false\n            ) {\n                this.subjects.initialReplicationComplete.next(true);\n            }\n            this.runQueueCount--;\n        });\n        return this.runningPromise;\n    }\n\n    /**\n     * Runs the whole cycle once,\n     * first pushes the local changes to the remote,\n     * then pulls the remote changes to the local.\n     * Returns true if a retry must be done\n     */\n    async _run(retryOnFail = true): Promise<boolean> {\n        this.runCount++;\n\n        if (this.push) {\n            const ok = await this.runPush();\n            if (!ok && retryOnFail) {\n                setTimeout(() => this.run(), this.retryTime);\n                /*\n                    Because we assume that conflicts are solved on the server side,\n                    if push failed, do not attempt to pull before push was successful\n                    otherwise we do not know how to merge changes with the local state\n                */\n                return true;\n            }\n        }\n\n        if (this.pull) {\n            const ok = await this.runPull();\n            if (!ok && retryOnFail) {\n                setTimeout(() => this.run(), this.retryTime);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Pull all changes from the server,\n     * start from the last pulled change.\n     * @return true if successfully, false if something errored\n     */\n    async runPull(): Promise<boolean> {\n        if (!this.pull) {\n            throw newRxError('SNH');\n        }\n        if (this.isStopped()) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        const latestDocument = await getLastPullDocument(this.collection, this.replicationIdentifier);\n\n        let result: ReplicationPullHandlerResult<RxDocType>;\n\n        try {\n            result = await this.pull.handler(latestDocument);\n        } catch (err) {\n            this.subjects.error.next(err);\n            return false;\n        }\n\n        const pulledDocuments = result.documents;\n\n        // optimization shortcut, do not proceed if there are no documents.\n        if (pulledDocuments.length === 0) {\n            return true;\n        }\n\n        /**\n         * Run schema validation in dev-mode\n         */\n        if (overwritable.isDevMode()) {\n            try {\n                pulledDocuments.forEach((doc: any) => {\n                    const withoutDeleteFlag = flatClone(doc);\n                    delete withoutDeleteFlag._deleted;\n                    this.collection.schema.validate(withoutDeleteFlag);\n                });\n            } catch (err) {\n                this.subjects.error.next(err);\n                return false;\n            }\n        }\n\n        if (this.isStopped()) {\n            return true;\n        }\n        await this.handleDocumentsFromRemote(pulledDocuments);\n        pulledDocuments.map((doc: any) => this.subjects.received.next(doc));\n\n\n        if (pulledDocuments.length === 0) {\n            if (this.live) {\n                // console.log('no more docs, wait for ping');\n            } else {\n                // console.log('RxGraphQLReplicationState._run(): no more docs and not live; complete = true');\n            }\n        } else {\n            const newLatestDocument = lastOfArray(pulledDocuments);\n            await setLastPullDocument(\n                this.collection,\n                this.replicationIdentifier,\n                newLatestDocument\n            );\n\n            /**\n             * We have more documents on the remote,\n             * So re-run the pulling.\n             */\n            if (result.hasMoreDocuments) {\n                await this.runPull();\n            }\n        }\n\n        return true;\n    }\n\n    async handleDocumentsFromRemote(\n        docs: (WithDeleted<RxDocType> | DeepReadonlyObject<WithDeleted<RxDocType>>)[]\n    ): Promise<boolean> {\n        const toStorageDocs: RxDocumentData<RxDocType>[] = [];\n        const docIds: string[] = docs.map(doc => doc[this.collection.schema.primaryPath]) as any;\n        const docsFromLocal = await this.collection.storageInstance.findDocumentsById(docIds, true);\n\n        for (const originalDoc of docs) {\n            const doc: any = flatClone(originalDoc);\n            const documentId: string = doc[this.collection.schema.primaryPath];\n\n            const docStateInLocalStorageInstance = docsFromLocal.get(documentId);\n            let newRevision = createRevisionForPulledDocument(\n                this.replicationIdentifier,\n                doc\n            );\n            if (docStateInLocalStorageInstance) {\n                const hasHeight = getHeightOfRevision(docStateInLocalStorageInstance._rev);\n                const newRevisionHeight = hasHeight + 1;\n                newRevision = newRevisionHeight + '-' + newRevision;\n            } else {\n                newRevision = '1-' + newRevision;\n            }\n            doc._rev = newRevision;\n\n            toStorageDocs.push(doc);\n        }\n\n        if (toStorageDocs.length > 0) {\n            await this.collection.database.lockedRun(\n                async () => {\n                    await this.collection.storageInstance.bulkAddRevisions(\n                        toStorageDocs.map(doc => _handleToStorageInstance(this.collection, doc))\n                    );\n                }\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     * Pushes unreplicated local changes to the remote.\n     * @return true if successfull, false if not\n     */\n    async runPush(): Promise<boolean> {\n        if (!this.push) {\n            throw newRxError('SNH');\n        }\n\n        const batchSize = this.push.batchSize ? this.push.batchSize : 5;\n        const changesResult = await getChangesSinceLastPushSequence<RxDocType>(\n            this.collection,\n            this.replicationIdentifier,\n            batchSize,\n        );\n\n        const pushDocs: WithDeleted<RxDocType>[] = Array\n            .from(changesResult.changedDocs.values())\n            .map(row => {\n                const doc: WithDeleted<RxDocType> = flatClone(row.doc) as any;\n                // TODO _deleted should be required on type RxDocumentData\n                // so we do not need this check here\n                if (!doc.hasOwnProperty('_deleted')) {\n                    doc._deleted = false;\n                }\n\n                delete (doc as any)._rev;\n                delete (doc as any)._attachments;\n\n                return doc;\n            });\n\n        try {\n            await this.push.handler(pushDocs);\n        } catch (err) {\n            this.subjects.error.next(err);\n            return false;\n        }\n\n        pushDocs.forEach(pushDoc => this.subjects.send.next(pushDoc));\n\n        await setLastPushSequence(\n            this.collection,\n            this.replicationIdentifier,\n            changesResult.lastSequence\n        );\n\n        // batch had documents so there might be more changes to replicate\n        if (changesResult.changedDocs.size !== 0) {\n            await this.runPush();\n        }\n\n        return true;\n    }\n}\n\n\nexport async function replicateRxCollection<RxDocType>(\n    {\n        replicationIdentifier,\n        collection,\n        pull,\n        push,\n        live = false,\n        liveInterval = 1000 * 10,\n        retryTime = 1000 * 5,\n        waitForLeadership\n    }: ReplicationOptions<RxDocType>\n): Promise<RxReplicationState<RxDocType>> {\n\n    if (\n        waitForLeadership &&\n        // do not await leadership if not multiInstance\n        collection.database.multiInstance\n    ) {\n        await collection.database.waitForLeadership();\n    }\n\n    const replicationState = new RxReplicationStateBase<RxDocType>(\n        replicationIdentifier,\n        collection,\n        pull,\n        push,\n        live,\n        liveInterval,\n        retryTime,\n    );\n\n    // trigger run once\n    replicationState.run();\n\n    // start sync-interval\n    if (replicationState.live) {\n        if (pull) {\n            (async () => {\n                while (!replicationState.isStopped()) {\n                    await promiseWait(replicationState.liveInterval);\n                    if (replicationState.isStopped()) {\n                        return;\n                    }\n                    await replicationState.run(\n                        // do not retry on liveInterval-runs because they might stack up\n                        // when failing\n                        false\n                    );\n                }\n            })();\n        }\n\n        if (push) {\n            /**\n             * When a document is written to the collection,\n             * we might have to run the replication run() once\n             */\n            const changeEventsSub = collection.$.pipe(\n                filter(cE => !cE.isLocal)\n            )\n                .subscribe(changeEvent => {\n                    if (replicationState.isStopped()) {\n                        return;\n                    }\n                    const doc = getDocumentDataOfRxChangeEvent(changeEvent);\n                    const rev = doc._rev;\n                    if (\n                        rev &&\n                        !wasRevisionfromPullReplication(\n                            replicationIdentifier,\n                            rev\n                        )\n                    ) {\n                        replicationState.run();\n                    }\n                });\n            replicationState.subs.push(changeEventsSub);\n        }\n    }\n\n    return replicationState as any;\n}\n\nexport * from './replication-checkpoint';\nexport * from './revision-flag';\n"]}