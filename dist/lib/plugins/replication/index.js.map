{"version":3,"file":"index.js","names":["REPLICATION_STATE_BY_COLLECTION","WeakMap","RxReplicationState","replicationIdentifierHash","collection","deletedField","pull","push","live","retryTime","autoStart","subs","subjects","received","Subject","send","error","canceled","BehaviorSubject","active","initialReplicationComplete","received$","asObservable","send$","error$","canceled$","active$","callOnStart","undefined","remoteEvents$","replicationStates","get","set","onDestroy","cancel","Object","keys","forEach","key","defineProperty","startPromise","Promise","res","start","isStopped","pullModifier","modifier","DEFAULT_MODIFIER","pushModifier","database","metaInstanceCollectionName","name","metaInstance","all","storage","createStorageInstance","databaseName","collectionName","databaseInstanceToken","token","multiInstance","options","schema","RX_REPLICATION_META_INSTANCE_SCHEMA","addConnectedStorageToCollection","internalReplicationState","replicateRxStorageInstance","pushBatchSize","batchSize","pullBatchSize","forkInstance","storageInstance","hashFunction","identifier","conflictHandler","replicationHandler","masterChangeStream$","pipe","mergeMap","ev","useEv","flatClone","documents","map","doc","swapdeletedFieldToDefaultDeleted","d","masterChangesSince","checkpoint","done","result","handler","err","emitError","newRxError","errors","toArray","er","errorToPlainJson","direction","next","awaitRetry","ensureNotFalsy","useResult","masterWrite","rows","useRows","row","newDocumentState","assumedMasterState","swapDefaultDeletedTodeletedField","Array","isArray","pushRows","args","rxdb","conflicts","events","subscribe","processed","down","document","up","writeToMasterRow","combineLatest","isActive","stream$","awaitRxStorageReplicationFirstInSync","awaitRxStorageReplicationInSync","getValue","awaitInitialReplication","awaitInSync","requestIdlePromise","reSync","emitEvent","PROMISE_RESOLVE_FALSE","promises","cancelRxStorageReplication","checkpointQueue","then","close","sub","unsubscribe","complete","replicateRxCollection","replicationIdentifier","waitForLeadership","addRxPlugin","RxDBLeaderElectionPlugin","fastUnsecureHash","join","replicationState","startReplicationOnLeaderShip","mustWaitForLeadership","waitTillRun","PROMISE_RESOLVE_TRUE"],"sources":["../../../../src/plugins/replication/index.ts"],"sourcesContent":["/**\n * This plugin contains the primitives to create\n * a RxDB client-server replication.\n * It is used in the other replication plugins\n * but also can be used as standalone with a custom replication handler.\n */\n\nimport {\n    BehaviorSubject,\n    combineLatest,\n    mergeMap,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport type {\n    ReplicationOptions,\n    ReplicationPullHandlerResult,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxCollection,\n    RxDocumentData,\n    RxError,\n    RxReplicationPullStreamItem,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    RxTypeError,\n    WithDeleted\n} from '../../types';\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport {\n    ensureNotFalsy,\n    errorToPlainJson,\n    fastUnsecureHash,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_TRUE,\n    toArray\n} from '../../plugins/utils';\nimport {\n    awaitRxStorageReplicationFirstInSync,\n    awaitRxStorageReplicationInSync,\n    cancelRxStorageReplication,\n    replicateRxStorageInstance,\n    RX_REPLICATION_META_INSTANCE_SCHEMA\n} from '../../replication-protocol';\nimport { newRxError } from '../../rx-error';\nimport {\n    awaitRetry,\n    DEFAULT_MODIFIER,\n    swapDefaultDeletedTodeletedField,\n    swapdeletedFieldToDefaultDeleted\n} from './replication-helper';\nimport {\n    addConnectedStorageToCollection\n} from '../../rx-database-internal-store';\nimport { addRxPlugin } from '../../plugin';\n\n\nexport const REPLICATION_STATE_BY_COLLECTION: WeakMap<RxCollection, RxReplicationState<any, any>[]> = new WeakMap();\n\nexport class RxReplicationState<RxDocType, CheckpointType> {\n    public readonly subs: Subscription[] = [];\n    public readonly subjects = {\n        received: new Subject<RxDocumentData<RxDocType>>(), // all documents that are received from the endpoint\n        send: new Subject<WithDeleted<RxDocType>>(), // all documents that are send to the endpoint\n        error: new Subject<RxError | RxTypeError>(), // all errors that are received from the endpoint, emits new Error() objects\n        canceled: new BehaviorSubject<boolean>(false), // true when the replication was canceled\n        active: new BehaviorSubject<boolean>(false), // true when something is running, false when not\n        initialReplicationComplete: new BehaviorSubject<boolean>(false) // true the initial replication-cycle is over\n    };\n\n    readonly received$: Observable<RxDocumentData<RxDocType>> = this.subjects.received.asObservable();\n    readonly send$: Observable<WithDeleted<RxDocType>> = this.subjects.send.asObservable();\n    readonly error$: Observable<RxError | RxTypeError> = this.subjects.error.asObservable();\n    readonly canceled$: Observable<any> = this.subjects.canceled.asObservable();\n    readonly active$: Observable<boolean> = this.subjects.active.asObservable();\n\n    private startPromise: Promise<void>;\n    constructor(\n        /**\n         * hash of the identifier, used to flag revisions\n         * and to identify which documents state came from the remote.\n         */\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean,\n    ) {\n        let replicationStates = REPLICATION_STATE_BY_COLLECTION.get(collection);\n        if (!replicationStates) {\n            replicationStates = [];\n            REPLICATION_STATE_BY_COLLECTION.set(collection, replicationStates);\n        }\n        replicationStates.push(this);\n\n        // stop the replication when the collection gets destroyed\n        this.collection.onDestroy.push(() => this.cancel());\n\n        // create getters for the observables\n        Object.keys(this.subjects).forEach(key => {\n            Object.defineProperty(this, key + '$', {\n                get: function () {\n                    return this.subjects[key].asObservable();\n                }\n            });\n        });\n        const startPromise = new Promise<void>(res => {\n            this.callOnStart = res;\n        });\n        this.startPromise = startPromise;\n    }\n\n    private callOnStart: () => void = undefined as any;\n\n    public internalReplicationState?: RxStorageInstanceReplicationState<RxDocType>;\n    public metaInstance?: RxStorageInstance<RxStorageReplicationMeta, any, {}, any>;\n    public remoteEvents$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    public async start(): Promise<void> {\n        if (this.isStopped()) {\n            return;\n        }\n\n        // fill in defaults for pull & push\n        const pullModifier = this.pull && this.pull.modifier ? this.pull.modifier : DEFAULT_MODIFIER;\n        const pushModifier = this.push && this.push.modifier ? this.push.modifier : DEFAULT_MODIFIER;\n\n        const database = this.collection.database;\n        const metaInstanceCollectionName = this.collection.name + '-rx-replication-' + this.replicationIdentifierHash;\n        const [metaInstance] = await Promise.all([\n            this.collection.database.storage.createStorageInstance({\n                databaseName: database.name,\n                collectionName: metaInstanceCollectionName,\n                databaseInstanceToken: database.token,\n                multiInstance: database.multiInstance, // TODO is this always false?\n                options: {},\n                schema: RX_REPLICATION_META_INSTANCE_SCHEMA\n            }),\n            addConnectedStorageToCollection(\n                this.collection,\n                metaInstanceCollectionName,\n                RX_REPLICATION_META_INSTANCE_SCHEMA\n            )\n        ]);\n        this.metaInstance = metaInstance;\n\n        this.internalReplicationState = replicateRxStorageInstance({\n            pushBatchSize: this.push && this.push.batchSize ? this.push.batchSize : 100,\n            pullBatchSize: this.pull && this.pull.batchSize ? this.pull.batchSize : 100,\n            forkInstance: this.collection.storageInstance,\n            metaInstance: this.metaInstance,\n            hashFunction: database.hashFunction,\n            identifier: 'rxdbreplication' + this.replicationIdentifierHash,\n            conflictHandler: this.collection.conflictHandler,\n            replicationHandler: {\n                masterChangeStream$: this.remoteEvents$.asObservable().pipe(\n                    mergeMap(async (ev) => {\n                        if (ev === 'RESYNC') {\n                            return ev;\n                        }\n                        const useEv = flatClone(ev);\n                        if (this.deletedField !== '_deleted') {\n                            useEv.documents = useEv.documents.map(doc => swapdeletedFieldToDefaultDeleted(this.deletedField, doc));\n                        }\n                        useEv.documents = await Promise.all(\n                            useEv.documents.map(d => pullModifier(d))\n                        );\n                        return useEv;\n                    })\n                ),\n                masterChangesSince: async (\n                    checkpoint: CheckpointType,\n                    batchSize: number\n                ) => {\n                    if (!this.pull) {\n                        return {\n                            checkpoint: null,\n                            documents: []\n                        };\n                    }\n                    /**\n                     * Retries must be done here in the replication primitives plugin,\n                     * because the replication protocol itself has no\n                     * error handling.\n                     */\n                    let done = false;\n                    let result: ReplicationPullHandlerResult<RxDocType, CheckpointType> = {} as any;\n                    while (!done && !this.isStopped()) {\n                        try {\n                            result = await this.pull.handler(\n                                checkpoint,\n                                batchSize\n                            );\n                            done = true;\n                        } catch (err: any | Error | Error[]) {\n                            const emitError = newRxError('RC_PULL', {\n                                checkpoint,\n                                errors: toArray(err).map(er => errorToPlainJson(er)),\n                                direction: 'pull'\n                            });\n                            this.subjects.error.next(emitError);\n                            await awaitRetry(this.collection, ensureNotFalsy(this.retryTime));\n                        }\n                    }\n\n                    if (this.isStopped()) {\n                        return {\n                            checkpoint: null,\n                            documents: []\n                        };\n                    }\n\n                    const useResult = flatClone(result);\n                    if (this.deletedField !== '_deleted') {\n                        useResult.documents = useResult.documents.map(doc => swapdeletedFieldToDefaultDeleted(this.deletedField, doc));\n                    }\n                    useResult.documents = await Promise.all(\n                        useResult.documents.map(d => pullModifier(d))\n                    );\n                    return useResult;\n                },\n                masterWrite: async (\n                    rows: RxReplicationWriteToMasterRow<RxDocType>[]\n                ) => {\n                    if (!this.push) {\n                        return [];\n                    }\n                    let done = false;\n                    const useRows = await Promise.all(\n                        rows.map(async (row) => {\n                            row.newDocumentState = await pushModifier(row.newDocumentState);\n                            if (row.assumedMasterState) {\n                                row.assumedMasterState = await pushModifier(row.assumedMasterState);\n                            }\n                            if (this.deletedField !== '_deleted') {\n                                row.newDocumentState = swapDefaultDeletedTodeletedField(this.deletedField, row.newDocumentState) as any;\n                                if (row.assumedMasterState) {\n                                    row.assumedMasterState = swapDefaultDeletedTodeletedField(this.deletedField, row.assumedMasterState) as any;\n                                }\n                            }\n                            return row;\n                        })\n                    );\n\n                    let result: WithDeleted<RxDocType>[] = null as any;\n                    while (!done && !this.isStopped()) {\n                        try {\n                            result = await this.push.handler(useRows);\n                            /**\n                             * It is a common problem that people have wrongly behaving backend\n                             * that do not return an array with the conflicts on push requests.\n                             * So we run this check here to make it easier to debug.\n                             * @link https://github.com/pubkey/rxdb/issues/4103\n                             */\n                            if (!Array.isArray(result)) {\n                                throw newRxError(\n                                    'RC_PUSH_NO_AR',\n                                    {\n                                        pushRows: rows,\n                                        direction: 'push',\n                                        args: { result }\n                                    }\n                                );\n                            }\n                            done = true;\n                        } catch (err: any | Error | Error[] | RxError) {\n                            const emitError = (err as RxError).rxdb ? err : newRxError('RC_PUSH', {\n                                pushRows: rows,\n                                errors: toArray(err).map(er => errorToPlainJson(er)),\n                                direction: 'push'\n                            });\n                            this.subjects.error.next(emitError);\n                            await awaitRetry(this.collection, ensureNotFalsy(this.retryTime));\n                        }\n                    }\n                    if (this.isStopped()) {\n                        return [];\n                    }\n                    const conflicts = ensureNotFalsy(result).map(doc => swapdeletedFieldToDefaultDeleted(this.deletedField, doc));\n                    return conflicts;\n                }\n            }\n        });\n        this.subs.push(\n            this.internalReplicationState.events.error.subscribe(err => {\n                this.subjects.error.next(err);\n            }),\n            this.internalReplicationState.events.processed.down\n                .subscribe(row => this.subjects.received.next(row.document as any)),\n            this.internalReplicationState.events.processed.up\n                .subscribe(writeToMasterRow => {\n                    this.subjects.send.next(writeToMasterRow.newDocumentState);\n                }),\n            combineLatest([\n                this.internalReplicationState.events.active.down,\n                this.internalReplicationState.events.active.up\n            ]).subscribe(([down, up]) => {\n                const isActive = down || up;\n                this.subjects.active.next(isActive);\n            })\n        );\n\n        if (\n            this.pull &&\n            this.pull.stream$ &&\n            this.live\n        ) {\n            this.subs.push(\n                this.pull.stream$.subscribe({\n                    next: ev => {\n                        this.remoteEvents$.next(ev);\n                    },\n                    error: err => {\n                        this.subjects.error.next(err);\n                    }\n                })\n            );\n        }\n\n        /**\n         * Non-live replications run once\n         * and then automatically get canceled.\n         */\n        if (!this.live) {\n            await awaitRxStorageReplicationFirstInSync(this.internalReplicationState);\n            await awaitRxStorageReplicationInSync(this.internalReplicationState);\n            await this.cancel();\n        }\n        this.callOnStart();\n    }\n\n    isStopped(): boolean {\n        if (this.subjects.canceled.getValue()) {\n            return true;\n        }\n        return false;\n    }\n\n    async awaitInitialReplication(): Promise<void> {\n        await this.startPromise;\n        return awaitRxStorageReplicationFirstInSync(\n            ensureNotFalsy(this.internalReplicationState)\n        );\n    }\n\n    /**\n     * Returns a promise that resolves when:\n     * - All local data is replicated with the remote\n     * - No replication cycle is running or in retry-state\n     *\n     * WARNING: USing this function directly in a multi-tab browser application\n     * is dangerous because only the leading instance will ever be replicated,\n     * so this promise will not resolve in the other tabs.\n     * For multi-tab support you should set and observe a flag in a local document.\n     */\n    async awaitInSync(): Promise<true> {\n        await this.startPromise;\n        await awaitRxStorageReplicationFirstInSync(ensureNotFalsy(this.internalReplicationState));\n\n        /**\n         * Often awaitInSync() is called directly after a document write,\n         * like in the unit tests.\n         * So we first have to await the idleness to ensure that all RxChangeEvents\n         * are processed already.\n         */\n        await this.collection.database.requestIdlePromise();\n\n        await awaitRxStorageReplicationInSync(ensureNotFalsy(this.internalReplicationState));\n\n        return true;\n    }\n\n    reSync() {\n        this.remoteEvents$.next('RESYNC');\n    }\n    emitEvent(ev: RxReplicationPullStreamItem<RxDocType, CheckpointType>) {\n        this.remoteEvents$.next(ev);\n    }\n\n    cancel(): Promise<any> {\n        if (this.isStopped()) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        const promises: Promise<any>[] = [];\n\n        if (this.internalReplicationState) {\n            cancelRxStorageReplication(this.internalReplicationState);\n        }\n        if (this.metaInstance) {\n            promises.push(\n                ensureNotFalsy(this.internalReplicationState).checkpointQueue\n                    .then(() => ensureNotFalsy(this.metaInstance).close())\n            );\n        }\n\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.subjects.canceled.next(true);\n\n        this.subjects.active.complete();\n        this.subjects.canceled.complete();\n        this.subjects.error.complete();\n        this.subjects.received.complete();\n        this.subjects.send.complete();\n\n        return Promise.all(promises);\n    }\n}\n\n\nexport function replicateRxCollection<RxDocType, CheckpointType>(\n    {\n        replicationIdentifier,\n        collection,\n        deletedField = '_deleted',\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5,\n        waitForLeadership = true,\n        autoStart = true,\n    }: ReplicationOptions<RxDocType, CheckpointType>\n): RxReplicationState<RxDocType, CheckpointType> {\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    const replicationIdentifierHash = fastUnsecureHash(\n        [\n            collection.database.name,\n            collection.name,\n            replicationIdentifier\n        ].join('|')\n    );\n    const replicationState = new RxReplicationState<RxDocType, CheckpointType>(\n        replicationIdentifierHash,\n        collection,\n        deletedField,\n        pull,\n        push,\n        live,\n        retryTime,\n        autoStart\n    );\n\n\n    startReplicationOnLeaderShip(waitForLeadership, replicationState);\n    return replicationState as any;\n}\n\n\nexport function startReplicationOnLeaderShip(\n    waitForLeadership: boolean,\n    replicationState: RxReplicationState<any, any>\n) {\n    /**\n     * Always await this Promise to ensure that the current instance\n     * is leader when waitForLeadership=true\n     */\n    const mustWaitForLeadership = waitForLeadership && replicationState.collection.database.multiInstance;\n    const waitTillRun: Promise<any> = mustWaitForLeadership ? replicationState.collection.database.waitForLeadership() : PROMISE_RESOLVE_TRUE;\n    return waitTillRun.then(() => {\n        if (replicationState.isStopped()) {\n            return;\n        }\n        if (replicationState.autoStart) {\n            replicationState.start();\n        }\n    });\n}\n"],"mappings":"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"}