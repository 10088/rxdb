{"version":3,"file":"index.js","names":["body","recover","result","e","then","pact","state","value","s","v","o","bind","observer","prototype","onFulfilled","onRejected","callback","_this","thenable","test","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","REPLICATION_STATE_BY_COLLECTION","WeakMap","RxReplicationState","replicationIdentifierHash","collection","deletedField","pull","push","live","retryTime","autoStart","subs","subjects","received","Subject","send","error","canceled","BehaviorSubject","active","initialReplicationComplete","received$","asObservable","send$","error$","canceled$","active$","callOnStart","undefined","remoteEvents$","replicationStates","get","set","onDestroy","cancel","Object","keys","forEach","key","defineProperty","startPromise","Promise","res","start","isStopped","pullModifier","modifier","DEFAULT_MODIFIER","pushModifier","database","metaInstanceCollectionName","name","all","storage","createStorageInstance","databaseName","collectionName","databaseInstanceToken","token","multiInstance","options","schema","RX_REPLICATION_META_INSTANCE_SCHEMA","addConnectedStorageToCollection","metaInstance","internalReplicationState","replicateRxStorageInstance","pushBatchSize","batchSize","pullBatchSize","forkInstance","storageInstance","hashFunction","identifier","conflictHandler","replicationHandler","masterChangeStream$","pipe","mergeMap","ev","useEv","flatClone","documents","map","doc","swapdeletedFieldToDefaultDeleted","d","masterChangesSince","checkpoint","useResult","done","handler","err","emitError","newRxError","errors","Array","isArray","direction","next","promiseWait","ensureNotFalsy","masterWrite","rows","row","newDocumentState","swapDefaultDeletedTodeletedField","assumedMasterState","useRows","conflicts","pushRows","events","subscribe","processed","down","document","up","writeToMasterRow","stream$","awaitRxStorageReplicationFirstInSync","getValue","awaitInitialReplication","awaitInSync","awaitRxStorageReplicationInSync","reSync","emitEvent","PROMISE_RESOLVE_FALSE","promises","checkpointQueue","close","sub","unsubscribe","complete","replicateRxCollection","replicationIdentifier","waitForLeadership","fastUnsecureHash","join","replicationState","startReplicationOnLeaderShip","mustWaitForLeadership","waitTillRun","PROMISE_RESOLVE_TRUE"],"sources":["../../../../src/plugins/replication/index.ts"],"sourcesContent":["/**\n * This plugin contains the primitives to create\n * a RxDB client-server replication.\n * It is used in the other replication plugins\n * but also can be used as standalone with a custom replication handler.\n */\n\nimport {\n    BehaviorSubject,\n    mergeMap,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport type {\n    ReplicationOptions,\n    ReplicationPullHandlerResult,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxCollection,\n    RxDocumentData,\n    RxError,\n    RxReplicationPullStreamItem,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    RxTypeError,\n    WithDeleted\n} from '../../types';\nimport {\n    ensureNotFalsy,\n    fastUnsecureHash,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_TRUE\n} from '../../util';\nimport {\n    awaitRxStorageReplicationFirstInSync,\n    awaitRxStorageReplicationInSync,\n    replicateRxStorageInstance,\n    RX_REPLICATION_META_INSTANCE_SCHEMA\n} from '../../replication-protocol';\nimport { newRxError } from '../../rx-error';\nimport {\n    DEFAULT_MODIFIER,\n    swapDefaultDeletedTodeletedField,\n    swapdeletedFieldToDefaultDeleted\n} from './replication-helper';\nimport { addConnectedStorageToCollection } from '../../rx-database-internal-store';\n\n\nexport const REPLICATION_STATE_BY_COLLECTION: WeakMap<RxCollection, RxReplicationState<any, any>[]> = new WeakMap();\n\nexport class RxReplicationState<RxDocType, CheckpointType> {\n    public readonly subs: Subscription[] = [];\n    public readonly subjects = {\n        received: new Subject<RxDocumentData<RxDocType>>(), // all documents that are received from the endpoint\n        send: new Subject<WithDeleted<RxDocType>>(), // all documents that are send to the endpoint\n        error: new Subject<RxError | RxTypeError>(), // all errors that are received from the endpoint, emits new Error() objects\n        canceled: new BehaviorSubject<boolean>(false), // true when the replication was canceled\n        active: new BehaviorSubject<boolean>(false), // true when something is running, false when not\n        initialReplicationComplete: new BehaviorSubject<boolean>(false) // true the initial replication-cycle is over\n    };\n\n\n    readonly received$: Observable<RxDocumentData<RxDocType>> = this.subjects.received.asObservable();\n    readonly send$: Observable<WithDeleted<RxDocType>> = this.subjects.send.asObservable();\n    readonly error$: Observable<RxError | RxTypeError> = this.subjects.error.asObservable();\n    readonly canceled$: Observable<any> = this.subjects.canceled.asObservable();\n    readonly active$: Observable<boolean> = this.subjects.active.asObservable();\n\n    private startPromise: Promise<void>;\n    constructor(\n        /**\n         * hash of the identifier, used to flag revisions\n         * and to identify which documents state came from the remote.\n         */\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean,\n    ) {\n        let replicationStates = REPLICATION_STATE_BY_COLLECTION.get(collection);\n        if (!replicationStates) {\n            replicationStates = [];\n            REPLICATION_STATE_BY_COLLECTION.set(collection, replicationStates);\n        }\n        replicationStates.push(this);\n\n\n        // stop the replication when the collection gets destroyed\n        this.collection.onDestroy.push(() => this.cancel());\n\n        // create getters for the observables\n        Object.keys(this.subjects).forEach(key => {\n            Object.defineProperty(this, key + '$', {\n                get: function () {\n                    return this.subjects[key].asObservable();\n                }\n            });\n        });\n\n        const startPromise = new Promise<void>(res => {\n            this.callOnStart = res;\n        });\n        this.startPromise = startPromise;\n    }\n\n    private callOnStart: () => void = undefined as any;\n\n    public internalReplicationState?: RxStorageInstanceReplicationState<RxDocType>;\n    public metaInstance?: RxStorageInstance<RxStorageReplicationMeta, any, {}, any>;\n    public remoteEvents$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    public async start(): Promise<void> {\n        if (this.isStopped()) {\n            return;\n        }\n\n        // fill in defaults for pull & push\n        const pullModifier = this.pull && this.pull.modifier ? this.pull.modifier : DEFAULT_MODIFIER;\n        const pushModifier = this.push && this.push.modifier ? this.push.modifier : DEFAULT_MODIFIER;\n\n        const database = this.collection.database;\n\n        const metaInstanceCollectionName = this.collection.name + '-rx-replication-' + this.replicationIdentifierHash;\n\n        const [metaInstance] = await Promise.all([\n            this.collection.database.storage.createStorageInstance({\n                databaseName: database.name,\n                collectionName: metaInstanceCollectionName,\n                databaseInstanceToken: database.token,\n                multiInstance: database.multiInstance, // TODO is this always false?\n                options: {},\n                schema: RX_REPLICATION_META_INSTANCE_SCHEMA\n            }),\n            addConnectedStorageToCollection(\n                this.collection,\n                metaInstanceCollectionName,\n                RX_REPLICATION_META_INSTANCE_SCHEMA\n            )\n        ]);\n        this.metaInstance = metaInstance;\n\n\n        this.internalReplicationState = replicateRxStorageInstance({\n            pushBatchSize: this.push && this.push.batchSize ? this.push.batchSize : 100,\n            pullBatchSize: this.pull && this.pull.batchSize ? this.pull.batchSize : 100,\n            forkInstance: this.collection.storageInstance,\n            metaInstance: this.metaInstance,\n            hashFunction: database.hashFunction,\n            identifier: 'rx-replication-' + this.replicationIdentifierHash,\n            conflictHandler: this.collection.conflictHandler,\n            replicationHandler: {\n                masterChangeStream$: this.remoteEvents$.asObservable().pipe(\n                    mergeMap(async (ev) => {\n                        if (ev === 'RESYNC') {\n                            return ev;\n                        }\n                        const useEv = flatClone(ev);\n                        if (this.deletedField !== '_deleted') {\n                            useEv.documents = useEv.documents.map(doc => swapdeletedFieldToDefaultDeleted(this.deletedField, doc))\n                        }\n                        useEv.documents = await Promise.all(\n                            useEv.documents.map(d => pullModifier(d))\n                        );\n                        return useEv;\n                    })\n                ),\n                masterChangesSince: async (\n                    checkpoint: CheckpointType,\n                    batchSize: number\n                ) => {\n                    if (!this.pull) {\n                        return {\n                            checkpoint: null,\n                            documents: []\n                        };\n                    }\n\n                    /**\n                     * Retries must be done here in the replication primitives plugin,\n                     * because the replication protocol itself has no\n                     * error handling.\n                     */\n                    let done = false;\n                    let result: ReplicationPullHandlerResult<RxDocType, CheckpointType> = {} as any;\n                    while (!done) {\n                        try {\n                            result = await this.pull.handler(\n                                checkpoint,\n                                batchSize\n                            );\n                            done = true;\n                        } catch (err: any | Error | Error[]) {\n                            const emitError = newRxError('RC_PULL', {\n                                checkpoint,\n                                errors: Array.isArray(err) ? err : [err],\n                                direction: 'pull'\n                            });\n                            this.subjects.error.next(emitError);\n                            await this.collection.promiseWait(ensureNotFalsy(this.retryTime));\n                        }\n                    }\n\n                    const useResult = flatClone(result);\n                    if (this.deletedField !== '_deleted') {\n                        useResult.documents = useResult.documents.map(doc => swapdeletedFieldToDefaultDeleted(this.deletedField, doc))\n                    }\n                    useResult.documents = await Promise.all(\n                        useResult.documents.map(d => pullModifier(d))\n                    );\n\n                    return useResult;\n                },\n                masterWrite: async (\n                    rows: RxReplicationWriteToMasterRow<RxDocType>[]\n                ) => {\n                    if (!this.push) {\n                        return [];\n                    }\n                    let done = false;\n                    const useRows = await Promise.all(\n                        rows.map(async (row) => {\n                            row.newDocumentState = await pushModifier(row.newDocumentState);\n                            if (row.assumedMasterState) {\n                                row.assumedMasterState = await pushModifier(row.assumedMasterState);\n                            }\n\n                            if (this.deletedField !== '_deleted') {\n                                row.newDocumentState = swapDefaultDeletedTodeletedField(this.deletedField, row.newDocumentState) as any;\n                                if (row.assumedMasterState) {\n                                    row.assumedMasterState = swapDefaultDeletedTodeletedField(this.deletedField, row.assumedMasterState) as any;\n                                }\n                            }\n\n                            return row;\n                        })\n                    );\n\n                    let result: WithDeleted<RxDocType>[] = {} as any;\n                    while (!done) {\n                        try {\n                            result = await this.push.handler(useRows);\n                            done = true;\n                        } catch (err: any | Error | Error[]) {\n                            const emitError = newRxError('RC_PUSH', {\n                                pushRows: rows,\n                                errors: Array.isArray(err) ? err : [err],\n                                direction: 'push'\n                            });\n                            this.subjects.error.next(emitError);\n                            await this.collection.promiseWait(ensureNotFalsy(this.retryTime));\n                        }\n                    }\n\n\n                    const conflicts = ensureNotFalsy(result).map(doc => swapdeletedFieldToDefaultDeleted(this.deletedField, doc));\n                    return conflicts;\n                }\n            }\n        });\n        this.subs.push(\n            this.internalReplicationState.events.error.subscribe(err => {\n                this.subjects.error.next(err);\n            })\n        );\n        this.subs.push(\n            this.internalReplicationState.events.processed.down\n                .subscribe(row => this.subjects.received.next(row.document))\n        );\n        this.subs.push(\n            this.internalReplicationState.events.processed.up\n                .subscribe(writeToMasterRow => {\n                    this.subjects.send.next(writeToMasterRow.newDocumentState);\n                })\n        );\n        if (\n            this.pull &&\n            this.pull.stream$ &&\n            this.live\n        ) {\n            this.subs.push(\n                this.pull.stream$.subscribe({\n                    next: ev => {\n                        this.remoteEvents$.next(ev);\n                    },\n                    error: err => {\n                        this.subjects.error.next(err);\n                    }\n                })\n            );\n        }\n\n        if (!this.live) {\n            await awaitRxStorageReplicationFirstInSync(this.internalReplicationState);\n            await this.cancel();\n        }\n        this.callOnStart();\n    }\n\n    isStopped(): boolean {\n        if (this.subjects.canceled.getValue()) {\n            return true;\n        }\n        return false;\n    }\n\n    async awaitInitialReplication(): Promise<void> {\n        await this.startPromise;\n        return awaitRxStorageReplicationFirstInSync(\n            ensureNotFalsy(this.internalReplicationState)\n        );\n    }\n\n    /**\n     * Returns a promise that resolves when:\n     * - All local data is replicated with the remote\n     * - No replication cycle is running or in retry-state\n     *\n     * WARNING: USing this function directly in a multi-tab browser application\n     * is dangerous because only the leading instance will ever be replicated,\n     * so this promise will not resolve in the other tabs.\n     * For multi-tab support you should set and observe a flag in a local document.\n     */\n    async awaitInSync(): Promise<true> {\n        await this.startPromise;\n        await awaitRxStorageReplicationFirstInSync(ensureNotFalsy(this.internalReplicationState));\n        await awaitRxStorageReplicationInSync(ensureNotFalsy(this.internalReplicationState));\n        return true;\n    }\n\n    reSync() {\n        this.remoteEvents$.next('RESYNC');\n    }\n    emitEvent(ev: RxReplicationPullStreamItem<RxDocType, CheckpointType>) {\n        this.remoteEvents$.next(ev);\n    }\n\n    cancel(): Promise<any> {\n        if (this.isStopped()) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        const promises: Promise<any>[] = [];\n\n        if (this.internalReplicationState) {\n            this.internalReplicationState.events.canceled.next(true);\n        }\n        if (this.metaInstance) {\n            promises.push(\n                ensureNotFalsy(this.internalReplicationState).checkpointQueue\n                    .then(() => ensureNotFalsy(this.metaInstance).close())\n            );\n        }\n\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.subjects.canceled.next(true);\n\n        this.subjects.active.complete();\n        this.subjects.canceled.complete();\n        this.subjects.error.complete();\n        this.subjects.received.complete();\n        this.subjects.send.complete();\n\n        return Promise.all(promises);\n    }\n}\n\n\nexport function replicateRxCollection<RxDocType, CheckpointType>(\n    {\n        replicationIdentifier,\n        collection,\n        deletedField = '_deleted',\n        pull,\n        push,\n        live = true,\n        retryTime = 1000 * 5,\n        waitForLeadership = true,\n        autoStart = true,\n    }: ReplicationOptions<RxDocType, CheckpointType>\n): RxReplicationState<RxDocType, CheckpointType> {\n    const replicationIdentifierHash = fastUnsecureHash(\n        [\n            collection.database.name,\n            collection.name,\n            replicationIdentifier\n        ].join('|')\n    );\n    const replicationState = new RxReplicationState<RxDocType, CheckpointType>(\n        replicationIdentifierHash,\n        collection,\n        deletedField,\n        pull,\n        push,\n        live,\n        retryTime,\n        autoStart\n    );\n\n\n    startReplicationOnLeaderShip(waitForLeadership, replicationState);\n    return replicationState as any;\n}\n\n\nexport function startReplicationOnLeaderShip(\n    waitForLeadership: boolean,\n    replicationState: RxReplicationState<any, any>\n) {\n    /**\n     * Always await this Promise to ensure that the current instance\n     * is leader when waitForLeadership=true\n     */\n    const mustWaitForLeadership = waitForLeadership && replicationState.collection.database.multiInstance;\n    const waitTillRun: Promise<any> = mustWaitForLeadership ? replicationState.collection.database.waitForLeadership() : PROMISE_RESOLVE_TRUE;\n    return waitTillRun.then(() => {\n        if (replicationState.isStopped()) {\n            return;\n        }\n        if (replicationState.autoStart) {\n            replicationState.start();\n        }\n    });\n}\n"],"mappings":"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"}