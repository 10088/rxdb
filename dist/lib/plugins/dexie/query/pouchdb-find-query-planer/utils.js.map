{"version":3,"sources":["../../../../../../src/plugins/dexie/query/pouchdb-find-query-planer/utils.ts"],"names":["getUserFields","selector","sort","selectorFields","Object","keys","sortFields","map","getKey","userFields","length","fields","left","right","leftIdx","indexOf","Number","MAX_VALUE","rightIdx","sortOrder"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACO,SAASA,aAAT,CAAuBC,QAAvB,EAAsCC,IAAtC,EAAiD;AACtD,MAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAvB;AACA,MAAMK,UAAU,GAAGJ,IAAI,GAAEA,IAAI,CAACK,GAAL,CAASC,2BAAT,CAAF,GAAqB,EAA5C;AACA,MAAIC,UAAJ;;AACA,MAAIN,cAAc,CAACO,MAAf,IAAyBJ,UAAU,CAACI,MAAxC,EAAgD;AAC9CD,IAAAA,UAAU,GAAGN,cAAb;AACD,GAFD,MAEO;AACLM,IAAAA,UAAU,GAAGH,UAAb;AACD;;AAED,MAAIA,UAAU,CAACI,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,WAAO;AACLC,MAAAA,MAAM,EAAEF;AADH,KAAP;AAGD,GAdqD,CAgBtD;;;AACAA,EAAAA,UAAU,GAAGA,UAAU,CAACP,IAAX,CAAgB,UAAUU,IAAV,EAAqBC,KAArB,EAAiC;AAC5D,QAAIC,OAAO,GAAGR,UAAU,CAACS,OAAX,CAAmBH,IAAnB,CAAd;;AACA,QAAIE,OAAO,KAAK,CAAC,CAAjB,EAAoB;AAClBA,MAAAA,OAAO,GAAGE,MAAM,CAACC,SAAjB;AACD;;AACD,QAAIC,QAAQ,GAAGZ,UAAU,CAACS,OAAX,CAAmBF,KAAnB,CAAf;;AACA,QAAIK,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnBA,MAAAA,QAAQ,GAAGF,MAAM,CAACC,SAAlB;AACD;;AACD,WAAOH,OAAO,GAAGI,QAAV,GAAqB,CAAC,CAAtB,GAA0BJ,OAAO,GAAGI,QAAV,GAAqB,CAArB,GAAyB,CAA1D;AACD,GAVY,CAAb;AAYA,SAAO;AACLP,IAAAA,MAAM,EAAEF,UADH;AAELU,IAAAA,SAAS,EAAEjB,IAAI,CAACK,GAAL,CAASC,2BAAT;AAFN,GAAP;AAID","sourcesContent":["import { getKey } from 'pouchdb-selector-core';\n\n// determine the maximum number of fields\n// we're going to need to query, e.g. if the user\n// has selection ['a'] and sorting ['a', 'b'], then we\n// need to use the longer of the two: ['a', 'b']\nexport function getUserFields(selector: any, sort: any) {\n  const selectorFields = Object.keys(selector);\n  const sortFields = sort? sort.map(getKey) : [];\n  let userFields;\n  if (selectorFields.length >= sortFields.length) {\n    userFields = selectorFields;\n  } else {\n    userFields = sortFields;\n  }\n\n  if (sortFields.length === 0) {\n    return {\n      fields: userFields\n    };\n  }\n\n  // sort according to the user's preferred sorting\n  userFields = userFields.sort(function (left: any, right: any) {\n    let leftIdx = sortFields.indexOf(left);\n    if (leftIdx === -1) {\n      leftIdx = Number.MAX_VALUE;\n    }\n    let rightIdx = sortFields.indexOf(right);\n    if (rightIdx === -1) {\n      rightIdx = Number.MAX_VALUE;\n    }\n    return leftIdx < rightIdx ? -1 : leftIdx > rightIdx ? 1 : 0;\n  });\n\n  return {\n    fields: userFields,\n    sortOrder: sort.map(getKey)\n  };\n}\n"],"file":"utils.js"}