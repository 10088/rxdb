{"version":3,"file":"rx-storage-instance-dexie.js","names":["createDexieStorageInstance","storage","params","settings","internals","getDexieDbWithTables","databaseName","collectionName","schema","instance","RxStorageInstanceDexie","options","instanceId","now","changes$","Subject","closed","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","bulkWrite","documentWrites","state","ret","success","error","eventBulk","id","randomCouchString","events","documentKeys","map","writeRow","document","dexieDb","transaction","dexieTable","dexieDeletedTable","getDocsInDb","docsInDb","d","fromDexieToStorage","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","changesIds","forEach","docIndex","startTime","documentInDb","insertedIsDeleted","_deleted","writeDoc","Object","assign","_attachments","push","eventId","getUniqueDeterministicEventKey","documentId","change","doc","operation","previous","endTime","revInDb","_rev","err","isError","status","isDeleted","newRxError","args","Promise","all","length","bulkPut","fromStorageToDexie","PROMISE_RESOLVE_VOID","bulkDelete","event","next","findDocumentsById","ids","deleted","idx","bulkGet","query","preparedQuery","dexieQuery","getChangedDocumentsSince","limit","checkpoint","sinceLwt","lwt","RX_META_LWT_MINIMUM","sinceId","table","where","above","toArray","changedDocuments","changedDocsNormal","changedDocsDeleted","changedDocs","concat","sortDocumentsByLastWriteTime","slice","docData","_meta","remove","clear","close","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","below","toRemove","removeIds","getAttachmentData","_documentId","_attachmentId","Error","database","collection","complete","closeDexieDb"],"sources":["../../../../src/plugins/dexie/rx-storage-instance-dexie.ts"],"sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    randomCouchString,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    DexieChangesCheckpoint,\n    StringKeys\n} from '../../types';\nimport {\n    DexiePreparedQuery,\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport { RxStorageDexie } from './rx-storage-dexie';\nimport {\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb\n} from './dexie-helper';\nimport { dexieQuery } from './dexie-query';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { getUniqueDeterministicEventKey } from '../../rx-storage-helper';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDb = docsInDb.map(d => d ? fromDexieToStorage(d) : d);\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n                const changesIds: string[] = [];\n\n                documentWrites.forEach((writeRow, docIndex) => {\n                    const id: string = writeRow.document[this.primaryPath] as any;\n                    const startTime = now();\n                    const documentInDb = docsInDb[docIndex];\n                    if (!documentInDb) {\n                        /**\n                         * It is possible to insert already deleted documents,\n                         * this can happen on replication.\n                         */\n                        const insertedIsDeleted = writeRow.document._deleted ? true : false;\n                        const writeDoc = Object.assign(\n                            {},\n                            writeRow.document,\n                            {\n                                _deleted: insertedIsDeleted,\n                                // TODO attachments are currently not working with dexie.js\n                                _attachments: {} as any\n                            }\n                        );\n                        changesIds.push(id);\n                        if (insertedIsDeleted) {\n                            bulkPutDeletedDocs.push(writeDoc);\n                        } else {\n                            bulkPutDocs.push(writeDoc);\n                            eventBulk.events.push({\n                                eventId: getUniqueDeterministicEventKey(this, this.primaryPath as any, writeRow),\n                                documentId: id,\n                                change: {\n                                    doc: writeDoc,\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null\n                                },\n                                startTime,\n                                // will be filled up before the event is pushed into the changestream\n                                endTime: startTime\n                            });\n                        }\n\n                        ret.success[id] = writeDoc;\n                    } else {\n                        // update existing document\n                        const revInDb: string = documentInDb._rev;\n\n                        // inserting a deleted document is possible\n                        // without sending the previous data.\n                        if (!writeRow.previous && documentInDb._deleted) {\n                            writeRow.previous = documentInDb;\n                        }\n\n                        if (\n                            (\n                                !writeRow.previous &&\n                                !documentInDb._deleted\n                            ) ||\n                            (\n                                !!writeRow.previous &&\n                                revInDb !== writeRow.previous._rev\n                            )\n                        ) {\n                            // conflict error\n                            const err: RxStorageBulkWriteError<RxDocType> = {\n                                isError: true,\n                                status: 409,\n                                documentId: id,\n                                writeRow: writeRow,\n                                documentInDb\n                            };\n                            ret.error[id] = err;\n                        } else {\n                            const isDeleted = !!writeRow.document._deleted;\n                            const writeDoc: any = Object.assign(\n                                {},\n                                writeRow.document,\n                                {\n                                    _deleted: isDeleted,\n                                    // TODO attachments are currently not working with lokijs\n                                    _attachments: {}\n                                }\n                            );\n                            changesIds.push(id);\n                            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Insert document that was deleted before.\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                bulkRemoveDeletedDocs.push(id);\n                                change = {\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Update existing non-deleted document\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                change = {\n                                    id,\n                                    operation: 'UPDATE',\n                                    previous: writeRow.previous,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                                /**\n                                 * Set non-deleted document to deleted.\n                                 */\n                                bulkPutDeletedDocs.push(writeDoc);\n                                bulkRemoveDocs.push(id);\n\n                                change = {\n                                    id,\n                                    operation: 'DELETE',\n                                    previous: writeRow.previous,\n                                    doc: null\n                                };\n                            } else if (\n                                writeRow.previous && writeRow.previous._deleted &&\n                                writeRow.document._deleted\n                            ) {\n                                // deleted doc was overwritten with other deleted doc\n                                bulkPutDeletedDocs.push(writeDoc);\n                            }\n                            if (!change) {\n                                if (\n                                    writeRow.previous && writeRow.previous._deleted &&\n                                    writeRow.document._deleted\n                                ) {\n                                    // deleted doc got overwritten with other deleted doc -> do not send an event\n                                } else {\n                                    throw newRxError('SNH', { args: { writeRow } });\n                                }\n                            } else {\n                                eventBulk.events.push({\n                                    eventId: getUniqueDeterministicEventKey(this, this.primaryPath as any, writeRow),\n                                    documentId: id,\n                                    change,\n                                    startTime,\n                                    // will be filled up before the event is pushed into the changestream\n                                    endTime: startTime\n                                });\n                            }\n                            ret.success[id] = writeDoc;\n                        }\n                    }\n                });\n\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        const endTime = now();\n        eventBulk.events.forEach(event => event.endTime = endTime);\n        this.changes$.next(eventBulk);\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        const state = await this.internals;\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids)\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret[id] = fromDexieToStorage(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: DexiePreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: DexieChangesCheckpoint\n    ): Promise<{\n        document: RxDocumentData<RxDocType>;\n        checkpoint: DexieChangesCheckpoint;\n    }[]> {\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n        const state = await this.internals;\n\n\n        const [changedDocsNormal, changedDocsDeleted] = await Promise.all(\n            [\n                state.dexieTable,\n                state.dexieDeletedTable\n            ].map(async (table) => {\n                const query = table\n                    .where('[_meta.lwt+' + this.primaryPath + ']')\n                    .above([sinceLwt, sinceId])\n                    .limit(limit);\n                const changedDocuments: RxDocumentData<RxDocType>[] = await query.toArray();\n                return changedDocuments.map(d => fromDexieToStorage(d));\n            })\n        );\n        let changedDocs = changedDocsNormal.concat(changedDocsDeleted);\n\n        changedDocs = sortDocumentsByLastWriteTime(this.primaryPath as any, changedDocs);\n        changedDocs = changedDocs.slice(0, limit);\n        return changedDocs.map(docData => ({\n            document: docData,\n            checkpoint: {\n                id: docData[this.primaryPath] as any,\n                lwt: docData._meta.lwt\n            }\n        }));\n    }\n\n    async remove(): Promise<void> {\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieDeletedTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieDeletedTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                const toRemove = await state.dexieDeletedTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = toRemove.map(doc => doc[this.primaryPath]);\n                await state.dexieDeletedTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            throw newRxError('SNH', {\n                database: this.databaseName,\n                collection: this.collectionName\n            });\n        }\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n    }\n}\n\n\nexport async function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    return instance;\n}\n"],"mappings":"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"}