{"version":3,"sources":["../../../../src/plugins/dexie/rx-storage-instance-dexie.ts"],"names":["createDexieStorageInstance","storage","params","settings","internals","databaseName","collectionName","schema","instance","RxStorageInstanceDexie","options","instanceId","changes$","Subject","closed","primaryPath","primaryKey","addChangeDocumentsMeta","ids","state","addDocs","map","id","dexieChangesTable","bulkPut","bulkWrite","documentWrites","ret","success","error","eventBulk","events","documentKeys","writeRow","document","dexieDb","transaction","dexieTable","dexieDeletedTable","docsInDb","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","changesIds","forEach","docIndex","startTime","documentInDb","newRevision","insertedIsDeleted","_deleted","writeDoc","Object","assign","_rev","_attachments","insertData","$lastWriteAt","push","eventId","documentId","change","doc","operation","previous","endTime","revInDb","err","isError","status","newRevHeight","isDeleted","args","Promise","all","length","PROMISE_RESOLVE_VOID","bulkDelete","event","next","bulkAddRevisions","documents","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","storeAtDb","findDocumentsById","deleted","idx","bulkGet","query","preparedQuery","getChangedDocuments","lastSequence","direction","where","below","sinceSequence","reverse","above","limit","toArray","changedDocuments","useForLastSequence","sequence","remove","clear","close","changeStream","asObservable","getAttachmentData","_documentId","_attachmentId","Error","complete"],"mappings":"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","sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    createRevision,\n    getHeightOfRevision,\n    parseRevision,\n    lastOfArray,\n    flatClone,\n    now,\n    randomCouchString,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    BlobBuffer,\n    ChangeStreamOnceOptions,\n    RxJsonSchema,\n    RxStorageChangedDocumentMeta,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    PreparedQuery\n} from '../../types';\nimport { DexieSettings, DexieStorageInternals } from '../../types/plugins/dexie';\nimport { RxStorageDexie } from './rx-storage-dexie';\nimport {\n    closeDexieDb,\n    getDexieDbWithTables,\n    getDexieEventKey,\n    getDocsInDb,\n    stripDexieKey\n} from './dexie-helper';\nimport { dexieQuery } from './query/dexie-query';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings\n> {\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    /**\n     * Adds entries to the changes feed\n     * that can be queried to check which documents have been\n     * changed since sequence X.\n     */\n    private async addChangeDocumentsMeta(ids: string[]) {\n        const state = await this.internals;\n        const addDocs = ids.map(id => ({ id }));\n        return state.dexieChangesTable.bulkPut(addDocs);\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            state.dexieChangesTable,\n            async () => {\n                const docsInDb = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n                const changesIds: string[] = [];\n\n                documentWrites.forEach((writeRow, docIndex) => {\n                    const id: string = writeRow.document[this.primaryPath] as any;\n                    const startTime = now();\n                    const documentInDb = docsInDb[docIndex];\n                    if (!documentInDb) {\n                        // insert new document\n                        const newRevision = '1-' + createRevision(writeRow.document);\n                        /**\n                         * It is possible to insert already deleted documents,\n                         * this can happen on replication.\n                         */\n                        const insertedIsDeleted = writeRow.document._deleted ? true : false;\n                        const writeDoc = Object.assign(\n                            {},\n                            writeRow.document,\n                            {\n                                _rev: newRevision,\n                                _deleted: insertedIsDeleted,\n                                // TODO attachments are currently not working with lokijs\n                                _attachments: {} as any\n                            }\n                        );\n                        const insertData: any = flatClone(writeDoc);\n                        insertData.$lastWriteAt = startTime;\n                        changesIds.push(id);\n                        if (insertedIsDeleted) {\n                            bulkPutDeletedDocs.push(insertData);\n                        } else {\n                            bulkPutDocs.push(insertData);\n                            eventBulk.events.push({\n                                eventId: getDexieEventKey(false, id, newRevision),\n                                documentId: id,\n                                change: {\n                                    doc: writeDoc,\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null\n                                },\n                                startTime,\n                                // will be filled up before the event is pushed into the changestream\n                                endTime: startTime\n                            });\n                        }\n                        ret.success[id] = writeDoc;\n                    } else {\n                        // update existing document\n                        const revInDb: string = documentInDb._rev;\n\n                        // inserting a deleted document is possible\n                        // without sending the previous data.\n                        if (!writeRow.previous && documentInDb._deleted) {\n                            writeRow.previous = documentInDb;\n                        }\n\n                        if (\n                            (\n                                !writeRow.previous &&\n                                !documentInDb._deleted\n                            ) ||\n                            (\n                                !!writeRow.previous &&\n                                revInDb !== writeRow.previous._rev\n                            )\n                        ) {\n                            // conflict error\n                            const err: RxStorageBulkWriteError<RxDocType> = {\n                                isError: true,\n                                status: 409,\n                                documentId: id,\n                                writeRow: writeRow\n                            };\n                            ret.error[id] = err;\n                        } else {\n                            const newRevHeight = getHeightOfRevision(revInDb) + 1;\n                            const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n                            const isDeleted = !!writeRow.document._deleted;\n                            const writeDoc: any = Object.assign(\n                                {},\n                                writeRow.document,\n                                {\n                                    $lastWriteAt: startTime,\n                                    _rev: newRevision,\n                                    _deleted: isDeleted,\n                                    // TODO attachments are currently not working with lokijs\n                                    _attachments: {}\n                                }\n                            );\n                            changesIds.push(id);\n                            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Insert document that was deleted before.\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                bulkRemoveDeletedDocs.push(id);\n                                change = {\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null,\n                                    doc: stripDexieKey(writeDoc)\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Update existing non-deleted document\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                change = {\n                                    id,\n                                    operation: 'UPDATE',\n                                    previous: writeRow.previous,\n                                    doc: stripDexieKey(writeDoc)\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                                /**\n                                 * Set non-deleted document to deleted.\n                                 */\n                                bulkPutDeletedDocs.push(writeDoc);\n                                bulkRemoveDocs.push(id);\n\n                                /**\n                                 * On delete, we send the 'new' rev in the previous property,\n                                 * to have the equal behavior as pouchdb.\n                                 */\n                                const previous = flatClone(writeRow.previous);\n                                previous._rev = newRevision;\n                                change = {\n                                    id,\n                                    operation: 'DELETE',\n                                    previous,\n                                    doc: null\n                                };\n                            }\n                            if (!change) {\n                                throw newRxError('SNH', { args: { writeRow } });\n                            }\n                            eventBulk.events.push({\n                                eventId: getDexieEventKey(false, id, newRevision),\n                                documentId: id,\n                                change,\n                                startTime,\n                                // will be filled up before the event is pushed into the changestream\n                                endTime: startTime\n                            });\n                            ret.success[id] = stripDexieKey(writeDoc);\n                        }\n                    }\n                });\n\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID,\n                    changesIds.length > 0 ? this.addChangeDocumentsMeta(changesIds) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        const endTime = now();\n        eventBulk.events.forEach(event => event.endTime = endTime);\n        this.changes$.next(eventBulk);\n\n        return ret;\n    }\n\n    async bulkAddRevisions(documents: RxDocumentData<RxDocType>[]): Promise<void> {\n        const state = await this.internals;\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        const documentKeys: string[] = documents.map(writeRow => writeRow[this.primaryPath] as any);\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            state.dexieChangesTable,\n            async () => {\n                const docsInDb = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n                const changesIds: string[] = [];\n\n                documents.forEach((docData, docIndex) => {\n                    const startTime = now();\n                    const documentInDb = docsInDb[docIndex];\n                    const id: string = docData[this.primaryPath] as any;\n\n                    if (!documentInDb) {\n                        // document not here, so we can directly insert\n                        const insertData: any = flatClone(docData);\n                        insertData.$lastWriteAt = startTime;\n\n                        if (insertData._deleted) {\n                            bulkPutDeletedDocs.push(insertData);\n                        } else {\n                            bulkPutDocs.push(insertData);\n                        }\n\n                        eventBulk.events.push({\n                            documentId: id,\n                            eventId: getDexieEventKey(false, id, docData._rev),\n                            change: {\n                                doc: docData,\n                                id,\n                                operation: 'INSERT',\n                                previous: null\n                            },\n                            startTime,\n                            // will be filled up before the event is pushed into the changestream\n                            endTime: startTime\n                        });\n                        changesIds.push(id);\n                    } else {\n                        const newWriteRevision = parseRevision(docData._rev);\n                        const oldRevision = parseRevision(documentInDb._rev);\n\n                        let mustUpdate: boolean = false;\n                        if (newWriteRevision.height !== oldRevision.height) {\n                            // height not equal, compare base on height\n                            if (newWriteRevision.height > oldRevision.height) {\n                                mustUpdate = true;\n                            }\n                        } else if (newWriteRevision.hash > oldRevision.hash) {\n                            // equal height but new write has the 'winning' hash\n                            mustUpdate = true;\n                        }\n                        if (mustUpdate) {\n                            const storeAtDb = flatClone(docData) as any;\n                            storeAtDb.$lastWriteAt = startTime;\n                            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                            if (documentInDb._deleted && !docData._deleted) {\n                                bulkRemoveDeletedDocs.push(id);\n                                bulkPutDocs.push(docData);\n                                change = {\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null,\n                                    doc: docData\n                                };\n                            } else if (!documentInDb._deleted && !docData._deleted) {\n                                bulkPutDocs.push(docData);\n                                change = {\n                                    id,\n                                    operation: 'UPDATE',\n                                    previous: stripDexieKey(documentInDb),\n                                    doc: docData\n                                };\n                            } else if (!documentInDb._deleted && docData._deleted) {\n                                bulkPutDeletedDocs.push(docData);\n                                bulkRemoveDocs.push(id);\n                                change = {\n                                    id,\n                                    operation: 'DELETE',\n                                    previous: stripDexieKey(documentInDb),\n                                    doc: null\n                                };\n                            } else if (documentInDb._deleted && docData._deleted) {\n                                bulkPutDocs.push(docData);\n                                change = null;\n                            }\n                            if (change) {\n                                eventBulk.events.push({\n                                    documentId: id,\n                                    eventId: getDexieEventKey(false, id, docData._rev),\n                                    change,\n                                    startTime,\n                                    // will be filled up before the event is pushed into the changestream\n                                    endTime: startTime\n                                });\n                                changesIds.push(id);\n                            }\n                        }\n                    }\n                });\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID,\n                    this.addChangeDocumentsMeta(changesIds)\n                ]);\n            });\n\n        const endTime = now();\n        eventBulk.events.forEach(event => event.endTime = endTime);\n        this.changes$.next(eventBulk);\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        const state = await this.internals;\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids)\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret[id] = stripDexieKey(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: PreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }> {\n        const state = await this.internals;\n        let lastSequence: number = 0;\n\n        let query;\n        if (options.direction === 'before') {\n            query = state.dexieChangesTable\n                .where('sequence')\n                .below(options.sinceSequence)\n                .reverse();\n        } else {\n            query = state.dexieChangesTable\n                .where('sequence')\n                .above(options.sinceSequence);\n        }\n\n        if (options.limit) {\n            query = (query as any).limit(options.limit);\n        }\n\n        const changedDocuments: RxStorageChangedDocumentMeta[] = await query.toArray();\n\n        if (changedDocuments.length === 0) {\n            lastSequence = options.sinceSequence;\n        } else {\n            const useForLastSequence = options.direction === 'after' ? lastOfArray(changedDocuments) : changedDocuments[0];\n            lastSequence = useForLastSequence.sequence;\n        }\n\n        return {\n            lastSequence,\n            changedDocuments\n        }\n    }\n\n    async remove(): Promise<void> {\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieChangesTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<BlobBuffer> {\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n    }\n}\n\n\nexport async function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    return instance;\n}\n"],"file":"rx-storage-instance-dexie.js"}