{"version":3,"file":"rx-storage-instance-dexie.js","names":["instanceId","now","RxStorageInstanceDexie","storage","databaseName","collectionName","schema","internals","options","settings","changes$","Subject","closed","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","bulkWrite","documentWrites","context","ensureNotClosed","state","ret","success","error","documentKeys","map","writeRow","document","categorized","dexieDb","transaction","dexieTable","dexieDeletedTable","docsInDbMap","Map","getDocsInDb","docsInDbWithInternals","forEach","docWithDexieInternals","doc","fromDexieToStorage","set","categorizeBulkWriteRows","errors","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","bulkInsertDocs","row","docId","push","bulkUpdateDocs","_deleted","previous","newRxError","args","Promise","all","length","bulkPut","d","fromStorageToDexie","PROMISE_RESOLVE_VOID","bulkDelete","ensureNotFalsy","eventBulk","events","lastState","getNewestOfDocumentStates","Object","values","checkpoint","id","lwt","_meta","endTime","event","next","findDocumentsById","ids","deleted","idx","documentInDb","docsInDb","bulkGet","query","preparedQuery","dexieQuery","getChangedDocumentsSince","limit","sinceLwt","RX_META_LWT_MINIMUM","sinceId","table","where","above","toArray","changedDocuments","changedDocsNormal","changedDocsDeleted","changedDocs","concat","sortDocumentsByLastWriteTime","slice","lastDoc","lastOfArray","documents","remove","clear","close","changeStream","asObservable","cleanup","minimumDeletedTime","maxDeletionTime","below","toRemove","removeIds","getAttachmentData","_documentId","_attachmentId","Error","complete","closeDexieDb","conflictResultionTasks","resolveConflictResultionTask","_taskSolution","createDexieStorageInstance","params","getDexieDbWithTables","instance","addRxStorageMultiInstanceSupport","RX_STORAGE_NAME_DEXIE","resolve"],"sources":["../../../../src/plugins/dexie/rx-storage-instance-dexie.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    now,\n    PROMISE_RESOLVE_VOID,\n    RX_META_LWT_MINIMUM,\n    sortDocumentsByLastWriteTime,\n    lastOfArray,\n    ensureNotFalsy\n} from '../../util';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    StringKeys,\n    RxDocumentDataById,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    CategorizeBulkWriteRowsOutput\n} from '../../types';\nimport {\n    DexiePreparedQuery,\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport { RxStorageDexie } from './rx-storage-dexie';\nimport {\n    closeDexieDb,\n    fromDexieToStorage,\n    fromStorageToDexie,\n    getDexieDbWithTables,\n    getDocsInDb,\n    RX_STORAGE_NAME_DEXIE\n} from './dexie-helper';\nimport { dexieQuery } from './dexie-query';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper';\nimport { categorizeBulkWriteRows, getNewestOfDocumentStates } from '../../rx-storage-helper';\nimport { addRxStorageMultiInstanceSupport } from '../../rx-storage-multiinstance';\nimport { newRxError } from '../../rx-error';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        let categorized: CategorizeBulkWriteRowsOutput<RxDocType> | undefined = null as any;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                const docsInDbMap = new Map<string, RxDocumentData<RxDocType>>();\n                const docsInDbWithInternals = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n                docsInDbWithInternals.forEach(docWithDexieInternals => {\n                    const doc = docWithDexieInternals ? fromDexieToStorage(docWithDexieInternals) : docWithDexieInternals;\n                    if (doc) {\n                        docsInDbMap.set(doc[this.primaryPath], doc);\n                    }\n                    return doc;\n                });\n\n                categorized = categorizeBulkWriteRows<RxDocType>(\n                    this,\n                    this.primaryPath as any,\n                    docsInDbMap,\n                    documentWrites,\n                    context\n                );\n                ret.error = categorized.errors;\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n\n                categorized.bulkInsertDocs.forEach(row => {\n                    const docId: string = (row.document as any)[this.primaryPath];\n                    ret.success[docId] = row.document;\n                    bulkPutDocs.push(row.document);\n                });\n                categorized.bulkUpdateDocs.forEach(row => {\n                    const docId: string = (row.document as any)[this.primaryPath];\n                    ret.success[docId] = row.document;\n                    if (\n                        row.document._deleted &&\n                        (row.previous && !row.previous._deleted)\n                    ) {\n                        // newly deleted\n                        bulkRemoveDocs.push(docId);\n                        bulkPutDeletedDocs.push(row.document);\n                    } else if (\n                        row.document._deleted &&\n                        row.previous && row.previous._deleted\n                    ) {\n                        // deleted was modified but is still deleted\n                        bulkPutDeletedDocs.push(row.document);\n                    } else if (!row.document._deleted) {\n                        // non-deleted was changed\n                        bulkPutDocs.push(row.document);\n                    } else {\n                        throw newRxError('SNH', { args: { row } });\n                    }\n                });\n\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs.map(d => fromStorageToDexie(d))) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        if (ensureNotFalsy(categorized).eventBulk.events.length > 0) {\n            const lastState = getNewestOfDocumentStates(\n                this.primaryPath as any,\n                Object.values(ret.success)\n            );\n            ensureNotFalsy(categorized).eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            const endTime = now();\n            ensureNotFalsy(categorized).eventBulk.events.forEach(event => (event as any).endTime = endTime);\n            this.changes$.next(ensureNotFalsy(categorized).eventBulk);\n        }\n\n        return ret;\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<RxDocumentDataById<RxDocType>> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        const ret: RxDocumentDataById<RxDocType> = {};\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids)\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret[id] = fromDexieToStorage(documentInDb);\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: DexiePreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        ensureNotClosed(this);\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n\n    async getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: RxStorageDefaultCheckpoint\n    ): Promise<{\n        documents: RxDocumentData<RxDocType>[];\n        checkpoint: RxStorageDefaultCheckpoint;\n    }> {\n        ensureNotClosed(this);\n        const sinceLwt = checkpoint ? checkpoint.lwt : RX_META_LWT_MINIMUM;\n        const sinceId = checkpoint ? checkpoint.id : '';\n        const state = await this.internals;\n\n\n        const [changedDocsNormal, changedDocsDeleted] = await Promise.all(\n            [\n                state.dexieTable,\n                state.dexieDeletedTable\n            ].map(async (table) => {\n                const query = table\n                    .where('[_meta.lwt+' + this.primaryPath + ']')\n                    .above([sinceLwt, sinceId])\n                    .limit(limit);\n                const changedDocuments: RxDocumentData<RxDocType>[] = await query.toArray();\n                return changedDocuments.map(d => fromDexieToStorage(d));\n            })\n        );\n        let changedDocs = changedDocsNormal.concat(changedDocsDeleted);\n\n        changedDocs = sortDocumentsByLastWriteTime(this.primaryPath as any, changedDocs);\n        changedDocs = changedDocs.slice(0, limit);\n\n        const lastDoc = lastOfArray(changedDocs);\n        return {\n            documents: changedDocs,\n            checkpoint: lastDoc ? {\n                id: lastDoc[this.primaryPath] as any,\n                lwt: lastDoc._meta.lwt\n            } : checkpoint ? checkpoint : {\n                id: '',\n                lwt: 0\n            }\n        };\n    }\n\n    async remove(): Promise<void> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieDeletedTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotClosed(this);\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        ensureNotClosed(this);\n        const state = await this.internals;\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieDeletedTable,\n            async () => {\n                const maxDeletionTime = now() - minimumDeletedTime;\n                const toRemove = await state.dexieDeletedTable\n                    .where('_meta.lwt')\n                    .below(maxDeletionTime)\n                    .toArray();\n                const removeIds: string[] = toRemove.map(doc => doc[this.primaryPath]);\n                await state.dexieDeletedTable.bulkDelete(removeIds);\n            }\n        );\n\n        /**\n         * TODO instead of deleting all deleted docs at once,\n         * only clean up some of them and return false if there are more documents to clean up.\n         * This ensures that when many documents have to be purged,\n         * we do not block the more important tasks too long.\n         */\n        return true;\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<string> {\n        ensureNotClosed(this);\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    close(): Promise<void> {\n        ensureNotClosed(this);\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\n\nexport function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_DEXIE,\n        params,\n        instance\n    );\n\n    return Promise.resolve(instance);\n}\n\n\n\nfunction ensureNotClosed(\n    instance: RxStorageInstanceDexie<any>\n) {\n    if (instance.closed) {\n        throw new Error('RxStorageInstanceDexie is closed ' + instance.databaseName + '-' + instance.collectionName);\n    }\n}\n"],"mappings":"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"}