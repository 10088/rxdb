{"version":3,"sources":["../../../../src/plugins/dexie/rx-storage-instance-dexie.ts"],"names":["createDexieStorageInstance","storage","params","settings","internals","databaseName","collectionName","schema","instance","RxStorageInstanceDexie","options","instanceId","changes$","Subject","closed","primaryPath","primaryKey","addChangeDocumentsMeta","ids","state","addDocs","map","id","dexieChangesTable","bulkPut","bulkWrite","documentWrites","ret","success","error","eventBulk","events","documentKeys","writeRow","document","dexieDb","transaction","dexieTable","dexieDeletedTable","docsInDb","bulkPutDocs","bulkRemoveDocs","bulkPutDeletedDocs","bulkRemoveDeletedDocs","changesIds","forEach","docIndex","startTime","documentInDb","newRevision","insertedIsDeleted","_deleted","writeDoc","Object","assign","_rev","_attachments","push","eventId","documentId","change","doc","operation","previous","endTime","revInDb","err","isError","status","newRevHeight","isDeleted","args","Promise","all","length","PROMISE_RESOLVE_VOID","bulkDelete","event","next","bulkAddRevisions","documents","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","findDocumentsById","deleted","idx","bulkGet","query","preparedQuery","getChangedDocuments","lastSequence","direction","where","below","sinceSequence","reverse","above","limit","toArray","changedDocuments","useForLastSequence","sequence","remove","clear","close","changeStream","asObservable","getAttachmentData","_documentId","_attachmentId","Error","complete"],"mappings":"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","sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    createRevision,\n    getHeightOfRevision,\n    parseRevision,\n    lastOfArray,\n    flatClone,\n    now,\n    randomCouchString,\n    PROMISE_RESOLVE_VOID\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    RxStorageInstance,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    BlobBuffer,\n    ChangeStreamOnceOptions,\n    RxJsonSchema,\n    RxStorageChangedDocumentMeta,\n    RxStorageInstanceCreationParams,\n    EventBulk,\n    PreparedQuery\n} from '../../types';\nimport { DexieSettings, DexieStorageInternals } from '../../types/plugins/dexie';\nimport { RxStorageDexie } from './rx-storage-dexie';\nimport {\n    closeDexieDb,\n    getDexieDbWithTables,\n    getDexieEventKey,\n    getDocsInDb\n} from './dexie-helper';\nimport { dexieQuery } from './query/dexie-query';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceDexie<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    DexieStorageInternals,\n    DexieSettings\n> {\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    public readonly instanceId = instanceId++;\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageDexie,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: DexieStorageInternals,\n        public readonly options: Readonly<DexieSettings>,\n        public readonly settings: DexieSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    /**\n     * Adds entries to the changes feed\n     * that can be queried to check which documents have been\n     * changed since sequence X.\n     */\n    private async addChangeDocumentsMeta(ids: string[]) {\n        const state = await this.internals;\n        const addDocs = ids.map(id => ({ id }));\n        return state.dexieChangesTable.bulkPut(addDocs);\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const state = await this.internals;\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n\n        const documentKeys: string[] = documentWrites.map(writeRow => writeRow.document[this.primaryPath] as any);\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            state.dexieChangesTable,\n            async () => {\n                const docsInDb = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n                const changesIds: string[] = [];\n\n                documentWrites.forEach((writeRow, docIndex) => {\n                    const id: string = writeRow.document[this.primaryPath] as any;\n                    const startTime = now();\n                    const documentInDb = docsInDb[docIndex];\n                    if (!documentInDb) {\n                        // insert new document\n                        const newRevision = '1-' + createRevision(writeRow.document);\n                        /**\n                         * It is possible to insert already deleted documents,\n                         * this can happen on replication.\n                         */\n                        const insertedIsDeleted = writeRow.document._deleted ? true : false;\n                        const writeDoc = Object.assign(\n                            {},\n                            writeRow.document,\n                            {\n                                _rev: newRevision,\n                                _deleted: insertedIsDeleted,\n                                // TODO attachments are currently not working with lokijs\n                                _attachments: {} as any\n                            }\n                        );\n                        changesIds.push(id);\n                        if (insertedIsDeleted) {\n                            bulkPutDeletedDocs.push(writeDoc);\n                        } else {\n                            bulkPutDocs.push(writeDoc);\n                            eventBulk.events.push({\n                                eventId: getDexieEventKey(false, id, newRevision),\n                                documentId: id,\n                                change: {\n                                    doc: writeDoc,\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null\n                                },\n                                startTime,\n                                // will be filled up before the event is pushed into the changestream\n                                endTime: startTime\n                            });\n                        }\n                        ret.success[id] = writeDoc;\n                    } else {\n                        // update existing document\n                        const revInDb: string = documentInDb._rev;\n\n                        // inserting a deleted document is possible\n                        // without sending the previous data.\n                        if (!writeRow.previous && documentInDb._deleted) {\n                            writeRow.previous = documentInDb;\n                        }\n\n                        if (\n                            (\n                                !writeRow.previous &&\n                                !documentInDb._deleted\n                            ) ||\n                            (\n                                !!writeRow.previous &&\n                                revInDb !== writeRow.previous._rev\n                            )\n                        ) {\n                            // conflict error\n                            const err: RxStorageBulkWriteError<RxDocType> = {\n                                isError: true,\n                                status: 409,\n                                documentId: id,\n                                writeRow: writeRow\n                            };\n                            ret.error[id] = err;\n                        } else {\n                            const newRevHeight = getHeightOfRevision(revInDb) + 1;\n                            const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n                            const isDeleted = !!writeRow.document._deleted;\n                            const writeDoc: any = Object.assign(\n                                {},\n                                writeRow.document,\n                                {\n                                    _rev: newRevision,\n                                    _deleted: isDeleted,\n                                    // TODO attachments are currently not working with lokijs\n                                    _attachments: {}\n                                }\n                            );\n                            changesIds.push(id);\n                            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Insert document that was deleted before.\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                bulkRemoveDeletedDocs.push(id);\n                                change = {\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                                /**\n                                 * Update existing non-deleted document\n                                 */\n                                bulkPutDocs.push(writeDoc);\n                                change = {\n                                    id,\n                                    operation: 'UPDATE',\n                                    previous: writeRow.previous,\n                                    doc: writeDoc\n                                };\n                            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                                /**\n                                 * Set non-deleted document to deleted.\n                                 */\n                                bulkPutDeletedDocs.push(writeDoc);\n                                bulkRemoveDocs.push(id);\n\n                                /**\n                                 * On delete, we send the 'new' rev in the previous property,\n                                 * to have the equal behavior as pouchdb.\n                                 */\n                                const previous = flatClone(writeRow.previous);\n                                previous._rev = newRevision;\n                                change = {\n                                    id,\n                                    operation: 'DELETE',\n                                    previous,\n                                    doc: null\n                                };\n                            }\n                            if (!change) {\n                                throw newRxError('SNH', { args: { writeRow } });\n                            }\n                            eventBulk.events.push({\n                                eventId: getDexieEventKey(false, id, newRevision),\n                                documentId: id,\n                                change,\n                                startTime,\n                                // will be filled up before the event is pushed into the changestream\n                                endTime: startTime\n                            });\n                            ret.success[id] = writeDoc;\n                        }\n                    }\n                });\n\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID,\n                    changesIds.length > 0 ? this.addChangeDocumentsMeta(changesIds) : PROMISE_RESOLVE_VOID\n                ]);\n            });\n\n        const endTime = now();\n        eventBulk.events.forEach(event => event.endTime = endTime);\n        this.changes$.next(eventBulk);\n\n        return ret;\n    }\n\n    async bulkAddRevisions(documents: RxDocumentData<RxDocType>[]): Promise<void> {\n        const state = await this.internals;\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        const documentKeys: string[] = documents.map(writeRow => writeRow[this.primaryPath] as any);\n        await state.dexieDb.transaction(\n            'rw',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            state.dexieChangesTable,\n            async () => {\n                const docsInDb = await getDocsInDb<RxDocType>(this.internals, documentKeys);\n\n                /**\n                 * Batch up the database operations\n                 * so we can later run them in bulk.\n                 */\n                const bulkPutDocs: any[] = [];\n                const bulkRemoveDocs: string[] = [];\n                const bulkPutDeletedDocs: any[] = [];\n                const bulkRemoveDeletedDocs: string[] = [];\n                const changesIds: string[] = [];\n\n                documents.forEach((docData, docIndex) => {\n                    const startTime = now();\n                    const documentInDb = docsInDb[docIndex];\n                    const id: string = docData[this.primaryPath] as any;\n\n                    if (!documentInDb) {\n                        if (docData._deleted) {\n                            bulkPutDeletedDocs.push(docData);\n                        } else {\n                            bulkPutDocs.push(docData);\n                        }\n\n                        eventBulk.events.push({\n                            documentId: id,\n                            eventId: getDexieEventKey(false, id, docData._rev),\n                            change: {\n                                doc: docData,\n                                id,\n                                operation: 'INSERT',\n                                previous: null\n                            },\n                            startTime,\n                            // will be filled up before the event is pushed into the changestream\n                            endTime: startTime\n                        });\n                        changesIds.push(id);\n                    } else {\n                        const newWriteRevision = parseRevision(docData._rev);\n                        const oldRevision = parseRevision(documentInDb._rev);\n\n                        let mustUpdate: boolean = false;\n                        if (newWriteRevision.height !== oldRevision.height) {\n                            // height not equal, compare base on height\n                            if (newWriteRevision.height > oldRevision.height) {\n                                mustUpdate = true;\n                            }\n                        } else if (newWriteRevision.hash > oldRevision.hash) {\n                            // equal height but new write has the 'winning' hash\n                            mustUpdate = true;\n                        }\n                        if (mustUpdate) {\n                            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                            if (documentInDb._deleted && !docData._deleted) {\n                                bulkRemoveDeletedDocs.push(id);\n                                bulkPutDocs.push(docData);\n                                change = {\n                                    id,\n                                    operation: 'INSERT',\n                                    previous: null,\n                                    doc: docData\n                                };\n                            } else if (!documentInDb._deleted && !docData._deleted) {\n                                bulkPutDocs.push(docData);\n                                change = {\n                                    id,\n                                    operation: 'UPDATE',\n                                    previous: documentInDb,\n                                    doc: docData\n                                };\n                            } else if (!documentInDb._deleted && docData._deleted) {\n                                bulkPutDeletedDocs.push(docData);\n                                bulkRemoveDocs.push(id);\n                                change = {\n                                    id,\n                                    operation: 'DELETE',\n                                    previous: documentInDb,\n                                    doc: null\n                                };\n                            } else if (documentInDb._deleted && docData._deleted) {\n                                bulkPutDocs.push(docData);\n                                change = null;\n                            }\n                            if (change) {\n                                eventBulk.events.push({\n                                    documentId: id,\n                                    eventId: getDexieEventKey(false, id, docData._rev),\n                                    change,\n                                    startTime,\n                                    // will be filled up before the event is pushed into the changestream\n                                    endTime: startTime\n                                });\n                                changesIds.push(id);\n                            }\n                        }\n                    }\n                });\n                await Promise.all([\n                    bulkPutDocs.length > 0 ? state.dexieTable.bulkPut(bulkPutDocs) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDocs.length > 0 ? state.dexieTable.bulkDelete(bulkRemoveDocs) : PROMISE_RESOLVE_VOID,\n                    bulkPutDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkPut(bulkPutDeletedDocs) : PROMISE_RESOLVE_VOID,\n                    bulkRemoveDeletedDocs.length > 0 ? state.dexieDeletedTable.bulkDelete(bulkRemoveDeletedDocs) : PROMISE_RESOLVE_VOID,\n                    this.addChangeDocumentsMeta(changesIds)\n                ]);\n            });\n\n        const endTime = now();\n        eventBulk.events.forEach(event => event.endTime = endTime);\n        this.changes$.next(eventBulk);\n    }\n\n    async findDocumentsById(\n        ids: string[],\n        deleted: boolean\n    ): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        const state = await this.internals;\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n\n        await state.dexieDb.transaction(\n            'r',\n            state.dexieTable,\n            state.dexieDeletedTable,\n            async () => {\n                let docsInDb: RxDocumentData<RxDocType>[];\n                if (deleted) {\n                    docsInDb = await getDocsInDb<RxDocType>(this.internals, ids);\n                } else {\n                    docsInDb = await state.dexieTable.bulkGet(ids)\n                }\n                ids.forEach((id, idx) => {\n                    const documentInDb = docsInDb[idx];\n                    if (\n                        documentInDb &&\n                        (!documentInDb._deleted || deleted)\n                    ) {\n                        ret[id] = documentInDb;\n                    }\n                });\n            });\n        return ret;\n    }\n\n    query(preparedQuery: PreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        return dexieQuery(\n            this,\n            preparedQuery\n        );\n    }\n\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }> {\n        const state = await this.internals;\n        let lastSequence: number = 0;\n\n        let query;\n        if (options.direction === 'before') {\n            query = state.dexieChangesTable\n                .where('sequence')\n                .below(options.sinceSequence)\n                .reverse();\n        } else {\n            query = state.dexieChangesTable\n                .where('sequence')\n                .above(options.sinceSequence);\n        }\n\n        if (options.limit) {\n            query = (query as any).limit(options.limit);\n        }\n\n        const changedDocuments: RxStorageChangedDocumentMeta[] = await query.toArray();\n\n        if (changedDocuments.length === 0) {\n            lastSequence = options.sinceSequence;\n        } else {\n            const useForLastSequence = options.direction === 'after' ? lastOfArray(changedDocuments) : changedDocuments[0];\n            lastSequence = useForLastSequence.sequence;\n        }\n\n        return {\n            lastSequence,\n            changedDocuments\n        }\n    }\n\n    async remove(): Promise<void> {\n        const state = await this.internals;\n        await Promise.all([\n            state.dexieChangesTable.clear(),\n            state.dexieTable.clear()\n        ]);\n        return this.close();\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<BlobBuffer> {\n        throw new Error('Attachments are not implemented in the dexie RxStorage. Make a pull request.');\n    }\n\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        closeDexieDb(this.internals);\n    }\n}\n\n\nexport async function createDexieStorageInstance<RxDocType>(\n    storage: RxStorageDexie,\n    params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>,\n    settings: DexieSettings\n): Promise<RxStorageInstanceDexie<RxDocType>> {\n    const internals = getDexieDbWithTables(\n        params.databaseName,\n        params.collectionName,\n        settings,\n        params.schema\n    );\n\n    const instance = new RxStorageInstanceDexie(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings\n    );\n\n    return instance;\n}\n"],"file":"rx-storage-instance-dexie.js"}