{"version":3,"file":"dexie-query.js","names":["dexieQuery","instance","preparedQuery","internals","state","query","queryMatcher","RxStorageDexieStatics","getQueryMatcher","schema","sortComparator","getSortComparator","skip","limit","Infinity","skipPlusLimit","queryPlan","keyRange","getKeyRangeByQueryPlan","dexieDb","_options","IDBKeyRange","queryPlanFields","index","rows","transaction","dexieTable","dexieTx","tx","idbtrans","store","objectStore","DEXIE_DOCS_TABLE_NAME","length","primaryPath","indexName","map","field","join","cursorReq","openCursor","Promise","res","onsuccess","e","cursor","target","result","docData","value","push","sortFieldsSameAsIndexFields","sort","slice","documents","window","Error","bound","startKeys","endKeys","inclusiveStart","inclusiveEnd"],"sources":["../../../../src/plugins/dexie/dexie-query.ts"],"sourcesContent":["import type {\n    DexiePreparedQuery,\n    RxQueryPlan,\n    RxStorageQueryResult\n} from '../../types';\nimport {\n    dexieReplaceIfStartsWithPipe,\n    DEXIE_DOCS_TABLE_NAME,\n    fromDexieToStorage\n} from './dexie-helper';\nimport { RxStorageDexieStatics } from './rx-storage-dexie';\nimport type { RxStorageInstanceDexie } from './rx-storage-instance-dexie';\n\n\nexport function getKeyRangeByQueryPlan(\n    queryPlan: RxQueryPlan,\n    IDBKeyRange?: any\n) {\n    if (!IDBKeyRange) {\n        if (typeof window === 'undefined') {\n            throw new Error('IDBKeyRange missing');\n        } else {\n            IDBKeyRange = window.IDBKeyRange;\n        }\n    }\n\n    /**\n     * If index has only one field,\n     * we have to pass the keys directly, not the key arrays.\n     */\n    if (queryPlan.index.length === 1) {\n        return IDBKeyRange.bound(\n            queryPlan.startKeys[0],\n            queryPlan.endKeys[0],\n            queryPlan.inclusiveStart,\n            queryPlan.inclusiveEnd\n        );\n    }\n\n    return IDBKeyRange.bound(\n        queryPlan.startKeys,\n        queryPlan.endKeys,\n        queryPlan.inclusiveStart,\n        queryPlan.inclusiveEnd\n    );\n\n}\n\n\n/**\n * Runs mango queries over the Dexie.js database.\n */\nexport async function dexieQuery<RxDocType>(\n    instance: RxStorageInstanceDexie<RxDocType>,\n    preparedQuery: DexiePreparedQuery<RxDocType>\n): Promise<RxStorageQueryResult<RxDocType>> {\n    const state = await instance.internals;\n    const query = preparedQuery.query;\n    const queryMatcher = RxStorageDexieStatics.getQueryMatcher(\n        instance.schema,\n        preparedQuery\n    );\n    const sortComparator = RxStorageDexieStatics.getSortComparator(instance.schema, preparedQuery);\n\n    const skip = query.skip ? query.skip : 0;\n    const limit = query.limit ? query.limit : Infinity;\n    const skipPlusLimit = skip + limit;\n    const queryPlan = preparedQuery.queryPlan;\n\n    const keyRange = getKeyRangeByQueryPlan(\n        queryPlan,\n        (state.dexieDb as any)._options.IDBKeyRange\n    );\n\n    const queryPlanFields: string[] = queryPlan.index;\n\n    let rows: any[] = [];\n    await state.dexieDb.transaction(\n        'r',\n        state.dexieTable,\n        async (dexieTx) => {\n            /**\n             * TODO here we use the native IndexedDB transaction\n             * to get the cursor.\n             * Instead we should not leave Dexie.js API and find\n             * a way to create the cursor with Dexie.js.\n             */\n            const tx = (dexieTx as any).idbtrans;\n\n            // const nativeIndexedDB = state.dexieDb.backendDB();\n            // const trans = nativeIndexedDB.transaction([DEXIE_DOCS_TABLE_NAME], 'readonly');\n\n            const store = tx.objectStore(DEXIE_DOCS_TABLE_NAME);\n            let index: any;\n            if (\n                queryPlanFields.length === 1 &&\n                queryPlanFields[0] === instance.primaryPath\n            ) {\n                index = store;\n            } else {\n                let indexName: string;\n                if (queryPlanFields.length === 1) {\n                    indexName = dexieReplaceIfStartsWithPipe(queryPlanFields[0]);\n                } else {\n                    indexName = '[' +\n                        queryPlanFields\n                            .map(field => dexieReplaceIfStartsWithPipe(field))\n                            .join('+')\n                        + ']';\n                }\n                index = store.index(indexName);\n            }\n            const cursorReq = index.openCursor(keyRange);\n            await new Promise<void>(res => {\n                cursorReq.onsuccess = function (e: any) {\n                    const cursor = e.target.result;\n                    if (cursor) {\n                        // We have a record in cursor.value\n                        const docData = fromDexieToStorage(cursor.value);\n                        if (\n                            queryMatcher(docData)\n                        ) {\n                            rows.push(docData);\n                        }\n\n                        /**\n                         * If we do not have to manually sort\n                         * and have enough documents,\n                         * we can abort iterating over the cursor\n                         * because we already have every relevant document.\n                         */\n                        if (\n                            queryPlan.sortFieldsSameAsIndexFields &&\n                            rows.length === skipPlusLimit\n                        ) {\n                            res();\n                        } else {\n                            cursor.continue();\n                        }\n                    } else {\n                        // Iteration complete\n                        res();\n                    }\n                };\n            });\n\n\n        }\n    );\n\n\n    if (!queryPlan.sortFieldsSameAsIndexFields) {\n        rows = rows.sort(sortComparator);\n    }\n\n    // apply skip and limit boundaries.\n    rows = rows.slice(skip, skipPlusLimit);\n\n    /**\n     * Comment this in for debugging to check all fields in the database.\n     */\n    // const docsInDb = await state.dexieTable.filter(queryMatcher).toArray();\n    // let documents = docsInDb\n    //     .map(docData => stripDexieKey(docData))\n    //     .sort(sortComparator);\n    // if (preparedQuery.skip) {\n    //     documents = documents.slice(preparedQuery.skip);\n    // }\n    // if (preparedQuery.limit && documents.length > preparedQuery.limit) {\n    //     documents = documents.slice(0, preparedQuery.limit);\n    // }\n\n\n\n    return {\n        documents: rows\n    };\n}\n"],"mappings":"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"}