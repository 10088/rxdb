{"version":3,"sources":["../../../../src/plugins/dexie/rx-storage-dexie.ts"],"names":["RxStorageDexieStatics","hash","data","Promise","res","digest","hashKey","doesBroadcastChangestream","prepareQuery","schema","mutateableQuery","sort","query","pouchQueryPlan","getSortComparator","getQueryMatcher","_schema","mingoQuery","MingoQuery","selector","fun","doc","_deleted","cursor","find","next","RxStorageDexie","settings","name","statics","createStorageInstance","params","createKeyObjectStorageInstance","useParams","collectionName","getRxStorageDexie","storage"],"mappings":";;;;;;;;AAaA;;AAGA;;AACA;;AACA;;AAKA;;AAIA;;AAIA;;AACA;;AAGO,IAAMA,qBAAuC,GAAG;AACnDC,EAAAA,IADmD,gBAC9CC,IAD8C,EACC;AAChD,WAAO,IAAIC,OAAJ,CAAY,UAAAC,GAAG,EAAI;AACtB,gCAAUF,IAAV,EAAgB,UAACG,MAAD,EAAoB;AAChCD,QAAAA,GAAG,CAACC,MAAD,CAAH;AACH,OAFD;AAGH,KAJM,CAAP;AAKH,GAPkD;AAQnDC,EAAAA,OAAO,EAAE,KAR0C;AASnDC,EAAAA,yBATmD,uCASvB;AACxB,WAAO,KAAP;AACH,GAXkD;AAYnDC,EAAAA,YAZmD,wBAa/CC,MAb+C,EAc/CC,eAd+C,EAejD;AAEE,QAAI,CAACA,eAAe,CAACC,IAArB,EAA2B;AACvB,YAAM,yBAAW,KAAX,EAAkB;AACpBC,QAAAA,KAAK,EAAEF;AADa,OAAlB,CAAN;AAGH;AAED;AACR;AACA;AACA;;;AACSA,IAAAA,eAAD,CAAyBG,cAAzB,GAA0C,mCACtCJ,MADsC,EAEtCC,eAFsC,CAA1C;AAKA,WAAOA,eAAP;AACH,GAjCkD;AAmCnDI,EAAAA,iBAnCmD,6BAoC/CL,MApC+C,EAqC/CG,KArC+C,EAsCT;AACtC,WAAO,yCAAuBH,MAAvB,EAA+BG,KAA/B,CAAP;AACH,GAxCkD;AA0CnDG,EAAAA,eA1CmD,2BA2C/CC,OA3C+C,EA4C/CJ,KA5C+C,EA6CH;AAC5C,QAAMK,UAAU,GAAG,IAAIC,YAAJ,CAAeN,KAAK,CAACO,QAAN,GAAiBP,KAAK,CAACO,QAAvB,GAAkC,EAAjD,CAAnB;;AACA,QAAMC,GAAiD,GAAG,SAApDA,GAAoD,CAACC,GAAD,EAAyC;AAC/F,UAAIA,GAAG,CAACC,QAAR,EAAkB;AACd,eAAO,KAAP;AACH;;AACD,UAAMC,MAAM,GAAGN,UAAU,CAACO,IAAX,CAAgB,CAACH,GAAD,CAAhB,CAAf;AACA,UAAMI,IAAI,GAAGF,MAAM,CAACE,IAAP,EAAb;;AACA,UAAIA,IAAJ,EAAU;AACN,eAAO,IAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ,KAXD;;AAYA,WAAOL,GAAP;AACH;AA5DkD,CAAhD;;;IAiEMM,c;AAIT,0BACWC,QADX,EAEE;AAAA,SALKC,IAKL,GALY,OAKZ;AAAA,SAJKC,OAIL,GAJe7B,qBAIf;AAAA,SADS2B,QACT,GADSA,QACT;AAAG;;;;SAEEG,qB,GAAP,+BACIC,MADJ,EAE8C;AAC1C,WAAO,wDAA2B,IAA3B,EAAiCA,MAAjC,EAAyC,KAAKJ,QAA9C,CAAP;AACH,G;;SAEMK,8B,GAAP,wCACID,MADJ,EAE4C;AACxC;AACA,QAAME,SAAS,GAAG,qBAAUF,MAAV,CAAlB;AACAE,IAAAA,SAAS,CAACC,cAAV,GAA2BH,MAAM,CAACG,cAAP,GAAwB,aAAnD;AAEA,WAAO,0EACH,IADG,EAEHH,MAFG,EAGH,KAAKJ,QAHF,CAAP;AAKH,G;;;;;;;AAIE,SAASQ,iBAAT,GAEW;AAAA,MADdR,QACc,uEADY,EACZ;AACd,MAAMS,OAAO,GAAG,IAAIV,cAAJ,CAAmBC,QAAnB,CAAhB;AACA,SAAOS,OAAP;AACH","sourcesContent":["import type {\n    DeterministicSortComparator,\n    QueryMatcher\n} from 'event-reduce-js';\nimport type {\n    MangoQuery,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxKeyObjectStorageInstanceCreationParams,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageStatics\n} from '../../types';\nimport {\n    Query as MingoQuery\n} from 'mingo';\nimport { binaryMd5 } from 'pouchdb-md5';\nimport { getDexieSortComparator } from './dexie-helper';\nimport { flatClone } from '../../util';\nimport {\n    DexieSettings,\n    DexieStorageInternals\n} from '../../types/plugins/dexie';\nimport {\n    createDexieStorageInstance,\n    RxStorageInstanceDexie\n} from './rx-storage-instance-dexie';\nimport {\n    createDexieKeyObjectStorageInstance,\n    RxStorageKeyObjectInstanceDexie\n} from './rx-storage-key-object-instance-dexie';\nimport { getPouchQueryPlan } from './query/dexie-query';\nimport { newRxError } from '../../rx-error';\n\n\nexport const RxStorageDexieStatics: RxStorageStatics = {\n    hash(data: Buffer | Blob | string): Promise<string> {\n        return new Promise(res => {\n            binaryMd5(data, (digest: string) => {\n                res(digest);\n            });\n        });\n    },\n    hashKey: 'md5',\n    doesBroadcastChangestream() {\n        return false;\n    },\n    prepareQuery<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        mutateableQuery: MangoQuery<RxDocType>\n    ) {\n\n        if (!mutateableQuery.sort) {\n            throw newRxError('SNH', {\n                query: mutateableQuery\n            });\n        }\n\n        /**\n         * Store the query plan together with the\n         * prepared query to save performance.\n         */\n        (mutateableQuery as any).pouchQueryPlan = getPouchQueryPlan(\n            schema,\n            mutateableQuery\n        );\n\n        return mutateableQuery;\n    },\n\n    getSortComparator<RxDocType>(\n        schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): DeterministicSortComparator<RxDocType> {\n        return getDexieSortComparator(schema, query);\n    },\n\n    getQueryMatcher<RxDocType>(\n        _schema: RxJsonSchema<RxDocType>,\n        query: MangoQuery<RxDocType>\n    ): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const mingoQuery = new MingoQuery(query.selector ? query.selector : {});\n        const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (doc: RxDocumentWriteData<RxDocType>) => {\n            if (doc._deleted) {\n                return false;\n            }\n            const cursor = mingoQuery.find([doc]);\n            const next = cursor.next();\n            if (next) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return fun;\n    }\n\n}\n\n\nexport class RxStorageDexie implements RxStorage<DexieStorageInternals, DexieSettings> {\n    public name = 'dexie';\n    public statics = RxStorageDexieStatics;\n\n    constructor(\n        public settings: DexieSettings\n    ) { }\n\n    public createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, DexieSettings>\n    ): Promise<RxStorageInstanceDexie<RxDocType>> {\n        return createDexieStorageInstance(this, params, this.settings);\n    }\n\n    public createKeyObjectStorageInstance(\n        params: RxKeyObjectStorageInstanceCreationParams<DexieSettings>\n    ): Promise<RxStorageKeyObjectInstanceDexie> {\n        // ensure we never mix up key-object data with normal storage documents.\n        const useParams = flatClone(params);\n        useParams.collectionName = params.collectionName + '-key-object';\n\n        return createDexieKeyObjectStorageInstance(\n            this,\n            params,\n            this.settings\n        );\n    }\n}\n\n\nexport function getRxStorageDexie(\n    settings: DexieSettings = {}\n): RxStorageDexie {\n    const storage = new RxStorageDexie(settings);\n    return storage;\n}\n"],"file":"rx-storage-dexie.js"}