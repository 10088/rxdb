{"version":3,"file":"key-compression.js","names":["COMPRESSION_STATE_BY_SCHEMA","WeakMap","createCompressionState","schema","compressionSchema","flatClone","primaryKey","table","createCompressionTable","DEFAULT_COMPRESSION_FLAG","getPrimaryFieldOfPrimaryKey","compressedSchema","createCompressedJsonSchema","composedPrimary","newComposedPrimary","key","compressedPath","fields","map","field","separator","indexes","newIndexes","idx","isMaybeReadonlyArray","subIdx","getCompressionStateByRxJsonSchema","state","get","overwritable","deepFreezeWhenDevMode","set","RxDBKeyCompressionPlugin","name","rxdb","prototypes","hooks","prePrepareQuery","after","input","rxQuery","mangoQuery","collection","jsonSchema","keyCompression","compressionState","compressedQuery","compressQuery","preCreateRxStorageInstance","params","preQueryMatcher","doc","compressObject","preSortComparator","docA","docB","preWriteToStorageInstance","attachments","_attachments","postReadFromInstance","before","decompressObject"],"sources":["../../../src/plugins/key-compression.ts"],"sourcesContent":["/**\n * this plugin adds the keycompression-capabilities to rxdb\n * if you dont use this, ensure that you set disableKeyComression to false in your schema\n */\n\nimport {\n    createCompressionTable,\n    CompressionTable,\n    JsonSchema as KeyCompressionJsonSchema,\n    compressObject,\n    decompressObject,\n    compressedPath,\n    compressQuery,\n    DEFAULT_COMPRESSION_FLAG,\n    createCompressedJsonSchema\n} from 'jsonschema-key-compression';\nimport {\n    overwritable\n} from '../overwritable';\nimport { getPrimaryFieldOfPrimaryKey } from '../rx-schema-helper';\n\nimport type {\n    RxPlugin,\n    RxJsonSchema,\n    CompositePrimaryKey\n} from '../types';\nimport { flatClone, isMaybeReadonlyArray } from '../util';\n\ndeclare type CompressionState = {\n    table: CompressionTable;\n    // the compressed schema\n    schema: RxJsonSchema<any>;\n};\n\n/**\n * Cache the compression table and the compressed schema\n * by the storage instance for better performance.\n */\nconst COMPRESSION_STATE_BY_SCHEMA: WeakMap<\n    RxJsonSchema<any>,\n    CompressionState\n> = new WeakMap();\n\nexport function createCompressionState(\n    schema: RxJsonSchema<any>\n): CompressionState {\n    const compressionSchema: KeyCompressionJsonSchema = flatClone(schema) as any;\n    delete (compressionSchema as any).primaryKey;\n\n\n\n    const table = createCompressionTable(\n        compressionSchema,\n        DEFAULT_COMPRESSION_FLAG,\n        [\n            /**\n             * Do not compress the primary field\n             * for easier debugging.\n             */\n            getPrimaryFieldOfPrimaryKey(schema.primaryKey),\n            '_rev',\n            '_attachments',\n            '_deleted',\n            '_meta'\n        ]\n    );\n\n    delete (compressionSchema as any).primaryKey;\n    const compressedSchema: RxJsonSchema<any> = createCompressedJsonSchema(\n        table,\n        compressionSchema\n    ) as RxJsonSchema<any>;\n\n    // also compress primary key\n    if (typeof schema.primaryKey !== 'string') {\n        const composedPrimary: CompositePrimaryKey<any> = schema.primaryKey;\n        const newComposedPrimary: CompositePrimaryKey<any> = {\n            key: compressedPath(table, composedPrimary.key as string),\n            fields: composedPrimary.fields.map(field => compressedPath(table, field as string)),\n            separator: composedPrimary.separator\n        };\n        compressedSchema.primaryKey = newComposedPrimary;\n    } else {\n        compressedSchema.primaryKey = compressedPath(table, schema.primaryKey);\n    }\n\n    /**\n     * the key compression module does not know about indexes\n     * in the schema, so we have to also compress them here.\n     */\n    if (schema.indexes) {\n        const newIndexes = schema.indexes.map(idx => {\n            if (isMaybeReadonlyArray(idx)) {\n                return idx.map(subIdx => compressedPath(table, subIdx));\n            } else {\n                return compressedPath(table, idx);\n            }\n        });\n        compressedSchema.indexes = newIndexes;\n    }\n\n    return {\n        table,\n        schema: compressedSchema\n    };\n}\n\nexport function getCompressionStateByRxJsonSchema(\n    schema: RxJsonSchema<any>\n): CompressionState {\n    let state = COMPRESSION_STATE_BY_SCHEMA.get(schema);\n    if (!state) {\n        /**\n         * Because we cache the state by the JsonSchema,\n         * it must be ausured that the given schema object never changes.\n         */\n        overwritable.deepFreezeWhenDevMode(schema);\n\n        state = createCompressionState(schema);\n        COMPRESSION_STATE_BY_SCHEMA.set(schema, state);\n    }\n    return state;\n}\n\nexport const RxDBKeyCompressionPlugin: RxPlugin = {\n    name: 'key-compression',\n    rxdb: true,\n    prototypes: {},\n    overwritable: {},\n    hooks: {\n        /**\n         * replace the keys of a query-obj with the compressed keys\n         * because the storage instance only knows the compressed schema\n         * @return compressed queryJSON\n         */\n        prePrepareQuery: {\n            after: (input) => {\n                const rxQuery = input.rxQuery;\n                const mangoQuery = input.mangoQuery;\n\n                if (!rxQuery.collection.schema.jsonSchema.keyCompression) {\n                    return;\n                }\n                const compressionState = getCompressionStateByRxJsonSchema(\n                    rxQuery.collection.schema.jsonSchema\n                );\n\n                const compressedQuery = compressQuery(\n                    compressionState.table,\n                    mangoQuery as any\n                );\n\n                input.mangoQuery = compressedQuery as any;\n            }\n        },\n        preCreateRxStorageInstance: {\n            after: (params) => {\n                /**\n                 * When key compression is used,\n                 * the storage instance only knows about the compressed schema\n                 */\n                if (params.schema.keyCompression) {\n                    const compressionState = createCompressionState(params.schema);\n                    params.schema = compressionState.schema;\n                }\n            }\n        },\n        preQueryMatcher: {\n            after: (params) => {\n                if (!params.rxQuery.collection.schema.jsonSchema.keyCompression) {\n                    return;\n                }\n                const state = getCompressionStateByRxJsonSchema(params.rxQuery.collection.schema.jsonSchema);\n                params.doc = compressObject(\n                    state.table,\n                    params.doc\n                );\n            }\n        },\n        preSortComparator: {\n            after: (params) => {\n                if (!params.rxQuery.collection.schema.jsonSchema.keyCompression) {\n                    return;\n                }\n                const state = getCompressionStateByRxJsonSchema(params.rxQuery.collection.schema.jsonSchema);\n                params.docA = compressObject(\n                    state.table,\n                    params.docA\n                );\n                params.docB = compressObject(\n                    state.table,\n                    params.docB\n                );\n            }\n        },\n        preWriteToStorageInstance: {\n            /**\n             * Must run as last because other plugin hooks\n             * might no longer work when the key-compression\n             * changed the document keys.\n             */\n            after: (params: {\n                primaryPath: string,\n                schema: RxJsonSchema<any>,\n                doc: any;\n            }) => {\n                if (!params.schema.keyCompression) {\n                    return;\n                }\n                const state = getCompressionStateByRxJsonSchema(params.schema);\n\n                /**\n                 * Do not send attachments to compressObject()\n                 * because it will deep clone which does not work on Blob or Buffer.\n                 */\n                params.doc = flatClone(params.doc);\n                const attachments = params.doc._attachments;\n                delete params.doc._attachments;\n\n                params.doc = compressObject(\n                    state.table,\n                    params.doc\n                );\n                params.doc._attachments = attachments;\n            }\n        },\n        postReadFromInstance: {\n            /**\n             * Use 'before' because it must de-compress\n             * the object keys before the other hooks can work.\n             */\n            before: (params: {\n                primaryPath: string,\n                schema: RxJsonSchema<any>,\n                doc: any;\n            }) => {\n                if (!params.schema.keyCompression) {\n                    return;\n                }\n                const state = getCompressionStateByRxJsonSchema(params.schema);\n\n                params.doc = decompressObject(\n                    state.table,\n                    params.doc\n                );\n            }\n        }\n    }\n};\n"],"mappings":";;;;;;;;;AAKA;;AAWA;;AAGA;;AAOA;;AA1BA;AACA;AACA;AACA;;AA+BA;AACA;AACA;AACA;AACA,IAAMA,2BAGL,GAAG,IAAIC,OAAJ,EAHJ;;AAKO,SAASC,sBAAT,CACHC,MADG,EAEa;EAChB,IAAMC,iBAA2C,GAAG,IAAAC,eAAA,EAAUF,MAAV,CAApD;EACA,OAAQC,iBAAD,CAA2BE,UAAlC;EAIA,IAAMC,KAAK,GAAG,IAAAC,gDAAA,EACVJ,iBADU,EAEVK,kDAFU,EAGV;EACI;AACZ;AACA;AACA;EACY,IAAAC,2CAAA,EAA4BP,MAAM,CAACG,UAAnC,CALJ,EAMI,MANJ,EAOI,cAPJ,EAQI,UARJ,EASI,OATJ,CAHU,CAAd;EAgBA,OAAQF,iBAAD,CAA2BE,UAAlC;EACA,IAAMK,gBAAmC,GAAG,IAAAC,oDAAA,EACxCL,KADwC,EAExCH,iBAFwC,CAA5C,CAvBgB,CA4BhB;;EACA,IAAI,OAAOD,MAAM,CAACG,UAAd,KAA6B,QAAjC,EAA2C;IACvC,IAAMO,eAAyC,GAAGV,MAAM,CAACG,UAAzD;IACA,IAAMQ,kBAA4C,GAAG;MACjDC,GAAG,EAAE,IAAAC,wCAAA,EAAeT,KAAf,EAAsBM,eAAe,CAACE,GAAtC,CAD4C;MAEjDE,MAAM,EAAEJ,eAAe,CAACI,MAAhB,CAAuBC,GAAvB,CAA2B,UAAAC,KAAK;QAAA,OAAI,IAAAH,wCAAA,EAAeT,KAAf,EAAsBY,KAAtB,CAAJ;MAAA,CAAhC,CAFyC;MAGjDC,SAAS,EAAEP,eAAe,CAACO;IAHsB,CAArD;IAKAT,gBAAgB,CAACL,UAAjB,GAA8BQ,kBAA9B;EACH,CARD,MAQO;IACHH,gBAAgB,CAACL,UAAjB,GAA8B,IAAAU,wCAAA,EAAeT,KAAf,EAAsBJ,MAAM,CAACG,UAA7B,CAA9B;EACH;EAED;AACJ;AACA;AACA;;;EACI,IAAIH,MAAM,CAACkB,OAAX,EAAoB;IAChB,IAAMC,UAAU,GAAGnB,MAAM,CAACkB,OAAP,CAAeH,GAAf,CAAmB,UAAAK,GAAG,EAAI;MACzC,IAAI,IAAAC,0BAAA,EAAqBD,GAArB,CAAJ,EAA+B;QAC3B,OAAOA,GAAG,CAACL,GAAJ,CAAQ,UAAAO,MAAM;UAAA,OAAI,IAAAT,wCAAA,EAAeT,KAAf,EAAsBkB,MAAtB,CAAJ;QAAA,CAAd,CAAP;MACH,CAFD,MAEO;QACH,OAAO,IAAAT,wCAAA,EAAeT,KAAf,EAAsBgB,GAAtB,CAAP;MACH;IACJ,CANkB,CAAnB;IAOAZ,gBAAgB,CAACU,OAAjB,GAA2BC,UAA3B;EACH;;EAED,OAAO;IACHf,KAAK,EAALA,KADG;IAEHJ,MAAM,EAAEQ;EAFL,CAAP;AAIH;;AAEM,SAASe,iCAAT,CACHvB,MADG,EAEa;EAChB,IAAIwB,KAAK,GAAG3B,2BAA2B,CAAC4B,GAA5B,CAAgCzB,MAAhC,CAAZ;;EACA,IAAI,CAACwB,KAAL,EAAY;IACR;AACR;AACA;AACA;IACQE,0BAAA,CAAaC,qBAAb,CAAmC3B,MAAnC;;IAEAwB,KAAK,GAAGzB,sBAAsB,CAACC,MAAD,CAA9B;IACAH,2BAA2B,CAAC+B,GAA5B,CAAgC5B,MAAhC,EAAwCwB,KAAxC;EACH;;EACD,OAAOA,KAAP;AACH;;AAEM,IAAMK,wBAAkC,GAAG;EAC9CC,IAAI,EAAE,iBADwC;EAE9CC,IAAI,EAAE,IAFwC;EAG9CC,UAAU,EAAE,EAHkC;EAI9CN,YAAY,EAAE,EAJgC;EAK9CO,KAAK,EAAE;IACH;AACR;AACA;AACA;AACA;IACQC,eAAe,EAAE;MACbC,KAAK,EAAE,eAACC,KAAD,EAAW;QACd,IAAMC,OAAO,GAAGD,KAAK,CAACC,OAAtB;QACA,IAAMC,UAAU,GAAGF,KAAK,CAACE,UAAzB;;QAEA,IAAI,CAACD,OAAO,CAACE,UAAR,CAAmBvC,MAAnB,CAA0BwC,UAA1B,CAAqCC,cAA1C,EAA0D;UACtD;QACH;;QACD,IAAMC,gBAAgB,GAAGnB,iCAAiC,CACtDc,OAAO,CAACE,UAAR,CAAmBvC,MAAnB,CAA0BwC,UAD4B,CAA1D;QAIA,IAAMG,eAAe,GAAG,IAAAC,uCAAA,EACpBF,gBAAgB,CAACtC,KADG,EAEpBkC,UAFoB,CAAxB;QAKAF,KAAK,CAACE,UAAN,GAAmBK,eAAnB;MACH;IAlBY,CANd;IA0BHE,0BAA0B,EAAE;MACxBV,KAAK,EAAE,eAACW,MAAD,EAAY;QACf;AAChB;AACA;AACA;QACgB,IAAIA,MAAM,CAAC9C,MAAP,CAAcyC,cAAlB,EAAkC;UAC9B,IAAMC,gBAAgB,GAAG3C,sBAAsB,CAAC+C,MAAM,CAAC9C,MAAR,CAA/C;UACA8C,MAAM,CAAC9C,MAAP,GAAgB0C,gBAAgB,CAAC1C,MAAjC;QACH;MACJ;IAVuB,CA1BzB;IAsCH+C,eAAe,EAAE;MACbZ,KAAK,EAAE,eAACW,MAAD,EAAY;QACf,IAAI,CAACA,MAAM,CAACT,OAAP,CAAeE,UAAf,CAA0BvC,MAA1B,CAAiCwC,UAAjC,CAA4CC,cAAjD,EAAiE;UAC7D;QACH;;QACD,IAAMjB,KAAK,GAAGD,iCAAiC,CAACuB,MAAM,CAACT,OAAP,CAAeE,UAAf,CAA0BvC,MAA1B,CAAiCwC,UAAlC,CAA/C;QACAM,MAAM,CAACE,GAAP,GAAa,IAAAC,wCAAA,EACTzB,KAAK,CAACpB,KADG,EAET0C,MAAM,CAACE,GAFE,CAAb;MAIH;IAVY,CAtCd;IAkDHE,iBAAiB,EAAE;MACff,KAAK,EAAE,eAACW,MAAD,EAAY;QACf,IAAI,CAACA,MAAM,CAACT,OAAP,CAAeE,UAAf,CAA0BvC,MAA1B,CAAiCwC,UAAjC,CAA4CC,cAAjD,EAAiE;UAC7D;QACH;;QACD,IAAMjB,KAAK,GAAGD,iCAAiC,CAACuB,MAAM,CAACT,OAAP,CAAeE,UAAf,CAA0BvC,MAA1B,CAAiCwC,UAAlC,CAA/C;QACAM,MAAM,CAACK,IAAP,GAAc,IAAAF,wCAAA,EACVzB,KAAK,CAACpB,KADI,EAEV0C,MAAM,CAACK,IAFG,CAAd;QAIAL,MAAM,CAACM,IAAP,GAAc,IAAAH,wCAAA,EACVzB,KAAK,CAACpB,KADI,EAEV0C,MAAM,CAACM,IAFG,CAAd;MAIH;IAdc,CAlDhB;IAkEHC,yBAAyB,EAAE;MACvB;AACZ;AACA;AACA;AACA;MACYlB,KAAK,EAAE,eAACW,MAAD,EAID;QACF,IAAI,CAACA,MAAM,CAAC9C,MAAP,CAAcyC,cAAnB,EAAmC;UAC/B;QACH;;QACD,IAAMjB,KAAK,GAAGD,iCAAiC,CAACuB,MAAM,CAAC9C,MAAR,CAA/C;QAEA;AAChB;AACA;AACA;;QACgB8C,MAAM,CAACE,GAAP,GAAa,IAAA9C,eAAA,EAAU4C,MAAM,CAACE,GAAjB,CAAb;QACA,IAAMM,WAAW,GAAGR,MAAM,CAACE,GAAP,CAAWO,YAA/B;QACA,OAAOT,MAAM,CAACE,GAAP,CAAWO,YAAlB;QAEAT,MAAM,CAACE,GAAP,GAAa,IAAAC,wCAAA,EACTzB,KAAK,CAACpB,KADG,EAET0C,MAAM,CAACE,GAFE,CAAb;QAIAF,MAAM,CAACE,GAAP,CAAWO,YAAX,GAA0BD,WAA1B;MACH;IA7BsB,CAlExB;IAiGHE,oBAAoB,EAAE;MAClB;AACZ;AACA;AACA;MACYC,MAAM,EAAE,gBAACX,MAAD,EAIF;QACF,IAAI,CAACA,MAAM,CAAC9C,MAAP,CAAcyC,cAAnB,EAAmC;UAC/B;QACH;;QACD,IAAMjB,KAAK,GAAGD,iCAAiC,CAACuB,MAAM,CAAC9C,MAAR,CAA/C;QAEA8C,MAAM,CAACE,GAAP,GAAa,IAAAU,0CAAA,EACTlC,KAAK,CAACpB,KADG,EAET0C,MAAM,CAACE,GAFE,CAAb;MAIH;IAnBiB;EAjGnB;AALuC,CAA3C"}