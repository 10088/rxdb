{"version":3,"sources":["../../../src/plugins/key-compression.ts"],"names":[],"mappings":"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","file":"key-compression.js","sourcesContent":["/**\n * this plugin adds the keycompression-capabilities to rxdb\n * if you dont use this, ensure that you set disableKeyComression to false in your schema\n */\n\nimport {\n    createCompressionTable,\n    CompressionTable,\n    JsonSchema as KeyCompressionJsonSchema,\n    compressObject,\n    decompressObject,\n    compressedPath,\n    compressQuery,\n    DEFAULT_COMPRESSION_FLAG,\n    createCompressedJsonSchema\n} from 'jsonschema-key-compression';\nimport { getPrimaryFieldOfPrimaryKey } from '../rx-schema';\n\nimport type {\n    RxPlugin,\n    RxJsonSchema,\n    RxCollection,\n    CompositePrimaryKey\n} from '../types';\nimport { flatClone } from '../util';\n\ndeclare type CompressionState = {\n    table: CompressionTable;\n    // the compressed schema\n    schema: RxJsonSchema<any>;\n};\n\n/**\n * Cache the compression table and the compressed schema\n * by the storage instance for better performance.\n */\nconst COMPRESSION_STATE_BY_COLLECTION: WeakMap<\n    RxCollection,\n    CompressionState\n> = new WeakMap();\n\nexport function createCompressionState(\n    schema: RxJsonSchema<any>\n): CompressionState {\n    const compressionSchema: KeyCompressionJsonSchema = flatClone(schema) as any;\n    delete (compressionSchema as any).primaryKey;\n\n\n\n    const table = createCompressionTable(\n        compressionSchema,\n        DEFAULT_COMPRESSION_FLAG,\n        [\n            /**\n             * Do not compress the primary field\n             * for easier debugging.\n             */\n            getPrimaryFieldOfPrimaryKey(schema.primaryKey) as string,\n            '_rev',\n            '_attachments',\n            '_deleted'\n        ]\n    );\n\n    delete (compressionSchema as any).primaryKey;\n    const compressedSchema: RxJsonSchema<any> = createCompressedJsonSchema(\n        table,\n        compressionSchema\n    ) as RxJsonSchema<any>;\n\n    // also compress primary key\n    if (typeof schema.primaryKey !== 'string') {\n        const composedPrimary: CompositePrimaryKey<any> = schema.primaryKey as any;\n        const newComposedPrimary: CompositePrimaryKey<any> = {\n            key: compressedPath(table, composedPrimary.key as string),\n            fields: composedPrimary.fields.map(field => compressedPath(table, field as string)),\n            separator: composedPrimary.separator\n        };\n        compressedSchema.primaryKey = newComposedPrimary;\n    } else {\n        compressedSchema.primaryKey = compressedPath(table, schema.primaryKey);\n    }\n\n    /**\n     * the key compression module does not know about indexes\n     * in the schema, so we have to also compress them here.\n     */\n    if (schema.indexes) {\n        const newIndexes = schema.indexes.map(idx => {\n            if (Array.isArray(idx)) {\n                return idx.map(subIdx => compressedPath(table, subIdx));\n            } else {\n                return compressedPath(table, idx);\n            }\n        });\n        compressedSchema.indexes = newIndexes;\n    }\n\n    return {\n        table,\n        schema: compressedSchema\n    };\n}\n\nexport function getCompressionStateByStorageInstance(\n    collection: RxCollection\n): CompressionState {\n    let state = COMPRESSION_STATE_BY_COLLECTION.get(collection);\n    if (!state) {\n        state = createCompressionState(collection.schema.jsonSchema);\n        COMPRESSION_STATE_BY_COLLECTION.set(collection, state);\n    }\n    return state;\n}\n\nexport const rxdb = true;\nexport const prototypes = {};\nexport const overwritable = {};\n\nexport const RxDBKeyCompressionPlugin: RxPlugin = {\n    name: 'key-compression',\n    rxdb,\n    prototypes,\n    overwritable,\n    hooks: {\n        /**\n         * replace the keys of a query-obj with the compressed keys\n         * because the storage instance only know the compressed schema\n         * @return compressed queryJSON\n         */\n        prePrepareQuery(\n            input\n        ) {\n            const rxQuery = input.rxQuery;\n            const mangoQuery = input.mangoQuery;\n\n            if (!rxQuery.collection.schema.jsonSchema.keyCompression) {\n                return;\n            }\n            const compressionState = getCompressionStateByStorageInstance(\n                rxQuery.collection\n            );\n\n            const compressedQuery = compressQuery(\n                compressionState.table,\n                mangoQuery as any\n            );\n            input.mangoQuery = compressedQuery as any;\n        },\n        preCreateRxStorageInstance(params) {\n            /**\n             * When key compression is used,\n             * the storage instance only knows about the compressed schema\n             */\n            if (params.schema.keyCompression) {\n                const compressionState = createCompressionState(params.schema);\n                params.schema = compressionState.schema;\n            }\n        },\n        preQueryMatcher(params) {\n            if (!params.rxQuery.collection.schema.jsonSchema.keyCompression) {\n                return;\n            }\n            const state = getCompressionStateByStorageInstance(params.rxQuery.collection);\n            params.doc = compressObject(\n                state.table,\n                params.doc\n            );\n        },\n        preSortComparator(params) {\n            if (!params.rxQuery.collection.schema.jsonSchema.keyCompression) {\n                return;\n            }\n            const state = getCompressionStateByStorageInstance(params.rxQuery.collection);\n            params.docA = compressObject(\n                state.table,\n                params.docA\n            );\n            params.docB = compressObject(\n                state.table,\n                params.docB\n            );\n        },\n        preWriteToStorageInstance(params: {\n            collection: RxCollection<any, {}, {}, {}>;\n            doc: any;\n        }) {\n            if (!params.collection.schema.jsonSchema.keyCompression) {\n                return;\n            }\n            const state = getCompressionStateByStorageInstance(params.collection);\n\n            /**\n             * Do not send attachments to compressObject()\n             * because it will deep clone which does not work on Blob or Buffer.\n             */\n            const attachments = params.doc._attachments;\n            delete params.doc._attachments;\n\n            params.doc = compressObject(\n                state.table,\n                params.doc\n            );\n            params.doc._attachments = attachments;\n        },\n        postReadFromInstance(params) {\n            if (!params.collection.schema.jsonSchema.keyCompression) {\n                return;\n            }\n            const state = getCompressionStateByStorageInstance(params.collection);\n            params.doc = decompressObject(\n                state.table,\n                params.doc\n            );\n        }\n    }\n};\n"]}