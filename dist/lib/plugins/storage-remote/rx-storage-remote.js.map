{"version":3,"file":"rx-storage-remote.js","names":["RxStorageRemote","settings","name","requestIdSeed","randomCouchString","lastRequestId","statics","getRequestId","newId","createStorageInstance","params","requestId","waitForOkPromise","firstValueFrom","messages$","pipe","filter","msg","answerTo","send","connectionId","method","waitForOkResult","error","Error","JSON","stringify","RxStorageInstanceRemote","databaseName","collectionName","schema","ensureNotFalsy","options","storage","internals","changes$","Subject","conflicts$","subs","closed","push","subscribe","next","return","requestRemote","methodName","responsePromise","message","response","bulkWrite","documentWrites","context","findDocumentsById","ids","deleted","query","preparedQuery","count","getAttachmentData","documentId","attachmentId","getChangedDocumentsSince","limit","checkpoint","changeStream","asObservable","cleanup","minDeletedTime","close","Promise","reject","forEach","sub","unsubscribe","complete","remove","conflictResultionTasks","resolveConflictResultionTask","taskSolution","getRxStorageRemote"],"sources":["../../../../src/plugins/storage-remote/rx-storage-remote.ts"],"sourcesContent":["import { ensureNotFalsy } from 'event-reduce-js';\nimport {\n    firstValueFrom,\n    filter,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport type {\n    BulkWriteRow,\n    EventBulk,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    RxStorageStatics\n} from '../../types';\nimport {\n    randomCouchString\n} from '../../plugins/utils';\nimport type {\n    MessageFromRemote,\n    MessageToRemote,\n    RxStorageRemoteInternals,\n    RxStorageRemoteSettings\n} from './storage-remote-types';\n\n\n\n\nexport class RxStorageRemote implements RxStorage<RxStorageRemoteInternals, any> {\n    public readonly statics: RxStorageStatics;\n    public readonly name: string = 'remote';\n    private requestIdSeed: string = randomCouchString(10);\n    private lastRequestId: number = 0;\n    constructor(\n        public readonly settings: RxStorageRemoteSettings\n    ) {\n        this.statics = settings.statics;\n    }\n\n    public getRequestId() {\n        const newId = this.lastRequestId++;\n        return this.requestIdSeed + '|' + newId;\n    }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceRemote<RxDocType>> {\n\n        const requestId = this.getRequestId();\n        const waitForOkPromise = firstValueFrom(this.settings.messages$.pipe(\n            filter(msg => msg.answerTo === requestId)\n        ));\n        this.settings.send({\n            connectionId: this.getRequestId(),\n            method: 'create',\n            requestId,\n            params\n        });\n\n        const waitForOkResult = await waitForOkPromise;\n        if (waitForOkResult.error) {\n            throw new Error('could not create instance ' + JSON.stringify(waitForOkResult.error));\n        }\n        return new RxStorageInstanceRemote(\n            this,\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                params,\n                connectionId: ensureNotFalsy(waitForOkResult.connectionId)\n            },\n            params.options\n        );\n    }\n}\n\nexport class RxStorageInstanceRemote<RxDocType> implements RxStorageInstance<RxDocType, RxStorageRemoteInternals, any, any> {\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> = new Subject();\n    private conflicts$: Subject<RxConflictResultionTask<RxDocType>> = new Subject();\n    private subs: Subscription[] = [];\n\n    private closed: boolean = false;\n    messages$: Observable<MessageFromRemote>;\n\n    constructor(\n        public readonly storage: RxStorageRemote,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: RxStorageRemoteInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.messages$ = this.storage.settings.messages$.pipe(\n            filter(msg => msg.connectionId === this.internals.connectionId)\n        );\n        this.subs.push(\n            this.messages$.subscribe(msg => {\n                if (msg.method === 'changeStream') {\n                    this.changes$.next(msg.return);\n                }\n                if (msg.method === 'conflictResultionTasks') {\n                    this.conflicts$.next(msg.return);\n                }\n            })\n        );\n    }\n\n    private async requestRemote(\n        methodName: keyof RxStorageInstance<any, any, any>,\n        params: any\n    ) {\n        const requestId = this.storage.getRequestId();\n        const responsePromise = firstValueFrom(\n            this.messages$.pipe(\n                filter(msg => msg.answerTo === requestId)\n            )\n        );\n        const message: MessageToRemote = {\n            connectionId: this.internals.connectionId,\n            requestId,\n            method: methodName,\n            params\n        };\n        this.storage.settings.send(message);\n        const response = await responsePromise;\n        if (response.error) {\n            throw new Error('could not requestRemote: ' + JSON.stringify(response.error));\n        } else {\n            return response.return;\n        }\n    }\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        return this.requestRemote('bulkWrite', [documentWrites, context]);\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        return this.requestRemote('findDocumentsById', [ids, deleted]);\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        return this.requestRemote('query', [preparedQuery]);\n    }\n    count(preparedQuery: any): Promise<RxStorageCountResult> {\n        return this.requestRemote('count', [preparedQuery]);\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        return this.requestRemote('getAttachmentData', [documentId, attachmentId]);\n    }\n    getChangedDocumentsSince(\n        limit: number,\n        checkpoint?: any\n    ): Promise<\n        {\n            documents: RxDocumentData<RxDocType>[];\n            checkpoint: any;\n        }> {\n        return this.requestRemote('getChangedDocumentsSince', [limit, checkpoint]);\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minDeletedTime: number): Promise<boolean> {\n        return this.requestRemote('cleanup', [minDeletedTime]);\n    }\n    async close(): Promise<void> {\n        if (this.closed) {\n            return Promise.reject(new Error('already closed'));\n        }\n        this.closed = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        this.changes$.complete();\n        await this.requestRemote('close', []);\n    }\n    async remove(): Promise<void> {\n        this.closed = true;\n        await this.requestRemote('remove', []);\n    }\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.conflicts$;\n    }\n    async resolveConflictResultionTask(taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        await this.requestRemote('resolveConflictResultionTask', [taskSolution]);\n    }\n}\n\nexport function getRxStorageRemote(settings: RxStorageRemoteSettings): RxStorageRemote {\n    return new RxStorageRemote(settings);\n}\n"],"mappings":"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"}