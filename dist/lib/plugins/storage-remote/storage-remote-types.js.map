{"version":3,"file":"storage-remote-types.js","names":[],"sources":["../../../../src/plugins/storage-remote/storage-remote-types.ts"],"sourcesContent":["import type { ServerOptions, ClientOptions } from 'ws';\nimport type { Observable } from 'rxjs';\nimport type {\n    RxStorage,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageStatics\n} from '../../types';\nimport type {\n    WebsocketServerState\n} from '../replication-websocket';\n\nexport type MessageFromRemote = {\n    connectionId: string;\n    answerTo: string; // id of the request\n    method: keyof RxStorageInstance<any, any, any> | 'create';\n    error?: any;\n    return?: any;\n};\n\nexport type MessageToRemote = {\n    connectionId: string;\n    /**\n     * Unique ID of the request\n     */\n    requestId: string;\n    method: keyof RxStorageInstance<any, any, any> | 'create';\n    params: RxStorageInstanceCreationParams<any, any> | any[];\n};\n\n\nexport type RxStorageRemoteSettings = {\n    identifier: string;\n    statics: RxStorageStatics;\n    send(msg: MessageToRemote): void;\n    messages$: Observable<MessageFromRemote>;\n};\n\nexport type RxStorageMessageChannelInternals = {\n    params: RxStorageInstanceCreationParams<any, any>;\n    connectionId: string;\n};\n\nexport type RxStorageRemoteExposeSettings = {\n    send(msg: MessageFromRemote): void;\n    messages$: Observable<MessageToRemote>;\n    /**\n     * The original storage\n     * which actually stores the data.\n     */\n    storage: RxStorage<any, any>;\n};\n\nexport type RxStorageRemoteExposeType = {\n    instanceByFullName: Map<string, any>;\n};\n\nexport type RxStorageRemoteWebsocketServerOptions = ServerOptions & {\n    storage: RxStorage<any, any>;\n};\n\nexport type RxStorageRemoteWebsocketServerState = {\n    serverState: WebsocketServerState;\n    exposeState: RxStorageRemoteExposeType;\n};\n\nexport type RxStorageRemoteWebsocketClientOptions = ClientOptions & {\n    statics: RxStorageStatics;\n    url: string;\n};\n"],"mappings":""}