{"version":3,"file":"local-documents.js","names":["getLocal","id","getLocalDocStateByParent","state","docCache","found","get","Promise","resolve","getSingleDocument","storageInstance","then","docData","doc","createRxLocalDocument","insertLocal","data","_deleted","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_attachments","writeSingle","document","res","flatClone","newDoc","upsertLocal","existing","docPromise","atomicUpdate","getLocal$","$","pipe","startWith","mergeMap","cE","changeEvent","changeEventOrDoc","isLocal","documentId","use","filter","filterFlagged","map"],"sources":["../../../../src/plugins/local-documents/local-documents.ts"],"sourcesContent":["import {\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta\n} from '../../util';\n\nimport type {\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocument,\n    RxDocumentWriteData,\n    RxLocalDocument,\n    RxLocalDocumentData\n} from '../../types';\n\nimport {\n    filter,\n    map,\n    startWith,\n    mergeMap\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { createRxLocalDocument } from './rx-local-document';\nimport { getLocalDocStateByParent } from './local-documents-helper';\nimport { getSingleDocument, writeSingle } from '../../rx-storage-helper';\n\n\n\n/**\n * save the local-document-data\n * throws if already exists\n */\nexport async function insertLocal<DocData extends Record<string, any> = any>(\n    this: RxDatabase | RxCollection,\n    id: string,\n    data: DocData\n): Promise<RxLocalDocument<DocData>> {\n    const state = await getLocalDocStateByParent(this);\n\n    // create new one\n    let docData: RxDocumentWriteData<RxLocalDocumentData<DocData>> = {\n        id: id,\n        data,\n        _deleted: false,\n        _meta: getDefaultRxDocumentMeta(),\n        _rev: getDefaultRevision(),\n        _attachments: {}\n    };\n\n    return writeSingle(\n        state.storageInstance,\n        {\n            document: docData\n        },\n        'local-document-insert'\n    ).then(res => {\n        docData = flatClone(docData);\n        docData._rev = res._rev;\n        const newDoc = createRxLocalDocument(id, docData as any, this, state);\n        return newDoc as any;\n    });\n}\n\n/**\n * save the local-document-data\n * overwrites existing if exists\n */\nexport function upsertLocal<DocData extends Record<string,any> = any>(\n    this: any,\n    id: string,\n    data: DocData\n): Promise<RxLocalDocument<DocData>> {\n    return this.getLocal(id)\n        .then((existing: RxDocument) => {\n            if (!existing) {\n                // create new one\n                const docPromise = this.insertLocal(id, data);\n                return docPromise;\n            } else {\n                // update existing\n                return existing.atomicUpdate(() => {\n                    return data;\n                }).then(() => existing);\n            }\n        });\n}\n\nexport async function getLocal<DocData = any>(this: any, id: string): Promise<RxLocalDocument<DocData> | null> {\n    const state = await getLocalDocStateByParent(this);\n    const docCache = state.docCache;\n\n    // check in doc-cache\n    const found = docCache.get(id);\n    if (found) {\n        return Promise.resolve(found as any);\n    }\n\n    // if not found, check in storage instance\n    return getSingleDocument(state.storageInstance, id)\n        .then((docData) => {\n            if (!docData) {\n                return null;\n            }\n            const doc = createRxLocalDocument(id, docData, this, state);\n            return doc as any;\n        })\n        .catch(() => null);\n}\n\nexport function getLocal$<DocData = any>(this: RxCollection, id: string): Observable<RxLocalDocument<DocData> | null> {\n    return this.$.pipe(\n        startWith(null),\n        mergeMap(async (cE: RxChangeEvent<RxLocalDocumentData> | null) => {\n            if (cE) {\n                return {\n                    changeEvent: cE\n                };\n            } else {\n                const doc = await this.getLocal(id);\n                return {\n                    doc: doc\n                };\n            }\n        }),\n        mergeMap(async (changeEventOrDoc) => {\n            if (changeEventOrDoc.changeEvent) {\n                const cE = changeEventOrDoc.changeEvent;\n                if (!cE.isLocal || cE.documentId !== id) {\n                    return {\n                        use: false\n                    };\n                } else {\n                    const doc = await this.getLocal(id);\n                    return {\n                        use: true,\n                        doc: doc\n                    };\n                }\n            } else {\n                return {\n                    use: true,\n                    doc: changeEventOrDoc.doc\n                };\n            }\n        }),\n        filter(filterFlagged => filterFlagged.use),\n        map(filterFlagged => {\n            return filterFlagged.doc as any;\n        })\n    );\n}\n"],"mappings":"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"}