{"version":3,"file":"rx-error.js","names":["parametersToString","parameters","ret","Object","keys","length","map","k","paramStr","JSON","stringify","_k","v","undefined","e","join","messageForError","message","code","RxError","mes","rxdb","toString","Error","RxTypeError","TypeError","newRxError","overwritable","tunnelErrorMessage","newRxTypeError","isPouchdbConflictError","err","pouchDbError","status"],"sources":["../../src/rx-error.ts"],"sourcesContent":["/**\n * here we use custom errors with the additional field 'parameters'\n */\n\nimport { overwritable } from './overwritable';\nimport type {\n    RxErrorParameters,\n    PouchWriteError,\n    RxErrorKey\n} from './types';\n\n/**\n * transform an object of parameters to a presentable string\n */\nfunction parametersToString(parameters: any): string {\n    let ret = '';\n    if (Object.keys(parameters).length === 0)\n        return ret;\n    ret += 'Given parameters: {\\n';\n    ret += Object.keys(parameters)\n        .map(k => {\n            let paramStr = '[object Object]';\n            try {\n                paramStr = JSON.stringify(\n                    parameters[k],\n                    (_k, v) => v === undefined ? null : v,\n                    2\n                );\n            } catch (e) { }\n            return k + ':' + paramStr;\n        })\n        .join('\\n');\n    ret += '}';\n    return ret;\n}\n\nfunction messageForError(\n    message: string,\n    code: string,\n    parameters: any\n): string {\n    return 'RxError (' + code + '):' + '\\n' +\n        message + '\\n' +\n        parametersToString(parameters);\n}\n\nexport class RxError extends Error {\n    public code: RxErrorKey;\n    public message: string;\n    public parameters: RxErrorParameters;\n    public rxdb: true;\n    constructor(\n        code: RxErrorKey,\n        message: string,\n        parameters: RxErrorParameters = {}\n    ) {\n        const mes = messageForError(message, code, parameters);\n        super(mes);\n        this.code = code;\n        this.message = mes;\n        this.parameters = parameters;\n        this.rxdb = true; // tag them as internal\n    }\n    get name(): string {\n        return 'RxError (' + this.code + ')';\n    }\n    toString(): string {\n        return this.message;\n    }\n    get typeError(): boolean {\n        return false;\n    }\n}\n\nexport class RxTypeError extends TypeError {\n    public code: RxErrorKey;\n    public message: string;\n    public parameters: RxErrorParameters;\n    public rxdb: true;\n    constructor(\n        code: RxErrorKey,\n        message: string,\n        parameters: RxErrorParameters = {}\n    ) {\n        const mes = messageForError(message, code, parameters);\n        super(mes);\n        this.code = code;\n        this.message = mes;\n        this.parameters = parameters;\n        this.rxdb = true; // tag them as internal\n    }\n    get name(): string {\n        return 'RxTypeError (' + this.code + ')';\n    }\n    toString(): string {\n        return this.message;\n    }\n    get typeError(): boolean {\n        return true;\n    }\n}\n\nexport function newRxError(\n    code: RxErrorKey,\n    parameters?: RxErrorParameters\n): RxError {\n    return new RxError(\n        code,\n        overwritable.tunnelErrorMessage(code),\n        parameters\n    );\n}\n\nexport function newRxTypeError(\n    code: RxErrorKey,\n    parameters?: RxErrorParameters\n): RxTypeError {\n    return new RxTypeError(\n        code,\n        overwritable.tunnelErrorMessage(code),\n        parameters\n    );\n}\n\nexport function isPouchdbConflictError(err: RxError | RxTypeError): boolean {\n    if (\n        err.parameters && err.parameters.pouchDbError &&\n        (err.parameters.pouchDbError as PouchWriteError).status === 409\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"mappings":"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"}