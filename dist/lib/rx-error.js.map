{"version":3,"sources":["../../src/rx-error.ts"],"names":[],"mappings":"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","file":"rx-error.js","sourcesContent":["/**\n * here we use custom errors with the additional field 'parameters'\n */\n\nimport { overwritable } from './overwritable';\nimport type {\n    RxErrorParameters,\n    PouchWriteError,\n    RxErrorKey\n} from './types';\n\n/**\n * transform an object of parameters to a presentable string\n */\nfunction parametersToString(parameters: any): string {\n    let ret = '';\n    if (Object.keys(parameters).length === 0)\n        return ret;\n    ret += 'Given parameters: {\\n';\n    ret += Object.keys(parameters)\n        .map(k => {\n            let paramStr = '[object Object]';\n            try {\n                paramStr = JSON.stringify(\n                    parameters[k],\n                    (_k, v) => v === undefined ? null : v,\n                    2\n                );\n            } catch (e) { }\n            return k + ':' + paramStr;\n        })\n        .join('\\n');\n    ret += '}';\n    return ret;\n}\n\nfunction messageForError(\n    message: string,\n    code: string,\n    parameters: any\n): string {\n    return 'RxError (' + code + '):' + '\\n' +\n        message + '\\n' +\n        parametersToString(parameters);\n}\n\nexport class RxError extends Error {\n    public code: RxErrorKey;\n    public message: string;\n    public parameters: RxErrorParameters;\n    public rxdb: true;\n    constructor(\n        code: RxErrorKey,\n        message: string,\n        parameters: RxErrorParameters = {}\n    ) {\n        const mes = messageForError(message, code, parameters);\n        super(mes);\n        this.code = code;\n        this.message = mes;\n        this.parameters = parameters;\n        this.rxdb = true; // tag them as internal\n    }\n    get name(): string {\n        return 'RxError (' + this.code + ')';\n    }\n    toString(): string {\n        return this.message;\n    }\n    get typeError(): boolean {\n        return false;\n    }\n}\n\nexport class RxTypeError extends TypeError {\n    public code: RxErrorKey;\n    public message: string;\n    public parameters: RxErrorParameters;\n    public rxdb: true;\n    constructor(\n        code: RxErrorKey,\n        message: string,\n        parameters: RxErrorParameters = {}\n    ) {\n        const mes = messageForError(message, code, parameters);\n        super(mes);\n        this.code = code;\n        this.message = mes;\n        this.parameters = parameters;\n        this.rxdb = true; // tag them as internal\n    }\n    get name(): string {\n        return 'RxTypeError (' + this.code + ')';\n    }\n    toString(): string {\n        return this.message;\n    }\n    get typeError(): boolean {\n        return true;\n    }\n}\n\nexport function newRxError(\n    code: RxErrorKey,\n    parameters?: RxErrorParameters\n): RxError {\n    return new RxError(\n        code,\n        overwritable.tunnelErrorMessage(code),\n        parameters\n    );\n}\n\nexport function newRxTypeError(\n    code: RxErrorKey,\n    parameters?: RxErrorParameters\n): RxTypeError {\n    return new RxTypeError(\n        code,\n        overwritable.tunnelErrorMessage(code),\n        parameters\n    );\n}\n\nexport function isPouchdbConflictError(err: RxError | RxTypeError): boolean {\n    if (\n        err.parameters && err.parameters.pouchDbError &&\n        (err.parameters.pouchDbError as PouchWriteError).status === 409\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"]}