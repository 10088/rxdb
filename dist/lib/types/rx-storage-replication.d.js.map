{"version":3,"file":"rx-storage-replication.d.js","names":[],"sources":["../../../src/types/rx-storage-replication.d.ts"],"sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport type {\n    InternalStoreDocType\n} from '../rx-database-internal-store';\nimport { RxDocumentData } from './rx-storage';\nimport type {\n    RxStorageInstance\n} from './rx-storage.interface';\n\nexport type RxStorageInstanceReplicationInput<RxDocType> = {\n    /**\n     * A string that uniquely identifies\n     * the replication.\n     * Ensures that checkpoint are not\n     * mixed with other replications.\n     */\n    identifier: string;\n    bulkSize: number;\n    conflictHandler: RxConflictHandler<RxDocType>;\n\n    /**\n     * The RxStorage instance of the master branch that is\n     * replicated with the fork branch.\n     * The replication algorithm is made to make\n     * as less writes on the master as possible.\n     * The master instance is always 'the truth' which\n     * does never contain conflicting document states.\n     * All conflicts are handled on the fork branch\n     * before being replicated to the master.\n     */\n    masterInstance: RxStorageInstance<RxDocType, any, any>;\n\n    /**\n     * The fork is the one that contains the forked chain of document writes.\n     * All conflicts are solved on the fork and only resolved correct document data\n     * is written back to the parent.\n     */\n    forkInstance: RxStorageInstance<RxDocType, any, any>;\n\n    /**\n     * If the fork storage is persistend,\n     * we have to also store the replication checkpoint in a persistend way.\n     * Therefore we need access to another storage instance that can save meta data.\n     * \n     * Normally you will use myRxDatabase.internalStore\n     * but only if the fork storage is really persistend\n     * (will keep it's state after a process restart).\n     */\n    checkPointInstance?: RxStorageInstance<InternalStoreDocType, any, any>;\n\n    /**\n     * When a write happens to the fork,\n     * normally the replication will directly try to persist.\n     * \n     * For many use cases, it is better to await the next event loop tick\n     * or to wait until the RxDatabase is idle or requestIdleCallback() calls\n     * to ensure the CPU is idle.\n     * This can improve performance because the persistence will not affect UI\n     * renders.\n     * \n     * But: The longer you wait here, the higher is the risk of loosing fork\n     * writes when the replicatoin is destroyed unexpected.\n     */\n    waitBeforePersist?: () => Promise<any>;\n};\n\nexport type RxStorageInstanceReplicationState<RxDocType> = {\n    // store the primaryPath here for better reuse and performance.\n    primaryPath: string;\n    input: RxStorageInstanceReplicationInput<RxDocType>;\n\n    /**\n     * Used in checkpoints and ._meta fields\n     * to ensure we do not mix up meta data of\n     * different replications.\n     */\n    checkpointKey: string;\n\n    /**\n     * Tracks if the streams are in sync\n     * or not.\n     */\n    firstSyncDone: {\n        [direction in RxStorageReplicationDirection]: BehaviorSubject<boolean>;\n    };\n\n    /**\n     * Contains the cancel state.\n     * Emit true here to cancel the replication.\n     */\n    canceled: BehaviorSubject<boolean>;\n\n    lastCheckpoint: {\n        [direction in RxStorageReplicationDirection]?: any\n    };\n\n    /**\n     * Can be used to detect if the replication is doing something\n     * or if it is in an idle state.\n     */\n    streamQueue: {\n        [direction in RxStorageReplicationDirection]: Promise<any>;\n    }\n}\n\nexport type RxConflictHandlerInput<RxDocType> = {\n    documentStateAtForkTime?: RxDocumentData<RxDocType>;\n    newDocumentStateInMaster: RxDocumentData<RxDocType>;\n    currentForkDocumentState: RxDocumentData<RxDocType>;\n};\nexport type RxConflictHandler<RxDocType> = (\n    i: RxConflictHandlerInput<RxDocType>\n) => Promise<{\n    resolvedDocumentState: RxDocumentData<RxDocType>\n}>\n\n\nexport type RxStorageReplicationDirection = 'up' | 'down';\n"],"mappings":""}