{"version":3,"sources":["../../src/rx-document-prototype-merge.ts"],"names":[],"mappings":"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","file":"rx-document-prototype-merge.js","sourcesContent":["/**\n * For the ORM capabilities,\n * we have to merge the document prototype\n * with the ORM functions and the data\n * We do this itterating over the properties and\n * adding them to a new object.\n * In the future we should do this by chaining the __proto__ objects\n */\n\nimport type {\n    RxCollection,\n    RxDocument\n} from './types';\nimport {\n    createRxDocumentConstructor,\n    basePrototype,\n    createWithConstructor as createRxDocumentWithConstructor\n} from './rx-document';\nimport {\n    runPluginHooks\n} from './hooks';\nimport { overwritable } from './overwritable';\n\n// caches\nconst protoForCollection: WeakMap<RxCollection, any> = new WeakMap();\nconst constructorForCollection: WeakMap<RxCollection, any> = new WeakMap();\n\nexport function getDocumentPrototype(\n    rxCollection: RxCollection\n): any {\n    if (!protoForCollection.has(rxCollection)) {\n        const schemaProto = rxCollection.schema.getDocumentPrototype();\n        const ormProto = getDocumentOrmPrototype(rxCollection);\n        const baseProto = basePrototype;\n        const proto = {};\n        [\n            schemaProto,\n            ormProto,\n            baseProto\n        ].forEach(obj => {\n            const props = Object.getOwnPropertyNames(obj);\n            props.forEach(key => {\n                const desc: any = Object.getOwnPropertyDescriptor(obj, key);\n\n\n                /**\n                 * When enumerable is true, it will show on console.dir(instance)\n                 * To not polute the output, only getters and methods are enumerable\n                 */\n                let enumerable = true;\n                if (\n                    key.startsWith('_') ||\n                    key.endsWith('_') ||\n                    key.startsWith('$') ||\n                    key.endsWith('$')\n                ) enumerable = false;\n\n                if (typeof desc.value === 'function') {\n                    // when getting a function, we automatically do a .bind(this)\n                    Object.defineProperty(proto, key, {\n                        get() {\n                            return desc.value.bind(this);\n                        },\n                        enumerable,\n                        configurable: false\n                    });\n\n                } else {\n                    desc.enumerable = enumerable;\n                    desc.configurable = false;\n                    if (desc.writable)\n                        desc.writable = false;\n                    Object.defineProperty(proto, key, desc);\n                }\n            });\n        });\n        protoForCollection.set(rxCollection, proto);\n\n    }\n    return protoForCollection.get(rxCollection);\n}\n\nexport function getRxDocumentConstructor(\n    rxCollection: RxCollection\n) {\n    if (!constructorForCollection.has(rxCollection)) {\n        const ret = createRxDocumentConstructor(\n            getDocumentPrototype(rxCollection)\n        );\n        constructorForCollection.set(rxCollection, ret);\n    }\n    return constructorForCollection.get(rxCollection);\n}\n\n/**\n * create a RxDocument-instance from the jsonData\n * and the prototype merge\n */\nexport function createRxDocument<DT, OM>(\n    rxCollection: RxCollection<DT, OM>,\n    docData: any\n): RxDocument<DT, OM> {\n    const primary = docData[rxCollection.schema.primaryPath];\n\n    // return from cache if exsists\n    const cacheDoc = rxCollection._docCache.get(primary);\n    if (cacheDoc) {\n        return cacheDoc as any;\n    }\n\n    const doc = createRxDocumentWithConstructor(\n        getRxDocumentConstructor(rxCollection as any),\n        rxCollection as any,\n        overwritable.deepFreezeWhenDevMode(docData)\n    );\n\n    rxCollection._docCache.set(primary, doc as any);\n    rxCollection._runHooksSync('post', 'create', docData, doc);\n    runPluginHooks('postCreateRxDocument', doc);\n    return doc as any;\n}\n\n/**\n * create RxDocument from the docs-array\n */\nexport function createRxDocuments<DT, OM>(\n    rxCollection: RxCollection,\n    docsJSON: any[]\n): RxDocument<DT, OM>[] {\n    return docsJSON.map(\n        json => createRxDocument<DT, OM>(rxCollection as any, json)\n    );\n}\n\n/**\n * returns the prototype-object\n * that contains the orm-methods,\n * used in the proto-merge\n */\nexport function getDocumentOrmPrototype(rxCollection: RxCollection): any {\n    const proto: any = {};\n    Object\n        .entries(rxCollection.methods)\n        .forEach(([k, v]) => {\n            proto[k] = v;\n        });\n    return proto;\n}\n"]}