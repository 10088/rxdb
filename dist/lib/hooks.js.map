{"version":3,"sources":["../../src/hooks.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACO,IAAM,KAA6B,GAAG;AACzC;AACJ;AACA;AACA;AACI,EAAA,cAAc,EAAE,EALyB;;AAMzC;AACJ;AACA;AACI,EAAA,mBAAmB,EAAE,EAToB;;AAUzC;AACJ;AACA;AACA;AACA;AACI,EAAA,gBAAgB,EAAE,EAfuB;AAgBzC,EAAA,qBAAqB,EAAE,EAhBkB;AAiBzC,EAAA,kBAAkB,EAAE,EAjBqB;;AAkBzC;AACJ;AACA;AACA;AACI,EAAA,uBAAuB,EAAE,EAtBgB;;AAuBzC;AACJ;AACA;AACA;AACI,EAAA,iBAAiB,EAAE,EA3BsB;;AA4BzC;AACJ;AACA;AACA;AACI,EAAA,cAAc,EAAE,EAhCyB;AAiCzC,EAAA,gBAAgB,EAAE,EAjCuB;AAkCzC,EAAA,aAAa,EAAE,EAlC0B;;AAmCzC;AACJ;AACA;AACI,EAAA,eAAe,EAAE,EAtCwB;;AAuCzC;AACJ;AACA;AACI,EAAA,iBAAiB,EAAE,EA1CsB;;AA2CzC;AACJ;AACA;AACA;AACI,EAAA,eAAe,EAAE,EA/CwB;;AAiDzC;AACJ;AACA;AACA;AACI,EAAA,yBAAyB,EAAE,EArDc;;AAuDzC;AACJ;AACA;AACA;AACI,EAAA,oBAAoB,EAAE,EA3DmB;AA6DzC,EAAA,gBAAgB,EAAE,EA7DuB;;AA8DzC;AACJ;AACA;AACA;AACI,EAAA,oBAAoB,EAAE,EAlEmB;;AAmEzC;AACJ;AACA;AACA;AACA;AACA;AACI,EAAA,0BAA0B,EAAE,EAzEa;;AA0EzC;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,kBAAkB,EAAE,EAjFqB;;AAkFzC;AACJ;AACA;AACI,EAAA,mBAAmB,EAAE,EArFoB;;AAsFzC;AACJ;AACA;AACI,EAAA,oBAAoB,EAAE;AAzFmB,CAAtC;;;AA4FA,SAAS,cAAT,CAAwB,OAAxB,EAAyC,GAAzC,EAAmD;AACtD,EAAA,KAAK,CAAC,OAAD,CAAL,CAAe,OAAf,CAAuB,UAAA,GAAG;AAAA,WAAI,GAAG,CAAC,GAAD,CAAP;AAAA,GAA1B;AACH;AAGD;AACA;AACA;AACA;AACA;;;AACO,SAAS,mBAAT,CAA6B,OAA7B,EAA8C,GAA9C,EAAsE;AACzE,SAAO,OAAO,CAAC,GAAR,CACH,KAAK,CAAC,OAAD,CAAL,CAAe,GAAf,CAAmB,UAAA,GAAG;AAAA,WAAI,GAAG,CAAC,GAAD,CAAP;AAAA,GAAtB,CADG,CAAP;AAGH;AAED;AACA;AACA;;;AACO,SAAS,UAAT,CAAoB,IAApB,EAAkC,GAAlC,EAAiD;AACpD,EAAA,KAAK,CAAC,IAAD,CAAL,GAAc,KAAK,CAAC,IAAD,CAAL,CAAY,MAAZ,CAAmB,UAAA,CAAC;AAAA,WAAI,CAAC,KAAK,GAAV;AAAA,GAApB,CAAd;AACH","file":"hooks.js","sourcesContent":["/**\n * stores the hooks that where added by the plugins\n */\n\n/**\n * hook-functions that can be extended by the plugin\n */\nexport const HOOKS: { [k: string]: any[] } = {\n    /**\n     * Runs before a plugin is added.\n     * Use this to block the usage of non-compatible plugins.\n     */\n    preAddRxPlugin: [],\n    /**\n     * functions that run before the database is created\n     */\n    preCreateRxDatabase: [],\n    /**\n     * runs after the database is created and prepared\n     * but before the instance is returned to the user\n     * @async\n     */\n    createRxDatabase: [],\n    preCreateRxCollection: [],\n    createRxCollection: [],\n    /**\n    * runs at the end of the destroy-process of a collection\n    * @async\n    */\n    postDestroyRxCollection: [],\n    /**\n      * functions that get the json-schema as input\n      * to do additionally checks/manipulation\n      */\n    preCreateRxSchema: [],\n    /**\n     * functions that run after the RxSchema is created\n     * gets RxSchema as attribute\n     */\n    createRxSchema: [],\n    preCreateRxQuery: [],\n    createRxQuery: [],\n    /**\n     * Runs before a document is send to the query matcher.\n     */\n    preQueryMatcher: [],\n    /**\n     * Runs before a document is send to the sortComparator.\n     */\n    preSortComparator: [],\n    /**\n     * Runs before a query is send to the\n     * prepareQuery function of the storage engine.\n     */\n    prePrepareQuery: [],\n\n    /**\n     * Runs before the document data is send to the\n     * bulkWrite of the storage instance\n     */\n    preWriteToStorageInstance: [],\n\n    /**\n     * Runs after the document data is ready from\n     * the storage instance.\n     */\n    postReadFromInstance: [],\n\n    createRxDocument: [],\n    /**\n     * runs after a RxDocument is created,\n     * cannot be async\n     */\n    postCreateRxDocument: [],\n    /**\n     * Runs before a RxStorageInstance is created\n     * gets the params of createStorageInstance()\n     * as attribute so you can manipulate them.\n     * Notice that you have to clone stuff before mutating the inputs.\n     */\n    preCreateRxStorageInstance: [],\n    /**\n     * runs on the document-data before the document is migrated\n     * {\n     *   doc: Object, // originam doc-data\n     *   migrated: // migrated doc-data after run throught migration-strategies\n     * }\n     */\n    preMigrateDocument: [],\n    /**\n     * runs after the migration of a document has been done\n     */\n    postMigrateDocument: [],\n    /**\n     * runs at the beginning of the destroy-process of a database\n     */\n    preDestroyRxDatabase: []\n};\n\nexport function runPluginHooks(hookKey: string, obj: any) {\n    HOOKS[hookKey].forEach(fun => fun(obj));\n}\n\n\n/**\n * TODO\n * we should not run the hooks in parallel\n * this makes stuff unpredictable.\n */\nexport function runAsyncPluginHooks(hookKey: string, obj: any): Promise<any> {\n    return Promise.all(\n        HOOKS[hookKey].map(fun => fun(obj))\n    );\n}\n\n/**\n * used in tests to remove hooks\n */\nexport function _clearHook(type: string, fun: Function) {\n    HOOKS[type] = HOOKS[type].filter(h => h !== fun);\n}\n"]}