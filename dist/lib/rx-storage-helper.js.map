{"version":3,"file":"rx-storage-helper.js","names":["writeSingle","instance","writeRow","context","bulkWrite","writeResult","Object","keys","error","length","firstPropertyValueOfObject","ret","success","getSingleDocument","storageInstance","documentId","findDocumentsById","results","doc","getAllDocuments","primaryKey","storage","getAllQueryPrepared","statics","prepareQuery","schema","selector","sort","skip","query","queryResult","allDocs","documents","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","stackCheckpoints","checkpoints","assign","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","change","operation","previousDocumentData","previous","eventId","collectionName","name","undefined","startTime","endTime","overwritable","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","newRxError","id","data","getNewestOfDocumentStates","primaryPath","docs","forEach","_meta","lwt","ensureNotFalsy","categorizeBulkWriteRows","docsInDb","bulkWriteRows","hasAttachments","attachments","bulkInsertDocs","bulkUpdateDocs","errors","changedDocumentIds","eventBulk","randomCouchString","events","checkpoint","attachmentsAdd","attachmentsRemove","attachmentsUpdate","now","document","documentInDb","get","attachmentError","insertedIsDeleted","_deleted","entries","_attachments","attachmentId","attachmentData","isError","push","stripAttachmentsDataFromRow","getUniqueDeterministicEventKey","stripAttachmentsDataFromDocument","revInDb","_rev","err","find","previousAttachmentData","writeDoc","args","useDoc","flatClone","digest","type","flatCloneDocWithMeta","docId","binaryValues","binary","map","v","join","eventKey","databaseName","hashAttachmentData","attachmentBase64String","storageStatics","hash","atob","getAttachmentSize","getWrappedStorageInstance","database","rxJsonSchema","getPrimaryFieldOfPrimaryKey","transformDocumentDataFromRxDBToRxStorage","isDevMode","fillPrimaryKey","prev","parseRevision","current","height","dataBefore","dataAfter","metaFieldName","hasOwnProperty","hookParams","runPluginHooks","transformDocumentDataFromRxStorageToRxDB","transformErrorDataFromRxStorageToRxDB","internals","options","rows","toStorageWriteRows","row","lockedRun","then","reInsertErrors","values","filter","useWriteResult","reInserts","createRevision","subResult","k","preparedQuery","ids","deleted","findResult","key","getAttachmentData","getChangedDocumentsSince","limit","result","d","cleanup","minDeletedTime","remove","close","changeStream","pipe","event","conflictResultionTasks","task","assumedMasterState","input","newDocumentState","realMasterState","resolveConflictResultionTask","taskSolution","output","isEqual","getDefaultRxDocumentMeta","getDefaultRevision","postHookDocData"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport type { ChangeEvent } from 'event-reduce-js';\nimport { map } from 'rxjs/operators';\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport {\n    fillPrimaryKey,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentWriteData,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentDataById,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageStatics,\n    StringKeys\n} from './types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    firstPropertyValueOfObject,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    parseRevision,\n    randomCouchString\n} from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\n/**\n * Returns all non-deleted documents\n * of the storage.\n */\nexport async function getAllDocuments<RxDocType>(\n    primaryKey: keyof RxDocType,\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n    const storage = storageInstance.storage;\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [primaryKey]: 'asc' } as any],\n            skip: 0\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: CheckpointType[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints\n    );\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    let documentData;\n    /**\n     * TODO\n     * this data design is shit,\n     * instead of having the documentData depending on the operation,\n     * we should always have a current doc data, that might or might not\n     * have set _deleted to true.\n     */\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        documentData = rxStorageChangeEvent.change.doc;\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        previousDocumentData = rxStorageChangeEvent.change.previous;\n    }\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageBulkWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('COL19', {\n                collection: collection.name,\n                id: documentId,\n                error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\nexport function getNewestOfDocumentStates<RxDocType>(\n    primaryPath: string,\n    docs: RxDocumentData<RxDocType>[]\n): RxDocumentData<RxDocType> {\n    let ret: RxDocumentData<RxDocType> | null = null;\n    docs.forEach(doc => {\n        if (\n            !ret ||\n            doc._meta.lwt > ret._meta.lwt ||\n            (\n                doc._meta.lwt === ret._meta.lwt &&\n                (doc as any)[primaryPath] > (ret as any)[primaryPath]\n            )\n        ) {\n            ret = doc;\n        }\n\n    });\n    return ensureNotFalsy(ret as any);\n}\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     */\n    docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRow<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRow<RxDocType>[] = [];\n    const errors: RxStorageBulkWriteError<RxDocType>[] = [];\n    const changedDocumentIds: RxDocumentData<RxDocType>[StringKeys<RxDocType>][] = [];\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: randomCouchString(10),\n        events: [],\n        checkpoint: null,\n        context\n    };\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n    }[] = [];\n\n\n    const startTime = now();\n    bulkWriteRows.forEach(writeRow => {\n        const id = writeRow.document[primaryPath];\n        const documentInDb = docsInDb.get(id);\n        let attachmentError: RxStorageBulkWriteError<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = writeRow.document._deleted ? true : false;\n            Object.entries(writeRow.document._attachments).forEach(([attachmentId, attachmentData]) => {\n                if (\n                    !(attachmentData as RxAttachmentWriteData).data\n                ) {\n                    attachmentError = {\n                        documentId: id as any,\n                        isError: true,\n                        status: 510,\n                        writeRow\n                    };\n                    errors.push(attachmentError);\n                } else {\n                    attachmentsAdd.push({\n                        documentId: id as any,\n                        attachmentId,\n                        attachmentData: attachmentData as any\n                    });\n                }\n            });\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkInsertDocs.push(writeRow);\n                }\n            }\n\n            if (!insertedIsDeleted) {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change: {\n                        doc: hasAttachments ? stripAttachmentsDataFromDocument(writeRow.document) : writeRow.document,\n                        id: id as any,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !writeRow.previous\n                ) ||\n                (\n                    !!writeRow.previous &&\n                    revInDb !== writeRow.previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageBulkWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: id as any,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors.push(err);\n                return;\n            }\n\n            // handle attachments data\n            if (writeRow.document._deleted) {\n                /**\n                 * Deleted documents must have cleared all their attachments.\n                 */\n                if (writeRow.previous) {\n                    Object\n                        .keys(writeRow.previous._attachments)\n                        .forEach(attachmentId => {\n                            attachmentsRemove.push({\n                                documentId: id as any,\n                                attachmentId\n                            });\n                        });\n                }\n            } else {\n                // first check for errors\n                Object\n                    .entries(writeRow.document._attachments)\n                    .find(([attachmentId, attachmentData]) => {\n                        const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                        if (\n                            !previousAttachmentData &&\n                            !(attachmentData as RxAttachmentWriteData).data\n                        ) {\n                            attachmentError = {\n                                documentId: id as any,\n                                documentInDb: documentInDb,\n                                isError: true,\n                                status: 510,\n                                writeRow\n                            };\n                        }\n                        return true;\n                    });\n                if (!attachmentError) {\n                    Object\n                        .entries(writeRow.document._attachments)\n                        .forEach(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = writeRow.previous ? writeRow.previous._attachments[attachmentId] : undefined;\n                            if (!previousAttachmentData) {\n                                attachmentsAdd.push({\n                                    documentId: id as any,\n                                    attachmentId,\n                                    attachmentData: attachmentData as any\n                                });\n                            } else {\n                                attachmentsUpdate.push({\n                                    documentId: id as any,\n                                    attachmentId,\n                                    attachmentData: attachmentData as any\n                                });\n                            }\n                        });\n                }\n            }\n            if (attachmentError) {\n                errors.push(attachmentError);\n            } else {\n                if (hasAttachments) {\n                    bulkUpdateDocs.push(stripAttachmentsDataFromRow(writeRow));\n                } else {\n                    bulkUpdateDocs.push(writeRow);\n                }\n            }\n\n            let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n            const writeDoc = writeRow.document;\n            if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'INSERT',\n                    previous: null,\n                    doc: hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'UPDATE',\n                    previous: writeRow.previous,\n                    doc: hasAttachments ? stripAttachmentsDataFromDocument(writeDoc) : writeDoc\n                };\n            } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                change = {\n                    id: id as any,\n                    operation: 'DELETE',\n                    previous: writeRow.previous,\n                    doc: null\n                };\n            }\n            if (!change) {\n                if (\n                    writeRow.previous && writeRow.previous._deleted &&\n                    writeRow.document._deleted\n                ) {\n                    // deleted doc got overwritten with other deleted doc -> do not send an event\n                } else {\n                    throw newRxError('SNH', { args: { writeRow } });\n                }\n            } else {\n                changedDocumentIds.push(id);\n                eventBulk.events.push({\n                    eventId: getUniqueDeterministicEventKey(storageInstance, primaryPath as any, writeRow),\n                    documentId: id as any,\n                    change,\n                    startTime,\n                    endTime: now()\n                });\n            }\n        }\n    });\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        errors,\n        changedDocumentIds,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRow<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc);\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = {\n                digest: attachmentData.digest,\n                length: attachmentData.length,\n                type: attachmentData.type\n            };\n        })\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    const ret = flatClone(doc);\n    ret._meta = flatClone(doc._meta);\n    return ret;\n}\n\n/**\n * Each event is labeled with the id\n * to make it easy to filter out duplicates.\n */\nexport function getUniqueDeterministicEventKey(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: string,\n    writeRow: BulkWriteRow<any>\n): string {\n    const docId = writeRow.document[primaryPath];\n    const binaryValues: boolean[] = [\n        !!writeRow.previous,\n        (writeRow.previous && writeRow.previous._deleted),\n        !!writeRow.document._deleted\n    ];\n    const binary = binaryValues.map(v => v ? '1' : '0').join('');\n    const eventKey = storageInstance.databaseName + '|' + storageInstance.collectionName + '|' + docId + '|' + '|' + binary + '|' + writeRow.document._rev;\n    return eventKey;\n}\n\nexport function hashAttachmentData(\n    attachmentBase64String: string,\n    storageStatics: RxStorageStatics\n): Promise<string> {\n    return storageStatics.hash(atob(attachmentBase64String));\n}\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        /**\n         * Do some checks in dev-mode\n         * that would be too performance expensive\n         * in production.\n         */\n        if (overwritable.isDevMode()) {\n            // ensure that the primary key has not been changed\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n\n            /**\n             * Ensure that the new revision is higher\n             * then the previous one\n             */\n            if (writeRow.previous) {\n                const prev = parseRevision(writeRow.previous._rev);\n                const current = parseRevision(writeRow.document._rev);\n                if (current.height <= prev.height) {\n                    throw newRxError('SNH', {\n                        dataBefore: writeRow.previous,\n                        dataAfter: writeRow.document,\n                        args: {\n                            prev,\n                            current\n                        }\n                    });\n                }\n            }\n\n            /**\n             * Ensure that _meta fields have been merged\n             * and not replaced.\n             * This is important so that when one plugin A\n             * sets a _meta field and another plugin B does a write\n             * to the document, it must be ensured that the\n             * field of plugin A was not removed.\n             */\n            if (writeRow.previous) {\n                Object.keys(writeRow.previous._meta)\n                    .forEach(metaFieldName => {\n                        if (!writeRow.document._meta.hasOwnProperty(metaFieldName)) {\n                            throw newRxError('SNH', {\n                                dataBefore: writeRow.previous,\n                                dataAfter: writeRow.document\n                            });\n                        }\n                    });\n            }\n        }\n        data._meta.lwt = now();\n\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n        /**\n         * Run the hooks once for the previous doc,\n         * once for the new write data\n         */\n        let previous = writeRow.previous;\n        if (previous) {\n            hookParams.doc = previous;\n            runPluginHooks('preWriteToStorageInstance', hookParams);\n            previous = hookParams.doc;\n        }\n\n        hookParams.doc = data;\n        runPluginHooks('preWriteToStorageInstance', hookParams);\n        data = hookParams.doc;\n\n        /**\n         * Do not update the revision here.\n         * The caller of bulkWrite() must be able to set\n         * the revision and to be sure that the given revision\n         * is used when storing the document.\n         * The revision must be provided by the caller of bulkWrite().\n         */\n        if (!data._rev) {\n            throw newRxError('SNH', {\n                data\n            });\n        }\n\n        return {\n            document: data,\n            previous\n        };\n    }\n\n    function transformDocumentDataFromRxStorageToRxDB(\n        data: any\n    ): any {\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n        runPluginHooks('postReadFromInstance', hookParams);\n        return hookParams.doc;\n    }\n\n    function transformErrorDataFromRxStorageToRxDB<RxDocType>(\n        error: RxStorageBulkWriteError<RxDocType>\n    ): RxStorageBulkWriteError<RxDocType> {\n        const ret = flatClone(error);\n        ret.writeRow = flatClone(ret.writeRow);\n\n        if (ret.documentInDb) {\n            ret.documentInDb = transformDocumentDataFromRxStorageToRxDB(ret.documentInDb);\n        }\n\n        ret.writeRow.document = transformDocumentDataFromRxStorageToRxDB(ret.writeRow.document);\n        if (ret.writeRow.previous) {\n            ret.writeRow.previous = transformDocumentDataFromRxStorageToRxDB(ret.writeRow.previous);\n        }\n\n        return ret;\n    }\n\n    const ret: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        storage: storageInstance.storage,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const reInsertErrors: RxStorageBulkWriteError<RxDocType>[] = Object\n                        .values(writeResult.error)\n                        .filter((error) => {\n                            if (\n                                error.status === 409 &&\n                                !error.writeRow.previous &&\n                                !error.writeRow.document._deleted &&\n                                ensureNotFalsy(error.documentInDb)._deleted\n                            ) {\n                                return true;\n                            }\n                            return false;\n                        });\n\n                    if (reInsertErrors.length > 0) {\n                        const useWriteResult: typeof writeResult = {\n                            error: flatClone(writeResult.error),\n                            success: flatClone(writeResult.success)\n                        };\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                delete useWriteResult.error[error.documentId];\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(error.writeRow.document, error.documentInDb)\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            useWriteResult.error = Object.assign(\n                                useWriteResult.error,\n                                subResult.error\n                            );\n                            useWriteResult.success = Object.assign(\n                                useWriteResult.success,\n                                subResult.success\n                            );\n                            return useWriteResult;\n                        });\n                    }\n\n                    return writeResult;\n                })\n                .then(writeResult => {\n                    const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                        success: {},\n                        error: {}\n                    };\n                    Object.entries(writeResult.success).forEach(([k, v]) => {\n                        ret.success[k] = transformDocumentDataFromRxStorageToRxDB(v);\n                    });\n                    Object.entries(writeResult.error).forEach(([k, error]) => {\n                        ret.error[k] = transformErrorDataFromRxStorageToRxDB(error);\n                    });\n                    return ret;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            ).then(queryResult => {\n                return {\n                    documents: queryResult.documents.map(doc => transformDocumentDataFromRxStorageToRxDB(doc))\n                };\n            });\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            ).then(findResult => {\n                const ret: RxDocumentDataById<RxDocType> = {};\n                Object.entries(findResult).forEach(([key, doc]) => {\n                    ret[key] = transformDocumentDataFromRxStorageToRxDB(doc);\n                });\n                return ret;\n            });\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocumentsSince(limit: number, checkpoint?: any) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocumentsSince(limit, checkpoint)\n            ).then(result => {\n                return {\n                    checkpoint: result.checkpoint,\n                    documents: result.documents\n                        .map(d => transformDocumentDataFromRxStorageToRxDB(d))\n                };\n            });\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream().pipe(\n                map(eventBulk => {\n                    const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, CheckpointType> = {\n                        id: eventBulk.id,\n                        events: eventBulk.events.map(event => {\n                            return {\n                                eventId: event.eventId,\n                                documentId: event.documentId,\n                                endTime: event.endTime,\n                                startTime: event.startTime,\n                                change: {\n                                    id: event.change.id,\n                                    operation: event.change.operation,\n                                    doc: event.change.doc ? transformDocumentDataFromRxStorageToRxDB(event.change.doc) : undefined,\n                                    previous: event.change.previous ? transformDocumentDataFromRxStorageToRxDB(event.change.previous) : undefined\n                                }\n                            }\n                        }),\n                        checkpoint: eventBulk.checkpoint,\n                        context: eventBulk.context\n                    };\n                    return ret;\n                })\n            )\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks().pipe(\n                map(task => {\n                    const assumedMasterState = task.input.assumedMasterState ? transformDocumentDataFromRxStorageToRxDB(task.input.assumedMasterState) : undefined;\n                    const newDocumentState = transformDocumentDataFromRxStorageToRxDB(task.input.newDocumentState);\n                    const realMasterState = transformDocumentDataFromRxStorageToRxDB(task.input.realMasterState);\n                    return {\n                        id: task.id,\n                        context: task.context,\n                        input: {\n                            assumedMasterState,\n                            realMasterState,\n                            newDocumentState\n                        }\n                    };\n                })\n            );\n        },\n        resolveConflictResultionTask(taskSolution) {\n\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const hookParams = {\n                database,\n                primaryPath,\n                schema: rxJsonSchema,\n                doc: Object.assign(\n                    {},\n                    taskSolution.output.documentData,\n                    {\n                        _meta: getDefaultRxDocumentMeta(),\n                        _rev: getDefaultRevision(),\n                        _attachments: {}\n                    }\n                )\n            };\n            hookParams.doc._rev = createRevision(hookParams.doc);\n\n            runPluginHooks('preWriteToStorageInstance', hookParams);\n            const postHookDocData = hookParams.doc;\n\n            const documentData = flatClone(postHookDocData);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n    return ret;\n}\n"],"mappings":"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"}