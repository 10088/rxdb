{"version":3,"sources":["../../src/rx-storage-helper.ts"],"names":["writeSingle","instance","writeRow","bulkWrite","writeResult","Object","keys","error","length","ret","success","getSingleDocument","storageInstance","documentId","findDocumentsById","results","doc","getAllDocuments","primaryKey","storage","getAllQueryPrepared","statics","prepareQuery","schema","selector","sort","query","queryResult","allDocs","documents","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","change","operation","previousDocumentData","previous","eventId","collectionName","name","undefined","startTime","endTime","overwritable","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","id","pouchDbError","data","getWrappedStorageInstance","database","rxJsonSchema","primaryPath","transformDocumentDataFromRxDBToRxStorage","updateLwt","_meta","isDevMode","lwt","Date","getTime","hookParams","transformDocumentDataFromRxStorageToRxDB","internals","databaseName","options","bulkAddRevisions","toStorageDocuments","map","lockedRun","rows","toStorageWriteRows","row","document","then","entries","forEach","k","v","preparedQuery","ids","deleted","findResult","key","getAttachmentData","attachmentId","getChangedDocuments","remove","close","changeStream","pipe","eventBulk","events","event"],"mappings":"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","sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { map } from 'rxjs/operators';\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport { fillPrimaryKey, getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    ChangeStreamOnceOptions,\n    EventBulk,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance\n} from './types';\nimport { clone, firstPropertyValueOfObject, flatClone } from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\n/**\n * Returns all non-deleted documents\n * of the storage.\n */\nexport async function getAllDocuments<RxDocType>(\n    primaryKey: keyof RxDocType,\n    storage: RxStorage<any, any>,\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [primaryKey]: 'asc' } as any]\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    let documentData;\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        documentData = rxStorageChangeEvent.change.doc;\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        previousDocumentData = rxStorageChangeEvent.change.previous;\n    }\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageBulkWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('COL19', {\n                collection: collection.name,\n                id: documentId,\n                pouchDbError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\n\nexport function getWrappedStorageInstance<RxDocType, Internals, InstanceCreationOptions>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocType>\n): RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        data: RxDocumentData<RxDocType> | RxDocumentWriteData<RxDocType>,\n        updateLwt: boolean\n    ) {\n        data = flatClone(data);\n        data._meta = flatClone(data._meta);\n\n        // ensure primary key has not been changed\n        if (overwritable.isDevMode()) {\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n        }\n\n        if (updateLwt) {\n            data._meta.lwt = new Date().getTime();\n        }\n\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n        runPluginHooks('preWriteToStorageInstance', hookParams);\n\n        return hookParams.doc as any;\n    }\n\n    function transformDocumentDataFromRxStorageToRxDB(\n        data: any\n    ): any {\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n        runPluginHooks('postReadFromInstance', hookParams);\n        return hookParams.doc;\n    }\n\n    const ret: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkAddRevisions(documents) {\n            const toStorageDocuments = documents.map(doc => transformDocumentDataFromRxDBToRxStorage(doc, true))\n            const ret = database.lockedRun(\n                () => storageInstance.bulkAddRevisions(\n                    toStorageDocuments\n                )\n            );\n            return ret;\n        },\n        bulkWrite(rows: BulkWriteRow<RxDocType>[]) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows.map(row => {\n                return {\n                    previous: row.previous ? transformDocumentDataFromRxDBToRxStorage(row.previous, false) : undefined,\n                    document: transformDocumentDataFromRxDBToRxStorage(row.document, true)\n                }\n            });\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    clone(toStorageWriteRows)\n                )\n            ).then(writeResult => {\n                const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                    success: {},\n                    error: {}\n                };\n                Object.entries(writeResult.error).forEach(([k, v]) => {\n                    ret.error[k] = v;\n                });\n                Object.entries(writeResult.success).forEach(([k, v]) => {\n                    ret.success[k] = transformDocumentDataFromRxStorageToRxDB(v);\n                });\n\n                return ret;\n            });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            ).then(queryResult => {\n                return {\n                    documents: queryResult.documents.map(doc => transformDocumentDataFromRxStorageToRxDB(doc))\n                };\n            });\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            ).then(findResult => {\n                const ret: { [documentId: string]: RxDocumentData<RxDocType>; } = {};\n                Object.entries(findResult).forEach(([key, doc]) => {\n                    ret[key] = transformDocumentDataFromRxStorageToRxDB(doc);\n                });\n                return ret;\n            });\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocuments(options: ChangeStreamOnceOptions) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocuments(options)\n            );\n        },\n        remove() {\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream().pipe(\n                map(eventBulk => {\n                    const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n                        id: eventBulk.id,\n                        events: eventBulk.events.map(event => {\n                            return {\n                                eventId: event.eventId,\n                                documentId: event.documentId,\n                                endTime: event.endTime,\n                                startTime: event.startTime,\n                                change: {\n                                    id: event.change.id,\n                                    operation: event.change.operation,\n                                    doc: event.change.doc ? transformDocumentDataFromRxStorageToRxDB(event.change.doc) : undefined,\n                                    previous: event.change.previous ? transformDocumentDataFromRxStorageToRxDB(event.change.previous) : undefined\n                                }\n                            }\n\n                        })\n                    };\n                    return ret;\n                })\n            )\n        }\n    };\n    return ret;\n}\n"],"file":"rx-storage-helper.js"}