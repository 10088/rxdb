{"version":3,"sources":["../../src/rx-storage-helper.ts"],"names":[],"mappings":"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","file":"rx-storage-helper.js","sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport type {\n    BulkWriteLocalRow,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxLocalDocumentData,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageKeyObjectInstance\n} from './types';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\n\n/**\n * returns all NON-LOCAL documents\n * TODO this is pouchdb specific should not be needed\n */\nexport async function getAllDocuments<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n\n    const getAllQueryPrepared = storageInstance.prepareQuery(\n        {\n            selector: {}\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results.get(documentId);\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n\n/**\n * get the number of all undeleted documents\n */\nexport async function countAllUndeleted<DocType>(\n    storageInstance: RxStorageInstance<DocType, any, any>\n): Promise<number> {\n    const docs = await getAllDocuments(\n        storageInstance\n    );\n    return docs.length;\n}\n\n/**\n * get a batch of documents from the storage-instance\n */\nexport async function getBatch<DocType>(\n    storageInstance: RxStorageInstance<DocType, any, any>,\n    limit: number\n): Promise<any[]> {\n    if (limit <= 1) {\n        throw newRxError('P1', {\n            limit\n        });\n    }\n\n    const preparedQuery = storageInstance.prepareQuery(\n        {\n            selector: {},\n            limit\n        }\n    );\n    const result = await storageInstance.query(preparedQuery);\n    return result.documents;\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (writeResult.error.size > 0) {\n        const error = writeResult.error.values().next().value;\n        throw error;\n    } else {\n        const ret = writeResult.success.values().next().value;\n        return ret;\n    }\n}\n\n/**\n * Writes a single local document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingleLocal<DocumentData>(\n    instance: RxStorageKeyObjectInstance<any, any>,\n    writeRow: BulkWriteLocalRow<DocumentData>\n): Promise<RxDocumentData<RxLocalDocumentData>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (writeResult.error.size > 0) {\n        const error = writeResult.error.values().next().value;\n        throw error;\n    } else {\n        const ret = writeResult.success.values().next().value;\n        return ret;\n    }\n}\n\nexport async function findLocalDocument<DocType>(\n    instance: RxStorageKeyObjectInstance<any, any>,\n    id: string\n): Promise<RxDocumentData<RxLocalDocumentData<DocType>> | null> {\n    const docList = await instance.findLocalDocumentsById([id]);\n    const doc = docList.get(id);\n    if (!doc) {\n        return null;\n    } else {\n        return doc;\n    }\n}\n\nexport async function getNewestSequence(\n    storageInstance: RxStorageInstance<any, any, any>\n): Promise<number> {\n    const changesResult = await storageInstance.getChangedDocuments({\n        order: 'asc',\n        limit: 1,\n        startSequence: 0\n    });\n    return changesResult.lastSequence;\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxDatabase: RxDatabase,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n\n    let documentData;\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        if (!rxCollection) {\n            documentData = rxStorageChangeEvent.change.doc;\n        } else {\n\n            const hookParams = {\n                collection: rxCollection,\n                doc: rxStorageChangeEvent.change.doc as any\n            };\n            runPluginHooks('postReadFromInstance', hookParams);\n            documentData = hookParams.doc;\n            documentData = rxCollection._crypter.decrypt(documentData);\n        }\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        if (!rxCollection) {\n            previousDocumentData = rxStorageChangeEvent.change.previous;\n        } else {\n\n            const hookParams = {\n                collection: rxCollection,\n                doc: rxStorageChangeEvent.change.previous as any\n            };\n            runPluginHooks('postReadFromInstance', hookParams);\n            previousDocumentData = hookParams.doc;\n            previousDocumentData = rxCollection._crypter.decrypt(previousDocumentData);\n        }\n    }\n\n\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        databaseToken: rxDatabase.token,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData)\n    };\n\n    return ret;\n}\n"]}