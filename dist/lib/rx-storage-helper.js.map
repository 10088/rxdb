{"version":3,"sources":["../../src/rx-storage-helper.ts"],"names":["writeSingle","instance","writeRow","bulkWrite","writeResult","Object","keys","error","length","ret","success","getSingleDocument","storageInstance","documentId","findDocumentsById","results","doc","getAllDocuments","primaryKey","storage","getAllQueryPrepared","statics","prepareQuery","schema","selector","sort","query","queryResult","allDocs","documents","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","change","operation","previousDocumentData","previous","eventId","collectionName","name","undefined","startTime","endTime","overwritable","deepFreezeWhenDevMode","throwIfIsStorageWriteError","collection","writeData","status","id","pouchDbError","data","hashAttachmentData","attachmentBase64String","storageStatics","hash","atob","getAttachmentSize","getWrappedStorageInstance","database","rxJsonSchema","primaryPath","transformDocumentDataFromRxDBToRxStorage","document","_meta","isDevMode","lwt","Date","getTime","hookParams","_rev","transformDocumentDataFromRxStorageToRxDB","internals","databaseName","options","rows","toStorageWriteRows","map","row","lockedRun","then","entries","forEach","k","v","preparedQuery","ids","deleted","findResult","key","getAttachmentData","attachmentId","getChangedDocuments","remove","close","changeStream","pipe","eventBulk","events","event"],"mappings":"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","sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { map } from 'rxjs/operators';\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport { fillPrimaryKey, getPrimaryFieldOfPrimaryKey } from './rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    ChangeStreamOnceOptions,\n    EventBulk,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageStatics\n} from './types';\nimport { clone, createRevision, firstPropertyValueOfObject, flatClone } from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\n/**\n * Returns all non-deleted documents\n * of the storage.\n */\nexport async function getAllDocuments<RxDocType>(\n    primaryKey: keyof RxDocType,\n    storage: RxStorage<any, any>,\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [primaryKey]: 'asc' } as any]\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    let documentData;\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        documentData = rxStorageChangeEvent.change.doc;\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        previousDocumentData = rxStorageChangeEvent.change.previous;\n    }\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData as any),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData as any)\n    };\n    return ret;\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageBulkWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('COL19', {\n                collection: collection.name,\n                id: documentId,\n                pouchDbError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\nexport function hashAttachmentData(\n    attachmentBase64String: string,\n    storageStatics: RxStorageStatics\n): Promise<string> {\n    return storageStatics.hash(atob(attachmentBase64String));\n}\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\n\nexport function getWrappedStorageInstance<RxDocType, Internals, InstanceCreationOptions>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocType>\n): RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n    const primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n\n    function transformDocumentDataFromRxDBToRxStorage(\n        writeRow: BulkWriteRow<RxDocType>\n    ) {\n        let data = flatClone(writeRow.document);\n        data._meta = flatClone(data._meta);\n\n        // ensure primary key has not been changed\n        if (overwritable.isDevMode()) {\n            data = fillPrimaryKey(\n                primaryPath,\n                rxJsonSchema,\n                data as any\n            );\n        }\n\n        data._meta.lwt = new Date().getTime();\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n\n        /**\n         * Run the hooks once for the previous doc,\n         * once for the new write data\n         */\n        let previous = writeRow.previous;\n        if (previous) {\n            hookParams.doc = previous;\n            runPluginHooks('preWriteToStorageInstance', hookParams);\n            previous = hookParams.doc;\n        }\n\n        hookParams.doc = data;\n        runPluginHooks('preWriteToStorageInstance', hookParams);\n        data = hookParams.doc;\n\n        /**\n         * Update the revision after the hooks have run.\n         * Do not update the revision if no previous is given,\n         * because the migration plugin must be able to do an insert\n         * with a pre-created revision.\n         */\n        if (\n            writeRow.previous ||\n            !data._rev\n        ) {\n            data._rev = createRevision(data, writeRow.previous);\n        }\n\n        return {\n            document: data,\n            previous\n        };\n    }\n\n    function transformDocumentDataFromRxStorageToRxDB(\n        data: any\n    ): any {\n        const hookParams = {\n            database,\n            primaryPath,\n            schema: rxJsonSchema,\n            doc: data\n        };\n\n        runPluginHooks('postReadFromInstance', hookParams);\n        return hookParams.doc;\n    }\n\n    const ret: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(rows: BulkWriteRow<RxDocType>[]) {\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = rows\n                .map(row => transformDocumentDataFromRxDBToRxStorage(row));\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    clone(toStorageWriteRows)\n                )\n            ).then(writeResult => {\n                const ret: RxStorageBulkWriteResponse<RxDocType> = {\n                    success: {},\n                    error: {}\n                };\n                Object.entries(writeResult.error).forEach(([k, v]) => {\n                    ret.error[k] = v;\n                });\n                Object.entries(writeResult.success).forEach(([k, v]) => {\n                    ret.success[k] = transformDocumentDataFromRxStorageToRxDB(v);\n                });\n\n                return ret;\n            });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            ).then(queryResult => {\n                return {\n                    documents: queryResult.documents.map(doc => transformDocumentDataFromRxStorageToRxDB(doc))\n                };\n            });\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            ).then(findResult => {\n                const ret: { [documentId: string]: RxDocumentData<RxDocType>; } = {};\n                Object.entries(findResult).forEach(([key, doc]) => {\n                    ret[key] = transformDocumentDataFromRxStorageToRxDB(doc);\n                });\n                return ret;\n            });\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId)\n            );\n        },\n        getChangedDocuments(options: ChangeStreamOnceOptions) {\n            return database.lockedRun(\n                () => storageInstance.getChangedDocuments(options)\n            );\n        },\n        remove() {\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream().pipe(\n                map(eventBulk => {\n                    const ret: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n                        id: eventBulk.id,\n                        events: eventBulk.events.map(event => {\n                            return {\n                                eventId: event.eventId,\n                                documentId: event.documentId,\n                                endTime: event.endTime,\n                                startTime: event.startTime,\n                                change: {\n                                    id: event.change.id,\n                                    operation: event.change.operation,\n                                    doc: event.change.doc ? transformDocumentDataFromRxStorageToRxDB(event.change.doc) : undefined,\n                                    previous: event.change.previous ? transformDocumentDataFromRxStorageToRxDB(event.change.previous) : undefined\n                                }\n                            }\n\n                        })\n                    };\n                    return ret;\n                })\n            )\n        }\n    };\n    return ret;\n}\n"],"file":"rx-storage-helper.js"}