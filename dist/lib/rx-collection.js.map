{"version":3,"file":"rx-collection.js","names":["HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","defaultCacheReplacementPolicy","statics","conflictHandler","defaultConflictHandler","storageInstance","timeouts","Set","_atomicUpsertQueues","Map","synced","hooks","_subs","_docCache","DocCache","_queryCache","createQueryCache","$","_changeEventBuffer","onDestroy","destroyed","_applyHookFunctions","asRxCollection","prepare","getWrappedStorageInstance","jsonSchema","eventBulks$","pipe","filter","changeEventBulk","collectionName","mergeMap","events","createChangeEventBuffer","storageToken","databaseStorageToken","subDocs","changeStream","subscribe","eventBulk","id","internal","map","ev","storageChangeEventToRxChangeEvent","databaseToken","token","checkpoint","context","$emit","push","cE","isLocal","doc","get","documentId","_handleChangeEvent","conflictResultionTasks","task","input","then","output","resolveConflictResultionTask","PROMISE_RESOLVE_VOID","migrationNeeded","pluginMissing","getDataMigrator","migrate","batchSize","migratePromise","insert","json","useJson","fillObjectDataBeforeInsert","bulkInsert","writeResult","isError","error","throwIfIsStorageWriteError","primaryPath","insertResult","ensureNotFalsy","success","docsData","docs","docsMap","insertRows","set","docData","Object","assign","_attachments","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_deleted","row","document","bulkWrite","results","rxDocuments","values","successDocData","writtenDocData","createRxDocument","hasHooks","Promise","all","_runHooks","primary","length","useDocs","useDocData","bulkRemove","ids","findByIds","rxDocumentMap","Array","from","forEach","rxDocument","data","clone","toJSON","removeDocs","writeDoc","flatClone","previous","successIds","keys","bulkUpsert","insertData","useJsonByDocId","newRxError","ret","slice","writeData","getFromMapOrThrow","docDataInDb","documentInDb","atomicUpdate","updatedDocs","concat","upsert","result","atomicUpsert","queue","_atomicUpsertEnsureRxDocumentExists","wasInserted","inserted","_atomicUpsertUpdate","find","queryObj","_getDefaultQuery","query","createRxQuery","findOne","selector","limit","isArray","newRxTypeError","mustBeQueried","findDocumentsById","findByIds$","currentValue","lastChangeEvent","initialPromise","counter","firstEmitDone","startWith","changeEvent","includes","missedChangeEvents","getFrom","newResult","resultHasChanged","rxChangeEvent","docId","op","operation","documentData","has","x","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","exportJSON","importJSON","_exportedJSON","syncCouchDB","_syncOptions","syncGraphQL","_options","addHook","when","key","fun","parallel","boundFun","bind","runName","series","getHooks","instance","tasks","hook","promiseSeries","_runHooksSync","promiseWait","time","res","timeout","setTimeout","add","destroy","PROMISE_RESOLVE_FALSE","clearTimeout","requestIdlePromise","fn","close","sub","unsubscribe","collections","runAsyncPluginHooks","remove","removeCollectionStorages","storage","internalStore","hashFunction","collection","colProto","getPrototypeOf","fnName","ucfirst","_innerDoc","nextTick","rxCollection","docFromCache","resolve","exec","newDoc","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","multiInstance","password","runPluginHooks","createRxCollectionStorageInstance","entries","funName","defineProperty","version","creator","err","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\n    filter,\n    startWith,\n    mergeMap,\n    shareReplay\n} from 'rxjs/operators';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    clone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    getDefaultRxDocumentMeta,\n    getDefaultRevision,\n    nextTick\n} from './util';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstance,\n    removeCollectionStorages\n} from './rx-collection-helper';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport type {\n    DataMigrator\n} from './plugins/migration';\nimport {\n    DocCache\n} from './doc-cache';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCouchDBReplicationState,\n    MigrationState,\n    SyncOptions,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    SyncOptionsGraphQL,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageBulkWriteError,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageInstanceCreationParams,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData,\n    RxDocumentBase,\n    RxConflictHandler,\n    MaybePromise\n} from './types';\nimport type {\n    RxGraphQLReplicationState\n} from './plugins/replication-graphql';\n\nimport {\n    RxSchema\n} from './rx-schema';\n\nimport {\n    createRxDocument\n} from './rx-document-prototype-merge';\nimport {\n    getWrappedStorageInstance,\n    storageChangeEventToRxChangeEvent,\n    throwIfIsStorageWriteError\n} from './rx-storage-helper';\nimport { defaultConflictHandler } from './replication-protocol';\n\nconst HOOKS_WHEN = ['pre', 'post'] as const;\ntype HookWhenType = typeof HOOKS_WHEN[number];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\ntype HookKeyType = typeof HOOKS_KEYS[number];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any }\n    > {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: KeyFunctionMap = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {},\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    public _atomicUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: {\n        [key in HookKeyType]: {\n            [when in HookWhenType]: {\n                series: Function[];\n                parallel: Function[];\n            };\n        }\n    } = {} as any;\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocCache<\n        RxDocument<RxDocumentType, OrmMethods>\n    > = new DocCache();\n\n    public _queryCache: QueryCache = createQueryCache();\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer = {} as ChangeEventBuffer;\n\n\n\n    /**\n     * When the collection is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed = false;\n\n    public async prepare(): Promise<void> {\n        this.storageInstance = getWrappedStorageInstance(\n            this.database,\n            this.internalStorageInstance,\n            this.schema.jsonSchema\n        );\n\n        this.$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this._changeEventBuffer = createChangeEventBuffer(this.asRxCollection);\n\n        /**\n         * Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const databaseStorageToken = await this.database.storageToken;\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: databaseStorageToken,\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    false,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token,\n                checkpoint: eventBulk.checkpoint,\n                context: eventBulk.context\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subDocs);\n\n        /**\n         * When a write happens to the collection\n         * we find the changed document in the docCache\n         * and tell it that it has to change its data.\n         */\n        this._subs.push(\n            this.$\n                .pipe(\n                    filter((cE: RxChangeEvent<RxDocumentType>) => !cE.isLocal)\n                )\n                .subscribe(cE => {\n                    // when data changes, send it to RxDocument in docCache\n                    const doc = this._docCache.get(cE.documentId);\n                    if (doc) {\n                        doc._handleChangeEvent(cE);\n                    }\n                })\n        );\n\n        /**\n         * Resolve the conflict tasks\n         * of the RxStorageInstance\n         */\n        this._subs.push(\n            this.storageInstance\n                .conflictResultionTasks()\n                .subscribe(task => {\n                    this\n                        .conflictHandler(task.input, task.context)\n                        .then(output => {\n                            this.storageInstance.resolveConflictResultionTask({\n                                id: task.id,\n                                output\n                            });\n                        });\n                })\n        );\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n\n    // overwritte by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration');\n    }\n    getDataMigrator(): DataMigrator {\n        throw pluginMissing('migration');\n    }\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        return this.getDataMigrator().migrate(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getDataMigrator().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson: RxDocumentWriteData<RxDocumentType> = fillObjectDataBeforeInsert(this.schema, json);\n        const writeResult = await this.bulkInsert([useJson]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, useJson[this.schema.primaryPath] as any, json, isError);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n        return insertResult;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const useDocs = docsData.map(docData => {\n            const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n            return useDocData;\n        });\n        const docs = this.hasHooks('pre', 'insert') ?\n            await Promise.all(\n                useDocs.map(doc => {\n                    return this._runHooks('pre', 'insert', doc)\n                        .then(() => {\n                            return doc;\n                        });\n                })\n            ) : useDocs;\n        const docsMap: Map<string, RxDocumentType> = new Map();\n        const insertRows: BulkWriteRow<RxDocumentType>[] = docs.map(doc => {\n            docsMap.set((doc as any)[this.schema.primaryPath] as any, doc);\n            const docData = Object.assign(doc, {\n                _attachments: {},\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _deleted: false\n            });\n            const row: BulkWriteRow<RxDocumentType> = { document: docData };\n            return row;\n        });\n        const results = await this.storageInstance.bulkWrite(\n            insertRows,\n            'rx-collection-bulk-insert'\n        );\n\n        // create documents\n        const successDocData: RxDocumentData<RxDocumentType>[] = Object.values(results.success);\n        const rxDocuments: any[] = successDocData\n            .map((writtenDocData) => {\n                const doc = createRxDocument(this as any, writtenDocData);\n                return doc;\n            });\n\n        if (this.hasHooks('post', 'insert')) {\n            await Promise.all(\n                rxDocuments.map(doc => {\n                    return this._runHooks(\n                        'post', 'insert',\n                        docsMap.get(doc.primary),\n                        doc\n                    );\n                })\n            );\n        }\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids);\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = clone(rxDocument.toJSON(true)) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n\n\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(\n            removeDocs,\n            'rx-collection-bulk-remove'\n        );\n\n        const successIds: string[] = Object.keys(results.success);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments: any[] = successIds.map(id => {\n            return rxDocumentMap.get(id);\n        });\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    /**\n     * same as bulkInsert but overwrites existing document with same primary\n     */\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<RxDocument<RxDocumentType, OrmMethods>[]> {\n        const insertData: RxDocumentType[] = [];\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\n        docsData.forEach(docData => {\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\n            const primary: string = useJson[this.schema.primaryPath] as any;\n            if (!primary) {\n                throw newRxError('COL3', {\n                    primaryPath: this.schema.primaryPath as string,\n                    data: useJson,\n                    schema: this.schema.jsonSchema\n                });\n            }\n            useJsonByDocId.set(primary, useJson);\n            insertData.push(useJson);\n        });\n\n        const insertResult = await this.bulkInsert(insertData);\n        let ret = insertResult.success.slice(0);\n        const updatedDocs = await Promise.all(\n            insertResult.error.map(error => {\n                const id = error.documentId;\n                const writeData = getFromMapOrThrow(useJsonByDocId, id);\n                const docDataInDb = ensureNotFalsy(error.documentInDb);\n                const doc = createRxDocument(this.asRxCollection, docDataInDb);\n                return doc.atomicUpdate(() => writeData);\n            })\n        );\n        ret = ret.concat(updatedDocs);\n        return ret;\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        return this.bulkUpsert([json]).then(result => result[0]);\n    }\n\n    /**\n     * upserts to a RxDocument, uses atomicUpdate if document already exists\n     */\n    atomicUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\n        const primary: string = useJson[this.schema.primaryPath] as any;\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it wont try 2 parallel runs\n        let queue = this._atomicUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _atomicUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted) => {\n                if (!wasInserted.inserted) {\n                    return _atomicUpsertUpdate(wasInserted.doc, useJson)\n                        .then(() => wasInserted.doc);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._atomicUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[]\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(queryObj?: MangoQueryNoLimit<RxDocumentType> | string): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>\n        | null\n    > {\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries because it will be overwritte\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            (queryObj as any).limit = 1;\n            query = createRxQuery('findOne', queryObj, this as any);\n        }\n\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    async findByIds(\n        ids: string[]\n    ): Promise<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n\n        const ret = new Map();\n        const mustBeQueried: string[] = [];\n\n        // first try to fill from docCache\n        ids.forEach(id => {\n            const doc = this._docCache.get(id);\n            if (doc) {\n                ret.set(id, doc);\n            } else {\n                mustBeQueried.push(id);\n            }\n        });\n\n        // find everything which was not in docCache\n        if (mustBeQueried.length > 0) {\n            const docs = await this.storageInstance.findDocumentsById(mustBeQueried, false);\n            Object.values(docs).forEach(docData => {\n                const doc = createRxDocument<RxDocumentType, OrmMethods>(this as any, docData);\n                ret.set(doc.primary, doc);\n            });\n        }\n        return ret;\n    }\n\n    /**\n     * like this.findByIds but returns an observable\n     * that always emits the current state\n     */\n    findByIds$(\n        ids: string[]\n    ): Observable<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n        let currentValue: Map<string, RxDocument<RxDocumentType, OrmMethods>> | null = null;\n        let lastChangeEvent: number = -1;\n\n        /**\n         * Ensure we do not process events in parallel\n         */\n        let queue: Promise<any> = PROMISE_RESOLVE_VOID;\n\n        const initialPromise = this.findByIds(ids).then(docsMap => {\n            lastChangeEvent = this._changeEventBuffer.counter;\n            currentValue = docsMap;\n        });\n        let firstEmitDone = false;\n\n        return this.$.pipe(\n            startWith(null),\n            /**\n             * Optimization shortcut.\n             * Do not proceed if the emited RxChangeEvent\n             * is not relevant for the query.\n             */\n            filter(changeEvent => {\n                if (\n                    // first emit has no event\n                    changeEvent &&\n                    (\n                        // local documents are not relevant for the query\n                        changeEvent.isLocal ||\n                        // document of the change is not in the ids list.\n                        !ids.includes(changeEvent.documentId)\n                    )\n                ) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }),\n            mergeMap(() => initialPromise),\n            /**\n             * Because shareReplay with refCount: true\n             * will often subscribe/unsusbscribe\n             * we always ensure that we handled all missed events\n             * since the last subscription.\n             */\n            mergeMap(() => {\n                queue = queue.then(async () => {\n                    /**\n                     * We first have to clone the Map\n                     * to ensure we do not create side effects by mutating\n                     * a Map that has already been returned before.\n                     */\n                    currentValue = new Map(ensureNotFalsy(currentValue));\n                    const missedChangeEvents = this._changeEventBuffer.getFrom(lastChangeEvent + 1);\n                    lastChangeEvent = this._changeEventBuffer.counter;\n                    if (missedChangeEvents === null) {\n                        /**\n                         * changeEventBuffer is of bounds -> we must re-execute over the database\n                         * because we cannot calculate the new results just from the events.\n                         */\n                        const newResult = await this.findByIds(ids);\n                        lastChangeEvent = this._changeEventBuffer.counter;\n                        return newResult;\n                    } else {\n                        let resultHasChanged = false;\n                        missedChangeEvents\n                            .forEach(rxChangeEvent => {\n                                const docId = rxChangeEvent.documentId;\n                                if (!ids.includes(docId)) {\n                                    // document is not relevant for the result set\n                                    return;\n                                }\n                                const op = rxChangeEvent.operation;\n                                if (op === 'INSERT' || op === 'UPDATE') {\n                                    resultHasChanged = true;\n                                    const rxDocument = createRxDocument(\n                                        this.asRxCollection,\n                                        rxChangeEvent.documentData\n                                    );\n                                    ensureNotFalsy(currentValue).set(docId, rxDocument);\n                                } else {\n                                    if (ensureNotFalsy(currentValue).has(docId)) {\n                                        resultHasChanged = true;\n                                        ensureNotFalsy(currentValue).delete(docId);\n                                    }\n                                }\n                            });\n\n                        // nothing happened that affects the result -> do not emit\n                        if (!resultHasChanged && firstEmitDone) {\n                            return false as any;\n                        }\n                    }\n                    firstEmitDone = true;\n                    return currentValue;\n                });\n                return queue;\n            }),\n            filter(x => !!x),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n        );\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     */\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * sync with a CouchDB endpoint\n     */\n    syncCouchDB(_syncOptions: SyncOptions): RxCouchDBReplicationState {\n        throw pluginMissing('replication');\n    }\n\n    /**\n     * sync with a GraphQL endpoint\n     */\n    syncGraphQL<CheckpointType = any>(_options: SyncOptionsGraphQL<RxDocumentType, CheckpointType>): RxGraphQLReplicationState<RxDocumentType, CheckpointType> {\n        throw pluginMissing('replication-graphql');\n    }\n\n    /**\n     * HOOKS\n     */\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: HookWhenType, key: HookKeyType) {\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n        return this.hooks[key][when];\n    }\n\n    hasHooks(when: HookWhenType, key: HookKeyType) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return false;\n        }\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\n    }\n\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is destroyed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * Settings destroyed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.destroyed = true;\n\n\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        /**\n         * First wait until the whole database is idle.\n         * This ensures that the storage does not get closed\n         * while some operation is running.\n         * It is important that we do not intercept a running call\n         * because it might lead to undefined behavior like when a doc is written\n         * but the change is not added to the changes collection.\n         */\n        return this.database.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            .then(() => this.storageInstance.close())\n            .then(() => {\n                /**\n                 * Unsubscribing must be done AFTER the storageInstance.close()\n                 * Because the conflict handling is part of the subscriptions and\n                 * otherwise there might be open conflicts to be resolved which\n                 * will then stuck and never resolve.\n                 */\n                this._subs.forEach(sub => sub.unsubscribe());\n\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    async remove(): Promise<any> {\n        await this.destroy();\n        await removeCollectionStorages(\n            this.database.storage,\n            this.database.internalStore,\n            this.database.token,\n            this.database.name,\n            this.name,\n            this.database.hashFunction\n        );\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _atomicUpsertUpdate<RxDocType>(\n    doc: RxDocumentBase<RxDocType>,\n    json: RxDocumentData<RxDocType>\n): Promise<RxDocumentBase<RxDocType>> {\n    return doc.atomicUpdate((_innerDoc: RxDocumentData<RxDocType>) => {\n        return json;\n    })\n        .then(() => nextTick())\n        .then(() => {\n            return doc;\n        });\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _atomicUpsertEnsureRxDocumentExists(\n    rxCollection: RxCollection,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument,\n        inserted: boolean\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docFromCache = rxCollection._docCache.get(primary);\n    if (docFromCache) {\n        return Promise.resolve({\n            doc: docFromCache,\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        localDocuments = false,\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\n        conflictHandler = defaultConflictHandler\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance,\n        password: database.password\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstance(\n        database,\n        storageInstanceCreationParams\n    ).then(storageInstance => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstance,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics,\n            conflictHandler\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', {\n                    collection,\n                    creator: {\n                        name,\n                        schema,\n                        storageInstance,\n                        instanceCreationOptions,\n                        migrationStrategies,\n                        methods,\n                        attachments,\n                        options,\n                        cacheReplacementPolicy,\n                        localDocuments,\n                        statics\n                    }\n                });\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return storageInstance.close()\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"mappings":"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"}