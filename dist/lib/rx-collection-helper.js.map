{"version":3,"file":"rx-collection-helper.js","names":["removeCollectionStorages","storage","databaseInternalStorage","databaseInstanceToken","databaseName","collectionName","hashFunction","getAllCollectionDocuments","statics","allCollectionMetaDocs","relevantCollectionMetaDocs","filter","metaDoc","data","name","removeStorages","forEach","push","schema","isCollection","connectedStorages","row","alreadyAdded","Set","key","version","has","add","Promise","all","map","createStorageInstance","multiInstance","options","storageInstance","remove","runAsyncPluginHooks","writeRows","doc","writeDoc","flatCloneDocWithMeta","_deleted","_meta","lwt","now","_rev","createRevision","previous","document","bulkWrite","createRxCollectionStorageInstance","rxDatabase","storageInstanceCreationParams","fillObjectDataBeforeInsert","useJson","fillObjectWithDefaults","fillPrimaryKey","primaryPath","jsonSchema","getDefaultRxDocumentMeta","hasOwnProperty","_attachments","getDefaultRevision"],"sources":["../../src/rx-collection-helper.ts"],"sourcesContent":["import type {\n    HashFunction,\n    InternalStoreDocType,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from './types';\nimport {\n    createRevision,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now\n} from './util';\nimport {\n    fillPrimaryKey\n} from './rx-schema-helper';\nimport type { RxSchema } from './rx-schema';\nimport { runAsyncPluginHooks } from './hooks';\nimport { getAllCollectionDocuments } from './rx-database-internal-store';\nimport { flatCloneDocWithMeta } from './rx-storage-helper';\n\n/**\n * fills in the default data.\n * This also clones the data.\n */\nexport function fillObjectDataBeforeInsert<RxDocType>(\n    schema: RxSchema<RxDocType>,\n    data: Partial<RxDocumentData<RxDocType>> | any\n): RxDocumentData<RxDocType> {\n    let useJson = schema.fillObjectWithDefaults(data);\n    useJson = fillPrimaryKey(\n        schema.primaryPath,\n        schema.jsonSchema,\n        useJson\n    );\n    useJson._meta = getDefaultRxDocumentMeta();\n    if (!useJson.hasOwnProperty('_deleted')) {\n        useJson._deleted = false;\n    }\n    if (!useJson.hasOwnProperty('_attachments')) {\n        useJson._attachments = {};\n    }\n    if (!useJson.hasOwnProperty('_rev')) {\n        useJson._rev = getDefaultRevision();\n    }\n    return useJson;\n}\n\n/**\n * Creates the storage instances that are used internally in the collection\n */\nexport async function createRxCollectionStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>(\n    rxDatabase: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstanceCreationParams: RxStorageInstanceCreationParams<RxDocumentType, InstanceCreationOptions>\n): Promise<RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>> {\n    storageInstanceCreationParams.multiInstance = rxDatabase.multiInstance;\n    const storageInstance = await rxDatabase.storage.createStorageInstance<RxDocumentType>(\n        storageInstanceCreationParams\n    );\n    return storageInstance;\n}\n\n/**\n * Removes the main storage of the collection\n * and all connected storages like the ones from the replication meta etc.\n */\nexport async function removeCollectionStorages(\n    storage: RxStorage<any, any>,\n    databaseInternalStorage: RxStorageInstance<InternalStoreDocType<any>, any, any>,\n    databaseInstanceToken: string,\n    databaseName: string,\n    collectionName: string,\n    /**\n     * If no hash function is provided,\n     * we assume that the whole internal store is removed anyway\n     * so we do not have to delete the meta documents.\n     */\n    hashFunction?: HashFunction,\n) {\n    const allCollectionMetaDocs = await getAllCollectionDocuments(\n        storage.statics,\n        databaseInternalStorage\n    );\n    const relevantCollectionMetaDocs = allCollectionMetaDocs\n        .filter(metaDoc => metaDoc.data.name === collectionName);\n\n    let removeStorages: {\n        collectionName: string;\n        schema: RxJsonSchema<any>;\n        isCollection: boolean;\n    }[] = [];\n    relevantCollectionMetaDocs.forEach(metaDoc => {\n        removeStorages.push({\n            collectionName: metaDoc.data.name,\n            schema: metaDoc.data.schema,\n            isCollection: true\n        });\n        metaDoc.data.connectedStorages.forEach(row => removeStorages.push({\n            collectionName: row.collectionName,\n            isCollection: false,\n            schema: row.schema\n        }));\n    });\n\n    // ensure uniqueness\n    const alreadyAdded = new Set<string>();\n    removeStorages = removeStorages.filter(row => {\n        const key = row.collectionName + '||' + row.schema.version;\n        if (alreadyAdded.has(key)) {\n            return false;\n        } else {\n            alreadyAdded.add(key);\n            return true;\n        }\n    });\n\n    // remove all the storages\n    await Promise.all(\n        removeStorages\n            .map(async (row) => {\n                const storageInstance = await storage.createStorageInstance<any>({\n                    collectionName: row.collectionName,\n                    databaseInstanceToken,\n                    databaseName,\n                    multiInstance: false,\n                    options: {},\n                    schema: row.schema\n                });\n                await storageInstance.remove();\n                if (row.isCollection) {\n                    await runAsyncPluginHooks('postRemoveRxCollection', {\n                        storage,\n                        databaseName: databaseName,\n                        collectionName\n                    });\n                }\n            })\n    );\n\n    // remove the meta documents\n    if (hashFunction) {\n        const writeRows = relevantCollectionMetaDocs.map(doc => {\n            const writeDoc = flatCloneDocWithMeta(doc);\n            writeDoc._deleted = true;\n            writeDoc._meta.lwt = now();\n            writeDoc._rev = createRevision(\n                hashFunction,\n                writeDoc,\n                doc\n            );\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        await databaseInternalStorage.bulkWrite(\n            writeRows,\n            'rx-database-remove-collection-all'\n        );\n    }\n}\n"],"mappings":";;;;;;;;;AAUA;;AAMA;;AAIA;;AACA;;AACA;;AA2CA;AACA;AACA;AACA;IACsBA,wB,YAAAA,wB,CAClBC,O,EACAC,uB,EACAC,qB,EACAC,Y,EACAC,c;AACA;AACJ;AACA;AACA;AACA;AACIC,Y;MACF;IAAA,uBACsC,IAAAC,kDAAA,EAChCN,OAAO,CAACO,OADwB,EAEhCN,uBAFgC,CADtC,iBACQO,qBADR;MAKE,IAAMC,0BAA0B,GAAGD,qBAAqB,CACnDE,MAD8B,CACvB,UAAAC,OAAO;QAAA,OAAIA,OAAO,CAACC,IAAR,CAAaC,IAAb,KAAsBT,cAA1B;MAAA,CADgB,CAAnC;MAGA,IAAIU,cAID,GAAG,EAJN;MAKAL,0BAA0B,CAACM,OAA3B,CAAmC,UAAAJ,OAAO,EAAI;QAC1CG,cAAc,CAACE,IAAf,CAAoB;UAChBZ,cAAc,EAAEO,OAAO,CAACC,IAAR,CAAaC,IADb;UAEhBI,MAAM,EAAEN,OAAO,CAACC,IAAR,CAAaK,MAFL;UAGhBC,YAAY,EAAE;QAHE,CAApB;QAKAP,OAAO,CAACC,IAAR,CAAaO,iBAAb,CAA+BJ,OAA/B,CAAuC,UAAAK,GAAG;UAAA,OAAIN,cAAc,CAACE,IAAf,CAAoB;YAC9DZ,cAAc,EAAEgB,GAAG,CAAChB,cAD0C;YAE9Dc,YAAY,EAAE,KAFgD;YAG9DD,MAAM,EAAEG,GAAG,CAACH;UAHkD,CAApB,CAAJ;QAAA,CAA1C;MAKH,CAXD,EAbF,CA0BE;;MACA,IAAMI,YAAY,GAAG,IAAIC,GAAJ,EAArB;MACAR,cAAc,GAAGA,cAAc,CAACJ,MAAf,CAAsB,UAAAU,GAAG,EAAI;QAC1C,IAAMG,GAAG,GAAGH,GAAG,CAAChB,cAAJ,GAAqB,IAArB,GAA4BgB,GAAG,CAACH,MAAJ,CAAWO,OAAnD;;QACA,IAAIH,YAAY,CAACI,GAAb,CAAiBF,GAAjB,CAAJ,EAA2B;UACvB,OAAO,KAAP;QACH,CAFD,MAEO;UACHF,YAAY,CAACK,GAAb,CAAiBH,GAAjB;UACA,OAAO,IAAP;QACH;MACJ,CARgB,CAAjB,CA5BF,CAsCE;;MAtCF,uBAuCQI,OAAO,CAACC,GAAR,CACFd,cAAc,CACTe,GADL,WACgBT,GADhB;QAAA,IACwB;UAAA,uBACcpB,OAAO,CAAC8B,qBAAR,CAAmC;YAC7D1B,cAAc,EAAEgB,GAAG,CAAChB,cADyC;YAE7DF,qBAAqB,EAArBA,qBAF6D;YAG7DC,YAAY,EAAZA,YAH6D;YAI7D4B,aAAa,EAAE,KAJ8C;YAK7DC,OAAO,EAAE,EALoD;YAM7Df,MAAM,EAAEG,GAAG,CAACH;UANiD,CAAnC,CADd,iBACVgB,eADU;YAAA,uBASVA,eAAe,CAACC,MAAhB,EATU;cAAA;gBAAA,IAUZd,GAAG,CAACF,YAVQ;kBAAA,uBAWN,IAAAiB,0BAAA,EAAoB,wBAApB,EAA8C;oBAChDnC,OAAO,EAAPA,OADgD;oBAEhDG,YAAY,EAAEA,YAFkC;oBAGhDC,cAAc,EAAdA;kBAHgD,CAA9C,CAXM;gBAAA;cAAA;;cAAA;YAAA;UAAA;QAiBnB,CAlBL;UAAA;QAAA;MAAA,EADE,CAvCR;QAAA;UAAA,IA8DMC,YA9DN;YA+DM,IAAM+B,SAAS,GAAG3B,0BAA0B,CAACoB,GAA3B,CAA+B,UAAAQ,GAAG,EAAI;cACpD,IAAMC,QAAQ,GAAG,IAAAC,qCAAA,EAAqBF,GAArB,CAAjB;cACAC,QAAQ,CAACE,QAAT,GAAoB,IAApB;cACAF,QAAQ,CAACG,KAAT,CAAeC,GAAf,GAAqB,IAAAC,SAAA,GAArB;cACAL,QAAQ,CAACM,IAAT,GAAgB,IAAAC,oBAAA,EACZxC,YADY,EAEZiC,QAFY,EAGZD,GAHY,CAAhB;cAKA,OAAO;gBACHS,QAAQ,EAAET,GADP;gBAEHU,QAAQ,EAAET;cAFP,CAAP;YAIH,CAbiB,CAAlB;YA/DN,uBA6EYrC,uBAAuB,CAAC+C,SAAxB,CACFZ,SADE,EAEF,mCAFE,CA7EZ;UAAA;QAAA;;QAAA;MAAA,IA6DE;IA7DF;EAkFD,C;;;;;;;AAhHD;AACA;AACA;IACsBa,iC,YAAAA,iC,CAClBC,U,EACAC,6B;MAC8E;IAC9EA,6BAA6B,CAACpB,aAA9B,GAA8CmB,UAAU,CAACnB,aAAzD;IAD8E,uBAEhDmB,UAAU,CAAClD,OAAX,CAAmB8B,qBAAnB,CAC1BqB,6BAD0B,CAFgD;EAMjF,C;;;;;;;AAvCD;AACA;AACA;AACA;AACO,SAASC,0BAAT,CACHnC,MADG,EAEHL,IAFG,EAGsB;EACzB,IAAIyC,OAAO,GAAGpC,MAAM,CAACqC,sBAAP,CAA8B1C,IAA9B,CAAd;EACAyC,OAAO,GAAG,IAAAE,8BAAA,EACNtC,MAAM,CAACuC,WADD,EAENvC,MAAM,CAACwC,UAFD,EAGNJ,OAHM,CAAV;EAKAA,OAAO,CAACZ,KAAR,GAAgB,IAAAiB,8BAAA,GAAhB;;EACA,IAAI,CAACL,OAAO,CAACM,cAAR,CAAuB,UAAvB,CAAL,EAAyC;IACrCN,OAAO,CAACb,QAAR,GAAmB,KAAnB;EACH;;EACD,IAAI,CAACa,OAAO,CAACM,cAAR,CAAuB,cAAvB,CAAL,EAA6C;IACzCN,OAAO,CAACO,YAAR,GAAuB,EAAvB;EACH;;EACD,IAAI,CAACP,OAAO,CAACM,cAAR,CAAuB,MAAvB,CAAL,EAAqC;IACjCN,OAAO,CAACT,IAAR,GAAe,IAAAiB,wBAAA,GAAf;EACH;;EACD,OAAOR,OAAP;AACH"}