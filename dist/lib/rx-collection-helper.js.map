{"version":3,"file":"rx-collection-helper.js","names":["removeCollectionStorages","storage","databaseInternalStorage","databaseInstanceToken","databaseName","collectionName","hashFunction","getAllCollectionDocuments","statics","allCollectionMetaDocs","relevantCollectionMetaDocs","filter","metaDoc","data","name","removeStorages","forEach","push","schema","isCollection","connectedStorages","row","alreadyAdded","Set","key","version","has","add","Promise","all","map","createStorageInstance","multiInstance","options","storageInstance","remove","runAsyncPluginHooks","writeRows","doc","writeDoc","flatCloneDocWithMeta","_deleted","_meta","lwt","now","_rev","createRevision","previous","document","bulkWrite","createRxCollectionStorageInstance","rxDatabase","storageInstanceCreationParams","fillObjectDataBeforeInsert","useJson","fillObjectWithDefaults","fillPrimaryKey","primaryPath","jsonSchema","getDefaultRxDocumentMeta","hasOwnProperty","_attachments","getDefaultRevision"],"sources":["../../src/rx-collection-helper.ts"],"sourcesContent":["import type {\n    HashFunction,\n    InternalStoreDocType,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from './types';\nimport {\n    createRevision,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now\n} from './util';\nimport {\n    fillPrimaryKey\n} from './rx-schema-helper';\nimport type { RxSchema } from './rx-schema';\nimport { runAsyncPluginHooks } from './hooks';\nimport { getAllCollectionDocuments } from './rx-database-internal-store';\nimport { flatCloneDocWithMeta } from './rx-storage-helper';\n\n/**\n * fills in the default data.\n * This also clones the data.\n */\nexport function fillObjectDataBeforeInsert<RxDocType>(\n    schema: RxSchema<RxDocType>,\n    data: Partial<RxDocumentData<RxDocType>> | any\n): RxDocumentData<RxDocType> {\n    let useJson = schema.fillObjectWithDefaults(data);\n    useJson = fillPrimaryKey(\n        schema.primaryPath,\n        schema.jsonSchema,\n        useJson\n    );\n    useJson._meta = getDefaultRxDocumentMeta();\n    if (!useJson.hasOwnProperty('_deleted')) {\n        useJson._deleted = false;\n    }\n    if (!useJson.hasOwnProperty('_attachments')) {\n        useJson._attachments = {};\n    }\n    if (!useJson.hasOwnProperty('_rev')) {\n        useJson._rev = getDefaultRevision();\n    }\n    return useJson;\n}\n\n/**\n * Creates the storage instances that are used internally in the collection\n */\nexport async function createRxCollectionStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>(\n    rxDatabase: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstanceCreationParams: RxStorageInstanceCreationParams<RxDocumentType, InstanceCreationOptions>\n): Promise<RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>> {\n    storageInstanceCreationParams.multiInstance = rxDatabase.multiInstance;\n    const storageInstance = await rxDatabase.storage.createStorageInstance<RxDocumentType>(\n        storageInstanceCreationParams\n    );\n    return storageInstance;\n}\n\n/**\n * Removes the main storage of the collection\n * and all connected storages like the ones from the replication meta etc.\n */\nexport async function removeCollectionStorages(\n    storage: RxStorage<any, any>,\n    databaseInternalStorage: RxStorageInstance<InternalStoreDocType<any>, any, any>,\n    databaseInstanceToken: string,\n    databaseName: string,\n    collectionName: string,\n    /**\n     * If no hash function is provided,\n     * we assume that the whole internal store is removed anyway\n     * so we do not have to delete the meta documents.\n     */\n    hashFunction?: HashFunction,\n) {\n    const allCollectionMetaDocs = await getAllCollectionDocuments(\n        storage.statics,\n        databaseInternalStorage\n    );\n    const relevantCollectionMetaDocs = allCollectionMetaDocs\n        .filter(metaDoc => metaDoc.data.name === collectionName);\n\n    let removeStorages: {\n        collectionName: string;\n        schema: RxJsonSchema<any>;\n        isCollection: boolean;\n    }[] = [];\n    relevantCollectionMetaDocs.forEach(metaDoc => {\n        removeStorages.push({\n            collectionName: metaDoc.data.name,\n            schema: metaDoc.data.schema,\n            isCollection: true\n        });\n        metaDoc.data.connectedStorages.forEach(row => removeStorages.push({\n            collectionName: row.collectionName,\n            isCollection: false,\n            schema: row.schema\n        }));\n    });\n\n    // ensure uniqueness\n    const alreadyAdded = new Set<string>();\n    removeStorages = removeStorages.filter(row => {\n        const key = row.collectionName + '||' + row.schema.version;\n        if (alreadyAdded.has(key)) {\n            return false;\n        } else {\n            alreadyAdded.add(key);\n            return true;\n        }\n    });\n\n    // remove all the storages\n    await Promise.all(\n        removeStorages\n            .map(async (row) => {\n                const storageInstance = await storage.createStorageInstance<any>({\n                    collectionName: row.collectionName,\n                    databaseInstanceToken,\n                    databaseName,\n                    multiInstance: false,\n                    options: {},\n                    schema: row.schema\n                });\n                await storageInstance.remove();\n                if (row.isCollection) {\n                    await runAsyncPluginHooks('postRemoveRxCollection', {\n                        storage,\n                        databaseName: databaseName,\n                        collectionName\n                    });\n                }\n            })\n    );\n\n    // remove the meta documents\n    if (hashFunction) {\n        const writeRows = relevantCollectionMetaDocs.map(doc => {\n            const writeDoc = flatCloneDocWithMeta(doc);\n            writeDoc._deleted = true;\n            writeDoc._meta.lwt = now();\n            writeDoc._rev = createRevision(\n                hashFunction,\n                writeDoc,\n                doc\n            );\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        await databaseInternalStorage.bulkWrite(\n            writeRows,\n            'rx-database-remove-collection-all'\n        );\n    }\n}\n"],"mappings":"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"}