{"version":3,"sources":["../../src/rx-collection-helper.ts"],"names":[],"mappings":"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","file":"rx-collection-helper.js","sourcesContent":["import type {\n    BulkWriteRow,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxStorageBulkWriteError,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageKeyObjectInstance\n} from './types';\nimport {\n    flatClone\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport { runPluginHooks } from './hooks';\nimport { getSingleDocument, writeSingle } from './rx-storage-helper';\nimport { RxCollectionBase } from './rx-collection';\nimport { overwritable } from './overwritable';\n\n\n/**\n * Every write access on the storage engine,\n * goes throught this method\n * so we can run hooks and resolve stuff etc.\n */\nexport async function writeToStorageInstance<RxDocumentType>(\n    collection: RxCollection<RxDocumentType, any> | RxCollectionBase<any, RxDocumentType, any>,\n    writeRow: BulkWriteRow<RxDocumentType>,\n    overwrite: boolean = false\n): Promise<\n    RxDocumentData<RxDocumentType>\n> {\n    const toStorageInstance: BulkWriteRow<any> = {\n        previous: writeRow.previous ? _handleToStorageInstance(collection, flatClone(writeRow.previous)) : undefined,\n        document: _handleToStorageInstance(collection, flatClone(writeRow.document))\n    };\n\n    while (true) {\n        try {\n            const writeResult = await collection.database.lockedRun(\n                () => writeSingle(\n                    collection.storageInstance,\n                    toStorageInstance\n                )\n            );\n            // on success, just return the result\n\n            const ret = _handleFromStorageInstance(collection, writeResult);\n            return ret;\n        } catch (err: any) {\n            const useErr: RxStorageBulkWriteError<RxDocumentType> = err as any;\n            const primary = useErr.documentId;\n            if (overwrite && useErr.status === 409) {\n                // we have a conflict but must overwrite\n                // so get the new revision\n                const singleRes = await collection.database.lockedRun(\n                    () => getSingleDocument(collection.storageInstance, primary)\n                );\n                if (!singleRes) {\n                    throw newRxError('SNH', { args: { writeRow } });\n                }\n                toStorageInstance.previous = singleRes;\n                // now we can retry\n            } else if (useErr.status === 409) {\n                throw newRxError('COL19', {\n                    collection: collection.name,\n                    id: primary,\n                    pouchDbError: useErr,\n                    data: writeRow\n                });\n            } else {\n                throw useErr;\n            }\n        }\n    }\n}\n\n/**\n * wrappers to process document data beofre/after it goes to the storage instnace.\n * Used to handle keycompression, encryption etc\n */\nexport function _handleToStorageInstance(\n    col: RxCollection | RxCollectionBase<any, any, any>,\n    data: any\n) {\n    // ensure primary key has not been changed\n    if (overwritable.isDevMode()) {\n        col.schema.fillPrimaryKey(data);\n    }\n\n    data = (col._crypter as any).encrypt(data);\n\n    const hookParams = {\n        collection: col,\n        doc: data\n    };\n    runPluginHooks('preWriteToStorageInstance', hookParams);\n\n    return hookParams.doc;\n}\n\nexport function _handleFromStorageInstance(\n    col: RxCollection | RxCollectionBase<any, any, any>,\n    data: any,\n    noDecrypt = false\n) {\n\n    const hookParams = {\n        collection: col,\n        doc: data\n    };\n    runPluginHooks('postReadFromInstance', hookParams);\n\n    if (noDecrypt) {\n        return hookParams.doc;\n    }\n\n    return (col._crypter as any).decrypt(hookParams.doc);\n}\n\n/**\n * fills in the default data.\n * This also clones the data.\n */\nexport function fillObjectDataBeforeInsert(\n    collection: RxCollection | RxCollectionBase<any>,\n    data: any\n): any {\n    let useJson = collection.schema.fillObjectWithDefaults(data);\n    useJson = collection.schema.fillPrimaryKey(useJson);\n\n    return useJson;\n}\n\n\nexport function getCollectionLocalInstanceName(collectionName: string): string {\n    return collectionName + '-local';\n}\n\n/**\n * Creates the storage instances that are used internally in the collection\n */\nexport async function createRxCollectionStorageInstances<RxDocumentType, Internals, InstanceCreationOptions>(\n    collectionName: string,\n    rxDatabase: RxDatabase,\n    storageInstanceCreationParams: RxStorageInstanceCreationParams<RxDocumentType, InstanceCreationOptions>,\n    instanceCreationOptions: InstanceCreationOptions\n): Promise<{\n    storageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>,\n    localDocumentsStore: RxStorageKeyObjectInstance<any, InstanceCreationOptions>\n}> {\n\n    storageInstanceCreationParams.broadcastChannel = rxDatabase.broadcastChannel;\n\n    const [\n        storageInstance,\n        localDocumentsStore\n    ] = await Promise.all([\n        rxDatabase.storage.createStorageInstance<RxDocumentType>(\n            storageInstanceCreationParams\n        ),\n        rxDatabase.storage.createKeyObjectStorageInstance({\n            databaseName: rxDatabase.name,\n            /**\n             * Use a different collection name for the local documents instance\n             * so that the local docs can be kept while deleting the normal instance\n             * after migration.\n             */\n            collectionName: getCollectionLocalInstanceName(collectionName),\n            options: instanceCreationOptions,\n            idleQueue: rxDatabase.idleQueue,\n            broadcastChannel: rxDatabase.broadcastChannel\n        })\n    ]);\n\n    return {\n        storageInstance,\n        localDocumentsStore\n    };\n}\n"]}