{"version":3,"file":"upstream.js","names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","startReplicationUpstream","persistToMaster","docs","checkpoint","stats","up","forEach","docData","docId","primaryPath","nonPersistedFromMaster","persistenceQueue","events","canceled","getValue","upDocsById","useCheckpoint","docIds","Object","keys","length","getAssumedMasterState","assumedMasterState","writeRowsToMaster","writeRowsToMasterIds","writeRowsToMeta","forkStateById","Promise","all","map","isEqual","push","assumedMasterDoc","undefined","newDocumentState","getMetaWriteRow","metaDocument","fullDocData","writeDocToDocState","isResolvedConflict","_rev","input","conflictHandler","realMasterState","replicationHandler","masterWrite","values","masterWriteResult","checkpointQueue","setCheckpoint","hadConflictWrites","conflictIds","size","persistToMasterHadConflicts","conflictWriteFork","conflictWriteMeta","entries","conflictsById","writeToMasterRow","resolveConflictError","resolved","resolvedConflicts","next","output","previous","document","resolvedDoc","ensureNotFalsy","persistToMasterConflictWrites","forkInstance","bulkWrite","forkWriteResult","useMetaWrites","success","metaInstance","Set","conflictDoc","id","add","useWriteRowsToMeta","has","processed","upstreamInitialSync","getLastCheckpointDoc","lastCheckpoint","promises","hadConflicts","find","r","firstSyncDone","initialSyncStartTime","timer","getChangedDocumentsSince","bulkSize","upResult","documents","stackCheckpoints","streamQueue","processTasks","openTasks","sub","changeStream","pipe","filter","eventBulk","context","downstreamBulkWriteFlag","subscribe","forkChangeStreamEmit","task","time","waitBeforePersist","firstValueFrom","unsubscribe","active","taskWithTime","shift","concat","change","doc","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID"],"sources":["../../../src/replication/upstream.ts"],"sourcesContent":["import { firstValueFrom, filter } from 'rxjs';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowById,\n    ById,\n    EventBulk,\n    RxDocumentData,\n    RxReplicationWriteToMasterRow,\n    RxStorageChangeEvent,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types';\nimport {\n    ensureNotFalsy,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID\n} from '../util';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint';\nimport { resolveConflictError } from './conflicts';\nimport { writeDocToDocState } from './helper';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance';\n\n/**\n * Writes all document changes from the fork to the master.\n * The upstream runs on two modes:\n * - For inital replication, a checkpoint-iteration is used\n * - For ongoing local writes, we just subscribe to the changeStream of the fork.\n *   In contrast to the master, the fork can be assumed to never loose connection,\n *   so we do not have to prepare for missed out events.\n */\nexport function startReplicationUpstream<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    const replicationHandler = state.input.replicationHandler;\n    state.streamQueue.up = state.streamQueue.up.then(async () => {\n        await upstreamInitialSync();\n        processTasks();\n    });\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n    let initialSyncStartTime = -1;\n\n    type Task = EventBulk<RxStorageChangeEvent<RxDocType>, any>;\n    type TaskWithTime = {\n        task: Task;\n        time: number;\n    };\n    const openTasks: TaskWithTime[] = [];\n\n\n    const sub = state.input.forkInstance.changeStream()\n        .pipe(\n            filter(eventBulk => eventBulk.context !== state.downstreamBulkWriteFlag)\n        ).subscribe(async (eventBulk) => {\n            state.stats.up.forkChangeStreamEmit = state.stats.up.forkChangeStreamEmit + 1;\n            openTasks.push({\n                task: eventBulk,\n                time: timer++\n            });\n            if (state.input.waitBeforePersist) {\n                await state.input.waitBeforePersist();\n            }\n            processTasks();\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    async function upstreamInitialSync() {\n        state.stats.up.upstreamInitialSync = state.stats.up.upstreamInitialSync + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        checkpointQueue = checkpointQueue.then(() => getLastCheckpointDoc(state, 'up'));\n        let lastCheckpoint: CheckpointType = await checkpointQueue;\n\n        const promises: Promise<any>[] = [];\n        while (!state.events.canceled.getValue()) {\n            initialSyncStartTime = timer++;\n            const upResult = await state.input.forkInstance.getChangedDocumentsSince(\n                state.input.bulkSize,\n                lastCheckpoint\n            );\n            if (upResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, upResult.checkpoint]);\n\n            promises.push(\n                persistToMaster(\n                    upResult.documents,\n                    ensureNotFalsy(lastCheckpoint)\n                )\n            );\n        }\n\n        /**\n         * If we had conflicts during the inital sync,\n         * it means that we likely have new writes to the fork\n         * and so we have to run the initial sync again to upastream these new writes.\n         */\n        const hadConflicts = (await Promise.all(promises)).find(r => !!r);\n        if (hadConflicts) {\n            await upstreamInitialSync();\n        } else if (!state.firstSyncDone.up.getValue()) {\n            state.firstSyncDone.up.next(true);\n        }\n    }\n\n\n    /**\n     * Takes all open tasks an processes them at once.\n     */\n    function processTasks() {\n        if (\n            state.events.canceled.getValue() ||\n            openTasks.length === 0\n        ) {\n            state.events.active.up.next(false);\n            return;\n        }\n        state.stats.up.processTasks = state.stats.up.processTasks + 1;\n        state.events.active.up.next(true);\n        state.streamQueue.up = state.streamQueue.up.then(async () => {\n            /**\n             * Merge/filter all open tasks\n             */\n            let docs: RxDocumentData<RxDocType>[] = [];\n            let checkpoint: CheckpointType = {} as any;\n            while (openTasks.length > 0) {\n                const taskWithTime = ensureNotFalsy(openTasks.shift());\n                /**\n                 * If the task came in before the last time the inital sync fetching\n                 * has run, we can ignore the task because the inital sync already processed\n                 * these documents.\n                 */\n                if (taskWithTime.time < initialSyncStartTime) {\n                    continue;\n                }\n\n                docs = docs.concat(\n                    taskWithTime.task.events.map(r => {\n                        if (r.change.doc) {\n                            return r.change.doc;\n                        } else {\n                            return r.change.previous as any;\n                        }\n                    })\n                );\n                checkpoint = stackCheckpoints([checkpoint, taskWithTime.task.checkpoint]);\n            }\n\n            if (docs.length > 0) {\n                await persistToMaster(\n                    docs,\n                    checkpoint\n                );\n            }\n\n            if (openTasks.length === 0) {\n                state.events.active.up.next(false);\n            }else {\n                processTasks();\n            }\n\n        });\n    }\n\n    let persistenceQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n    let checkpointQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<RxDocumentData<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    /**\n     * Returns true if had conflicts,\n     * false if not.\n     */\n    async function persistToMaster(\n        docs: RxDocumentData<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<boolean> {\n        state.stats.up.persistToMaster = state.stats.up.persistToMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistend list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n\n        persistenceQueue = persistenceQueue.then(async () => {\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            const upDocsById: ById<RxDocumentData<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(upDocsById);\n            if (docIds.length === 0) {\n                return false;\n            }\n\n            const assumedMasterState = await getAssumedMasterState(\n                state,\n                docIds\n            );\n\n            const writeRowsToMaster: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            const writeRowsToMasterIds: string[] = [];\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n            const forkStateById: ById<RxDocumentData<RxDocType>> = {};\n\n            await Promise.all(\n                docIds.map(async (docId) => {\n\n                    const fullDocData: RxDocumentData<RxDocType> = upDocsById[docId];\n                    forkStateById[docId] = fullDocData;\n                    const docData: WithDeleted<RxDocType> = writeDocToDocState(fullDocData);\n\n\n\n                    const assumedMasterDoc = assumedMasterState[docId];\n\n                    /**\n                     * If the master state is equal to the\n                     * fork state, we can assume that the document state is already\n                     * replicated.\n                     */\n                    if (\n\n                        assumedMasterDoc &&\n                        // if the isResolvedConflict is correct, we do not have to compare the documents.\n                        assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev &&\n                        (await state.input.conflictHandler({\n                            realMasterState: assumedMasterDoc.docData,\n                            newDocumentState: docData\n                        }, 'upstream-check-if-equal')).isEqual\n                    ) {\n                        return;\n                    }\n\n                    writeRowsToMasterIds.push(docId);\n\n                    writeRowsToMaster[docId] = {\n                        assumedMasterState: assumedMasterDoc ? assumedMasterDoc.docData : undefined,\n                        newDocumentState: docData\n                    };\n                    writeRowsToMeta[docId] = getMetaWriteRow(\n                        state,\n                        docData,\n                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\n                    );\n                })\n            );\n\n            if (writeRowsToMasterIds.length === 0) {\n                return false;\n            }\n\n            const masterWriteResult = await replicationHandler.masterWrite(Object.values(writeRowsToMaster));\n            const conflictIds: Set<string> = new Set();\n            const conflictsById: ById<WithDeleted<RxDocType>> = {};\n            masterWriteResult.forEach(conflictDoc => {\n                const id = (conflictDoc as any)[state.primaryPath];\n                conflictIds.add(id);\n                conflictsById[id] = conflictDoc;\n            });\n\n            const useWriteRowsToMeta: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n\n\n            writeRowsToMasterIds.forEach(docId => {\n                if (!conflictIds.has(docId)) {\n                    state.events.processed.up.next(writeRowsToMaster[docId]);\n                    useWriteRowsToMeta.push(writeRowsToMeta[docId]);\n                }\n            });\n\n            if (useWriteRowsToMeta.length > 0) {\n                await state.input.metaInstance.bulkWrite(\n                    useWriteRowsToMeta,\n                    'replication-up-write-meta'\n                );\n                // TODO what happens when we have conflicts here?\n            }\n\n            /**\n             * Resolve conflicts by writing a new document\n             * state to the fork instance and the 'real' master state\n             * to the meta instance.\n             * Non-409 errors will be detected by resolveConflictError()\n             */\n            let hadConflictWrites = false;\n            if (conflictIds.size > 0) {\n                state.stats.up.persistToMasterHadConflicts = state.stats.up.persistToMasterHadConflicts + 1;\n                const conflictWriteFork: BulkWriteRow<RxDocType>[] = [];\n                const conflictWriteMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n                await Promise.all(\n                    Object\n                        .entries(conflictsById)\n                        .map(async ([docId, realMasterState]) => {\n                            const writeToMasterRow = writeRowsToMaster[docId];\n\n                            const input = {\n                                newDocumentState: writeToMasterRow.newDocumentState,\n                                assumedMasterState: writeToMasterRow.assumedMasterState,\n                                realMasterState\n                            };\n                            const resolved = await resolveConflictError(\n                                state.input.conflictHandler,\n                                input,\n                                forkStateById[docId]\n                            );\n                            if (resolved) {\n                                state.events.resolvedConflicts.next({\n                                    input,\n                                    output: resolved.output\n                                });\n                                conflictWriteFork.push({\n                                    previous: forkStateById[docId],\n                                    document: resolved.resolvedDoc\n                                });\n                                const assumedMasterDoc = assumedMasterState[docId];\n                                conflictWriteMeta[docId] = getMetaWriteRow(\n                                    state,\n                                    ensureNotFalsy(realMasterState),\n                                    assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined,\n                                    resolved.resolvedDoc._rev\n                                );\n                            }\n                        })\n                );\n\n                if (conflictWriteFork.length > 0) {\n                    hadConflictWrites = true;\n\n                    state.stats.up.persistToMasterConflictWrites = state.stats.up.persistToMasterConflictWrites + 1;\n                    const forkWriteResult = await state.input.forkInstance.bulkWrite(\n                        conflictWriteFork,\n                        'replication-up-write-conflict'\n                    );\n                    /**\n                     * Errors in the forkWriteResult must not be handled\n                     * because they have been caused by a write to the forkInstance\n                     * in between which will anyway trigger a new upstream cycle\n                     * that will then resolved the conflict again.\n                     */\n                    const useMetaWrites: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n                    Object\n                        .keys(forkWriteResult.success)\n                        .forEach((docId) => {\n                            useMetaWrites.push(\n                                conflictWriteMeta[docId]\n                            );\n                        });\n                    if (useMetaWrites.length > 0) {\n                        await state.input.metaInstance.bulkWrite(\n                            useMetaWrites,\n                            'replication-up-write-conflict-meta'\n                        );\n                    }\n                    // TODO what to do with conflicts while writing to the metaInstance?\n                }\n            }\n\n            /**\n             * For better performance we do not await checkpoint writes,\n             * but to ensure order on parrallel checkpoint writes,\n             * we have to use a queue.\n             */\n            checkpointQueue = checkpointQueue.then(() => setCheckpoint(\n                state,\n                'up',\n                useCheckpoint\n            ));\n\n            return hadConflictWrites;\n        });\n\n        return persistenceQueue;\n    }\n}\n\n"],"mappings":"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"}