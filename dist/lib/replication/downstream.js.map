{"version":3,"file":"downstream.js","names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","startReplicationDownstream","downstreamResyncOnce","stats","down","events","canceled","getValue","checkpointQueue","getLastCheckpointDoc","lastCheckpoint","Promise","all","promises","firstSyncDone","next","lastTimeMasterChangesRequested","timer","replicationHandler","masterChangesSince","input","bulkSize","downResult","documentsData","length","checkpoint","push","persistFromMaster","openTasks","addNewTask","task","taskWithTime","time","streamQueue","useTasks","active","ensureNotFalsy","shift","downstreamProcessChanges","sub","masterChangeStream$","subscribe","masterChangeStreamEmit","firstValueFrom","pipe","filter","unsubscribe","tasks","docsOfAllTasks","forEach","Error","concat","persistenceQueue","PROMISE_RESOLVE_VOID","nonPersistedFromMaster","docs","docData","docId","primaryPath","downDocsById","useCheckpoint","docIds","Object","keys","forkInstance","findDocumentsById","getAssumedMasterState","currentForkState","assumedMasterState","writeRowsToFork","writeRowsToForkById","writeRowsToMeta","useMetaWriteRows","map","forkStateDocData","isEqual","assumedMaster","isAssumedMasterEqualToForkState","getMetaWriteRow","metaDocument","undefined","newForkState","assign","masterState","forkStateFullDoc","_meta","_attachments","_rev","getDefaultRevision","getDefaultRxDocumentMeta","lwt","now","createRevision","forkWriteRow","previous","document","conflictHandler","realMasterState","newDocumentState","writeDocToDocState","isResolvedConflict","setCheckpoint","metaInstance","bulkWrite","downstreamBulkWriteFlag","forkWriteResult","success","processed"],"sources":["../../../src/replication/downstream.ts"],"sourcesContent":["import {\n    firstValueFrom,\n    filter\n} from 'rxjs';\nimport type {\n    RxStorageInstanceReplicationState,\n    BulkWriteRow,\n    BulkWriteRowById,\n    RxStorageReplicationMeta,\n    RxDocumentData,\n    ById,\n    WithDeleted,\n    EventBulk\n} from '../types';\nimport {\n    createRevision,\n    ensureNotFalsy,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now,\n    PROMISE_RESOLVE_VOID\n} from '../util';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint';\nimport { writeDocToDocState } from './helper';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance';\n\n/**\n * Writes all documents from the master to the fork.\n * The downstream has two operation modes\n * - Sync by iterating over the checkpoints via downstreamResyncOnce()\n * - Sync by listening to the changestream via downstreamProcessChanges()\n * We need this to be able to do initial syncs\n * and still can have fast event based sync when the client is not offline.\n */\nexport function startReplicationDownstream<RxDocType, CheckpointType = any>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    const replicationHandler = state.input.replicationHandler;\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n\n\n    type Task = EventBulk<WithDeleted<RxDocType>, any> | 'RESYNC';\n    type TaskWithTime = {\n        time: number;\n        task: Task;\n    };\n    const openTasks: TaskWithTime[] = [];\n\n\n    function addNewTask(task: Task) {\n        state.stats.down.addNewTask = state.stats.down.addNewTask + 1;\n        const taskWithTime = {\n            time: timer++,\n            task\n        };\n        openTasks.push(taskWithTime);\n        state.streamQueue.down = state.streamQueue.down\n            .then(() => {\n                const useTasks: Task[] = [];\n                while (openTasks.length > 0) {\n                    state.events.active.down.next(true);\n                    const taskWithTime = ensureNotFalsy(openTasks.shift());\n\n                    /**\n                     * If the task came in before the last time we started the pull \n                     * from the master, then we can drop the task.\n                     */\n                    if (taskWithTime.time < lastTimeMasterChangesRequested) {\n                        continue;\n                    }\n\n                    if (taskWithTime.task === 'RESYNC') {\n                        if (useTasks.length === 0) {\n                            useTasks.push(taskWithTime.task);\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    useTasks.push(taskWithTime.task);\n                }\n\n                if (useTasks.length === 0) {\n                    state.events.active.down.next(false);\n                    return;\n                }\n\n                if (useTasks[0] === 'RESYNC') {\n                    return downstreamResyncOnce();\n                } else {\n                    return downstreamProcessChanges(useTasks);\n                }\n            });\n    }\n    addNewTask('RESYNC');\n\n    /**\n     * If a write on the master happens, we have to trigger the downstream.\n     */\n    const sub = replicationHandler\n        .masterChangeStream$\n        .subscribe((task: Task) => {\n            state.stats.down.masterChangeStreamEmit = state.stats.down.masterChangeStreamEmit + 1;\n            addNewTask(task);\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    /**\n     * For faster performance, we directly start each write\n     * and then await all writes at the end.\n     */\n    let lastTimeMasterChangesRequested: number = -1;\n    async function downstreamResyncOnce() {\n        state.stats.down.downstreamResyncOnce = state.stats.down.downstreamResyncOnce + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        checkpointQueue = checkpointQueue.then(() => getLastCheckpointDoc(state, 'down'));\n        let lastCheckpoint: CheckpointType = await checkpointQueue;\n\n        const promises: Promise<any>[] = [];\n        while (!state.events.canceled.getValue()) {\n            lastTimeMasterChangesRequested = timer++;\n            const downResult = await replicationHandler.masterChangesSince(\n                lastCheckpoint,\n                state.input.bulkSize\n            );\n\n            if (downResult.documentsData.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = downResult.checkpoint;\n            promises.push(\n                persistFromMaster(\n                    downResult.documentsData,\n                    downResult.checkpoint\n                )\n            );\n        }\n        await Promise.all(promises);\n        if (!state.firstSyncDone.down.getValue()) {\n            state.firstSyncDone.down.next(true);\n        }\n    }\n\n\n    function downstreamProcessChanges(tasks: Task[]) {\n        state.stats.down.downstreamProcessChanges = state.stats.down.downstreamProcessChanges + 1;\n        let docsOfAllTasks: WithDeleted<RxDocType>[] = [];\n        let lastCheckpoint: CheckpointType | undefined = null as any;\n\n        tasks.forEach(task => {\n            if (task === 'RESYNC') {\n                throw new Error('SNH');\n            }\n            docsOfAllTasks = docsOfAllTasks.concat(task.events);\n            lastCheckpoint = task.checkpoint;\n        });\n\n        return persistFromMaster(\n            docsOfAllTasks,\n            ensureNotFalsy(lastCheckpoint)\n        );\n    }\n\n\n    /**\n     * It can happen that the calls to masterChangesSince() or the changeStream()\n     * are way faster then how fast the documents can be persisted.\n     * Therefore we merge all incoming downResults into the nonPersistedFromMaster object\n     * and process them together if possible.\n     * This often bundles up single writes and improves performance\n     * by processing the documents in bulks.\n     */\n    let persistenceQueue = PROMISE_RESOLVE_VOID;\n    let checkpointQueue: Promise<any> = PROMISE_RESOLVE_VOID;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<WithDeleted<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    function persistFromMaster(\n        docs: WithDeleted<RxDocType>[],\n        checkpoint: CheckpointType\n    ) {\n        state.stats.down.persistFromMaster = state.stats.down.persistFromMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistend list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n\n        /**\n         * Run in the queue\n         * with all open documents from nonPersistedFromMaster.\n         */\n        persistenceQueue = persistenceQueue.then(async () => {\n            if (state.events.canceled.getValue()) {\n                return;\n            }\n\n            const downDocsById: ById<WithDeleted<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(downDocsById);\n            if (docIds.length === 0) {\n                return;\n            }\n            const [\n                currentForkState,\n                assumedMasterState\n            ] = await Promise.all([\n                state.input.forkInstance.findDocumentsById(docIds, true),\n                getAssumedMasterState(\n                    state,\n                    docIds\n                )\n            ]);\n\n            const writeRowsToFork: BulkWriteRow<RxDocType>[] = [];\n            const writeRowsToForkById: ById<BulkWriteRow<RxDocType>> = {};\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n            const useMetaWriteRows: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n\n            await Promise.all(\n                docIds.map(async (docId) => {\n                    const forkStateFullDoc: RxDocumentData<RxDocType> | undefined = currentForkState[docId];\n                    const forkStateDocData: WithDeleted<RxDocType> | undefined = forkStateFullDoc ? writeDocToDocState(forkStateFullDoc) : undefined;\n                    const masterState = downDocsById[docId];\n                    const assumedMaster = assumedMasterState[docId];\n\n                    if (\n                        assumedMaster &&\n                        assumedMaster.metaDocument.isResolvedConflict === forkStateFullDoc._rev\n                    ) {\n                        /**\n                         * The current fork state represents a resolved conflict\n                         * that first must be send to the master in the upstream.\n                         * All conflicts are resolved by the upstream.\n                         */\n                        return;\n                    }\n\n                    const isAssumedMasterEqualToForkState = assumedMaster && forkStateDocData ? (await state.input.conflictHandler({\n                        realMasterState: assumedMaster.docData,\n                        newDocumentState: forkStateDocData\n                    }, 'downstream-check-if-equal-0')).isEqual === true : false;\n\n                    if (\n                        (\n                            forkStateFullDoc &&\n                            assumedMaster &&\n                            isAssumedMasterEqualToForkState === false\n                        ) ||\n                        (\n                            forkStateFullDoc && !assumedMaster\n                        )\n                    ) {\n                        /**\n                         * We have a non-upstream-replicated\n                         * local write to the fork.\n                         * This means we ignore the downstream of this document\n                         * because anyway the upstream will first resolve the conflict.\n                         */\n                        return;\n                    }\n\n                    if (\n                        forkStateDocData &&\n                        (await state.input.conflictHandler({\n                            realMasterState: masterState,\n                            newDocumentState: forkStateDocData\n                        }, 'downstream-check-if-equal-1')).isEqual\n                    ) {\n                        /**\n                         * Document states are exactly equal.\n                         * This can happen when the replication is shut down\n                         * unexpected like when the user goes offline.\n                         * \n                         * Only when the assumedMaster is different from the forkState,\n                         * we have to patch the document in the meta instance.\n                         */\n                        if (\n                            !assumedMaster ||\n                            isAssumedMasterEqualToForkState === false\n                        ) {\n                            useMetaWriteRows.push(\n                                getMetaWriteRow(\n                                    state,\n                                    forkStateDocData,\n                                    assumedMaster ? assumedMaster.metaDocument : undefined\n                                )\n                            );\n                        }\n                        return;\n                    }\n\n                    /**\n                     * All other master states need to be written to the forkInstance\n                     * and metaInstance.\n                     */\n                    const newForkState = Object.assign(\n                        {},\n                        masterState,\n                        forkStateFullDoc ? {\n                            _meta: forkStateFullDoc._meta,\n                            _attachments: {},\n                            _rev: getDefaultRevision()\n                        } : {\n                            _meta: getDefaultRxDocumentMeta(),\n                            _rev: getDefaultRevision(),\n                            _attachments: {}\n                        });\n                    newForkState._meta.lwt = now();\n                    newForkState._rev = (masterState as any)._rev ? (masterState as any)._rev : createRevision(\n                        newForkState,\n                        forkStateFullDoc\n                    );\n                    const forkWriteRow = {\n                        previous: forkStateFullDoc,\n                        document: newForkState\n                    };\n                    writeRowsToFork.push(forkWriteRow);\n                    writeRowsToForkById[docId] = forkWriteRow;\n                    writeRowsToMeta[docId] = getMetaWriteRow(\n                        state,\n                        masterState,\n                        assumedMaster ? assumedMaster.metaDocument : undefined\n                    );\n                })\n            );\n            if (writeRowsToFork.length > 0) {\n                const forkWriteResult = await state.input.forkInstance.bulkWrite(\n                    writeRowsToFork,\n                    state.downstreamBulkWriteFlag\n                );\n                Object.keys(forkWriteResult.success).forEach((docId) => {\n                    state.events.processed.down.next(writeRowsToForkById[docId]);\n                    useMetaWriteRows.push(writeRowsToMeta[docId]);\n                });\n            }\n            if (useMetaWriteRows.length > 0) {\n                await state.input.metaInstance.bulkWrite(\n                    useMetaWriteRows,\n                    'replication-down-write-meta'\n                );\n            }\n\n\n            /**\n             * For better performance we do not await checkpoint writes,\n             * but to ensure order on parrallel checkpoint writes,\n             * we have to use a queue.\n             */\n            checkpointQueue = checkpointQueue.then(() => setCheckpoint(\n                state,\n                'down',\n                useCheckpoint\n            ));\n        });\n\n        return persistenceQueue;\n    }\n}\n"],"mappings":"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"}