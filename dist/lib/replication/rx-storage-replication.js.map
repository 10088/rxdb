{"version":3,"file":"rx-storage-replication.js","names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","cancelRxStorageReplication","replicationState","events","canceled","next","streamQueue","down","up","active","complete","processed","resolvedConflicts","awaitRxStorageReplicationIdle","awaitRxStorageReplicationFirstInSync","Promise","all","firstValueFrom","combineLatest","firstSyncDone","pipe","filter","replicateRxStorageInstance","input","checkpointKey","getCheckpointKey","primaryPath","getPrimaryFieldOfPrimaryKey","forkInstance","schema","primaryKey","downstreamBulkWriteFlag","BehaviorSubject","Subject","stats","addNewTask","downstreamProcessChanges","downstreamResyncOnce","masterChangeStreamEmit","persistFromMaster","forkChangeStreamEmit","persistToMaster","persistToMasterConflictWrites","persistToMasterHadConflicts","processTasks","upstreamInitialSync","PROMISE_RESOLVE_VOID","lastCheckpointDoc","startReplicationDownstream","startReplicationUpstream","rxStorageInstanceToReplicationHandler","instance","conflictHandler","replicationHandler","masterChangeStream$","changeStream","map","eventBulk","ret","id","checkpoint","event","change","doc","writeDocToDocState","previous","context","masterChangesSince","bulkSize","getChangedDocumentsSince","documents","length","documentsData","d","masterWrite","rows","rowById","forEach","row","docId","newDocumentState","ids","Object","keys","findDocumentsById","masterDocsState","conflicts","writeRows","entries","masterState","push","document","docStateToWriteDoc","assumedMasterState","realMasterState","ensureNotFalsy","isEqual","bulkWrite","values","error","err","status","Error","documentInDb"],"sources":["../../../src/replication/rx-storage-replication.ts"],"sourcesContent":["/**\n * Replicates two RxStorageInstances\n * with each other.\n * \n * Compared to the 'normal' replication plugins,\n * this one is made for internal use where:\n * - No permission handling is needed.\n * - It is made so that the write amount on the master is less but might increase on the child.\n * - It does not have to be easy to implement a compatible backend.\n *   Here we use another RxStorageImplementation as replication goal\n *   so it has to exactly behave like the RxStorage interface defines.\n * \n * This is made to be used internally by plugins\n * to get a really fast replication performance.\n * \n * The replication works like git, where the fork contains all new writes\n * and must be merged with the master before it can push it's new state to the master.\n */\n\nimport {\n    BehaviorSubject,\n    combineLatest,\n    filter,\n    firstValueFrom,\n    map,\n    Subject\n} from 'rxjs';\nimport {\n    getPrimaryFieldOfPrimaryKey\n} from '../rx-schema-helper';\nimport type {\n    BulkWriteRow,\n    ById,\n    EventBulk,\n    RxConflictHandler,\n    RxDocumentData,\n    RxReplicationHandler,\n    RxReplicationWriteToMasterRow,\n    RxStorageInstance,\n    RxStorageInstanceReplicationInput,\n    RxStorageInstanceReplicationState,\n    WithDeleted\n} from '../types';\nimport {\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID\n} from '../util';\nimport {\n    getCheckpointKey\n} from './checkpoint';\nimport { startReplicationDownstream } from './downstream';\nimport { docStateToWriteDoc, writeDocToDocState } from './helper';\nimport { startReplicationUpstream } from './upstream';\n\n\nexport function replicateRxStorageInstance<RxDocType>(\n    input: RxStorageInstanceReplicationInput<RxDocType>\n): RxStorageInstanceReplicationState<RxDocType> {\n    const checkpointKey = getCheckpointKey(input);\n    const state: RxStorageInstanceReplicationState<RxDocType> = {\n        primaryPath: getPrimaryFieldOfPrimaryKey(input.forkInstance.schema.primaryKey),\n        input,\n        checkpointKey,\n        downstreamBulkWriteFlag: 'replication-downstream-' + checkpointKey,\n        events: {\n            canceled: new BehaviorSubject<boolean>(false),\n            active: {\n                down: new BehaviorSubject<boolean>(true),\n                up: new BehaviorSubject<boolean>(true)\n            },\n            processed: {\n                down: new Subject(),\n                up: new Subject()\n            },\n            resolvedConflicts: new Subject()\n        },\n        stats: {\n            down: {\n                addNewTask: 0,\n                downstreamProcessChanges: 0,\n                downstreamResyncOnce: 0,\n                masterChangeStreamEmit: 0,\n                persistFromMaster: 0\n            },\n            up: {\n                forkChangeStreamEmit: 0,\n                persistToMaster: 0,\n                persistToMasterConflictWrites: 0,\n                persistToMasterHadConflicts: 0,\n                processTasks: 0,\n                upstreamInitialSync: 0\n            }\n        },\n        firstSyncDone: {\n            down: new BehaviorSubject<boolean>(false),\n            up: new BehaviorSubject<boolean>(false)\n        },\n        streamQueue: {\n            down: PROMISE_RESOLVE_VOID,\n            up: PROMISE_RESOLVE_VOID\n        },\n        lastCheckpointDoc: {}\n    };\n\n    startReplicationDownstream(state);\n    startReplicationUpstream(state);\n    return state;\n}\n\nexport async function awaitRxStorageReplicationFirstInSync(\n    state: RxStorageInstanceReplicationState<any>\n) {\n    return firstValueFrom(\n        combineLatest([\n            state.firstSyncDone.down.pipe(\n                filter(v => !!v)\n            ),\n            state.firstSyncDone.up.pipe(\n                filter(v => !!v)\n            )\n        ])\n    );\n}\n\nexport async function awaitRxStorageReplicationIdle(\n    state: RxStorageInstanceReplicationState<any>\n) {\n    await awaitRxStorageReplicationFirstInSync(state);\n    while (true) {\n        const { down, up } = state.streamQueue;\n        await Promise.all([\n            up,\n            down\n        ]);\n        /**\n         * If the Promises have not been reasigned\n         * after awaiting them, we know that the replication\n         * is in idle state at this point in time.\n         */\n        if (\n            down === state.streamQueue.down &&\n            up === state.streamQueue.up\n        ) {\n            return;\n        }\n    }\n}\n\n\nexport function rxStorageInstanceToReplicationHandler<RxDocType, MasterCheckpointType>(\n    instance: RxStorageInstance<RxDocType, any, any, MasterCheckpointType>,\n    conflictHandler: RxConflictHandler<RxDocType>\n): RxReplicationHandler<RxDocType, MasterCheckpointType> {\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(instance.schema.primaryKey);\n\n\n    const replicationHandler: RxReplicationHandler<RxDocType, MasterCheckpointType> = {\n        masterChangeStream$: instance.changeStream().pipe(\n            map(eventBulk => {\n                const ret: EventBulk<RxDocumentData<RxDocType>, MasterCheckpointType> = {\n                    id: eventBulk.id,\n                    checkpoint: eventBulk.checkpoint,\n                    events: eventBulk.events.map(event => {\n                        if (event.change.doc) {\n                            return writeDocToDocState(event.change.doc as any);\n                        } else {\n                            return writeDocToDocState(event.change.previous as any);\n                        }\n                    }),\n                    context: eventBulk.context\n                };\n                return ret;\n            })\n        ),\n        masterChangesSince(\n            checkpoint,\n            bulkSize\n        ) {\n            return instance.getChangedDocumentsSince(\n                bulkSize,\n                checkpoint\n            ).then(result => {\n                return {\n                    checkpoint: result.documents.length > 0 ? result.checkpoint : checkpoint,\n                    documentsData: result.documents.map(d => writeDocToDocState(d))\n                }\n            })\n        },\n        async masterWrite(\n            rows\n        ) {\n            const rowById: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            rows.forEach(row => {\n                const docId: string = (row.newDocumentState as any)[primaryPath];\n                rowById[docId] = row;\n            });\n            const ids = Object.keys(rowById);\n\n            const masterDocsState = await instance.findDocumentsById(\n                ids,\n                true\n            );\n            const conflicts: WithDeleted<RxDocType>[] = [];\n            const writeRows: BulkWriteRow<RxDocType>[] = [];\n            await Promise.all(\n                Object.entries(rowById)\n                    .map(async ([id, row]) => {\n                        const masterState = masterDocsState[id];\n                        if (!masterState) {\n                            writeRows.push({\n                                document: docStateToWriteDoc(row.newDocumentState)\n                            });\n                        } else if (\n                            masterState &&\n                            !row.assumedMasterState\n                        ) {\n                            conflicts.push(writeDocToDocState(masterState));\n                        } else if (\n                            (await conflictHandler({\n                                realMasterState: writeDocToDocState(masterState),\n                                newDocumentState: ensureNotFalsy(row.assumedMasterState)\n                            }, 'rxStorageInstanceToReplicationHandler-masterWrite')).isEqual === true\n                        ) {\n                            writeRows.push({\n                                previous: masterState,\n                                document: docStateToWriteDoc(row.newDocumentState, masterState)\n                            });\n                        } else {\n                            conflicts.push(writeDocToDocState(masterState));\n                        }\n                    })\n            );\n\n\n            if (writeRows.length > 0) {\n                const result = await instance.bulkWrite(\n                    writeRows,\n                    'replication-master-write'\n                );\n                Object\n                    .values(result.error)\n                    .forEach(err => {\n                        if (err.status !== 409) {\n                            throw new Error('non conflict error');\n                        } else {\n                            conflicts.push(\n                                writeDocToDocState(ensureNotFalsy(err.documentInDb))\n                            );\n                        }\n                    });\n            }\n            return conflicts;\n        }\n    };\n\n    return replicationHandler;\n}\n\n\nexport async function cancelRxStorageReplication(\n    replicationState: RxStorageInstanceReplicationState<any>\n): Promise<void> {\n    replicationState.events.canceled.next(true);\n\n    await replicationState.streamQueue.down;\n    await replicationState.streamQueue.up;\n\n    replicationState.events.active.up.complete();\n    replicationState.events.active.down.complete();\n    replicationState.events.processed.up.complete();\n    replicationState.events.processed.down.complete();\n    replicationState.events.resolvedConflicts.complete();\n}\n"],"mappings":";;;;;;;;;AAmBA;;AAQA;;AAgBA;;AAIA;;AAGA;;AACA;;AACA;;AAbO,iBAAiBA,IAAjB,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;EAC3C,IAAI,CAACF,IAAI,CAACG,CAAV,EAAa;IACZ,IAAID,KAAK,iBAAT,EAA4B;MAC3B,IAAIA,KAAK,CAACC,CAAV,EAAa;QACZ,IAAIF,KAAK,GAAG,CAAZ,EAAe;UACdA,KAAK,GAAGC,KAAK,CAACC,CAAd;QACA;;QACDD,KAAK,GAAGA,KAAK,CAACE,CAAd;MACA,CALD,MAKO;QACNF,KAAK,CAACG,CAAN,GAAU,QAAQC,IAAR,CAAa,IAAb,EAAmBN,IAAnB,EAAyBC,KAAzB,CAAV;QACA;MACA;IACD;;IACD,IAAIC,KAAK,IAAIA,KAAK,CAACK,IAAnB,EAAyB;MACxBL,KAAK,CAACK,IAAN,CAAW,QAAQD,IAAR,CAAa,IAAb,EAAmBN,IAAnB,EAAyBC,KAAzB,CAAX,EAA4C,QAAQK,IAAR,CAAa,IAAb,EAAmBN,IAAnB,EAAyB,CAAzB,CAA5C;MACA;IACA;;IACDA,IAAI,CAACG,CAAL,GAASF,KAAT;IACAD,IAAI,CAACI,CAAL,GAASF,KAAT;IACA,IAAMM,QAAQ,GAAGR,IAAI,CAACK,CAAtB;;IACA,IAAIG,QAAJ,EAAc;MACbA,QAAQ,CAACR,IAAD,CAAR;IACA;EACD;AACD;;AA9DM,IAAM,QAAQ,aAAc,YAAW;EAC7C,iBAAiB,CAAE;;EACnB,MAAMS,SAAN,CAAgBF,IAAhB,GAAuB,UAASG,WAAT,EAAsBC,UAAtB,EAAkC;IACxD,IAAMC,MAAM,GAAG,WAAf;IACA,IAAMX,KAAK,GAAG,KAAKE,CAAnB;;IACA,IAAIF,KAAJ,EAAW;MACV,IAAMY,QAAQ,GAAGZ,KAAK,GAAG,CAAR,GAAYS,WAAZ,GAA0BC,UAA3C;;MACA,IAAIE,QAAJ,EAAc;QACb,IAAI;UACH,QAAQD,MAAR,EAAgB,CAAhB,EAAmBC,QAAQ,CAAC,KAAKT,CAAN,CAA3B;QACA,CAFD,CAEE,OAAOU,CAAP,EAAU;UACX,QAAQF,MAAR,EAAgB,CAAhB,EAAmBE,CAAnB;QACA;;QACD,OAAOF,MAAP;MACA,CAPD,MAOO;QACN,OAAO,IAAP;MACA;IACD;;IACD,KAAKP,CAAL,GAAS,UAASU,KAAT,EAAgB;MACxB,IAAI;QACH,IAAMb,KAAK,GAAGa,KAAK,CAACX,CAApB;;QACA,IAAIW,KAAK,CAACZ,CAAN,GAAU,CAAd,EAAiB;UAChB,QAAQS,MAAR,EAAgB,CAAhB,EAAmBF,WAAW,GAAGA,WAAW,CAACR,KAAD,CAAd,GAAwBA,KAAtD;QACA,CAFD,MAEO,IAAIS,UAAJ,EAAgB;UACtB,QAAQC,MAAR,EAAgB,CAAhB,EAAmBD,UAAU,CAACT,KAAD,CAA7B;QACA,CAFM,MAEA;UACN,QAAQU,MAAR,EAAgB,CAAhB,EAAmBV,KAAnB;QACA;MACD,CATD,CASE,OAAOY,CAAP,EAAU;QACX,QAAQF,MAAR,EAAgB,CAAhB,EAAmBE,CAAnB;MACA;IACD,CAbD;;IAcA,OAAOF,MAAP;EACA,CA/BD;;EAgCA;AACA,CAnCiC,EAA3B;;AAgEA,wBAAwBI,QAAxB,EAAkC;EACxC,OAAOA,QAAQ,iBAAR,IAA6BA,QAAQ,CAACb,CAAT,GAAa,CAAjD;AACA;;AA4LM,cAAcc,IAAd,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkC;EACxC,IAAIC,KAAJ;;EACA,SAAS;IACR,IAAIC,cAAc,GAAGJ,IAAI,EAAzB;;IACA,IAAI,eAAeI,cAAf,CAAJ,EAAoC;MACnCA,cAAc,GAAGA,cAAc,CAACjB,CAAhC;IACA;;IACD,IAAI,CAACiB,cAAL,EAAqB;MACpB,OAAOT,MAAP;IACA;;IACD,IAAIS,cAAc,CAACd,IAAnB,EAAyB;MACxBa,KAAK,GAAG,CAAR;MACA;IACA;;IACD,IAAIR,MAAM,GAAGO,IAAI,EAAjB;;IACA,IAAIP,MAAM,IAAIA,MAAM,CAACL,IAArB,EAA2B;MAC1B,IAAI,eAAeK,MAAf,CAAJ,EAA4B;QAC3BA,MAAM,GAAGA,MAAM,CAACT,CAAhB;MACA,CAFD,MAEO;QACNiB,KAAK,GAAG,CAAR;QACA;MACA;IACD;;IACD,IAAIF,MAAJ,EAAY;MACX,IAAII,WAAW,GAAGJ,MAAM,EAAxB;;MACA,IAAII,WAAW,IAAIA,WAAW,CAACf,IAA3B,IAAmC,CAAC,eAAee,WAAf,CAAxC,EAAqE;QACpEF,KAAK,GAAG,CAAR;QACA;MACA;IACD;EACD;;EACD,IAAIpB,IAAI,GAAG,WAAX;;EACA,IAAIuB,MAAM,GAAG,QAAQjB,IAAR,CAAa,IAAb,EAAmBN,IAAnB,EAAyB,CAAzB,CAAb;;EACA,CAACoB,KAAK,KAAK,CAAV,GAAcC,cAAc,CAACd,IAAf,CAAoBiB,gBAApB,CAAd,GAAsDJ,KAAK,KAAK,CAAV,GAAcR,MAAM,CAACL,IAAP,CAAYkB,gBAAZ,CAAd,GAA8CH,WAAW,CAACf,IAAZ,CAAiBmB,kBAAjB,CAArG,EAA2InB,IAA3I,CAAgJ,KAAK,CAArJ,EAAwJgB,MAAxJ;EACA,OAAOvB,IAAP;;EACA,SAASyB,gBAAT,CAA0BvB,KAA1B,EAAiC;IAChCU,MAAM,GAAGV,KAAT;;IACA,GAAG;MACF,IAAIgB,MAAJ,EAAY;QACXI,WAAW,GAAGJ,MAAM,EAApB;;QACA,IAAII,WAAW,IAAIA,WAAW,CAACf,IAA3B,IAAmC,CAAC,eAAee,WAAf,CAAxC,EAAqE;UACpEA,WAAW,CAACf,IAAZ,CAAiBmB,kBAAjB,EAAqCnB,IAArC,CAA0C,KAAK,CAA/C,EAAkDgB,MAAlD;UACA;QACA;MACD;;MACDF,cAAc,GAAGJ,IAAI,EAArB;;MACA,IAAI,CAACI,cAAD,IAAoB,eAAeA,cAAf,KAAkC,CAACA,cAAc,CAACjB,CAA1E,EAA8E;QAC7E,QAAQJ,IAAR,EAAc,CAAd,EAAiBY,MAAjB;;QACA;MACA;;MACD,IAAIS,cAAc,CAACd,IAAnB,EAAyB;QACxBc,cAAc,CAACd,IAAf,CAAoBiB,gBAApB,EAAsCjB,IAAtC,CAA2C,KAAK,CAAhD,EAAmDgB,MAAnD;QACA;MACA;;MACDX,MAAM,GAAGO,IAAI,EAAb;;MACA,IAAI,eAAeP,MAAf,CAAJ,EAA4B;QAC3BA,MAAM,GAAGA,MAAM,CAACR,CAAhB;MACA;IACD,CArBD,QAqBS,CAACQ,MAAD,IAAW,CAACA,MAAM,CAACL,IArB5B;;IAsBAK,MAAM,CAACL,IAAP,CAAYkB,gBAAZ,EAA8BlB,IAA9B,CAAmC,KAAK,CAAxC,EAA2CgB,MAA3C;EACA;;EACD,SAASC,gBAAT,CAA0BH,cAA1B,EAA0C;IACzC,IAAIA,cAAJ,EAAoB;MACnBT,MAAM,GAAGO,IAAI,EAAb;;MACA,IAAIP,MAAM,IAAIA,MAAM,CAACL,IAArB,EAA2B;QAC1BK,MAAM,CAACL,IAAP,CAAYkB,gBAAZ,EAA8BlB,IAA9B,CAAmC,KAAK,CAAxC,EAA2CgB,MAA3C;MACA,CAFD,MAEO;QACNE,gBAAgB,CAACb,MAAD,CAAhB;MACA;IACD,CAPD,MAOO;MACN,QAAQZ,IAAR,EAAc,CAAd,EAAiBY,MAAjB;IACA;EACD;;EACD,SAASc,kBAAT,GAA8B;IAC7B,IAAIL,cAAc,GAAGJ,IAAI,EAAzB,EAA6B;MAC5B,IAAII,cAAc,CAACd,IAAnB,EAAyB;QACxBc,cAAc,CAACd,IAAf,CAAoBiB,gBAApB,EAAsCjB,IAAtC,CAA2C,KAAK,CAAhD,EAAmDgB,MAAnD;MACA,CAFD,MAEO;QACNC,gBAAgB,CAACH,cAAD,CAAhB;MACA;IACD,CAND,MAMO;MACN,QAAQrB,IAAR,EAAc,CAAd,EAAiBY,MAAjB;IACA;EACD;AACD;;AAnVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAmPsBe,0B,YAAAA,0B,CAClBC,gB;MACa;IACbA,gBAAgB,CAACC,MAAjB,CAAwBC,QAAxB,CAAiCC,IAAjC,CAAsC,IAAtC;IADa,uBAGPH,gBAAgB,CAACI,WAAjB,CAA6BC,IAHtB;MAAA,uBAIPL,gBAAgB,CAACI,WAAjB,CAA6BE,EAJtB;QAMbN,gBAAgB,CAACC,MAAjB,CAAwBM,MAAxB,CAA+BD,EAA/B,CAAkCE,QAAlC;QACAR,gBAAgB,CAACC,MAAjB,CAAwBM,MAAxB,CAA+BF,IAA/B,CAAoCG,QAApC;QACAR,gBAAgB,CAACC,MAAjB,CAAwBQ,SAAxB,CAAkCH,EAAlC,CAAqCE,QAArC;QACAR,gBAAgB,CAACC,MAAjB,CAAwBQ,SAAxB,CAAkCJ,IAAlC,CAAuCG,QAAvC;QACAR,gBAAgB,CAACC,MAAjB,CAAwBS,iBAAxB,CAA0CF,QAA1C;MAVa;IAAA;EAWhB,C;;;;;;;IArJqBG,6B,YAAAA,6B,CAClBtC,K,EACF;EAAA,uBACQuC,oCAAoC,CAACvC,KAAD,CAD5C;IAAA;IAAA;MAAA;IAAA,uBAEe;MACT,yBAAqBA,KAAK,CAAC+B,WAA3B;MAAA,IAAQC,IAAR,sBAAQA,IAAR;MAAA,IAAcC,EAAd,sBAAcA,EAAd;MADS,uBAEHO,OAAO,CAACC,GAAR,CAAY,CACdR,EADc,EAEdD,IAFc,CAAZ,CAFG;QAAA,IAYLA,IAAI,KAAKhC,KAAK,CAAC+B,WAAN,CAAkBC,IAA3B,IACAC,EAAE,KAAKjC,KAAK,CAAC+B,WAAN,CAAkBE,EAbpB;UAAA;QAAA;MAAA;MAMT;AACR;AACA;AACA;AACA;IAOK,CAnBH;EAAA;AAoBD,C;;;;IArCqBM,oC,YAAAA,oC,CAClBvC,K;MACF;IACE,uBAAO,IAAA0C,oBAAA,EACH,IAAAC,mBAAA,EAAc,CACV3C,KAAK,CAAC4C,aAAN,CAAoBZ,IAApB,CAAyBa,IAAzB,CACI,IAAAC,YAAA,EAAO,UAAA3C,CAAC;MAAA,OAAI,CAAC,CAACA,CAAN;IAAA,CAAR,CADJ,CADU,EAIVH,KAAK,CAAC4C,aAAN,CAAoBX,EAApB,CAAuBY,IAAvB,CACI,IAAAC,YAAA,EAAO,UAAA3C,CAAC;MAAA,OAAI,CAAC,CAACA,CAAN;IAAA,CAAR,CADJ,CAJU,CAAd,CADG,CAAP;EAUH,C;;;;;;;AAnEM,SAAS4C,0BAAT,CACHC,KADG,EAEyC;EAC5C,IAAMC,aAAa,GAAG,IAAAC,4BAAA,EAAiBF,KAAjB,CAAtB;EACA,IAAMhD,KAAmD,GAAG;IACxDmD,WAAW,EAAE,IAAAC,2CAAA,EAA4BJ,KAAK,CAACK,YAAN,CAAmBC,MAAnB,CAA0BC,UAAtD,CAD2C;IAExDP,KAAK,EAALA,KAFwD;IAGxDC,aAAa,EAAbA,aAHwD;IAIxDO,uBAAuB,EAAE,4BAA4BP,aAJG;IAKxDrB,MAAM,EAAE;MACJC,QAAQ,EAAE,IAAI4B,qBAAJ,CAA6B,KAA7B,CADN;MAEJvB,MAAM,EAAE;QACJF,IAAI,EAAE,IAAIyB,qBAAJ,CAA6B,IAA7B,CADF;QAEJxB,EAAE,EAAE,IAAIwB,qBAAJ,CAA6B,IAA7B;MAFA,CAFJ;MAMJrB,SAAS,EAAE;QACPJ,IAAI,EAAE,IAAI0B,aAAJ,EADC;QAEPzB,EAAE,EAAE,IAAIyB,aAAJ;MAFG,CANP;MAUJrB,iBAAiB,EAAE,IAAIqB,aAAJ;IAVf,CALgD;IAiBxDC,KAAK,EAAE;MACH3B,IAAI,EAAE;QACF4B,UAAU,EAAE,CADV;QAEFC,wBAAwB,EAAE,CAFxB;QAGFC,oBAAoB,EAAE,CAHpB;QAIFC,sBAAsB,EAAE,CAJtB;QAKFC,iBAAiB,EAAE;MALjB,CADH;MAQH/B,EAAE,EAAE;QACAgC,oBAAoB,EAAE,CADtB;QAEAC,eAAe,EAAE,CAFjB;QAGAC,6BAA6B,EAAE,CAH/B;QAIAC,2BAA2B,EAAE,CAJ7B;QAKAC,YAAY,EAAE,CALd;QAMAC,mBAAmB,EAAE;MANrB;IARD,CAjBiD;IAkCxD1B,aAAa,EAAE;MACXZ,IAAI,EAAE,IAAIyB,qBAAJ,CAA6B,KAA7B,CADK;MAEXxB,EAAE,EAAE,IAAIwB,qBAAJ,CAA6B,KAA7B;IAFO,CAlCyC;IAsCxD1B,WAAW,EAAE;MACTC,IAAI,EAAEuC,0BADG;MAETtC,EAAE,EAAEsC;IAFK,CAtC2C;IA0CxDC,iBAAiB,EAAE;EA1CqC,CAA5D;EA6CA,IAAAC,sCAAA,EAA2BzE,KAA3B;EACA,IAAA0E,kCAAA,EAAyB1E,KAAzB;EACA,OAAOA,KAAP;AACH;;AA0CM,SAAS2E,qCAAT,CACHC,QADG,EAEHC,eAFG,EAGkD;EAErD,IAAM1B,WAAW,GAAG,IAAAC,2CAAA,EAA4BwB,QAAQ,CAACtB,MAAT,CAAgBC,UAA5C,CAApB;EAGA,IAAMuB,kBAAyE,GAAG;IAC9EC,mBAAmB,EAAEH,QAAQ,CAACI,YAAT,GAAwBnC,IAAxB,CACjB,IAAAoC,SAAA,EAAI,UAAAC,SAAS,EAAI;MACb,IAAMC,GAA+D,GAAG;QACpEC,EAAE,EAAEF,SAAS,CAACE,EADsD;QAEpEC,UAAU,EAAEH,SAAS,CAACG,UAF8C;QAGpEzD,MAAM,EAAEsD,SAAS,CAACtD,MAAV,CAAiBqD,GAAjB,CAAqB,UAAAK,KAAK,EAAI;UAClC,IAAIA,KAAK,CAACC,MAAN,CAAaC,GAAjB,EAAsB;YAClB,OAAO,IAAAC,0BAAA,EAAmBH,KAAK,CAACC,MAAN,CAAaC,GAAhC,CAAP;UACH,CAFD,MAEO;YACH,OAAO,IAAAC,0BAAA,EAAmBH,KAAK,CAACC,MAAN,CAAaG,QAAhC,CAAP;UACH;QACJ,CANO,CAH4D;QAUpEC,OAAO,EAAET,SAAS,CAACS;MAViD,CAAxE;MAYA,OAAOR,GAAP;IACH,CAdD,CADiB,CADyD;IAkB9ES,kBAlB8E,8BAmB1EP,UAnB0E,EAoB1EQ,QApB0E,EAqB5E;MACE,OAAOjB,QAAQ,CAACkB,wBAAT,CACHD,QADG,EAEHR,UAFG,EAGL/E,IAHK,CAGA,UAAAK,MAAM,EAAI;QACb,OAAO;UACH0E,UAAU,EAAE1E,MAAM,CAACoF,SAAP,CAAiBC,MAAjB,GAA0B,CAA1B,GAA8BrF,MAAM,CAAC0E,UAArC,GAAkDA,UAD3D;UAEHY,aAAa,EAAEtF,MAAM,CAACoF,SAAP,CAAiBd,GAAjB,CAAqB,UAAAiB,CAAC;YAAA,OAAI,IAAAT,0BAAA,EAAmBS,CAAnB,CAAJ;UAAA,CAAtB;QAFZ,CAAP;MAIH,CARM,CAAP;IASH,CA/B6E;IAgCxEC,WAhCwE,uBAiC1EC,IAjC0E;MAAA,IAkC5E;QACE,IAAMC,OAAuD,GAAG,EAAhE;QACAD,IAAI,CAACE,OAAL,CAAa,UAAAC,GAAG,EAAI;UAChB,IAAMC,KAAa,GAAID,GAAG,CAACE,gBAAL,CAA8BtD,WAA9B,CAAtB;UACAkD,OAAO,CAACG,KAAD,CAAP,GAAiBD,GAAjB;QACH,CAHD;QAIA,IAAMG,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYP,OAAZ,CAAZ;QANF,uBAQgCzB,QAAQ,CAACiC,iBAAT,CAC1BH,GAD0B,EAE1B,IAF0B,CARhC,iBAQQI,eARR;UAYE,IAAMC,SAAmC,GAAG,EAA5C;UACA,IAAMC,SAAoC,GAAG,EAA7C;UAbF,uBAcQxE,OAAO,CAACC,GAAR,CACFkE,MAAM,CAACM,OAAP,CAAeZ,OAAf,EACKpB,GADL;YAAA,IAC8B;cAAA,IAAbG,EAAa;cAAA,IAATmB,GAAS;cACtB,IAAMW,WAAW,GAAGJ,eAAe,CAAC1B,EAAD,CAAnC;;cADsB;gBAAA,IAElB,CAAC8B,WAFiB;kBAGlBF,SAAS,CAACG,IAAV,CAAe;oBACXC,QAAQ,EAAE,IAAAC,0BAAA,EAAmBd,GAAG,CAACE,gBAAvB;kBADC,CAAf;gBAHkB;kBAAA;oBAAA,IAOlBS,WAAW,IACX,CAACX,GAAG,CAACe,kBARa;sBAUlBP,SAAS,CAACI,IAAV,CAAe,IAAA1B,0BAAA,EAAmByB,WAAnB,CAAf;oBAVkB,8BAYXrC,eAAe,CAAC;sBACnB0C,eAAe,EAAE,IAAA9B,0BAAA,EAAmByB,WAAnB,CADE;sBAEnBT,gBAAgB,EAAE,IAAAe,oBAAA,EAAejB,GAAG,CAACe,kBAAnB;oBAFC,CAAD,EAGnB,mDAHmB,CAZJ;sBAAA,IAYlB,iBAGyDG,OAHzD,KAGqE,IAfnD;wBAiBlBT,SAAS,CAACG,IAAV,CAAe;0BACXzB,QAAQ,EAAEwB,WADC;0BAEXE,QAAQ,EAAE,IAAAC,0BAAA,EAAmBd,GAAG,CAACE,gBAAvB,EAAyCS,WAAzC;wBAFC,CAAf;sBAjBkB;wBAsBlBH,SAAS,CAACI,IAAV,CAAe,IAAA1B,0BAAA,EAAmByB,WAAnB,CAAf;sBAtBkB;oBAAA;kBAAA;;kBAAA;gBAAA;cAAA;;cAAA;YAwBzB,CAzBL;cAAA;YAAA;UAAA,EADE,CAdR;YAAA;cAAA,IA4CMF,SAAS,CAAChB,MAAV,GAAmB,CA5CzB;gBAAA,uBA6C2BpB,QAAQ,CAAC8C,SAAT,CACjBV,SADiB,EAEjB,0BAFiB,CA7C3B,iBA6CYrG,MA7CZ;kBAiDMgG,MAAM,CACDgB,MADL,CACYhH,MAAM,CAACiH,KADnB,EAEKtB,OAFL,CAEa,UAAAuB,GAAG,EAAI;oBACZ,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;sBACpB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;oBACH,CAFD,MAEO;sBACHhB,SAAS,CAACI,IAAV,CACI,IAAA1B,0BAAA,EAAmB,IAAA+B,oBAAA,EAAeK,GAAG,CAACG,YAAnB,CAAnB,CADJ;oBAGH;kBACJ,CAVL;gBAjDN;cAAA;YAAA;;YAAA;cA6DE,OAAOjB,SAAP;YA7DF,KA6DSA,SA7DT;UAAA;QAAA;MA8DD,CAhG6E;QAAA;MAAA;IAAA;EAAA,CAAlF;EAmGA,OAAOjC,kBAAP;AACH"}