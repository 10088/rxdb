{"version":3,"sources":["../../src/event-reduce.ts"],"names":[],"mappings":"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","file":"event-reduce.js","sourcesContent":["import {\n    ActionName,\n    calculateActionName,\n    runAction,\n    QueryParams,\n    QueryMatcher,\n    SortComparator\n} from 'event-reduce-js';\nimport type { RxQuery, MangoQuery, RxChangeEvent } from './types';\nimport { runPluginHooks } from './hooks';\nimport { rxChangeEventToEventReduceChangeEvent } from './rx-change-event';\n\nexport type EventReduceResultNeg = {\n    runFullQueryAgain: true,\n};\nexport type EventReduceResultPos<RxDocumentType> = {\n    runFullQueryAgain: false,\n    changed: boolean,\n    newResults: RxDocumentType[];\n};\nexport type EventReduceResult<RxDocumentType> = EventReduceResultNeg | EventReduceResultPos<RxDocumentType>;\n\n\nexport function getSortFieldsOfQuery<RxDocType>(\n    primaryKey: keyof RxDocType,\n    query: MangoQuery<RxDocType>\n): string[] {\n    if (!query.sort || query.sort.length === 0) {\n        return [primaryKey as any];\n    } else {\n        return query.sort.map(part => Object.keys(part)[0]);\n    }\n}\n\n\n\nexport const RXQUERY_QUERY_PARAMS_CACHE: WeakMap<RxQuery, QueryParams<any>> = new WeakMap();\nexport function getQueryParams<RxDocType>(\n    rxQuery: RxQuery<RxDocType>\n): QueryParams<RxDocType> {\n    if (!RXQUERY_QUERY_PARAMS_CACHE.has(rxQuery)) {\n        const collection = rxQuery.collection;\n        const queryJson: MangoQuery<RxDocType> = rxQuery.toJSON();\n        const primaryKey = collection.schema.primaryPath;\n\n\n        /**\n         * Create a custom sort comparator\n         * that uses the hooks to ensure\n         * we send for example compressed documents to be sorted by compressed queries.\n         */\n        const sortComparator = collection.storageInstance.getSortComparator(queryJson);\n        const useSortComparator: SortComparator<RxDocType> = (docA: RxDocType, docB: RxDocType) => {\n            const sortComparatorData = {\n                docA,\n                docB,\n                rxQuery\n            };\n            runPluginHooks('preSortComparator', sortComparatorData);\n            return sortComparator(sortComparatorData.docA, sortComparatorData.docB);\n        };\n\n\n        /**\n         * Create a custom query matcher\n         * that uses the hooks to ensure\n         * we send for example compressed documents to match compressed queries.\n         */\n        const queryMatcher = collection.storageInstance.getQueryMatcher(queryJson);\n        const useQueryMatcher: QueryMatcher<RxDocType> = (doc: RxDocType) => {\n\n            const queryMatcherData = {\n                doc,\n                rxQuery\n            };\n            runPluginHooks('preQueryMatcher', queryMatcherData);\n\n            return queryMatcher(queryMatcherData.doc);\n        };\n\n        const ret: QueryParams<any> = {\n            primaryKey: rxQuery.collection.schema.primaryPath as any,\n            skip: queryJson.skip,\n            limit: queryJson.limit,\n            sortFields: getSortFieldsOfQuery(primaryKey, queryJson),\n            sortComparator: useSortComparator,\n            queryMatcher: useQueryMatcher\n        };\n        RXQUERY_QUERY_PARAMS_CACHE.set(rxQuery, ret);\n        return ret;\n    } else {\n        return RXQUERY_QUERY_PARAMS_CACHE.get(rxQuery) as QueryParams<RxDocType>;\n    }\n}\n\n\nexport function calculateNewResults<RxDocumentType>(\n    rxQuery: RxQuery<RxDocumentType>,\n    rxChangeEvents: RxChangeEvent<RxDocumentType>[]\n): EventReduceResult<RxDocumentType> {\n    if (!rxQuery.collection.database.eventReduce) {\n        return {\n            runFullQueryAgain: true\n        };\n    }\n    const queryParams = getQueryParams(rxQuery);\n    const previousResults: RxDocumentType[] = rxQuery._resultsData.slice();\n    const previousResultsMap: Map<string, RxDocumentType> = rxQuery._resultsDataMap;\n    let changed: boolean = false;\n\n    const foundNonOptimizeable = rxChangeEvents.find(cE => {\n        const eventReduceEvent = rxChangeEventToEventReduceChangeEvent(cE);\n        const actionName: ActionName = calculateActionName({\n            queryParams,\n            changeEvent: eventReduceEvent,\n            previousResults,\n            keyDocumentMap: previousResultsMap\n        });\n        if (actionName === 'runFullQueryAgain') {\n            return true;\n        } else if (actionName !== 'doNothing') {\n            changed = true;\n            runAction(\n                actionName,\n                queryParams,\n                eventReduceEvent,\n                previousResults,\n                previousResultsMap\n            );\n            return false;\n        }\n    });\n    if (foundNonOptimizeable) {\n        return {\n            runFullQueryAgain: true,\n        };\n    } else {\n        return {\n            runFullQueryAgain: false,\n            changed,\n            newResults: previousResults\n        };\n    }\n}\n"]}