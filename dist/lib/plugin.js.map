{"version":3,"sources":["../../src/plugin.ts"],"names":[],"mappings":";;;;;;;AAKA;;AAGA;;AAGA;;AAGA;;AAGA;;AAGA;;AAOA;;AACA;;AAGA;;AA/BA;AACA;AACA;AACA;AACA;;AA6BA;AACA;AACA;AACA,IAAM,UAAgC,GAAG;AACrC,EAAA,QAAQ,EAAE,mBAAS,SADkB;AAErC,EAAA,OAAO,EAAE,iBAAQ,SAFoB;AAGrC,EAAA,UAAU,EAAE,yBAHyB;AAIrC,EAAA,OAAO,EAAE,qBAAY,SAJgB;AAKrC,EAAA,YAAY,EAAE,+BAAiB,SALM;AAMrC,EAAA,UAAU,EAAE,2BAAe;AANU,CAAzC;AASA,IAAM,aAAkC,GAAG,IAAI,GAAJ,EAA3C;AAEA;AACA;AACA;AACA;;AACO,SAAS,WAAT,CAAqB,MAArB,EAAuC;AAC1C,6BAAe,gBAAf,EAAiC;AAAE,IAAA,MAAM,EAAN,MAAF;AAAU,IAAA,OAAO,EAAE;AAAnB,GAAjC,EAD0C,CAG1C;;AACA,MAAI,aAAa,CAAC,GAAd,CAAkB,MAAlB,CAAJ,EAA+B;AAC3B;AACH,GAFD,MAEO;AACH,IAAA,aAAa,CAAC,GAAd,CAAkB,MAAlB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACI,MAAI,CAAC,MAAM,CAAC,IAAZ,EAAkB;AACd,UAAM,6BAAe,KAAf,EAAsB;AACxB,MAAA,MAAM,EAAN;AADwB,KAAtB,CAAN;AAGH,GAnByC,CAqB1C;;;AACA,MAAI,MAAM,CAAC,UAAX,EAAuB;AACnB,IAAA,MAAM,CACD,OADL,CACa,MAAM,CAAC,UADpB,EAEK,OAFL,CAEa,gBAAiB;AAAA,UAAf,IAAe;AAAA,UAAT,GAAS;AACtB,aAAQ,GAAD,CAAa,UAAU,CAAC,IAAD,CAAvB,CAAP;AACH,KAJL;AAKH,GA5ByC,CA6B1C;;;AACA,MAAI,MAAM,CAAC,YAAX,EAAyB;AACrB,IAAA,MAAM,CAAC,MAAP,CACI,0BADJ,EAEI,MAAM,CAAC,YAFX;AAIH,GAnCyC,CAoC1C;;;AACA,MAAI,MAAM,CAAC,KAAX,EAAkB;AACd,IAAA,MAAM,CACD,OADL,CACa,MAAM,CAAC,KADpB,EAEK,OAFL,CAEa;AAAA,UAAE,IAAF;AAAA,UAAQ,GAAR;AAAA,aAAiB,aAAM,IAAN,EAAY,IAAZ,CAAiB,GAAjB,CAAjB;AAAA,KAFb;AAGH;AACJ","file":"plugin.js","sourcesContent":["/**\n * this handles how plugins are added to rxdb\n * basically it changes the internal prototypes\n * by passing them to the plugins-functions\n */\nimport {\n    RxSchema\n} from './rx-schema';\nimport {\n    Crypter\n} from './crypter';\nimport {\n    basePrototype as RxDocumentPrototype\n} from './rx-document';\nimport {\n    RxQueryBase\n} from './rx-query';\nimport {\n    RxCollectionBase\n} from './rx-collection';\nimport {\n    RxDatabaseBase\n} from './rx-database';\nimport type {\n    RxPlugin\n} from './types';\n\nimport { overwritable } from './overwritable';\nimport {\n    HOOKS, runPluginHooks\n} from './hooks';\nimport { newRxTypeError } from './rx-error';\n\n/**\n * prototypes that can be manipulated with a plugin\n */\nconst PROTOTYPES: { [k: string]: any } = {\n    RxSchema: RxSchema.prototype,\n    Crypter: Crypter.prototype,\n    RxDocument: RxDocumentPrototype,\n    RxQuery: RxQueryBase.prototype,\n    RxCollection: RxCollectionBase.prototype,\n    RxDatabase: RxDatabaseBase.prototype\n};\n\nconst ADDED_PLUGINS: Set<RxPlugin | any> = new Set();\n\n/**\n * Add a plugin to the RxDB library.\n * Plugins are added globally and cannot be removed.\n */\nexport function addRxPlugin(plugin: RxPlugin) {\n    runPluginHooks('preAddRxPlugin', { plugin, plugins: ADDED_PLUGINS });\n\n    // do nothing if added before\n    if (ADDED_PLUGINS.has(plugin)) {\n        return;\n    } else {\n        ADDED_PLUGINS.add(plugin);\n    }\n\n    /**\n     * Since version 10.0.0 we decoupled pouchdb from\n     * the rxdb core. Therefore pouchdb plugins must be added\n     * with the addPouchPlugin() method of the pouchdb plugin.\n     */\n    if (!plugin.rxdb) {\n        throw newRxTypeError('PL1', {\n            plugin\n        });\n    }\n\n    // prototype-overwrites\n    if (plugin.prototypes) {\n        Object\n            .entries(plugin.prototypes)\n            .forEach(([name, fun]) => {\n                return (fun as any)(PROTOTYPES[name]);\n            });\n    }\n    // overwritable-overwrites\n    if (plugin.overwritable) {\n        Object.assign(\n            overwritable,\n            plugin.overwritable\n        );\n    }\n    // extend-hooks\n    if (plugin.hooks) {\n        Object\n            .entries(plugin.hooks)\n            .forEach(([name, fun]) => HOOKS[name].push(fun));\n    }\n}\n"]}